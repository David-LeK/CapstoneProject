// Generated by gencpp from file custom_msg/obj_msgs.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_MESSAGE_OBJ_MSGS_H
#define CUSTOM_MSG_MESSAGE_OBJ_MSGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msg
{
template <class ContainerAllocator>
struct obj_msgs_
{
  typedef obj_msgs_<ContainerAllocator> Type;

  obj_msgs_()
    : distance()
    , northing()
    , easting()  {
    }
  obj_msgs_(const ContainerAllocator& _alloc)
    : distance(_alloc)
    , northing(_alloc)
    , easting(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _distance_type;
  _distance_type distance;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _northing_type;
  _northing_type northing;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _easting_type;
  _easting_type easting;





  typedef boost::shared_ptr< ::custom_msg::obj_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg::obj_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct obj_msgs_

typedef ::custom_msg::obj_msgs_<std::allocator<void> > obj_msgs;

typedef boost::shared_ptr< ::custom_msg::obj_msgs > obj_msgsPtr;
typedef boost::shared_ptr< ::custom_msg::obj_msgs const> obj_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg::obj_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg::obj_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msg::obj_msgs_<ContainerAllocator1> & lhs, const ::custom_msg::obj_msgs_<ContainerAllocator2> & rhs)
{
  return lhs.distance == rhs.distance &&
    lhs.northing == rhs.northing &&
    lhs.easting == rhs.easting;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msg::obj_msgs_<ContainerAllocator1> & lhs, const ::custom_msg::obj_msgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msg::obj_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg::obj_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::obj_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::obj_msgs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::obj_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::obj_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg::obj_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a1bea06901aaaf6ec5c025d3a77a953";
  }

  static const char* value(const ::custom_msg::obj_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a1bea06901aaaf6ULL;
  static const uint64_t static_value2 = 0xec5c025d3a77a953ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg::obj_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg/obj_msgs";
  }

  static const char* value(const ::custom_msg::obj_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg::obj_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] distance\n"
"float32[] northing\n"
"float32[] easting\n"
;
  }

  static const char* value(const ::custom_msg::obj_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg::obj_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance);
      stream.next(m.northing);
      stream.next(m.easting);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct obj_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg::obj_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg::obj_msgs_<ContainerAllocator>& v)
  {
    s << indent << "distance[]" << std::endl;
    for (size_t i = 0; i < v.distance.size(); ++i)
    {
      s << indent << "  distance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.distance[i]);
    }
    s << indent << "northing[]" << std::endl;
    for (size_t i = 0; i < v.northing.size(); ++i)
    {
      s << indent << "  northing[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.northing[i]);
    }
    s << indent << "easting[]" << std::endl;
    for (size_t i = 0; i < v.easting.size(); ++i)
    {
      s << indent << "  easting[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.easting[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_MESSAGE_OBJ_MSGS_H
