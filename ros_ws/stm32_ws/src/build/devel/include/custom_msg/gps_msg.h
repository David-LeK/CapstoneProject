// Generated by gencpp from file custom_msg/gps_msg.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_MESSAGE_GPS_MSG_H
#define CUSTOM_MSG_MESSAGE_GPS_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msg
{
template <class ContainerAllocator>
struct gps_msg_
{
  typedef gps_msg_<ContainerAllocator> Type;

  gps_msg_()
    : latitude(0.0)
    , longitude(0.0)
    , speed_kmh(0.0)
    , northing(0.0)
    , easting(0.0)
    , tracking_angle(0.0)  {
    }
  gps_msg_(const ContainerAllocator& _alloc)
    : latitude(0.0)
    , longitude(0.0)
    , speed_kmh(0.0)
    , northing(0.0)
    , easting(0.0)
    , tracking_angle(0.0)  {
  (void)_alloc;
    }



   typedef float _latitude_type;
  _latitude_type latitude;

   typedef float _longitude_type;
  _longitude_type longitude;

   typedef float _speed_kmh_type;
  _speed_kmh_type speed_kmh;

   typedef float _northing_type;
  _northing_type northing;

   typedef float _easting_type;
  _easting_type easting;

   typedef float _tracking_angle_type;
  _tracking_angle_type tracking_angle;





  typedef boost::shared_ptr< ::custom_msg::gps_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg::gps_msg_<ContainerAllocator> const> ConstPtr;

}; // struct gps_msg_

typedef ::custom_msg::gps_msg_<std::allocator<void> > gps_msg;

typedef boost::shared_ptr< ::custom_msg::gps_msg > gps_msgPtr;
typedef boost::shared_ptr< ::custom_msg::gps_msg const> gps_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg::gps_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg::gps_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msg::gps_msg_<ContainerAllocator1> & lhs, const ::custom_msg::gps_msg_<ContainerAllocator2> & rhs)
{
  return lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.speed_kmh == rhs.speed_kmh &&
    lhs.northing == rhs.northing &&
    lhs.easting == rhs.easting &&
    lhs.tracking_angle == rhs.tracking_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msg::gps_msg_<ContainerAllocator1> & lhs, const ::custom_msg::gps_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msg::gps_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg::gps_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::gps_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::gps_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::gps_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::gps_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg::gps_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9a89ca61072a2258a2e6eec048f89329";
  }

  static const char* value(const ::custom_msg::gps_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9a89ca61072a2258ULL;
  static const uint64_t static_value2 = 0xa2e6eec048f89329ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg::gps_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg/gps_msg";
  }

  static const char* value(const ::custom_msg::gps_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg::gps_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 latitude\n"
"float32 longitude\n"
"float32 speed_kmh\n"
"float32 northing\n"
"float32 easting\n"
"float32 tracking_angle\n"
;
  }

  static const char* value(const ::custom_msg::gps_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg::gps_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.speed_kmh);
      stream.next(m.northing);
      stream.next(m.easting);
      stream.next(m.tracking_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gps_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg::gps_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg::gps_msg_<ContainerAllocator>& v)
  {
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "speed_kmh: ";
    Printer<float>::stream(s, indent + "  ", v.speed_kmh);
    s << indent << "northing: ";
    Printer<float>::stream(s, indent + "  ", v.northing);
    s << indent << "easting: ";
    Printer<float>::stream(s, indent + "  ", v.easting);
    s << indent << "tracking_angle: ";
    Printer<float>::stream(s, indent + "  ", v.tracking_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_MESSAGE_GPS_MSG_H
