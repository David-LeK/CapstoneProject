// Generated by gencpp from file custom_msg/encoder_output_msg.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_MESSAGE_ENCODER_OUTPUT_MSG_H
#define CUSTOM_MSG_MESSAGE_ENCODER_OUTPUT_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msg
{
template <class ContainerAllocator>
struct encoder_output_msg_
{
  typedef encoder_output_msg_<ContainerAllocator> Type;

  encoder_output_msg_()
    : output_rpm_m1(0.0)
    , output_controller_m1(0.0)
    , output_rpm_m2(0.0)
    , output_controller_m2(0.0)  {
    }
  encoder_output_msg_(const ContainerAllocator& _alloc)
    : output_rpm_m1(0.0)
    , output_controller_m1(0.0)
    , output_rpm_m2(0.0)
    , output_controller_m2(0.0)  {
  (void)_alloc;
    }



   typedef float _output_rpm_m1_type;
  _output_rpm_m1_type output_rpm_m1;

   typedef float _output_controller_m1_type;
  _output_controller_m1_type output_controller_m1;

   typedef float _output_rpm_m2_type;
  _output_rpm_m2_type output_rpm_m2;

   typedef float _output_controller_m2_type;
  _output_controller_m2_type output_controller_m2;





  typedef boost::shared_ptr< ::custom_msg::encoder_output_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg::encoder_output_msg_<ContainerAllocator> const> ConstPtr;

}; // struct encoder_output_msg_

typedef ::custom_msg::encoder_output_msg_<std::allocator<void> > encoder_output_msg;

typedef boost::shared_ptr< ::custom_msg::encoder_output_msg > encoder_output_msgPtr;
typedef boost::shared_ptr< ::custom_msg::encoder_output_msg const> encoder_output_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg::encoder_output_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg::encoder_output_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msg::encoder_output_msg_<ContainerAllocator1> & lhs, const ::custom_msg::encoder_output_msg_<ContainerAllocator2> & rhs)
{
  return lhs.output_rpm_m1 == rhs.output_rpm_m1 &&
    lhs.output_controller_m1 == rhs.output_controller_m1 &&
    lhs.output_rpm_m2 == rhs.output_rpm_m2 &&
    lhs.output_controller_m2 == rhs.output_controller_m2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msg::encoder_output_msg_<ContainerAllocator1> & lhs, const ::custom_msg::encoder_output_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::encoder_output_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::encoder_output_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg::encoder_output_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg::encoder_output_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::encoder_output_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::encoder_output_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg::encoder_output_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1245866a2cb06bf0708dba963cb3a6ee";
  }

  static const char* value(const ::custom_msg::encoder_output_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1245866a2cb06bf0ULL;
  static const uint64_t static_value2 = 0x708dba963cb3a6eeULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg::encoder_output_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg/encoder_output_msg";
  }

  static const char* value(const ::custom_msg::encoder_output_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg::encoder_output_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 output_rpm_m1\n"
"float32 output_controller_m1\n"
"float32 output_rpm_m2\n"
"float32 output_controller_m2\n"
;
  }

  static const char* value(const ::custom_msg::encoder_output_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg::encoder_output_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.output_rpm_m1);
      stream.next(m.output_controller_m1);
      stream.next(m.output_rpm_m2);
      stream.next(m.output_controller_m2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct encoder_output_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg::encoder_output_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg::encoder_output_msg_<ContainerAllocator>& v)
  {
    s << indent << "output_rpm_m1: ";
    Printer<float>::stream(s, indent + "  ", v.output_rpm_m1);
    s << indent << "output_controller_m1: ";
    Printer<float>::stream(s, indent + "  ", v.output_controller_m1);
    s << indent << "output_rpm_m2: ";
    Printer<float>::stream(s, indent + "  ", v.output_rpm_m2);
    s << indent << "output_controller_m2: ";
    Printer<float>::stream(s, indent + "  ", v.output_controller_m2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_MESSAGE_ENCODER_OUTPUT_MSG_H
