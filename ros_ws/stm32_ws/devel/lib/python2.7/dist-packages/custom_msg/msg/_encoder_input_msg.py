# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from custom_msg/encoder_input_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class encoder_input_msg(genpy.Message):
  _md5sum = "db9ba92c90b9ba885220db60c812fbcf"
  _type = "custom_msg/encoder_input_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 input_setpoint_m1
float32 input_Kp_m1
float32 input_Ki_m1
float32 input_Kd_m1
float32 input_setpoint_m2
float32 input_Kp_m2
float32 input_Ki_m2
float32 input_Kd_m2
"""
  __slots__ = ['input_setpoint_m1','input_Kp_m1','input_Ki_m1','input_Kd_m1','input_setpoint_m2','input_Kp_m2','input_Ki_m2','input_Kd_m2']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       input_setpoint_m1,input_Kp_m1,input_Ki_m1,input_Kd_m1,input_setpoint_m2,input_Kp_m2,input_Ki_m2,input_Kd_m2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(encoder_input_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.input_setpoint_m1 is None:
        self.input_setpoint_m1 = 0.
      if self.input_Kp_m1 is None:
        self.input_Kp_m1 = 0.
      if self.input_Ki_m1 is None:
        self.input_Ki_m1 = 0.
      if self.input_Kd_m1 is None:
        self.input_Kd_m1 = 0.
      if self.input_setpoint_m2 is None:
        self.input_setpoint_m2 = 0.
      if self.input_Kp_m2 is None:
        self.input_Kp_m2 = 0.
      if self.input_Ki_m2 is None:
        self.input_Ki_m2 = 0.
      if self.input_Kd_m2 is None:
        self.input_Kd_m2 = 0.
    else:
      self.input_setpoint_m1 = 0.
      self.input_Kp_m1 = 0.
      self.input_Ki_m1 = 0.
      self.input_Kd_m1 = 0.
      self.input_setpoint_m2 = 0.
      self.input_Kp_m2 = 0.
      self.input_Ki_m2 = 0.
      self.input_Kd_m2 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8f().pack(_x.input_setpoint_m1, _x.input_Kp_m1, _x.input_Ki_m1, _x.input_Kd_m1, _x.input_setpoint_m2, _x.input_Kp_m2, _x.input_Ki_m2, _x.input_Kd_m2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.input_setpoint_m1, _x.input_Kp_m1, _x.input_Ki_m1, _x.input_Kd_m1, _x.input_setpoint_m2, _x.input_Kp_m2, _x.input_Ki_m2, _x.input_Kd_m2,) = _get_struct_8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8f().pack(_x.input_setpoint_m1, _x.input_Kp_m1, _x.input_Ki_m1, _x.input_Kd_m1, _x.input_setpoint_m2, _x.input_Kp_m2, _x.input_Ki_m2, _x.input_Kd_m2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.input_setpoint_m1, _x.input_Kp_m1, _x.input_Ki_m1, _x.input_Kd_m1, _x.input_setpoint_m2, _x.input_Kp_m2, _x.input_Ki_m2, _x.input_Kd_m2,) = _get_struct_8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
