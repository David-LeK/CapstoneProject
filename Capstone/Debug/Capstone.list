
Capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d924  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000085c  0800dab8  0800dab8  0001dab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e314  0800e314  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e314  0800e314  0001e314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e31c  0800e31c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800e31c  0800e31c  0001e31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e328  0800e328  0001e328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800e32c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 10 .bss          0000196c  200001f8  200001f8  000201f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001b64  20001b64  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b937  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ecb  00000000  00000000  0003bb5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  0003ea30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc8  00000000  00000000  0003fac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000259a6  00000000  00000000  00040a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001334d  00000000  00000000  00066436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4ca6  00000000  00000000  00079783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014e429  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d30  00000000  00000000  0014e47c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800da9c 	.word	0x0800da9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800da9c 	.word	0x0800da9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>:

// Create Serial Buffer with UART2:
BufferedSerial buff_serial(huart2);

// Constructor:
BufferedSerial::BufferedSerial(UART_HandleTypeDef &huart_)
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  : huart(huart_) {}
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800100e:	2200      	movs	r2, #0
 8001010:	809a      	strh	r2, [r3, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001018:	2200      	movs	r2, #0
 800101a:	80da      	strh	r2, [r3, #6]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001022:	2200      	movs	r2, #0
 8001024:	811a      	strh	r2, [r3, #8]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800102c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001030:	815a      	strh	r2, [r3, #10]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <_ZN14BufferedSerial4initEv>:

// Init:
void BufferedSerial::init(void) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  reset_rx_buffer();
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f947 	bl	80012dc <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <_ZN14BufferedSerial4readEv>:

// Read new char in RX buffer:
int BufferedSerial::read(void) {
 8001056:	b480      	push	{r7}
 8001058:	b085      	sub	sp, #20
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  // Get DMA head:
  uint16_t dma_head = (RX_BUF_SIZE - huart.hdmarx->Instance->NDTR) & rx_buf_mask;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	b29b      	uxth	r3, r3
 800106a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800106e:	b29b      	uxth	r3, r3
 8001070:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001074:	81fb      	strh	r3, [r7, #14]

  // Quit if no new character:
  if (dma_head == rx_tail) return -1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800107c:	889b      	ldrh	r3, [r3, #4]
 800107e:	89fa      	ldrh	r2, [r7, #14]
 8001080:	429a      	cmp	r2, r3
 8001082:	d102      	bne.n	800108a <_ZN14BufferedSerial4readEv+0x34>
 8001084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001088:	e01a      	b.n	80010c0 <_ZN14BufferedSerial4readEv+0x6a>

  // Get next char in buffer:
  int c = (int) rx_buf[rx_tail++];
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001090:	889b      	ldrh	r3, [r3, #4]
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	b291      	uxth	r1, r2
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800109c:	8091      	strh	r1, [r2, #4]
 800109e:	461a      	mov	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	791b      	ldrb	r3, [r3, #4]
 80010a6:	60bb      	str	r3, [r7, #8]

  // Wrap around if rx_tail > RX_BUF_SIZE:
  rx_tail &= rx_buf_mask;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010ae:	889b      	ldrh	r3, [r3, #4]
 80010b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010bc:	809a      	strh	r2, [r3, #4]

  return c;
 80010be:	68bb      	ldr	r3, [r7, #8]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_ZN14BufferedSerial5writeEPKhi>:

// Prepare data and send it:
void BufferedSerial::write(const uint8_t *data, const int length) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  // If data can fit at the end of the buffer:
  if (tx_head + length < TX_BUF_SIZE) {
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010de:	88db      	ldrh	r3, [r3, #6]
 80010e0:	461a      	mov	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010ea:	da2c      	bge.n	8001146 <_ZN14BufferedSerial5writeEPKhi+0x7a>
    memcpy(&(tx_buf[tx_head]), data, length);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010f2:	88db      	ldrh	r3, [r3, #6]
 80010f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	3304      	adds	r3, #4
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	4618      	mov	r0, r3
 8001104:	f008 f852 	bl	80091ac <memcpy>
    tx_head += length; // ) & tx_buf_mask
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800110e:	88da      	ldrh	r2, [r3, #6]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	b29b      	uxth	r3, r3
 8001114:	4413      	add	r3, r2
 8001116:	b29a      	uxth	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800111e:	80da      	strh	r2, [r3, #6]
    if (tx_head > tx_end) tx_end = tx_head; // Avoids "wrong checksum for topic id and msg" in rosserial logs
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001126:	88da      	ldrh	r2, [r3, #6]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800112e:	895b      	ldrh	r3, [r3, #10]
 8001130:	429a      	cmp	r2, r3
 8001132:	d928      	bls.n	8001186 <_ZN14BufferedSerial5writeEPKhi+0xba>
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800113a:	88da      	ldrh	r2, [r3, #6]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001142:	815a      	strh	r2, [r3, #10]
 8001144:	e01f      	b.n	8001186 <_ZN14BufferedSerial5writeEPKhi+0xba>
  }
  // Else data is copied at the beginning of TX buffer:
  else {
    memcpy(tx_buf, data, length);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f603 0304 	addw	r3, r3, #2052	; 0x804
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	68b9      	ldr	r1, [r7, #8]
 8001150:	4618      	mov	r0, r3
 8001152:	f008 f82b 	bl	80091ac <memcpy>
    if (tx_head > tx_tail) tx_end = tx_head; // Avoids tx_end > tx_tail
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800115c:	88da      	ldrh	r2, [r3, #6]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001164:	891b      	ldrh	r3, [r3, #8]
 8001166:	429a      	cmp	r2, r3
 8001168:	d907      	bls.n	800117a <_ZN14BufferedSerial5writeEPKhi+0xae>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001170:	88da      	ldrh	r2, [r3, #6]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001178:	815a      	strh	r2, [r3, #10]
    tx_head = length;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	b29a      	uxth	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001184:	80da      	strh	r2, [r3, #6]
  }

  // Send data:
  flush_tx_buffer();
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f000 f804 	bl	8001194 <_ZN14BufferedSerial15flush_tx_bufferEv>
}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <_ZN14BufferedSerial15flush_tx_bufferEv>:

// Send data:
void BufferedSerial::flush_tx_buffer(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  static bool mutex = false;

  // Reset indexes if they are at the same position:
  if (tx_head != 0 && tx_head == tx_tail) {   // Can be removed (just for better memory management)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011a2:	88db      	ldrh	r3, [r3, #6]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d013      	beq.n	80011d0 <_ZN14BufferedSerial15flush_tx_bufferEv+0x3c>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ae:	88da      	ldrh	r2, [r3, #6]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011b6:	891b      	ldrh	r3, [r3, #8]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d109      	bne.n	80011d0 <_ZN14BufferedSerial15flush_tx_bufferEv+0x3c>
     tx_head = 0;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011c2:	2200      	movs	r2, #0
 80011c4:	80da      	strh	r2, [r3, #6]
     tx_tail = 0;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011cc:	2200      	movs	r2, #0
 80011ce:	811a      	strh	r2, [r3, #8]
   }

  // Quit if UART not ready to transmit data or no data to send:
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b20      	cmp	r3, #32
 80011dc:	d10d      	bne.n	80011fa <_ZN14BufferedSerial15flush_tx_bufferEv+0x66>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011e4:	88da      	ldrh	r2, [r3, #6]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ec:	891b      	ldrh	r3, [r3, #8]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d003      	beq.n	80011fa <_ZN14BufferedSerial15flush_tx_bufferEv+0x66>
 80011f2:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x144>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <_ZN14BufferedSerial15flush_tx_bufferEv+0x6a>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <_ZN14BufferedSerial15flush_tx_bufferEv+0x6c>
 80011fe:	2300      	movs	r3, #0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d165      	bne.n	80012d0 <_ZN14BufferedSerial15flush_tx_bufferEv+0x13c>
  mutex = true;
 8001204:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x144>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]

  // Reset flush index if already sent complete TX buffer:
  if (tx_tail == tx_end) tx_tail = 0;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001210:	891a      	ldrh	r2, [r3, #8]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001218:	895b      	ldrh	r3, [r3, #10]
 800121a:	429a      	cmp	r2, r3
 800121c:	d104      	bne.n	8001228 <_ZN14BufferedSerial15flush_tx_bufferEv+0x94>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001224:	2200      	movs	r2, #0
 8001226:	811a      	strh	r2, [r3, #8]

  // Send data behind head:
  if (tx_tail < tx_head) {
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800122e:	891a      	ldrh	r2, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001236:	88db      	ldrh	r3, [r3, #6]
 8001238:	429a      	cmp	r2, r3
 800123a:	d221      	bcs.n	8001280 <_ZN14BufferedSerial15flush_tx_bufferEv+0xec>
    uint16_t length = tx_head - tx_tail;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001242:	88da      	ldrh	r2, [r3, #6]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800124a:	891b      	ldrh	r3, [r3, #8]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800125a:	891b      	ldrh	r3, [r3, #8]
 800125c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	4413      	add	r3, r2
 8001264:	3304      	adds	r3, #4
 8001266:	89ba      	ldrh	r2, [r7, #12]
 8001268:	4619      	mov	r1, r3
 800126a:	f006 fdcb 	bl	8007e04 <HAL_UART_Transmit_DMA>
    tx_tail = tx_head;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001274:	88da      	ldrh	r2, [r3, #6]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800127c:	811a      	strh	r2, [r3, #8]
 800127e:	e023      	b.n	80012c8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x134>
  }
  // Else end the buffer before resetting tail index:
  else {
    uint16_t length = tx_end - tx_tail;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001286:	895a      	ldrh	r2, [r3, #10]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800128e:	891b      	ldrh	r3, [r3, #8]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800129e:	891b      	ldrh	r3, [r3, #8]
 80012a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	4413      	add	r3, r2
 80012a8:	3304      	adds	r3, #4
 80012aa:	89fa      	ldrh	r2, [r7, #14]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f006 fda9 	bl	8007e04 <HAL_UART_Transmit_DMA>

    // Reset indexes:
    tx_end = TX_BUF_SIZE;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012bc:	815a      	strh	r2, [r3, #10]
    tx_tail = 0;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c4:	2200      	movs	r2, #0
 80012c6:	811a      	strh	r2, [r3, #8]
  }

  mutex = false;
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x144>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	e000      	b.n	80012d2 <_ZN14BufferedSerial15flush_tx_bufferEv+0x13e>
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 80012d0:	bf00      	nop
}
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20001220 	.word	0x20001220

080012dc <_ZN14BufferedSerial15reset_rx_bufferEv>:


// Reset DMA to the beginning of the RX buffer:
inline void BufferedSerial::reset_rx_buffer(void) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart, rx_buf, RX_BUF_SIZE);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6818      	ldr	r0, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3304      	adds	r3, #4
 80012ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012f0:	4619      	mov	r1, r3
 80012f2:	f006 fe05 	bl	8007f00 <HAL_UART_Receive_DMA>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <_ZN14BufferedSerial10get_handleEv>:

// Get UART Handle:
UART_HandleTypeDef* const BufferedSerial::get_handle(void) { return &huart; }
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <HAL_UART_TxCpltCallback>:


// DMA callbacks:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  // Comparing pointers: (remove equality if only one UART is used)
  if (huart->Instance == buff_serial.get_handle()->Instance) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681c      	ldr	r4, [r3, #0]
 8001324:	4809      	ldr	r0, [pc, #36]	; (800134c <HAL_UART_TxCpltCallback+0x34>)
 8001326:	f7ff ffea 	bl	80012fe <_ZN14BufferedSerial10get_handleEv>
 800132a:	4603      	mov	r3, r0
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	429c      	cmp	r4, r3
 8001330:	bf0c      	ite	eq
 8001332:	2301      	moveq	r3, #1
 8001334:	2300      	movne	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <HAL_UART_TxCpltCallback+0x2a>
    buff_serial.flush_tx_buffer();
 800133c:	4803      	ldr	r0, [pc, #12]	; (800134c <HAL_UART_TxCpltCallback+0x34>)
 800133e:	f7ff ff29 	bl	8001194 <_ZN14BufferedSerial15flush_tx_bufferEv>
  }
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bd90      	pop	{r4, r7, pc}
 800134a:	bf00      	nop
 800134c:	20000214 	.word	0x20000214

08001350 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  buff_serial.reset_rx_buffer();  // Can be commented if DMA mode for RX is Circular
 8001358:	4803      	ldr	r0, [pc, #12]	; (8001368 <HAL_UART_RxCpltCallback+0x18>)
 800135a:	f7ff ffbf 	bl	80012dc <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000214 	.word	0x20000214

0800136c <_Z41__static_initialization_and_destruction_0ii>:
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d108      	bne.n	800138e <_Z41__static_initialization_and_destruction_0ii+0x22>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001382:	4293      	cmp	r3, r2
 8001384:	d103      	bne.n	800138e <_Z41__static_initialization_and_destruction_0ii+0x22>
BufferedSerial buff_serial(huart2);
 8001386:	4904      	ldr	r1, [pc, #16]	; (8001398 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800138a:	f7ff fe35 	bl	8000ff8 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2000138c 	.word	0x2000138c
 800139c:	20000214 	.word	0x20000214

080013a0 <_GLOBAL__sub_I_buff_serial>:
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013a8:	2001      	movs	r0, #1
 80013aa:	f7ff ffdf 	bl	800136c <_Z41__static_initialization_and_destruction_0ii>
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b4:	f003 ffba 	bl	800532c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b8:	f000 f896 	bl	80014e8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013bc:	f000 fb1a 	bl	80019f4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80013c0:	f000 faf0 	bl	80019a4 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 80013c4:	f000 fac0 	bl	8001948 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 80013c8:	f000 f964 	bl	8001694 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80013cc:	f000 f9da 	bl	8001784 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 80013d0:	f000 fa36 	bl	8001840 <_ZL12MX_TIM5_Initv>
  MX_TIM14_Init();
 80013d4:	f000 fa90 	bl	80018f8 <_ZL13MX_TIM14_Initv>
  MX_TIM1_Init();
 80013d8:	f000 f8fa 	bl	80015d0 <_ZL12MX_TIM1_Initv>
   // Calibrate the IMU
   //imu.calibrateGyro(1500);


  //Set up 4x mode
   htim1.Instance->SMCR &= ~TIM_SMCR_SMS; // Clear EncoderMode field
 80013dc:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <main+0x124>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	4b3c      	ldr	r3, [pc, #240]	; (80014d4 <main+0x124>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0207 	bic.w	r2, r2, #7
 80013ea:	609a      	str	r2, [r3, #8]
   htim1.Instance->SMCR |= TIM_ENCODERMODE_TI12 << TIM_SMCR_SMS_Pos; // Set EncoderMode field to TIM_ENCODERMODE_TI12
 80013ec:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <main+0x124>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	4b38      	ldr	r3, [pc, #224]	; (80014d4 <main+0x124>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0203 	orr.w	r2, r2, #3
 80013fa:	609a      	str	r2, [r3, #8]
   htim1.Instance->CCER &= ~TIM_CCER_CC1P; // Clear IC1Polarity field
 80013fc:	4b35      	ldr	r3, [pc, #212]	; (80014d4 <main+0x124>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6a1a      	ldr	r2, [r3, #32]
 8001402:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <main+0x124>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0202 	bic.w	r2, r2, #2
 800140a:	621a      	str	r2, [r3, #32]
   htim1.Instance->CCER |= TIM_ICPOLARITY_BOTHEDGE << TIM_CCER_CC1P_Pos; // Set IC1Polarity field to TIM_ICPOLARITY_BOTHEDGE
 800140c:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <main+0x124>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6a1a      	ldr	r2, [r3, #32]
 8001412:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <main+0x124>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 0214 	orr.w	r2, r2, #20
 800141a:	621a      	str	r2, [r3, #32]
   htim1.Instance->CCER &= ~TIM_CCER_CC2P; // Clear IC2Polarity field
 800141c:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <main+0x124>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6a1a      	ldr	r2, [r3, #32]
 8001422:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <main+0x124>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0220 	bic.w	r2, r2, #32
 800142a:	621a      	str	r2, [r3, #32]
   htim1.Instance->CCER |= TIM_ICPOLARITY_BOTHEDGE << TIM_CCER_CC2P_Pos; // Set IC2Polarity field to TIM_ICPOLARITY_BOTHEDGE
 800142c:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <main+0x124>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6a1a      	ldr	r2, [r3, #32]
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <main+0x124>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f442 72a0 	orr.w	r2, r2, #320	; 0x140
 800143a:	621a      	str	r2, [r3, #32]

   htim3.Instance->SMCR &= ~TIM_SMCR_SMS; // Clear EncoderMode field
 800143c:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <main+0x128>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <main+0x128>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 0207 	bic.w	r2, r2, #7
 800144a:	609a      	str	r2, [r3, #8]
   htim3.Instance->SMCR |= TIM_ENCODERMODE_TI12 << TIM_SMCR_SMS_Pos; // Set EncoderMode field to TIM_ENCODERMODE_TI12
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <main+0x128>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <main+0x128>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0203 	orr.w	r2, r2, #3
 800145a:	609a      	str	r2, [r3, #8]
   htim3.Instance->CCER &= ~TIM_CCER_CC1P; // Clear IC1Polarity field
 800145c:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <main+0x128>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6a1a      	ldr	r2, [r3, #32]
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <main+0x128>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0202 	bic.w	r2, r2, #2
 800146a:	621a      	str	r2, [r3, #32]
   htim3.Instance->CCER |= TIM_ICPOLARITY_BOTHEDGE << TIM_CCER_CC1P_Pos; // Set IC1Polarity field to TIM_ICPOLARITY_BOTHEDGE
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <main+0x128>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6a1a      	ldr	r2, [r3, #32]
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <main+0x128>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f042 0214 	orr.w	r2, r2, #20
 800147a:	621a      	str	r2, [r3, #32]
   htim3.Instance->CCER &= ~TIM_CCER_CC2P; // Clear IC2Polarity field
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <main+0x128>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6a1a      	ldr	r2, [r3, #32]
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <main+0x128>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0220 	bic.w	r2, r2, #32
 800148a:	621a      	str	r2, [r3, #32]
   htim3.Instance->CCER |= TIM_ICPOLARITY_BOTHEDGE << TIM_CCER_CC2P_Pos; // Set IC2Polarity field to TIM_ICPOLARITY_BOTHEDGE
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <main+0x128>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6a1a      	ldr	r2, [r3, #32]
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <main+0x128>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f442 72a0 	orr.w	r2, r2, #320	; 0x140
 800149a:	621a      	str	r2, [r3, #32]

	//Start timer
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800149c:	2100      	movs	r1, #0
 800149e:	480f      	ldr	r0, [pc, #60]	; (80014dc <main+0x12c>)
 80014a0:	f005 fc0c 	bl	8006cbc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80014a4:	2104      	movs	r1, #4
 80014a6:	480d      	ldr	r0, [pc, #52]	; (80014dc <main+0x12c>)
 80014a8:	f005 fc08 	bl	8006cbc <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80014ac:	2104      	movs	r1, #4
 80014ae:	4809      	ldr	r0, [pc, #36]	; (80014d4 <main+0x124>)
 80014b0:	f005 fd72 	bl	8006f98 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80014b4:	2104      	movs	r1, #4
 80014b6:	4808      	ldr	r0, [pc, #32]	; (80014d8 <main+0x128>)
 80014b8:	f005 fd6e 	bl	8006f98 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 80014bc:	4808      	ldr	r0, [pc, #32]	; (80014e0 <main+0x130>)
 80014be:	f005 fb3d 	bl	8006b3c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);
 80014c2:	4808      	ldr	r0, [pc, #32]	; (80014e4 <main+0x134>)
 80014c4:	f005 fb3a 	bl	8006b3c <HAL_TIM_Base_Start_IT>

	// Init setup for rosserial
	setup();
 80014c8:	f002 fbc2 	bl	8003c50 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 80014cc:	f002 fbe8 	bl	8003ca0 <loop>
 80014d0:	e7fc      	b.n	80014cc <main+0x11c>
 80014d2:	bf00      	nop
 80014d4:	20001224 	.word	0x20001224
 80014d8:	200012b4 	.word	0x200012b4
 80014dc:	2000126c 	.word	0x2000126c
 80014e0:	200012fc 	.word	0x200012fc
 80014e4:	20001344 	.word	0x20001344

080014e8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b094      	sub	sp, #80	; 0x50
 80014ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ee:	f107 0320 	add.w	r3, r7, #32
 80014f2:	2230      	movs	r2, #48	; 0x30
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f007 fe66 	bl	80091c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <_Z18SystemClock_Configv+0xe0>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	4a2c      	ldr	r2, [pc, #176]	; (80015c8 <_Z18SystemClock_Configv+0xe0>)
 8001516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151a:	6413      	str	r3, [r2, #64]	; 0x40
 800151c:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <_Z18SystemClock_Configv+0xe0>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001528:	2300      	movs	r3, #0
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <_Z18SystemClock_Configv+0xe4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a26      	ldr	r2, [pc, #152]	; (80015cc <_Z18SystemClock_Configv+0xe4>)
 8001532:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b24      	ldr	r3, [pc, #144]	; (80015cc <_Z18SystemClock_Configv+0xe4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001544:	2302      	movs	r3, #2
 8001546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001548:	2301      	movs	r3, #1
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800154c:	2310      	movs	r3, #16
 800154e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001550:	2302      	movs	r3, #2
 8001552:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001554:	2300      	movs	r3, #0
 8001556:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001558:	2308      	movs	r3, #8
 800155a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800155c:	2360      	movs	r3, #96	; 0x60
 800155e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001560:	2302      	movs	r3, #2
 8001562:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001564:	2304      	movs	r3, #4
 8001566:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001568:	f107 0320 	add.w	r3, r7, #32
 800156c:	4618      	mov	r0, r3
 800156e:	f004 fe3d 	bl	80061ec <HAL_RCC_OscConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf14      	ite	ne
 8001578:	2301      	movne	r3, #1
 800157a:	2300      	moveq	r3, #0
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001582:	f000 fe69 	bl	8002258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001586:	230f      	movs	r3, #15
 8001588:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158a:	2302      	movs	r3, #2
 800158c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001592:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001596:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	2103      	movs	r1, #3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f005 f899 	bl	80066dc <HAL_RCC_ClockConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf14      	ite	ne
 80015b0:	2301      	movne	r3, #1
 80015b2:	2300      	moveq	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80015ba:	f000 fe4d 	bl	8002258 <Error_Handler>
  }
}
 80015be:	bf00      	nop
 80015c0:	3750      	adds	r7, #80	; 0x50
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40007000 	.word	0x40007000

080015d0 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	; 0x30
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	2224      	movs	r2, #36	; 0x24
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f007 fdf2 	bl	80091c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015ec:	4b27      	ldr	r3, [pc, #156]	; (800168c <_ZL12MX_TIM1_Initv+0xbc>)
 80015ee:	4a28      	ldr	r2, [pc, #160]	; (8001690 <_ZL12MX_TIM1_Initv+0xc0>)
 80015f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <_ZL12MX_TIM1_Initv+0xbc>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f8:	4b24      	ldr	r3, [pc, #144]	; (800168c <_ZL12MX_TIM1_Initv+0xbc>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015fe:	4b23      	ldr	r3, [pc, #140]	; (800168c <_ZL12MX_TIM1_Initv+0xbc>)
 8001600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001604:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001606:	4b21      	ldr	r3, [pc, #132]	; (800168c <_ZL12MX_TIM1_Initv+0xbc>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800160c:	4b1f      	ldr	r3, [pc, #124]	; (800168c <_ZL12MX_TIM1_Initv+0xbc>)
 800160e:	2200      	movs	r2, #0
 8001610:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001612:	4b1e      	ldr	r3, [pc, #120]	; (800168c <_ZL12MX_TIM1_Initv+0xbc>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001618:	2301      	movs	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001620:	2301      	movs	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001630:	2301      	movs	r3, #1
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	4619      	mov	r1, r3
 8001642:	4812      	ldr	r0, [pc, #72]	; (800168c <_ZL12MX_TIM1_Initv+0xbc>)
 8001644:	f005 fc02 	bl	8006e4c <HAL_TIM_Encoder_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	bf14      	ite	ne
 800164e:	2301      	movne	r3, #1
 8001650:	2300      	moveq	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <_ZL12MX_TIM1_Initv+0x8c>
  {
    Error_Handler();
 8001658:	f000 fdfe 	bl	8002258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165c:	2300      	movs	r3, #0
 800165e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	4619      	mov	r1, r3
 8001668:	4808      	ldr	r0, [pc, #32]	; (800168c <_ZL12MX_TIM1_Initv+0xbc>)
 800166a:	f006 faed 	bl	8007c48 <HAL_TIMEx_MasterConfigSynchronization>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf14      	ite	ne
 8001674:	2301      	movne	r3, #1
 8001676:	2300      	moveq	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 800167e:	f000 fdeb 	bl	8002258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	3730      	adds	r7, #48	; 0x30
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20001224 	.word	0x20001224
 8001690:	40010000 	.word	0x40010000

08001694 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169a:	f107 0320 	add.w	r3, r7, #32
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]
 80016b2:	615a      	str	r2, [r3, #20]
 80016b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016b6:	4b32      	ldr	r3, [pc, #200]	; (8001780 <_ZL12MX_TIM2_Initv+0xec>)
 80016b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 80016be:	4b30      	ldr	r3, [pc, #192]	; (8001780 <_ZL12MX_TIM2_Initv+0xec>)
 80016c0:	220e      	movs	r2, #14
 80016c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c4:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <_ZL12MX_TIM2_Initv+0xec>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 600;
 80016ca:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <_ZL12MX_TIM2_Initv+0xec>)
 80016cc:	f44f 7216 	mov.w	r2, #600	; 0x258
 80016d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d2:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <_ZL12MX_TIM2_Initv+0xec>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d8:	4b29      	ldr	r3, [pc, #164]	; (8001780 <_ZL12MX_TIM2_Initv+0xec>)
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016de:	4828      	ldr	r0, [pc, #160]	; (8001780 <_ZL12MX_TIM2_Initv+0xec>)
 80016e0:	f005 fa9c 	bl	8006c1c <HAL_TIM_PWM_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	bf14      	ite	ne
 80016ea:	2301      	movne	r3, #1
 80016ec:	2300      	moveq	r3, #0
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 80016f4:	f000 fdb0 	bl	8002258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001700:	f107 0320 	add.w	r3, r7, #32
 8001704:	4619      	mov	r1, r3
 8001706:	481e      	ldr	r0, [pc, #120]	; (8001780 <_ZL12MX_TIM2_Initv+0xec>)
 8001708:	f006 fa9e 	bl	8007c48 <HAL_TIMEx_MasterConfigSynchronization>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	bf14      	ite	ne
 8001712:	2301      	movne	r3, #1
 8001714:	2300      	moveq	r3, #0
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 800171c:	f000 fd9c 	bl	8002258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001720:	2360      	movs	r3, #96	; 0x60
 8001722:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	2200      	movs	r2, #0
 8001734:	4619      	mov	r1, r3
 8001736:	4812      	ldr	r0, [pc, #72]	; (8001780 <_ZL12MX_TIM2_Initv+0xec>)
 8001738:	f005 fdc4 	bl	80072c4 <HAL_TIM_PWM_ConfigChannel>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	bf14      	ite	ne
 8001742:	2301      	movne	r3, #1
 8001744:	2300      	moveq	r3, #0
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 800174c:	f000 fd84 	bl	8002258 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	2204      	movs	r2, #4
 8001754:	4619      	mov	r1, r3
 8001756:	480a      	ldr	r0, [pc, #40]	; (8001780 <_ZL12MX_TIM2_Initv+0xec>)
 8001758:	f005 fdb4 	bl	80072c4 <HAL_TIM_PWM_ConfigChannel>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf14      	ite	ne
 8001762:	2301      	movne	r3, #1
 8001764:	2300      	moveq	r3, #0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 800176c:	f000 fd74 	bl	8002258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001770:	4803      	ldr	r0, [pc, #12]	; (8001780 <_ZL12MX_TIM2_Initv+0xec>)
 8001772:	f003 fb43 	bl	8004dfc <HAL_TIM_MspPostInit>

}
 8001776:	bf00      	nop
 8001778:	3728      	adds	r7, #40	; 0x28
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2000126c 	.word	0x2000126c

08001784 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	; 0x30
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	2224      	movs	r2, #36	; 0x24
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f007 fd18 	bl	80091c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017a0:	4b25      	ldr	r3, [pc, #148]	; (8001838 <_ZL12MX_TIM3_Initv+0xb4>)
 80017a2:	4a26      	ldr	r2, [pc, #152]	; (800183c <_ZL12MX_TIM3_Initv+0xb8>)
 80017a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017a6:	4b24      	ldr	r3, [pc, #144]	; (8001838 <_ZL12MX_TIM3_Initv+0xb4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <_ZL12MX_TIM3_Initv+0xb4>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <_ZL12MX_TIM3_Initv+0xb4>)
 80017b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ba:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <_ZL12MX_TIM3_Initv+0xb4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <_ZL12MX_TIM3_Initv+0xb4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80017c6:	2301      	movs	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017ce:	2301      	movs	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017de:	2301      	movs	r3, #1
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	4619      	mov	r1, r3
 80017f0:	4811      	ldr	r0, [pc, #68]	; (8001838 <_ZL12MX_TIM3_Initv+0xb4>)
 80017f2:	f005 fb2b 	bl	8006e4c <HAL_TIM_Encoder_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8001806:	f000 fd27 	bl	8002258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	4619      	mov	r1, r3
 8001816:	4808      	ldr	r0, [pc, #32]	; (8001838 <_ZL12MX_TIM3_Initv+0xb4>)
 8001818:	f006 fa16 	bl	8007c48 <HAL_TIMEx_MasterConfigSynchronization>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	bf14      	ite	ne
 8001822:	2301      	movne	r3, #1
 8001824:	2300      	moveq	r3, #0
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 800182c:	f000 fd14 	bl	8002258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	3730      	adds	r7, #48	; 0x30
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200012b4 	.word	0x200012b4
 800183c:	40000400 	.word	0x40000400

08001840 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	463b      	mov	r3, r7
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <_ZL12MX_TIM5_Initv+0xb0>)
 800185e:	4a25      	ldr	r2, [pc, #148]	; (80018f4 <_ZL12MX_TIM5_Initv+0xb4>)
 8001860:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9600-1;
 8001862:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <_ZL12MX_TIM5_Initv+0xb0>)
 8001864:	f242 527f 	movw	r2, #9599	; 0x257f
 8001868:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186a:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <_ZL12MX_TIM5_Initv+0xb0>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50;
 8001870:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <_ZL12MX_TIM5_Initv+0xb0>)
 8001872:	2232      	movs	r2, #50	; 0x32
 8001874:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001876:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <_ZL12MX_TIM5_Initv+0xb0>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187c:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <_ZL12MX_TIM5_Initv+0xb0>)
 800187e:	2200      	movs	r2, #0
 8001880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001882:	481b      	ldr	r0, [pc, #108]	; (80018f0 <_ZL12MX_TIM5_Initv+0xb0>)
 8001884:	f005 f90a 	bl	8006a9c <HAL_TIM_Base_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	bf14      	ite	ne
 800188e:	2301      	movne	r3, #1
 8001890:	2300      	moveq	r3, #0
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <_ZL12MX_TIM5_Initv+0x5c>
  {
    Error_Handler();
 8001898:	f000 fcde 	bl	8002258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80018a2:	f107 0308 	add.w	r3, r7, #8
 80018a6:	4619      	mov	r1, r3
 80018a8:	4811      	ldr	r0, [pc, #68]	; (80018f0 <_ZL12MX_TIM5_Initv+0xb0>)
 80018aa:	f005 fdcd 	bl	8007448 <HAL_TIM_ConfigClockSource>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf14      	ite	ne
 80018b4:	2301      	movne	r3, #1
 80018b6:	2300      	moveq	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <_ZL12MX_TIM5_Initv+0x82>
  {
    Error_Handler();
 80018be:	f000 fccb 	bl	8002258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018ca:	463b      	mov	r3, r7
 80018cc:	4619      	mov	r1, r3
 80018ce:	4808      	ldr	r0, [pc, #32]	; (80018f0 <_ZL12MX_TIM5_Initv+0xb0>)
 80018d0:	f006 f9ba 	bl	8007c48 <HAL_TIMEx_MasterConfigSynchronization>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	bf14      	ite	ne
 80018da:	2301      	movne	r3, #1
 80018dc:	2300      	moveq	r3, #0
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <_ZL12MX_TIM5_Initv+0xa8>
  {
    Error_Handler();
 80018e4:	f000 fcb8 	bl	8002258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200012fc 	.word	0x200012fc
 80018f4:	40000c00 	.word	0x40000c00

080018f8 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <_ZL13MX_TIM14_Initv+0x48>)
 80018fe:	4a11      	ldr	r2, [pc, #68]	; (8001944 <_ZL13MX_TIM14_Initv+0x4c>)
 8001900:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 9600-1;
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <_ZL13MX_TIM14_Initv+0x48>)
 8001904:	f242 527f 	movw	r2, #9599	; 0x257f
 8001908:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <_ZL13MX_TIM14_Initv+0x48>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50;
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <_ZL13MX_TIM14_Initv+0x48>)
 8001912:	2232      	movs	r2, #50	; 0x32
 8001914:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <_ZL13MX_TIM14_Initv+0x48>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <_ZL13MX_TIM14_Initv+0x48>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001922:	4807      	ldr	r0, [pc, #28]	; (8001940 <_ZL13MX_TIM14_Initv+0x48>)
 8001924:	f005 f8ba 	bl	8006a9c <HAL_TIM_Base_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	bf14      	ite	ne
 800192e:	2301      	movne	r3, #1
 8001930:	2300      	moveq	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 8001938:	f000 fc8e 	bl	8002258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20001344 	.word	0x20001344
 8001944:	40002000 	.word	0x40002000

08001948 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <_ZL19MX_USART2_UART_Initv+0x54>)
 800194e:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001950:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001958:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <_ZL19MX_USART2_UART_Initv+0x54>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001960:	4b0e      	ldr	r3, [pc, #56]	; (800199c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <_ZL19MX_USART2_UART_Initv+0x54>)
 800196e:	220c      	movs	r2, #12
 8001970:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <_ZL19MX_USART2_UART_Initv+0x54>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800197e:	4807      	ldr	r0, [pc, #28]	; (800199c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001980:	f006 f9f2 	bl	8007d68 <HAL_UART_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	bf14      	ite	ne
 800198a:	2301      	movne	r3, #1
 800198c:	2300      	moveq	r3, #0
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001994:	f000 fc60 	bl	8002258 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	2000138c 	.word	0x2000138c
 80019a0:	40004400 	.word	0x40004400

080019a4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <_ZL11MX_DMA_Initv+0x4c>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a0f      	ldr	r2, [pc, #60]	; (80019f0 <_ZL11MX_DMA_Initv+0x4c>)
 80019b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <_ZL11MX_DMA_Initv+0x4c>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2100      	movs	r1, #0
 80019ca:	2010      	movs	r0, #16
 80019cc:	f003 fe1f 	bl	800560e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80019d0:	2010      	movs	r0, #16
 80019d2:	f003 fe38 	bl	8005646 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	2011      	movs	r0, #17
 80019dc:	f003 fe17 	bl	800560e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80019e0:	2011      	movs	r0, #17
 80019e2:	f003 fe30 	bl	8005646 <HAL_NVIC_EnableIRQ>

}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800

080019f4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
 8001a08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a37      	ldr	r2, [pc, #220]	; (8001af0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b35      	ldr	r3, [pc, #212]	; (8001af0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b31      	ldr	r3, [pc, #196]	; (8001af0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a30      	ldr	r2, [pc, #192]	; (8001af0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b2e      	ldr	r3, [pc, #184]	; (8001af0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a29      	ldr	r2, [pc, #164]	; (8001af0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a4c:	f043 0310 	orr.w	r3, r3, #16
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a22      	ldr	r2, [pc, #136]	; (8001af0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a68:	f043 0308 	orr.w	r3, r3, #8
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a1b      	ldr	r2, [pc, #108]	; (8001af0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2101      	movs	r1, #1
 8001a9a:	4816      	ldr	r0, [pc, #88]	; (8001af4 <_ZL12MX_GPIO_Initv+0x100>)
 8001a9c:	f004 fb8c 	bl	80061b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aa6:	4814      	ldr	r0, [pc, #80]	; (8001af8 <_ZL12MX_GPIO_Initv+0x104>)
 8001aa8:	f004 fb86 	bl	80061b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aac:	2301      	movs	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	480c      	ldr	r0, [pc, #48]	; (8001af4 <_ZL12MX_GPIO_Initv+0x100>)
 8001ac4:	f004 f9dc 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4805      	ldr	r0, [pc, #20]	; (8001af8 <_ZL12MX_GPIO_Initv+0x104>)
 8001ae2:	f004 f9cd 	bl	8005e80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ae6:	bf00      	nop
 8001ae8:	3728      	adds	r7, #40	; 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020800 	.word	0x40020800
 8001af8:	40020400 	.word	0x40020400
 8001afc:	00000000 	.word	0x00000000

08001b00 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b00:	b5b0      	push	{r4, r5, r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  // Callback, timer has rolled over
  if (htim == &htim5) //100Hz
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a6f      	ldr	r2, [pc, #444]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	f040 822d 	bne.w	8001f6c <HAL_TIM_PeriodElapsedCallback+0x46c>
  {

	m1.v = rpm1;
 8001b12:	4b6e      	ldr	r3, [pc, #440]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a6e      	ldr	r2, [pc, #440]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001b18:	61d3      	str	r3, [r2, #28]
	m1.e = Setpoint_value_m1 - m1.v;
 8001b1a:	4b6e      	ldr	r3, [pc, #440]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001b1c:	ed93 7a00 	vldr	s14, [r3]
 8001b20:	4b6b      	ldr	r3, [pc, #428]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001b22:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b2a:	4b69      	ldr	r3, [pc, #420]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001b2c:	edc3 7a01 	vstr	s15, [r3, #4]

	m1.P_control = Kp_m1 * (m1.e - m1.e_prev);
 8001b30:	4b67      	ldr	r3, [pc, #412]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001b32:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b36:	4b66      	ldr	r3, [pc, #408]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001b38:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b40:	4b65      	ldr	r3, [pc, #404]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b4a:	4b61      	ldr	r3, [pc, #388]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001b4c:	edc3 7a04 	vstr	s15, [r3, #16]
	m1.I_control = 0.5 * Ki_m1 * 0.01 * (m1.e + m1.e_prev);
 8001b50:	4b62      	ldr	r3, [pc, #392]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fcf7 	bl	8000548 <__aeabi_f2d>
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	4b60      	ldr	r3, [pc, #384]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001b60:	f7fe fd4a 	bl	80005f8 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	a354      	add	r3, pc, #336	; (adr r3, 8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b72:	f7fe fd41 	bl	80005f8 <__aeabi_dmul>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4614      	mov	r4, r2
 8001b7c:	461d      	mov	r5, r3
 8001b7e:	4b54      	ldr	r3, [pc, #336]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001b80:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b84:	4b52      	ldr	r3, [pc, #328]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001b86:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8e:	ee17 0a90 	vmov	r0, s15
 8001b92:	f7fe fcd9 	bl	8000548 <__aeabi_f2d>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	4629      	mov	r1, r5
 8001b9e:	f7fe fd2b 	bl	80005f8 <__aeabi_dmul>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f7ff f81d 	bl	8000be8 <__aeabi_d2f>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a47      	ldr	r2, [pc, #284]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001bb2:	6153      	str	r3, [r2, #20]
	m1.D_control = Kd_m1 * 100 * (m1.e - 2 * m1.e_prev + m1.e_prev_prev);
 8001bb4:	4b4b      	ldr	r3, [pc, #300]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001ce8 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8001bbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bc2:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001bc4:	edd3 6a01 	vldr	s13, [r3, #4]
 8001bc8:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001bca:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bd2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001bd6:	4b3e      	ldr	r3, [pc, #248]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001bd8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be4:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001be6:	edc3 7a06 	vstr	s15, [r3, #24]
	m1.u = m1.u_prev + m1.P_control + m1.I_control + m1.D_control;
 8001bea:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001bec:	ed93 7a00 	vldr	s14, [r3]
 8001bf0:	4b37      	ldr	r3, [pc, #220]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001bf2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bfa:	4b35      	ldr	r3, [pc, #212]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001bfc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c04:	4b32      	ldr	r3, [pc, #200]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001c06:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0e:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001c10:	edc3 7a08 	vstr	s15, [r3, #32]

	duty_m1 = (int) (m1.u*600/150);
 8001c14:	4b2e      	ldr	r3, [pc, #184]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001c16:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c1a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001cec <HAL_TIM_PeriodElapsedCallback+0x1ec>
 8001c1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c22:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001cf0 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 8001c26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c2e:	ee17 3a90 	vmov	r3, s15
 8001c32:	b21a      	sxth	r2, r3
 8001c34:	4b2f      	ldr	r3, [pc, #188]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001c36:	801a      	strh	r2, [r3, #0]

	if (m1.u < 0) {
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001c3a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c46:	d50e      	bpl.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x166>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	482a      	ldr	r0, [pc, #168]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c4e:	f004 fab3 	bl	80061b8 <HAL_GPIO_WritePin>
	duty_m1 = -duty_m1;
 8001c52:	4b28      	ldr	r3, [pc, #160]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	425b      	negs	r3, r3
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	b21a      	sxth	r2, r3
 8001c60:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001c62:	801a      	strh	r2, [r3, #0]
 8001c64:	e004      	b.n	8001c70 <HAL_TIM_PeriodElapsedCallback+0x170>
	} else{
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2101      	movs	r1, #1
 8001c6a:	4823      	ldr	r0, [pc, #140]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c6c:	f004 faa4 	bl	80061b8 <HAL_GPIO_WritePin>
	}

	if (duty_m1 > 600)
 8001c70:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001c7a:	bfcc      	ite	gt
 8001c7c:	2301      	movgt	r3, #1
 8001c7e:	2300      	movle	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_TIM_PeriodElapsedCallback+0x18e>
	{
		duty_m1 = 600;
 8001c86:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001c88:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001c8c:	801a      	strh	r2, [r3, #0]
	}

	if(stop != 2)
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d036      	beq.n	8001d04 <HAL_TIM_PeriodElapsedCallback+0x204>
	{
		htim2.Instance->CCR1 = duty_m1;
 8001c96:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	b21a      	sxth	r2, r3
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	635a      	str	r2, [r3, #52]	; 0x34
		m1.e_prev_prev = m1.e_prev;
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001ca8:	60d3      	str	r3, [r2, #12]
		m1.e_prev = m1.e;
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001cb0:	6093      	str	r3, [r2, #8]
		m1.u_prev = m1.u;
 8001cb2:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e03f      	b.n	8001d3c <HAL_TIM_PeriodElapsedCallback+0x23c>
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	47ae147b 	.word	0x47ae147b
 8001cc4:	3f847ae1 	.word	0x3f847ae1
 8001cc8:	200012fc 	.word	0x200012fc
 8001ccc:	2000152c 	.word	0x2000152c
 8001cd0:	200014b4 	.word	0x200014b4
 8001cd4:	20001490 	.word	0x20001490
 8001cd8:	20001498 	.word	0x20001498
 8001cdc:	200014a0 	.word	0x200014a0
 8001ce0:	3fe00000 	.word	0x3fe00000
 8001ce4:	200014a8 	.word	0x200014a8
 8001ce8:	42c80000 	.word	0x42c80000
 8001cec:	44160000 	.word	0x44160000
 8001cf0:	43160000 	.word	0x43160000
 8001cf4:	200014b0 	.word	0x200014b0
 8001cf8:	40020800 	.word	0x40020800
 8001cfc:	20001540 	.word	0x20001540
 8001d00:	2000126c 	.word	0x2000126c
	}
	else if (stop == 2)
 8001d04:	4b7c      	ldr	r3, [pc, #496]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d117      	bne.n	8001d3c <HAL_TIM_PeriodElapsedCallback+0x23c>
	{
		htim2.Instance->CCR1 = 0;
 8001d0c:	4b7b      	ldr	r3, [pc, #492]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2200      	movs	r2, #0
 8001d12:	635a      	str	r2, [r3, #52]	; 0x34
		m1.e = 0;
 8001d14:	4b7a      	ldr	r3, [pc, #488]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	605a      	str	r2, [r3, #4]
		m1.u = 0;
 8001d1c:	4b78      	ldr	r3, [pc, #480]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	621a      	str	r2, [r3, #32]
		m1.e_prev_prev = 0;
 8001d24:	4b76      	ldr	r3, [pc, #472]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	60da      	str	r2, [r3, #12]
		m1.e_prev = 0;
 8001d2c:	4b74      	ldr	r3, [pc, #464]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
		m1.u_prev = 0;
 8001d34:	4b72      	ldr	r3, [pc, #456]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
	}

	//Wheel 2
	m2.v = rpm2;
 8001d3c:	4b71      	ldr	r3, [pc, #452]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x404>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a71      	ldr	r2, [pc, #452]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001d42:	61d3      	str	r3, [r2, #28]
	m2.e = Setpoint_value_m2 - m2.v;
 8001d44:	4b71      	ldr	r3, [pc, #452]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8001d46:	ed93 7a00 	vldr	s14, [r3]
 8001d4a:	4b6f      	ldr	r3, [pc, #444]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001d4c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d54:	4b6c      	ldr	r3, [pc, #432]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001d56:	edc3 7a01 	vstr	s15, [r3, #4]
	m2.P_control = Kp_m2 * (m2.e - m2.e_prev);
 8001d5a:	4b6b      	ldr	r3, [pc, #428]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001d5c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d60:	4b69      	ldr	r3, [pc, #420]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001d62:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d6a:	4b69      	ldr	r3, [pc, #420]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d74:	4b64      	ldr	r3, [pc, #400]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001d76:	edc3 7a04 	vstr	s15, [r3, #16]
	m2.I_control = 0.5 * Ki_m2 * 0.01 * (m2.e + m2.e_prev);
 8001d7a:	4b66      	ldr	r3, [pc, #408]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fbe2 	bl	8000548 <__aeabi_f2d>
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	4b63      	ldr	r3, [pc, #396]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8001d8a:	f7fe fc35 	bl	80005f8 <__aeabi_dmul>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	a356      	add	r3, pc, #344	; (adr r3, 8001ef0 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	f7fe fc2c 	bl	80005f8 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4614      	mov	r4, r2
 8001da6:	461d      	mov	r5, r3
 8001da8:	4b57      	ldr	r3, [pc, #348]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001daa:	ed93 7a01 	vldr	s14, [r3, #4]
 8001dae:	4b56      	ldr	r3, [pc, #344]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001db0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db8:	ee17 0a90 	vmov	r0, s15
 8001dbc:	f7fe fbc4 	bl	8000548 <__aeabi_f2d>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	4629      	mov	r1, r5
 8001dc8:	f7fe fc16 	bl	80005f8 <__aeabi_dmul>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f7fe ff08 	bl	8000be8 <__aeabi_d2f>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4a4b      	ldr	r2, [pc, #300]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001ddc:	6153      	str	r3, [r2, #20]
	m2.D_control = Kd_m2 * 100 * (m2.e - 2 * m2.e_prev + m2.e_prev_prev);
 8001dde:	4b4f      	ldr	r3, [pc, #316]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001f20 <HAL_TIM_PeriodElapsedCallback+0x420>
 8001de8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dec:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001dee:	edd3 6a01 	vldr	s13, [r3, #4]
 8001df2:	4b45      	ldr	r3, [pc, #276]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001df4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001df8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001dfc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e00:	4b41      	ldr	r3, [pc, #260]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001e02:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0e:	4b3e      	ldr	r3, [pc, #248]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001e10:	edc3 7a06 	vstr	s15, [r3, #24]
	m2.u = m2.u_prev + m2.P_control + m2.I_control + m2.D_control;
 8001e14:	4b3c      	ldr	r3, [pc, #240]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001e16:	ed93 7a00 	vldr	s14, [r3]
 8001e1a:	4b3b      	ldr	r3, [pc, #236]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001e1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e24:	4b38      	ldr	r3, [pc, #224]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001e26:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e2e:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001e30:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e38:	4b33      	ldr	r3, [pc, #204]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001e3a:	edc3 7a08 	vstr	s15, [r3, #32]

	duty_m2 = (int) (m2.u*600/150);
 8001e3e:	4b32      	ldr	r3, [pc, #200]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001e40:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e44:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001f24 <HAL_TIM_PeriodElapsedCallback+0x424>
 8001e48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e4c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001f28 <HAL_TIM_PeriodElapsedCallback+0x428>
 8001e50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e58:	ee17 3a90 	vmov	r3, s15
 8001e5c:	b21a      	sxth	r2, r3
 8001e5e:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8001e60:	801a      	strh	r2, [r3, #0]
	if (m2.u < 0) {
 8001e62:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001e64:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e70:	d50f      	bpl.n	8001e92 <HAL_TIM_PeriodElapsedCallback+0x392>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001e72:	2201      	movs	r2, #1
 8001e74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e78:	482d      	ldr	r0, [pc, #180]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8001e7a:	f004 f99d 	bl	80061b8 <HAL_GPIO_WritePin>
	duty_m2 = -duty_m2;
 8001e7e:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	b21b      	sxth	r3, r3
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	425b      	negs	r3, r3
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	b21a      	sxth	r2, r3
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8001e8e:	801a      	strh	r2, [r3, #0]
 8001e90:	e005      	b.n	8001e9e <HAL_TIM_PeriodElapsedCallback+0x39e>
	} else
	{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e98:	4825      	ldr	r0, [pc, #148]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8001e9a:	f004 f98d 	bl	80061b8 <HAL_GPIO_WritePin>
	}

	if (duty_m2 > 600)
 8001e9e:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	b21b      	sxth	r3, r3
 8001ea4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001ea8:	bfcc      	ite	gt
 8001eaa:	2301      	movgt	r3, #1
 8001eac:	2300      	movle	r3, #0
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_TIM_PeriodElapsedCallback+0x3bc>
	{
		duty_m2 = 600;
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8001eb6:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001eba:	801a      	strh	r2, [r3, #0]
	}

	if(stop != 2)
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d037      	beq.n	8001f34 <HAL_TIM_PeriodElapsedCallback+0x434>
	{
		htim2.Instance->CCR2 = duty_m2;
 8001ec4:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	b21a      	sxth	r2, r3
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	639a      	str	r2, [r3, #56]	; 0x38
		m2.e_prev_prev = m2.e_prev;
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001ed6:	60d3      	str	r3, [r2, #12]
		m2.e_prev = m2.e;
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001ede:	6093      	str	r3, [r2, #8]
		m2.u_prev = m2.u;
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	e040      	b.n	8001f6c <HAL_TIM_PeriodElapsedCallback+0x46c>
 8001eea:	bf00      	nop
 8001eec:	f3af 8000 	nop.w
 8001ef0:	47ae147b 	.word	0x47ae147b
 8001ef4:	3f847ae1 	.word	0x3f847ae1
 8001ef8:	20001540 	.word	0x20001540
 8001efc:	2000126c 	.word	0x2000126c
 8001f00:	200014b4 	.word	0x200014b4
 8001f04:	20001530 	.word	0x20001530
 8001f08:	200014d8 	.word	0x200014d8
 8001f0c:	20001494 	.word	0x20001494
 8001f10:	2000149c 	.word	0x2000149c
 8001f14:	200014a4 	.word	0x200014a4
 8001f18:	3fe00000 	.word	0x3fe00000
 8001f1c:	200014ac 	.word	0x200014ac
 8001f20:	42c80000 	.word	0x42c80000
 8001f24:	44160000 	.word	0x44160000
 8001f28:	43160000 	.word	0x43160000
 8001f2c:	200014b2 	.word	0x200014b2
 8001f30:	40020400 	.word	0x40020400
	}
	else if (stop == 2)
 8001f34:	4bae      	ldr	r3, [pc, #696]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d117      	bne.n	8001f6c <HAL_TIM_PeriodElapsedCallback+0x46c>
	{
		htim2.Instance->CCR2 = 0;
 8001f3c:	4bad      	ldr	r3, [pc, #692]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2200      	movs	r2, #0
 8001f42:	639a      	str	r2, [r3, #56]	; 0x38
		m2.e = 0;
 8001f44:	4bac      	ldr	r3, [pc, #688]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	605a      	str	r2, [r3, #4]
		m2.u = 0;
 8001f4c:	4baa      	ldr	r3, [pc, #680]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	621a      	str	r2, [r3, #32]
		m2.e_prev_prev = 0;
 8001f54:	4ba8      	ldr	r3, [pc, #672]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	60da      	str	r2, [r3, #12]
		m2.e_prev = 0;
 8001f5c:	4ba6      	ldr	r3, [pc, #664]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
		m2.u_prev = 0;
 8001f64:	4ba4      	ldr	r3, [pc, #656]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
	}

  }
  if (htim == &htim14) //100Hz
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4aa3      	ldr	r2, [pc, #652]	; (80021fc <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	f040 812d 	bne.w	80021d0 <HAL_TIM_PeriodElapsedCallback+0x6d0>
  {
	  start_time = HAL_GetTick()/1000.0;
 8001f76:	f003 fa3f 	bl	80053f8 <HAL_GetTick>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fac1 	bl	8000504 <__aeabi_ui2d>
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	4b9e      	ldr	r3, [pc, #632]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8001f88:	f7fe fc60 	bl	800084c <__aeabi_ddiv>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	f7fe fe28 	bl	8000be8 <__aeabi_d2f>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4a9a      	ldr	r2, [pc, #616]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8001f9c:	6013      	str	r3, [r2, #0]
	  frequency = 1/(start_time-end_time);
 8001f9e:	4b99      	ldr	r3, [pc, #612]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8001fa0:	ed93 7a00 	vldr	s14, [r3]
 8001fa4:	4b98      	ldr	r3, [pc, #608]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb6:	4b95      	ldr	r3, [pc, #596]	; (800220c <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8001fb8:	edc3 7a00 	vstr	s15, [r3]
	  end_time = start_time;
 8001fbc:	4b91      	ldr	r3, [pc, #580]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a91      	ldr	r2, [pc, #580]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8001fc2:	6013      	str	r3, [r2, #0]
	  Encoder_cnt1 = __HAL_TIM_GET_COUNTER(&htim1);
 8001fc4:	4b92      	ldr	r3, [pc, #584]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4b91      	ldr	r3, [pc, #580]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8001fce:	601a      	str	r2, [r3, #0]
	  Encoder_cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 8001fd0:	4b91      	ldr	r3, [pc, #580]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4b90      	ldr	r3, [pc, #576]	; (800221c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8001fda:	601a      	str	r2, [r3, #0]
	  if (!(abs(Encoder_cnt1 - pre_Encoder_cnt1) > 30000))
 8001fdc:	4b8d      	ldr	r3, [pc, #564]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b8f      	ldr	r3, [pc, #572]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	bfb8      	it	lt
 8001fea:	425b      	neglt	r3, r3
 8001fec:	f247 5230 	movw	r2, #30000	; 0x7530
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	dc6c      	bgt.n	80020ce <HAL_TIM_PeriodElapsedCallback+0x5ce>
	  {
		  rps1 = ((float)(Encoder_cnt1 - pre_Encoder_cnt1) / encoder_cpr) / 0.01; // calculate RPS 1
 8001ff4:	4b87      	ldr	r3, [pc, #540]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b89      	ldr	r3, [pc, #548]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	ee07 3a90 	vmov	s15, r3
 8002002:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002006:	4b87      	ldr	r3, [pc, #540]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8002008:	edd3 7a00 	vldr	s15, [r3]
 800200c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002010:	ee16 0a90 	vmov	r0, s13
 8002014:	f7fe fa98 	bl	8000548 <__aeabi_f2d>
 8002018:	a36f      	add	r3, pc, #444	; (adr r3, 80021d8 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe fc15 	bl	800084c <__aeabi_ddiv>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	f7fe fddd 	bl	8000be8 <__aeabi_d2f>
 800202e:	4603      	mov	r3, r0
 8002030:	4a7d      	ldr	r2, [pc, #500]	; (8002228 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8002032:	6013      	str	r3, [r2, #0]
		  rps1_filter = 0.96906992*rps1_filter_pre + 0.01546504*rps1 + 0.01546504*rps1_pre;
 8002034:	4b7d      	ldr	r3, [pc, #500]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fa85 	bl	8000548 <__aeabi_f2d>
 800203e:	a368      	add	r3, pc, #416	; (adr r3, 80021e0 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8002040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002044:	f7fe fad8 	bl	80005f8 <__aeabi_dmul>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4614      	mov	r4, r2
 800204e:	461d      	mov	r5, r3
 8002050:	4b75      	ldr	r3, [pc, #468]	; (8002228 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fa77 	bl	8000548 <__aeabi_f2d>
 800205a:	a363      	add	r3, pc, #396	; (adr r3, 80021e8 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	f7fe faca 	bl	80005f8 <__aeabi_dmul>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4620      	mov	r0, r4
 800206a:	4629      	mov	r1, r5
 800206c:	f7fe f90e 	bl	800028c <__adddf3>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4614      	mov	r4, r2
 8002076:	461d      	mov	r5, r3
 8002078:	4b6d      	ldr	r3, [pc, #436]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x730>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fa63 	bl	8000548 <__aeabi_f2d>
 8002082:	a359      	add	r3, pc, #356	; (adr r3, 80021e8 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	f7fe fab6 	bl	80005f8 <__aeabi_dmul>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4620      	mov	r0, r4
 8002092:	4629      	mov	r1, r5
 8002094:	f7fe f8fa 	bl	800028c <__adddf3>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	f7fe fda2 	bl	8000be8 <__aeabi_d2f>
 80020a4:	4603      	mov	r3, r0
 80020a6:	4a63      	ldr	r2, [pc, #396]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x734>)
 80020a8:	6013      	str	r3, [r2, #0]
		  rps1_filter_pre = rps1_filter;
 80020aa:	4b62      	ldr	r3, [pc, #392]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x734>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a5f      	ldr	r2, [pc, #380]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 80020b0:	6013      	str	r3, [r2, #0]
		  rps1_pre = rps1;
 80020b2:	4b5d      	ldr	r3, [pc, #372]	; (8002228 <HAL_TIM_PeriodElapsedCallback+0x728>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a5e      	ldr	r2, [pc, #376]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x730>)
 80020b8:	6013      	str	r3, [r2, #0]
		  //rpm1 = rps1*60.0;
		  rpm1 = rps1_filter*60.0;
 80020ba:	4b5e      	ldr	r3, [pc, #376]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x734>)
 80020bc:	edd3 7a00 	vldr	s15, [r3]
 80020c0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8002238 <HAL_TIM_PeriodElapsedCallback+0x738>
 80020c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020c8:	4b5c      	ldr	r3, [pc, #368]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x73c>)
 80020ca:	edc3 7a00 	vstr	s15, [r3]
	  }
	  if (!(abs(Encoder_cnt2 - pre_Encoder_cnt2) > 30000))
 80020ce:	4b53      	ldr	r3, [pc, #332]	; (800221c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4b5b      	ldr	r3, [pc, #364]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x740>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bfb8      	it	lt
 80020dc:	425b      	neglt	r3, r3
 80020de:	f247 5230 	movw	r2, #30000	; 0x7530
 80020e2:	4293      	cmp	r3, r2
 80020e4:	dc6c      	bgt.n	80021c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>
	  {
		  rps2 = ((float)(Encoder_cnt2 - pre_Encoder_cnt2) / encoder_cpr) / 0.01; // calculate RPS 2
 80020e6:	4b4d      	ldr	r3, [pc, #308]	; (800221c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4b55      	ldr	r3, [pc, #340]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x740>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	ee07 3a90 	vmov	s15, r3
 80020f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f8:	4b4a      	ldr	r3, [pc, #296]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x724>)
 80020fa:	edd3 7a00 	vldr	s15, [r3]
 80020fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002102:	ee16 0a90 	vmov	r0, s13
 8002106:	f7fe fa1f 	bl	8000548 <__aeabi_f2d>
 800210a:	a333      	add	r3, pc, #204	; (adr r3, 80021d8 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 800210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002110:	f7fe fb9c 	bl	800084c <__aeabi_ddiv>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4610      	mov	r0, r2
 800211a:	4619      	mov	r1, r3
 800211c:	f7fe fd64 	bl	8000be8 <__aeabi_d2f>
 8002120:	4603      	mov	r3, r0
 8002122:	4a48      	ldr	r2, [pc, #288]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x744>)
 8002124:	6013      	str	r3, [r2, #0]
		  rps2_filter = 0.96906992*rps2_filter_pre + 0.01546504*rps2 + 0.01546504*rps2_pre;
 8002126:	4b48      	ldr	r3, [pc, #288]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x748>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fa0c 	bl	8000548 <__aeabi_f2d>
 8002130:	a32b      	add	r3, pc, #172	; (adr r3, 80021e0 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8002132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002136:	f7fe fa5f 	bl	80005f8 <__aeabi_dmul>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4614      	mov	r4, r2
 8002140:	461d      	mov	r5, r3
 8002142:	4b40      	ldr	r3, [pc, #256]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x744>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe f9fe 	bl	8000548 <__aeabi_f2d>
 800214c:	a326      	add	r3, pc, #152	; (adr r3, 80021e8 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 800214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002152:	f7fe fa51 	bl	80005f8 <__aeabi_dmul>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4620      	mov	r0, r4
 800215c:	4629      	mov	r1, r5
 800215e:	f7fe f895 	bl	800028c <__adddf3>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4614      	mov	r4, r2
 8002168:	461d      	mov	r5, r3
 800216a:	4b38      	ldr	r3, [pc, #224]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x74c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f9ea 	bl	8000548 <__aeabi_f2d>
 8002174:	a31c      	add	r3, pc, #112	; (adr r3, 80021e8 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8002176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217a:	f7fe fa3d 	bl	80005f8 <__aeabi_dmul>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4620      	mov	r0, r4
 8002184:	4629      	mov	r1, r5
 8002186:	f7fe f881 	bl	800028c <__adddf3>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4610      	mov	r0, r2
 8002190:	4619      	mov	r1, r3
 8002192:	f7fe fd29 	bl	8000be8 <__aeabi_d2f>
 8002196:	4603      	mov	r3, r0
 8002198:	4a2d      	ldr	r2, [pc, #180]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x750>)
 800219a:	6013      	str	r3, [r2, #0]
		  rps2_filter_pre = rps2_filter;
 800219c:	4b2c      	ldr	r3, [pc, #176]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x750>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a29      	ldr	r2, [pc, #164]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x748>)
 80021a2:	6013      	str	r3, [r2, #0]
		  rps2_pre = rps2;
 80021a4:	4b27      	ldr	r3, [pc, #156]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x744>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a28      	ldr	r2, [pc, #160]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x74c>)
 80021aa:	6013      	str	r3, [r2, #0]
		  //rpm2 = rps2*60.0;
		  rpm2 = rps2_filter*60.0;
 80021ac:	4b28      	ldr	r3, [pc, #160]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x750>)
 80021ae:	edd3 7a00 	vldr	s15, [r3]
 80021b2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002238 <HAL_TIM_PeriodElapsedCallback+0x738>
 80021b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ba:	4b26      	ldr	r3, [pc, #152]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0x754>)
 80021bc:	edc3 7a00 	vstr	s15, [r3]
	  }
	  pre_Encoder_cnt1 = Encoder_cnt1;
 80021c0:	4b14      	ldr	r3, [pc, #80]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x714>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a16      	ldr	r2, [pc, #88]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x720>)
 80021c6:	6013      	str	r3, [r2, #0]
	  pre_Encoder_cnt2 = Encoder_cnt2;
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a1c      	ldr	r2, [pc, #112]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x740>)
 80021ce:	6013      	str	r3, [r2, #0]
  }
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bdb0      	pop	{r4, r5, r7, pc}
 80021d8:	47ae147b 	.word	0x47ae147b
 80021dc:	3f847ae1 	.word	0x3f847ae1
 80021e0:	ebbdfea9 	.word	0xebbdfea9
 80021e4:	3fef029e 	.word	0x3fef029e
 80021e8:	88402ae8 	.word	0x88402ae8
 80021ec:	3f8fac22 	.word	0x3f8fac22
 80021f0:	20001540 	.word	0x20001540
 80021f4:	2000126c 	.word	0x2000126c
 80021f8:	200014d8 	.word	0x200014d8
 80021fc:	20001344 	.word	0x20001344
 8002200:	408f4000 	.word	0x408f4000
 8002204:	20001534 	.word	0x20001534
 8002208:	20001538 	.word	0x20001538
 800220c:	2000153c 	.word	0x2000153c
 8002210:	20001224 	.word	0x20001224
 8002214:	200014fc 	.word	0x200014fc
 8002218:	200012b4 	.word	0x200012b4
 800221c:	20001504 	.word	0x20001504
 8002220:	20001500 	.word	0x20001500
 8002224:	20000000 	.word	0x20000000
 8002228:	2000150c 	.word	0x2000150c
 800222c:	20001518 	.word	0x20001518
 8002230:	20001510 	.word	0x20001510
 8002234:	20001514 	.word	0x20001514
 8002238:	42700000 	.word	0x42700000
 800223c:	2000152c 	.word	0x2000152c
 8002240:	20001508 	.word	0x20001508
 8002244:	2000151c 	.word	0x2000151c
 8002248:	20001528 	.word	0x20001528
 800224c:	20001520 	.word	0x20001520
 8002250:	20001524 	.word	0x20001524
 8002254:	20001530 	.word	0x20001530

08002258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800225c:	b672      	cpsid	i
}
 800225e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002260:	e7fe      	b.n	8002260 <Error_Handler+0x8>
	...

08002264 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	4a04      	ldr	r2, [pc, #16]	; (8002280 <_ZN3ros3MsgC1Ev+0x1c>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	0800de3c 	.word	0x0800de3c

08002284 <_ZN10custom_msg17encoder_input_msgC1Ev>:
      typedef float _input_Ki_m2_type;
      _input_Ki_m2_type input_Ki_m2;
      typedef float _input_Kd_m2_type;
      _input_Kd_m2_type input_Kd_m2;

    encoder_input_msg():
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
      input_Ki_m1(0),
      input_Kd_m1(0),
      input_setpoint_m2(0),
      input_Kp_m2(0),
      input_Ki_m2(0),
      input_Kd_m2(0)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff ffe8 	bl	8002264 <_ZN3ros3MsgC1Ev>
 8002294:	4a13      	ldr	r2, [pc, #76]	; (80022e4 <_ZN10custom_msg17encoder_input_msgC1Ev+0x60>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	615a      	str	r2, [r3, #20]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	619a      	str	r2, [r3, #24]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	61da      	str	r2, [r3, #28]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	621a      	str	r2, [r3, #32]
    {
    }
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	0800de24 	.word	0x0800de24

080022e8 <_ZNK10custom_msg17encoder_input_msg9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80022e8:	b480      	push	{r7}
 80022ea:	b08d      	sub	sp, #52	; 0x34
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_setpoint_m1;
      u_input_setpoint_m1.real = this->input_setpoint_m1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *(outbuffer + offset + 0) = (u_input_setpoint_m1.base >> (8 * 0)) & 0xFF;
 80022fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	4413      	add	r3, r2
 8002304:	b2ca      	uxtb	r2, r1
 8002306:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_setpoint_m1.base >> (8 * 1)) & 0xFF;
 8002308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230a:	0a19      	lsrs	r1, r3, #8
 800230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230e:	3301      	adds	r3, #1
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	4413      	add	r3, r2
 8002314:	b2ca      	uxtb	r2, r1
 8002316:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_setpoint_m1.base >> (8 * 2)) & 0xFF;
 8002318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231a:	0c19      	lsrs	r1, r3, #16
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	3302      	adds	r3, #2
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	4413      	add	r3, r2
 8002324:	b2ca      	uxtb	r2, r1
 8002326:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_setpoint_m1.base >> (8 * 3)) & 0xFF;
 8002328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232a:	0e19      	lsrs	r1, r3, #24
 800232c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232e:	3303      	adds	r3, #3
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	4413      	add	r3, r2
 8002334:	b2ca      	uxtb	r2, r1
 8002336:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_setpoint_m1);
 8002338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233a:	3304      	adds	r3, #4
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kp_m1;
      u_input_Kp_m1.real = this->input_Kp_m1;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (u_input_Kp_m1.base >> (8 * 0)) & 0xFF;
 8002344:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	4413      	add	r3, r2
 800234c:	b2ca      	uxtb	r2, r1
 800234e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_Kp_m1.base >> (8 * 1)) & 0xFF;
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	0a19      	lsrs	r1, r3, #8
 8002354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002356:	3301      	adds	r3, #1
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	4413      	add	r3, r2
 800235c:	b2ca      	uxtb	r2, r1
 800235e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_Kp_m1.base >> (8 * 2)) & 0xFF;
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	0c19      	lsrs	r1, r3, #16
 8002364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002366:	3302      	adds	r3, #2
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	4413      	add	r3, r2
 800236c:	b2ca      	uxtb	r2, r1
 800236e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_Kp_m1.base >> (8 * 3)) & 0xFF;
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	0e19      	lsrs	r1, r3, #24
 8002374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002376:	3303      	adds	r3, #3
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	4413      	add	r3, r2
 800237c:	b2ca      	uxtb	r2, r1
 800237e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_Kp_m1);
 8002380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002382:	3304      	adds	r3, #4
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Ki_m1;
      u_input_Ki_m1.real = this->input_Ki_m1;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	623b      	str	r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_input_Ki_m1.base >> (8 * 0)) & 0xFF;
 800238c:	6a39      	ldr	r1, [r7, #32]
 800238e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	4413      	add	r3, r2
 8002394:	b2ca      	uxtb	r2, r1
 8002396:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_Ki_m1.base >> (8 * 1)) & 0xFF;
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	0a19      	lsrs	r1, r3, #8
 800239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239e:	3301      	adds	r3, #1
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	b2ca      	uxtb	r2, r1
 80023a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_Ki_m1.base >> (8 * 2)) & 0xFF;
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	0c19      	lsrs	r1, r3, #16
 80023ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ae:	3302      	adds	r3, #2
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	b2ca      	uxtb	r2, r1
 80023b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_Ki_m1.base >> (8 * 3)) & 0xFF;
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	0e19      	lsrs	r1, r3, #24
 80023bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023be:	3303      	adds	r3, #3
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	b2ca      	uxtb	r2, r1
 80023c6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_Ki_m1);
 80023c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ca:	3304      	adds	r3, #4
 80023cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kd_m1;
      u_input_Kd_m1.real = this->input_Kd_m1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (u_input_Kd_m1.base >> (8 * 0)) & 0xFF;
 80023d4:	69f9      	ldr	r1, [r7, #28]
 80023d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	b2ca      	uxtb	r2, r1
 80023de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_Kd_m1.base >> (8 * 1)) & 0xFF;
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	0a19      	lsrs	r1, r3, #8
 80023e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e6:	3301      	adds	r3, #1
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	b2ca      	uxtb	r2, r1
 80023ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_Kd_m1.base >> (8 * 2)) & 0xFF;
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	0c19      	lsrs	r1, r3, #16
 80023f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f6:	3302      	adds	r3, #2
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	b2ca      	uxtb	r2, r1
 80023fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_Kd_m1.base >> (8 * 3)) & 0xFF;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	0e19      	lsrs	r1, r3, #24
 8002404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002406:	3303      	adds	r3, #3
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	4413      	add	r3, r2
 800240c:	b2ca      	uxtb	r2, r1
 800240e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_Kd_m1);
 8002410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002412:	3304      	adds	r3, #4
 8002414:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_setpoint_m2;
      u_input_setpoint_m2.real = this->input_setpoint_m2;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	61bb      	str	r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_input_setpoint_m2.base >> (8 * 0)) & 0xFF;
 800241c:	69b9      	ldr	r1, [r7, #24]
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	4413      	add	r3, r2
 8002424:	b2ca      	uxtb	r2, r1
 8002426:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_setpoint_m2.base >> (8 * 1)) & 0xFF;
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	0a19      	lsrs	r1, r3, #8
 800242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242e:	3301      	adds	r3, #1
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	4413      	add	r3, r2
 8002434:	b2ca      	uxtb	r2, r1
 8002436:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_setpoint_m2.base >> (8 * 2)) & 0xFF;
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	0c19      	lsrs	r1, r3, #16
 800243c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243e:	3302      	adds	r3, #2
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	4413      	add	r3, r2
 8002444:	b2ca      	uxtb	r2, r1
 8002446:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_setpoint_m2.base >> (8 * 3)) & 0xFF;
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	0e19      	lsrs	r1, r3, #24
 800244c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244e:	3303      	adds	r3, #3
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	4413      	add	r3, r2
 8002454:	b2ca      	uxtb	r2, r1
 8002456:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_setpoint_m2);
 8002458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245a:	3304      	adds	r3, #4
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kp_m2;
      u_input_Kp_m2.real = this->input_Kp_m2;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_input_Kp_m2.base >> (8 * 0)) & 0xFF;
 8002464:	6979      	ldr	r1, [r7, #20]
 8002466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	4413      	add	r3, r2
 800246c:	b2ca      	uxtb	r2, r1
 800246e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_Kp_m2.base >> (8 * 1)) & 0xFF;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	0a19      	lsrs	r1, r3, #8
 8002474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002476:	3301      	adds	r3, #1
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	4413      	add	r3, r2
 800247c:	b2ca      	uxtb	r2, r1
 800247e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_Kp_m2.base >> (8 * 2)) & 0xFF;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	0c19      	lsrs	r1, r3, #16
 8002484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002486:	3302      	adds	r3, #2
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	4413      	add	r3, r2
 800248c:	b2ca      	uxtb	r2, r1
 800248e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_Kp_m2.base >> (8 * 3)) & 0xFF;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	0e19      	lsrs	r1, r3, #24
 8002494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002496:	3303      	adds	r3, #3
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	4413      	add	r3, r2
 800249c:	b2ca      	uxtb	r2, r1
 800249e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_Kp_m2);
 80024a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a2:	3304      	adds	r3, #4
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Ki_m2;
      u_input_Ki_m2.real = this->input_Ki_m2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_input_Ki_m2.base >> (8 * 0)) & 0xFF;
 80024ac:	6939      	ldr	r1, [r7, #16]
 80024ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	b2ca      	uxtb	r2, r1
 80024b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_Ki_m2.base >> (8 * 1)) & 0xFF;
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	0a19      	lsrs	r1, r3, #8
 80024bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024be:	3301      	adds	r3, #1
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	b2ca      	uxtb	r2, r1
 80024c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_Ki_m2.base >> (8 * 2)) & 0xFF;
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	0c19      	lsrs	r1, r3, #16
 80024cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ce:	3302      	adds	r3, #2
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	4413      	add	r3, r2
 80024d4:	b2ca      	uxtb	r2, r1
 80024d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_Ki_m2.base >> (8 * 3)) & 0xFF;
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	0e19      	lsrs	r1, r3, #24
 80024dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024de:	3303      	adds	r3, #3
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	b2ca      	uxtb	r2, r1
 80024e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_Ki_m2);
 80024e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ea:	3304      	adds	r3, #4
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kd_m2;
      u_input_Kd_m2.real = this->input_Kd_m2;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_input_Kd_m2.base >> (8 * 0)) & 0xFF;
 80024f4:	68f9      	ldr	r1, [r7, #12]
 80024f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	b2ca      	uxtb	r2, r1
 80024fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_Kd_m2.base >> (8 * 1)) & 0xFF;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	0a19      	lsrs	r1, r3, #8
 8002504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002506:	3301      	adds	r3, #1
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	4413      	add	r3, r2
 800250c:	b2ca      	uxtb	r2, r1
 800250e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_Kd_m2.base >> (8 * 2)) & 0xFF;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	0c19      	lsrs	r1, r3, #16
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	3302      	adds	r3, #2
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	4413      	add	r3, r2
 800251c:	b2ca      	uxtb	r2, r1
 800251e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_Kd_m2.base >> (8 * 3)) & 0xFF;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	0e19      	lsrs	r1, r3, #24
 8002524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002526:	3303      	adds	r3, #3
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	4413      	add	r3, r2
 800252c:	b2ca      	uxtb	r2, r1
 800252e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_Kd_m2);
 8002530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002532:	3304      	adds	r3, #4
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 8002536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002538:	4618      	mov	r0, r3
 800253a:	3734      	adds	r7, #52	; 0x34
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <_ZN10custom_msg17encoder_input_msg11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002544:	b480      	push	{r7}
 8002546:	b08d      	sub	sp, #52	; 0x34
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_setpoint_m1;
      u_input_setpoint_m1.base = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
      u_input_setpoint_m1.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800255a:	6839      	ldr	r1, [r7, #0]
 800255c:	440a      	add	r2, r1
 800255e:	7812      	ldrb	r2, [r2, #0]
 8002560:	4313      	orrs	r3, r2
 8002562:	62bb      	str	r3, [r7, #40]	; 0x28
      u_input_setpoint_m1.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002568:	3301      	adds	r3, #1
 800256a:	6839      	ldr	r1, [r7, #0]
 800256c:	440b      	add	r3, r1
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	021b      	lsls	r3, r3, #8
 8002572:	4313      	orrs	r3, r2
 8002574:	62bb      	str	r3, [r7, #40]	; 0x28
      u_input_setpoint_m1.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257a:	3302      	adds	r3, #2
 800257c:	6839      	ldr	r1, [r7, #0]
 800257e:	440b      	add	r3, r1
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	041b      	lsls	r3, r3, #16
 8002584:	4313      	orrs	r3, r2
 8002586:	62bb      	str	r3, [r7, #40]	; 0x28
      u_input_setpoint_m1.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258c:	3303      	adds	r3, #3
 800258e:	6839      	ldr	r1, [r7, #0]
 8002590:	440b      	add	r3, r1
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	061b      	lsls	r3, r3, #24
 8002596:	4313      	orrs	r3, r2
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28
      this->input_setpoint_m1 = u_input_setpoint_m1.real;
 800259a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->input_setpoint_m1);
 80025a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a2:	3304      	adds	r3, #4
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kp_m1;
      u_input_Kp_m1.base = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
      u_input_Kp_m1.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ae:	6839      	ldr	r1, [r7, #0]
 80025b0:	440a      	add	r2, r1
 80025b2:	7812      	ldrb	r2, [r2, #0]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
      u_input_Kp_m1.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025bc:	3301      	adds	r3, #1
 80025be:	6839      	ldr	r1, [r7, #0]
 80025c0:	440b      	add	r3, r1
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	021b      	lsls	r3, r3, #8
 80025c6:	4313      	orrs	r3, r2
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
      u_input_Kp_m1.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ce:	3302      	adds	r3, #2
 80025d0:	6839      	ldr	r1, [r7, #0]
 80025d2:	440b      	add	r3, r1
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	041b      	lsls	r3, r3, #16
 80025d8:	4313      	orrs	r3, r2
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
      u_input_Kp_m1.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e0:	3303      	adds	r3, #3
 80025e2:	6839      	ldr	r1, [r7, #0]
 80025e4:	440b      	add	r3, r1
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	061b      	lsls	r3, r3, #24
 80025ea:	4313      	orrs	r3, r2
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
      this->input_Kp_m1 = u_input_Kp_m1.real;
 80025ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->input_Kp_m1);
 80025f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f6:	3304      	adds	r3, #4
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Ki_m1;
      u_input_Ki_m1.base = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	623b      	str	r3, [r7, #32]
      u_input_Ki_m1.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002602:	6839      	ldr	r1, [r7, #0]
 8002604:	440a      	add	r2, r1
 8002606:	7812      	ldrb	r2, [r2, #0]
 8002608:	4313      	orrs	r3, r2
 800260a:	623b      	str	r3, [r7, #32]
      u_input_Ki_m1.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800260c:	6a3a      	ldr	r2, [r7, #32]
 800260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002610:	3301      	adds	r3, #1
 8002612:	6839      	ldr	r1, [r7, #0]
 8002614:	440b      	add	r3, r1
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	4313      	orrs	r3, r2
 800261c:	623b      	str	r3, [r7, #32]
      u_input_Ki_m1.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800261e:	6a3a      	ldr	r2, [r7, #32]
 8002620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002622:	3302      	adds	r3, #2
 8002624:	6839      	ldr	r1, [r7, #0]
 8002626:	440b      	add	r3, r1
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	041b      	lsls	r3, r3, #16
 800262c:	4313      	orrs	r3, r2
 800262e:	623b      	str	r3, [r7, #32]
      u_input_Ki_m1.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002630:	6a3a      	ldr	r2, [r7, #32]
 8002632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002634:	3303      	adds	r3, #3
 8002636:	6839      	ldr	r1, [r7, #0]
 8002638:	440b      	add	r3, r1
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	061b      	lsls	r3, r3, #24
 800263e:	4313      	orrs	r3, r2
 8002640:	623b      	str	r3, [r7, #32]
      this->input_Ki_m1 = u_input_Ki_m1.real;
 8002642:	6a3a      	ldr	r2, [r7, #32]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->input_Ki_m1);
 8002648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264a:	3304      	adds	r3, #4
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kd_m1;
      u_input_Kd_m1.base = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
      u_input_Kd_m1.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002656:	6839      	ldr	r1, [r7, #0]
 8002658:	440a      	add	r2, r1
 800265a:	7812      	ldrb	r2, [r2, #0]
 800265c:	4313      	orrs	r3, r2
 800265e:	61fb      	str	r3, [r7, #28]
      u_input_Kd_m1.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	3301      	adds	r3, #1
 8002666:	6839      	ldr	r1, [r7, #0]
 8002668:	440b      	add	r3, r1
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	021b      	lsls	r3, r3, #8
 800266e:	4313      	orrs	r3, r2
 8002670:	61fb      	str	r3, [r7, #28]
      u_input_Kd_m1.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002676:	3302      	adds	r3, #2
 8002678:	6839      	ldr	r1, [r7, #0]
 800267a:	440b      	add	r3, r1
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	041b      	lsls	r3, r3, #16
 8002680:	4313      	orrs	r3, r2
 8002682:	61fb      	str	r3, [r7, #28]
      u_input_Kd_m1.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002688:	3303      	adds	r3, #3
 800268a:	6839      	ldr	r1, [r7, #0]
 800268c:	440b      	add	r3, r1
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	061b      	lsls	r3, r3, #24
 8002692:	4313      	orrs	r3, r2
 8002694:	61fb      	str	r3, [r7, #28]
      this->input_Kd_m1 = u_input_Kd_m1.real;
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	611a      	str	r2, [r3, #16]
      offset += sizeof(this->input_Kd_m1);
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269e:	3304      	adds	r3, #4
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_setpoint_m2;
      u_input_setpoint_m2.base = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
      u_input_setpoint_m2.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026aa:	6839      	ldr	r1, [r7, #0]
 80026ac:	440a      	add	r2, r1
 80026ae:	7812      	ldrb	r2, [r2, #0]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
      u_input_setpoint_m2.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	3301      	adds	r3, #1
 80026ba:	6839      	ldr	r1, [r7, #0]
 80026bc:	440b      	add	r3, r1
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
      u_input_setpoint_m2.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ca:	3302      	adds	r3, #2
 80026cc:	6839      	ldr	r1, [r7, #0]
 80026ce:	440b      	add	r3, r1
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	041b      	lsls	r3, r3, #16
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
      u_input_setpoint_m2.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	3303      	adds	r3, #3
 80026de:	6839      	ldr	r1, [r7, #0]
 80026e0:	440b      	add	r3, r1
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	061b      	lsls	r3, r3, #24
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
      this->input_setpoint_m2 = u_input_setpoint_m2.real;
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->input_setpoint_m2);
 80026f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f2:	3304      	adds	r3, #4
 80026f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kp_m2;
      u_input_Kp_m2.base = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
      u_input_Kp_m2.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026fe:	6839      	ldr	r1, [r7, #0]
 8002700:	440a      	add	r2, r1
 8002702:	7812      	ldrb	r2, [r2, #0]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]
      u_input_Kp_m2.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270c:	3301      	adds	r3, #1
 800270e:	6839      	ldr	r1, [r7, #0]
 8002710:	440b      	add	r3, r1
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	4313      	orrs	r3, r2
 8002718:	617b      	str	r3, [r7, #20]
      u_input_Kp_m2.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271e:	3302      	adds	r3, #2
 8002720:	6839      	ldr	r1, [r7, #0]
 8002722:	440b      	add	r3, r1
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	041b      	lsls	r3, r3, #16
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
      u_input_Kp_m2.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002730:	3303      	adds	r3, #3
 8002732:	6839      	ldr	r1, [r7, #0]
 8002734:	440b      	add	r3, r1
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	061b      	lsls	r3, r3, #24
 800273a:	4313      	orrs	r3, r2
 800273c:	617b      	str	r3, [r7, #20]
      this->input_Kp_m2 = u_input_Kp_m2.real;
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	619a      	str	r2, [r3, #24]
      offset += sizeof(this->input_Kp_m2);
 8002744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002746:	3304      	adds	r3, #4
 8002748:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Ki_m2;
      u_input_Ki_m2.base = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
      u_input_Ki_m2.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002752:	6839      	ldr	r1, [r7, #0]
 8002754:	440a      	add	r2, r1
 8002756:	7812      	ldrb	r2, [r2, #0]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
      u_input_Ki_m2.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002760:	3301      	adds	r3, #1
 8002762:	6839      	ldr	r1, [r7, #0]
 8002764:	440b      	add	r3, r1
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	021b      	lsls	r3, r3, #8
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
      u_input_Ki_m2.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002772:	3302      	adds	r3, #2
 8002774:	6839      	ldr	r1, [r7, #0]
 8002776:	440b      	add	r3, r1
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	041b      	lsls	r3, r3, #16
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
      u_input_Ki_m2.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002784:	3303      	adds	r3, #3
 8002786:	6839      	ldr	r1, [r7, #0]
 8002788:	440b      	add	r3, r1
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	061b      	lsls	r3, r3, #24
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
      this->input_Ki_m2 = u_input_Ki_m2.real;
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->input_Ki_m2);
 8002798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279a:	3304      	adds	r3, #4
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kd_m2;
      u_input_Kd_m2.base = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
      u_input_Kd_m2.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027a6:	6839      	ldr	r1, [r7, #0]
 80027a8:	440a      	add	r2, r1
 80027aa:	7812      	ldrb	r2, [r2, #0]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
      u_input_Kd_m2.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b4:	3301      	adds	r3, #1
 80027b6:	6839      	ldr	r1, [r7, #0]
 80027b8:	440b      	add	r3, r1
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
      u_input_Kd_m2.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c6:	3302      	adds	r3, #2
 80027c8:	6839      	ldr	r1, [r7, #0]
 80027ca:	440b      	add	r3, r1
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	041b      	lsls	r3, r3, #16
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
      u_input_Kd_m2.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	3303      	adds	r3, #3
 80027da:	6839      	ldr	r1, [r7, #0]
 80027dc:	440b      	add	r3, r1
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
      this->input_Kd_m2 = u_input_Kd_m2.real;
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	621a      	str	r2, [r3, #32]
      offset += sizeof(this->input_Kd_m2);
 80027ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ee:	3304      	adds	r3, #4
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
     return offset;
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80027f4:	4618      	mov	r0, r3
 80027f6:	3734      	adds	r7, #52	; 0x34
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <_ZN10custom_msg17encoder_input_msg7getTypeEv>:

    const char * getType(){ return "custom_msg/encoder_input_msg"; };
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <_ZN10custom_msg17encoder_input_msg7getTypeEv+0x18>)
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	0800dab8 	.word	0x0800dab8

0800281c <_ZN10custom_msg17encoder_input_msg6getMD5Ev>:
    const char * getMD5(){ return "db9ba92c90b9ba885220db60c812fbcf"; };
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <_ZN10custom_msg17encoder_input_msg6getMD5Ev+0x18>)
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	0800dad8 	.word	0x0800dad8

08002838 <_ZN10custom_msg18encoder_output_msgC1Ev>:
      typedef float _output_controller_m2_type;
      _output_controller_m2_type output_controller_m2;
      typedef float _error_m2_type;
      _error_m2_type error_m2;

    encoder_output_msg():
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
      output_rpm_m1(0),
      output_controller_m1(0),
      error_m1(0),
      output_rpm_m2(0),
      output_controller_m2(0),
      error_m2(0)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fd0e 	bl	8002264 <_ZN3ros3MsgC1Ev>
 8002848:	4a0f      	ldr	r2, [pc, #60]	; (8002888 <_ZN10custom_msg18encoder_output_msgC1Ev+0x50>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	611a      	str	r2, [r3, #16]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	615a      	str	r2, [r3, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	619a      	str	r2, [r3, #24]
    {
    }
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	0800de0c 	.word	0x0800de0c

0800288c <_ZNK10custom_msg18encoder_output_msg9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800288c:	b480      	push	{r7}
 800288e:	b08b      	sub	sp, #44	; 0x2c
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint32_t base;
      } u_output_rpm_m1;
      u_output_rpm_m1.real = this->output_rpm_m1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	623b      	str	r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_output_rpm_m1.base >> (8 * 0)) & 0xFF;
 80028a0:	6a39      	ldr	r1, [r7, #32]
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	b2ca      	uxtb	r2, r1
 80028aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_output_rpm_m1.base >> (8 * 1)) & 0xFF;
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	0a19      	lsrs	r1, r3, #8
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	3301      	adds	r3, #1
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	4413      	add	r3, r2
 80028b8:	b2ca      	uxtb	r2, r1
 80028ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_output_rpm_m1.base >> (8 * 2)) & 0xFF;
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	0c19      	lsrs	r1, r3, #16
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	3302      	adds	r3, #2
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	4413      	add	r3, r2
 80028c8:	b2ca      	uxtb	r2, r1
 80028ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_output_rpm_m1.base >> (8 * 3)) & 0xFF;
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	0e19      	lsrs	r1, r3, #24
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	3303      	adds	r3, #3
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	b2ca      	uxtb	r2, r1
 80028da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->output_rpm_m1);
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	3304      	adds	r3, #4
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint32_t base;
      } u_output_controller_m1;
      u_output_controller_m1.real = this->output_controller_m1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (u_output_controller_m1.base >> (8 * 0)) & 0xFF;
 80028e8:	69f9      	ldr	r1, [r7, #28]
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	4413      	add	r3, r2
 80028f0:	b2ca      	uxtb	r2, r1
 80028f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_output_controller_m1.base >> (8 * 1)) & 0xFF;
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	0a19      	lsrs	r1, r3, #8
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	3301      	adds	r3, #1
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	4413      	add	r3, r2
 8002900:	b2ca      	uxtb	r2, r1
 8002902:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_output_controller_m1.base >> (8 * 2)) & 0xFF;
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	0c19      	lsrs	r1, r3, #16
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	3302      	adds	r3, #2
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	4413      	add	r3, r2
 8002910:	b2ca      	uxtb	r2, r1
 8002912:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_output_controller_m1.base >> (8 * 3)) & 0xFF;
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	0e19      	lsrs	r1, r3, #24
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	3303      	adds	r3, #3
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	4413      	add	r3, r2
 8002920:	b2ca      	uxtb	r2, r1
 8002922:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->output_controller_m1);
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	3304      	adds	r3, #4
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint32_t base;
      } u_error_m1;
      u_error_m1.real = this->error_m1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	61bb      	str	r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_error_m1.base >> (8 * 0)) & 0xFF;
 8002930:	69b9      	ldr	r1, [r7, #24]
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	4413      	add	r3, r2
 8002938:	b2ca      	uxtb	r2, r1
 800293a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_error_m1.base >> (8 * 1)) & 0xFF;
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	0a19      	lsrs	r1, r3, #8
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	3301      	adds	r3, #1
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	4413      	add	r3, r2
 8002948:	b2ca      	uxtb	r2, r1
 800294a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_error_m1.base >> (8 * 2)) & 0xFF;
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	0c19      	lsrs	r1, r3, #16
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	3302      	adds	r3, #2
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	4413      	add	r3, r2
 8002958:	b2ca      	uxtb	r2, r1
 800295a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_error_m1.base >> (8 * 3)) & 0xFF;
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	0e19      	lsrs	r1, r3, #24
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	3303      	adds	r3, #3
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	4413      	add	r3, r2
 8002968:	b2ca      	uxtb	r2, r1
 800296a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->error_m1);
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	3304      	adds	r3, #4
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint32_t base;
      } u_output_rpm_m2;
      u_output_rpm_m2.real = this->output_rpm_m2;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_output_rpm_m2.base >> (8 * 0)) & 0xFF;
 8002978:	6979      	ldr	r1, [r7, #20]
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	4413      	add	r3, r2
 8002980:	b2ca      	uxtb	r2, r1
 8002982:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_output_rpm_m2.base >> (8 * 1)) & 0xFF;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	0a19      	lsrs	r1, r3, #8
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	3301      	adds	r3, #1
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	4413      	add	r3, r2
 8002990:	b2ca      	uxtb	r2, r1
 8002992:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_output_rpm_m2.base >> (8 * 2)) & 0xFF;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	0c19      	lsrs	r1, r3, #16
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	3302      	adds	r3, #2
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	b2ca      	uxtb	r2, r1
 80029a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_output_rpm_m2.base >> (8 * 3)) & 0xFF;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	0e19      	lsrs	r1, r3, #24
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	3303      	adds	r3, #3
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	4413      	add	r3, r2
 80029b0:	b2ca      	uxtb	r2, r1
 80029b2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->output_rpm_m2);
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	3304      	adds	r3, #4
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint32_t base;
      } u_output_controller_m2;
      u_output_controller_m2.real = this->output_controller_m2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_output_controller_m2.base >> (8 * 0)) & 0xFF;
 80029c0:	6939      	ldr	r1, [r7, #16]
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	b2ca      	uxtb	r2, r1
 80029ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_output_controller_m2.base >> (8 * 1)) & 0xFF;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	0a19      	lsrs	r1, r3, #8
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	3301      	adds	r3, #1
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	4413      	add	r3, r2
 80029d8:	b2ca      	uxtb	r2, r1
 80029da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_output_controller_m2.base >> (8 * 2)) & 0xFF;
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	0c19      	lsrs	r1, r3, #16
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	3302      	adds	r3, #2
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	b2ca      	uxtb	r2, r1
 80029ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_output_controller_m2.base >> (8 * 3)) & 0xFF;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	0e19      	lsrs	r1, r3, #24
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	3303      	adds	r3, #3
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	4413      	add	r3, r2
 80029f8:	b2ca      	uxtb	r2, r1
 80029fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->output_controller_m2);
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	3304      	adds	r3, #4
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint32_t base;
      } u_error_m2;
      u_error_m2.real = this->error_m2;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_error_m2.base >> (8 * 0)) & 0xFF;
 8002a08:	68f9      	ldr	r1, [r7, #12]
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	4413      	add	r3, r2
 8002a10:	b2ca      	uxtb	r2, r1
 8002a12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_error_m2.base >> (8 * 1)) & 0xFF;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	0a19      	lsrs	r1, r3, #8
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	b2ca      	uxtb	r2, r1
 8002a22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_error_m2.base >> (8 * 2)) & 0xFF;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	0c19      	lsrs	r1, r3, #16
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	4413      	add	r3, r2
 8002a30:	b2ca      	uxtb	r2, r1
 8002a32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_error_m2.base >> (8 * 3)) & 0xFF;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	0e19      	lsrs	r1, r3, #24
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	3303      	adds	r3, #3
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	b2ca      	uxtb	r2, r1
 8002a42:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->error_m2);
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	3304      	adds	r3, #4
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	372c      	adds	r7, #44	; 0x2c
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <_ZN10custom_msg18encoder_output_msg11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a58:	b480      	push	{r7}
 8002a5a:	b08b      	sub	sp, #44	; 0x2c
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint32_t base;
      } u_output_rpm_m1;
      u_output_rpm_m1.base = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	623b      	str	r3, [r7, #32]
      u_output_rpm_m1.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6e:	6839      	ldr	r1, [r7, #0]
 8002a70:	440a      	add	r2, r1
 8002a72:	7812      	ldrb	r2, [r2, #0]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	623b      	str	r3, [r7, #32]
      u_output_rpm_m1.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a78:	6a3a      	ldr	r2, [r7, #32]
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	6839      	ldr	r1, [r7, #0]
 8002a80:	440b      	add	r3, r1
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	4313      	orrs	r3, r2
 8002a88:	623b      	str	r3, [r7, #32]
      u_output_rpm_m1.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a8a:	6a3a      	ldr	r2, [r7, #32]
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	3302      	adds	r3, #2
 8002a90:	6839      	ldr	r1, [r7, #0]
 8002a92:	440b      	add	r3, r1
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	041b      	lsls	r3, r3, #16
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	623b      	str	r3, [r7, #32]
      u_output_rpm_m1.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a9c:	6a3a      	ldr	r2, [r7, #32]
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	3303      	adds	r3, #3
 8002aa2:	6839      	ldr	r1, [r7, #0]
 8002aa4:	440b      	add	r3, r1
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	061b      	lsls	r3, r3, #24
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	623b      	str	r3, [r7, #32]
      this->output_rpm_m1 = u_output_rpm_m1.real;
 8002aae:	6a3a      	ldr	r2, [r7, #32]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->output_rpm_m1);
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint32_t base;
      } u_output_controller_m1;
      u_output_controller_m1.base = 0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
      u_output_controller_m1.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac2:	6839      	ldr	r1, [r7, #0]
 8002ac4:	440a      	add	r2, r1
 8002ac6:	7812      	ldrb	r2, [r2, #0]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61fb      	str	r3, [r7, #28]
      u_output_controller_m1.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	6839      	ldr	r1, [r7, #0]
 8002ad4:	440b      	add	r3, r1
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61fb      	str	r3, [r7, #28]
      u_output_controller_m1.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	6839      	ldr	r1, [r7, #0]
 8002ae6:	440b      	add	r3, r1
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	041b      	lsls	r3, r3, #16
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61fb      	str	r3, [r7, #28]
      u_output_controller_m1.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002af0:	69fa      	ldr	r2, [r7, #28]
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	3303      	adds	r3, #3
 8002af6:	6839      	ldr	r1, [r7, #0]
 8002af8:	440b      	add	r3, r1
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	061b      	lsls	r3, r3, #24
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61fb      	str	r3, [r7, #28]
      this->output_controller_m1 = u_output_controller_m1.real;
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->output_controller_m1);
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint32_t base;
      } u_error_m1;
      u_error_m1.base = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
      u_error_m1.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b16:	6839      	ldr	r1, [r7, #0]
 8002b18:	440a      	add	r2, r1
 8002b1a:	7812      	ldrb	r2, [r2, #0]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
      u_error_m1.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	3301      	adds	r3, #1
 8002b26:	6839      	ldr	r1, [r7, #0]
 8002b28:	440b      	add	r3, r1
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	021b      	lsls	r3, r3, #8
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
      u_error_m1.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	3302      	adds	r3, #2
 8002b38:	6839      	ldr	r1, [r7, #0]
 8002b3a:	440b      	add	r3, r1
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
      u_error_m1.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	3303      	adds	r3, #3
 8002b4a:	6839      	ldr	r1, [r7, #0]
 8002b4c:	440b      	add	r3, r1
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	061b      	lsls	r3, r3, #24
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
      this->error_m1 = u_error_m1.real;
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->error_m1);
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	3304      	adds	r3, #4
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint32_t base;
      } u_output_rpm_m2;
      u_output_rpm_m2.base = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
      u_output_rpm_m2.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6a:	6839      	ldr	r1, [r7, #0]
 8002b6c:	440a      	add	r2, r1
 8002b6e:	7812      	ldrb	r2, [r2, #0]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
      u_output_rpm_m2.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	3301      	adds	r3, #1
 8002b7a:	6839      	ldr	r1, [r7, #0]
 8002b7c:	440b      	add	r3, r1
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	4313      	orrs	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]
      u_output_rpm_m2.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	6839      	ldr	r1, [r7, #0]
 8002b8e:	440b      	add	r3, r1
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	041b      	lsls	r3, r3, #16
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
      u_output_rpm_m2.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	3303      	adds	r3, #3
 8002b9e:	6839      	ldr	r1, [r7, #0]
 8002ba0:	440b      	add	r3, r1
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	061b      	lsls	r3, r3, #24
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]
      this->output_rpm_m2 = u_output_rpm_m2.real;
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	611a      	str	r2, [r3, #16]
      offset += sizeof(this->output_rpm_m2);
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint32_t base;
      } u_output_controller_m2;
      u_output_controller_m2.base = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
      u_output_controller_m2.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbe:	6839      	ldr	r1, [r7, #0]
 8002bc0:	440a      	add	r2, r1
 8002bc2:	7812      	ldrb	r2, [r2, #0]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
      u_output_controller_m2.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	3301      	adds	r3, #1
 8002bce:	6839      	ldr	r1, [r7, #0]
 8002bd0:	440b      	add	r3, r1
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
      u_output_controller_m2.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	3302      	adds	r3, #2
 8002be0:	6839      	ldr	r1, [r7, #0]
 8002be2:	440b      	add	r3, r1
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	041b      	lsls	r3, r3, #16
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
      u_output_controller_m2.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	3303      	adds	r3, #3
 8002bf2:	6839      	ldr	r1, [r7, #0]
 8002bf4:	440b      	add	r3, r1
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	061b      	lsls	r3, r3, #24
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
      this->output_controller_m2 = u_output_controller_m2.real;
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->output_controller_m2);
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	3304      	adds	r3, #4
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        float real;
        uint32_t base;
      } u_error_m2;
      u_error_m2.base = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
      u_error_m2.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c12:	6839      	ldr	r1, [r7, #0]
 8002c14:	440a      	add	r2, r1
 8002c16:	7812      	ldrb	r2, [r2, #0]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
      u_error_m2.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	3301      	adds	r3, #1
 8002c22:	6839      	ldr	r1, [r7, #0]
 8002c24:	440b      	add	r3, r1
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
      u_error_m2.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	3302      	adds	r3, #2
 8002c34:	6839      	ldr	r1, [r7, #0]
 8002c36:	440b      	add	r3, r1
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	041b      	lsls	r3, r3, #16
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
      u_error_m2.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	3303      	adds	r3, #3
 8002c46:	6839      	ldr	r1, [r7, #0]
 8002c48:	440b      	add	r3, r1
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	061b      	lsls	r3, r3, #24
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
      this->error_m2 = u_error_m2.real;
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	619a      	str	r2, [r3, #24]
      offset += sizeof(this->error_m2);
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
     return offset;
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002c60:	4618      	mov	r0, r3
 8002c62:	372c      	adds	r7, #44	; 0x2c
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <_ZN10custom_msg18encoder_output_msg7getTypeEv>:

    const char * getType(){ return "custom_msg/encoder_output_msg"; };
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	4b03      	ldr	r3, [pc, #12]	; (8002c84 <_ZN10custom_msg18encoder_output_msg7getTypeEv+0x18>)
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	0800dafc 	.word	0x0800dafc

08002c88 <_ZN10custom_msg18encoder_output_msg6getMD5Ev>:
    const char * getMD5(){ return "6b87ede69122fe3791ae8516e827ad27"; };
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <_ZN10custom_msg18encoder_output_msg6getMD5Ev+0x18>)
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	0800db1c 	.word	0x0800db1c

08002ca4 <_ZN13STM32HardwareC1Ev>:
// Create Serial Buffer with UART2:
extern BufferedSerial buff_serial;

class STM32Hardware {
 public:
  STM32Hardware() : serial(&buff_serial) {}
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <_ZN13STM32HardwareC1Ev+0x1c>)
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	20000214 	.word	0x20000214

08002cc4 <_ZN13STM32Hardware4initEv>:

  // Any initialization code necessary to use the serial port:
  void init() { serial->init(); }
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fe f9b5 	bl	8001040 <_ZN14BufferedSerial4initEv>
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <_ZN13STM32Hardware4readEv>:

  // Read a byte from the serial port. -1 = failure:
  int read() { return serial->read(); }
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe f9b3 	bl	8001056 <_ZN14BufferedSerial4readEv>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <_ZN13STM32Hardware5writeEPhi>:

  // Write data to the connection to ROS:
  void write(uint8_t* data, int length) { serial->write(data, length); }
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fe f9dc 	bl	80010cc <_ZN14BufferedSerial5writeEPKhi>
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <_ZN13STM32Hardware4timeEv>:

  // Returns milliseconds since start of program:
  unsigned long time() { return HAL_GetTick(); };
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	f002 fb68 	bl	80053f8 <HAL_GetTick>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
      data()
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fa80 	bl	8002264 <_ZN3ros3MsgC1Ev>
 8002d64:	4a06      	ldr	r2, [pc, #24]	; (8002d80 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ffdf 	bl	8002d32 <_ZN3ros4TimeC1Ev>
    {
    }
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	0800ddf4 	.word	0x0800ddf4

08002d84 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6859      	ldr	r1, [r3, #4]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	b2ca      	uxtb	r2, r1
 8002d9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	0a19      	lsrs	r1, r3, #8
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	3301      	adds	r3, #1
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	4413      	add	r3, r2
 8002dae:	b2ca      	uxtb	r2, r1
 8002db0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	0c19      	lsrs	r1, r3, #16
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3302      	adds	r3, #2
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	b2ca      	uxtb	r2, r1
 8002dc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	0e19      	lsrs	r1, r3, #24
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3303      	adds	r3, #3
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	b2ca      	uxtb	r2, r1
 8002dd4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6899      	ldr	r1, [r3, #8]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	4413      	add	r3, r2
 8002de6:	b2ca      	uxtb	r2, r1
 8002de8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	0a19      	lsrs	r1, r3, #8
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	3301      	adds	r3, #1
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	4413      	add	r3, r2
 8002df8:	b2ca      	uxtb	r2, r1
 8002dfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	0c19      	lsrs	r1, r3, #16
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3302      	adds	r3, #2
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	4413      	add	r3, r2
 8002e0a:	b2ca      	uxtb	r2, r1
 8002e0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	0e19      	lsrs	r1, r3, #24
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	3303      	adds	r3, #3
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	b2ca      	uxtb	r2, r1
 8002e1e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	3304      	adds	r3, #4
 8002e24:	60fb      	str	r3, [r7, #12]
      return offset;
 8002e26:	68fb      	ldr	r3, [r7, #12]
    }
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	4413      	add	r3, r2
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3301      	adds	r3, #1
 8002e58:	6839      	ldr	r1, [r7, #0]
 8002e5a:	440b      	add	r3, r1
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	6839      	ldr	r1, [r7, #0]
 8002e70:	440b      	add	r3, r1
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	041b      	lsls	r3, r3, #16
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3303      	adds	r3, #3
 8002e84:	6839      	ldr	r1, [r7, #0]
 8002e86:	440b      	add	r3, r1
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	061b      	lsls	r3, r3, #24
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	3304      	adds	r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	3301      	adds	r3, #1
 8002eae:	6839      	ldr	r1, [r7, #0]
 8002eb0:	440b      	add	r3, r1
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	021b      	lsls	r3, r3, #8
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	6839      	ldr	r1, [r7, #0]
 8002ec6:	440b      	add	r3, r1
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	041b      	lsls	r3, r3, #16
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	3303      	adds	r3, #3
 8002eda:	6839      	ldr	r1, [r7, #0]
 8002edc:	440b      	add	r3, r1
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	061b      	lsls	r3, r3, #24
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	3304      	adds	r3, #4
 8002eec:	60fb      	str	r3, [r7, #12]
     return offset;
 8002eee:	68fb      	ldr	r3, [r7, #12]
    }
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	4b03      	ldr	r3, [pc, #12]	; (8002f14 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	0800db40 	.word	0x0800db40

08002f18 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	0800db50 	.word	0x0800db50

08002f34 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff f990 	bl	8002264 <_ZN3ros3MsgC1Ev>
 8002f44:	4a0b      	ldr	r2, [pc, #44]	; (8002f74 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	809a      	strh	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a09      	ldr	r2, [pc, #36]	; (8002f78 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002f54:	609a      	str	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a07      	ldr	r2, [pc, #28]	; (8002f78 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002f5a:	60da      	str	r2, [r3, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a06      	ldr	r2, [pc, #24]	; (8002f78 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002f60:	611a      	str	r2, [r3, #16]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	615a      	str	r2, [r3, #20]
    {
    }
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	0800dddc 	.word	0x0800dddc
 8002f78:	0800db74 	.word	0x0800db74

08002f7c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	8899      	ldrh	r1, [r3, #4]
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	4413      	add	r3, r2
 8002f94:	b2ca      	uxtb	r2, r1
 8002f96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	889b      	ldrh	r3, [r3, #4]
 8002f9c:	0a1b      	lsrs	r3, r3, #8
 8002f9e:	b299      	uxth	r1, r3
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	b2ca      	uxtb	r2, r1
 8002faa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	3302      	adds	r3, #2
 8002fb0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd f90a 	bl	80001d0 <strlen>
 8002fbc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	69b9      	ldr	r1, [r7, #24]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 ff3e 	bl	8003e48 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	18d0      	adds	r0, r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f006 f8e4 	bl	80091ac <memcpy>
      offset += length_topic_name;
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	4413      	add	r3, r2
 8002fea:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fd f8ed 	bl	80001d0 <strlen>
 8002ff6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	6979      	ldr	r1, [r7, #20]
 8003000:	4618      	mov	r0, r3
 8003002:	f000 ff21 	bl	8003e48 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3304      	adds	r3, #4
 800300a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	18d0      	adds	r0, r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4619      	mov	r1, r3
 800301a:	f006 f8c7 	bl	80091ac <memcpy>
      offset += length_message_type;
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	4413      	add	r3, r2
 8003024:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd f8d0 	bl	80001d0 <strlen>
 8003030:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	4413      	add	r3, r2
 8003038:	6939      	ldr	r1, [r7, #16]
 800303a:	4618      	mov	r0, r3
 800303c:	f000 ff04 	bl	8003e48 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	3304      	adds	r3, #4
 8003044:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	18d0      	adds	r0, r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4619      	mov	r1, r3
 8003054:	f006 f8aa 	bl	80091ac <memcpy>
      offset += length_md5sum;
 8003058:	69fa      	ldr	r2, [r7, #28]
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4413      	add	r3, r2
 800305e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8003066:	68f9      	ldr	r1, [r7, #12]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	4413      	add	r3, r2
 800306e:	b2ca      	uxtb	r2, r1
 8003070:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	0a19      	lsrs	r1, r3, #8
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3301      	adds	r3, #1
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	4413      	add	r3, r2
 800307e:	b2ca      	uxtb	r2, r1
 8003080:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	0c19      	lsrs	r1, r3, #16
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3302      	adds	r3, #2
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	4413      	add	r3, r2
 800308e:	b2ca      	uxtb	r2, r1
 8003090:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	0e19      	lsrs	r1, r3, #24
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3303      	adds	r3, #3
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	4413      	add	r3, r2
 800309e:	b2ca      	uxtb	r2, r1
 80030a0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3304      	adds	r3, #4
 80030a6:	61fb      	str	r3, [r7, #28]
      return offset;
 80030a8:	69fb      	ldr	r3, [r7, #28]
    }
 80030aa:	4618      	mov	r0, r3
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b08a      	sub	sp, #40	; 0x28
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	4413      	add	r3, r2
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	889b      	ldrh	r3, [r3, #4]
 80030d2:	b21a      	sxth	r2, r3
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	3301      	adds	r3, #1
 80030d8:	6839      	ldr	r1, [r7, #0]
 80030da:	440b      	add	r3, r1
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	021b      	lsls	r3, r3, #8
 80030e0:	b21b      	sxth	r3, r3
 80030e2:	4313      	orrs	r3, r2
 80030e4:	b21b      	sxth	r3, r3
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	3302      	adds	r3, #2
 80030f0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	441a      	add	r2, r3
 80030f8:	f107 0314 	add.w	r3, r7, #20
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fec0 	bl	8003e84 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	3304      	adds	r3, #4
 8003108:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	4413      	add	r3, r2
 8003114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003116:	429a      	cmp	r2, r3
 8003118:	d20c      	bcs.n	8003134 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	441a      	add	r2, r3
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	3b01      	subs	r3, #1
 8003124:	6839      	ldr	r1, [r7, #0]
 8003126:	440b      	add	r3, r1
 8003128:	7812      	ldrb	r2, [r2, #0]
 800312a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	3301      	adds	r3, #1
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
 8003132:	e7ec      	b.n	800310e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	4413      	add	r3, r2
 800313a:	3b01      	subs	r3, #1
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	4413      	add	r3, r2
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	3b01      	subs	r3, #1
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	441a      	add	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	4413      	add	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	441a      	add	r2, r3
 800315e:	f107 0310 	add.w	r3, r7, #16
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fe8d 	bl	8003e84 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	3304      	adds	r3, #4
 800316e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	623b      	str	r3, [r7, #32]
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4413      	add	r3, r2
 800317a:	6a3a      	ldr	r2, [r7, #32]
 800317c:	429a      	cmp	r2, r3
 800317e:	d20c      	bcs.n	800319a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	441a      	add	r2, r3
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	3b01      	subs	r3, #1
 800318a:	6839      	ldr	r1, [r7, #0]
 800318c:	440b      	add	r3, r1
 800318e:	7812      	ldrb	r2, [r2, #0]
 8003190:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	3301      	adds	r3, #1
 8003196:	623b      	str	r3, [r7, #32]
 8003198:	e7ec      	b.n	8003174 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4413      	add	r3, r2
 80031a0:	3b01      	subs	r3, #1
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	4413      	add	r3, r2
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	441a      	add	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4413      	add	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	441a      	add	r2, r3
 80031c4:	f107 030c 	add.w	r3, r7, #12
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fe5a 	bl	8003e84 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	3304      	adds	r3, #4
 80031d4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4413      	add	r3, r2
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d20c      	bcs.n	8003200 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	441a      	add	r2, r3
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	6839      	ldr	r1, [r7, #0]
 80031f2:	440b      	add	r3, r1
 80031f4:	7812      	ldrb	r2, [r2, #0]
 80031f6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	3301      	adds	r3, #1
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	e7ec      	b.n	80031da <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4413      	add	r3, r2
 8003206:	3b01      	subs	r3, #1
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	4413      	add	r3, r2
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	3b01      	subs	r3, #1
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	441a      	add	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4413      	add	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	6839      	ldr	r1, [r7, #0]
 800322e:	440a      	add	r2, r1
 8003230:	7812      	ldrb	r2, [r2, #0]
 8003232:	4313      	orrs	r3, r2
 8003234:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	3301      	adds	r3, #1
 800323c:	6839      	ldr	r1, [r7, #0]
 800323e:	440b      	add	r3, r1
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	4313      	orrs	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	3302      	adds	r3, #2
 800324e:	6839      	ldr	r1, [r7, #0]
 8003250:	440b      	add	r3, r1
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	041b      	lsls	r3, r3, #16
 8003256:	4313      	orrs	r3, r2
 8003258:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	3303      	adds	r3, #3
 8003260:	6839      	ldr	r1, [r7, #0]
 8003262:	440b      	add	r3, r1
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	061b      	lsls	r3, r3, #24
 8003268:	4313      	orrs	r3, r2
 800326a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	3304      	adds	r3, #4
 8003276:	61bb      	str	r3, [r7, #24]
     return offset;
 8003278:	69bb      	ldr	r3, [r7, #24]
    }
 800327a:	4618      	mov	r0, r3
 800327c:	3728      	adds	r7, #40	; 0x28
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	4b03      	ldr	r3, [pc, #12]	; (800329c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	0800db78 	.word	0x0800db78

080032a0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	0800db94 	.word	0x0800db94

080032bc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe ffcc 	bl	8002264 <_ZN3ros3MsgC1Ev>
 80032cc:	4a06      	ldr	r2, [pc, #24]	; (80032e8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	711a      	strb	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a04      	ldr	r2, [pc, #16]	; (80032ec <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80032dc:	609a      	str	r2, [r3, #8]
    {
    }
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	0800ddc4 	.word	0x0800ddc4
 80032ec:	0800db74 	.word	0x0800db74

080032f0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	4413      	add	r3, r2
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	7912      	ldrb	r2, [r2, #4]
 8003308:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	3301      	adds	r3, #1
 800330e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	4618      	mov	r0, r3
 8003316:	f7fc ff5b 	bl	80001d0 <strlen>
 800331a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	4413      	add	r3, r2
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fd8f 	bl	8003e48 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	3304      	adds	r3, #4
 800332e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	18d0      	adds	r0, r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	4619      	mov	r1, r3
 800333e:	f005 ff35 	bl	80091ac <memcpy>
      offset += length_msg;
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4413      	add	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
      return offset;
 800334a:	68fb      	ldr	r3, [r7, #12]
    }
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800335e:	2300      	movs	r3, #0
 8003360:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	4413      	add	r3, r2
 8003368:	781a      	ldrb	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	3301      	adds	r3, #1
 8003372:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	441a      	add	r2, r3
 800337a:	f107 030c 	add.w	r3, r7, #12
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f000 fd7f 	bl	8003e84 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	3304      	adds	r3, #4
 800338a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4413      	add	r3, r2
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	429a      	cmp	r2, r3
 800339a:	d20c      	bcs.n	80033b6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	441a      	add	r2, r3
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	6839      	ldr	r1, [r7, #0]
 80033a8:	440b      	add	r3, r1
 80033aa:	7812      	ldrb	r2, [r2, #0]
 80033ac:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	3301      	adds	r3, #1
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	e7ec      	b.n	8003390 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	3b01      	subs	r3, #1
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	4413      	add	r3, r2
 80033c2:	2200      	movs	r2, #0
 80033c4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	441a      	add	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4413      	add	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
     return offset;
 80033da:	693b      	ldr	r3, [r7, #16]
    }
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	0800dbb8 	.word	0x0800dbb8

08003400 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800340a:	4618      	mov	r0, r3
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	0800dbcc 	.word	0x0800dbcc

0800341c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe ff1c 	bl	8002264 <_ZN3ros3MsgC1Ev>
 800342c:	4a0c      	ldr	r2, [pc, #48]	; (8003460 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	605a      	str	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	611a      	str	r2, [r3, #16]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	619a      	str	r2, [r3, #24]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	61da      	str	r2, [r3, #28]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	0800ddac 	.word	0x0800ddac

08003464 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003464:	b580      	push	{r7, lr}
 8003466:	b08a      	sub	sp, #40	; 0x28
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6859      	ldr	r1, [r3, #4]
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	4413      	add	r3, r2
 800347c:	b2ca      	uxtb	r2, r1
 800347e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	0a19      	lsrs	r1, r3, #8
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	3301      	adds	r3, #1
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	4413      	add	r3, r2
 800348e:	b2ca      	uxtb	r2, r1
 8003490:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	0c19      	lsrs	r1, r3, #16
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	3302      	adds	r3, #2
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	4413      	add	r3, r2
 80034a0:	b2ca      	uxtb	r2, r1
 80034a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	0e19      	lsrs	r1, r3, #24
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	3303      	adds	r3, #3
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	4413      	add	r3, r2
 80034b2:	b2ca      	uxtb	r2, r1
 80034b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	3304      	adds	r3, #4
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80034bc:	2300      	movs	r3, #0
 80034be:	623b      	str	r3, [r7, #32]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	6a3a      	ldr	r2, [r7, #32]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d22b      	bcs.n	8003522 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80034d8:	6939      	ldr	r1, [r7, #16]
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	4413      	add	r3, r2
 80034e0:	b2ca      	uxtb	r2, r1
 80034e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	0a19      	lsrs	r1, r3, #8
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	3301      	adds	r3, #1
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	4413      	add	r3, r2
 80034f0:	b2ca      	uxtb	r2, r1
 80034f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	0c19      	lsrs	r1, r3, #16
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	3302      	adds	r3, #2
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	4413      	add	r3, r2
 8003500:	b2ca      	uxtb	r2, r1
 8003502:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	0e19      	lsrs	r1, r3, #24
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	3303      	adds	r3, #3
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	4413      	add	r3, r2
 8003510:	b2ca      	uxtb	r2, r1
 8003512:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	3304      	adds	r3, #4
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	3301      	adds	r3, #1
 800351e:	623b      	str	r3, [r7, #32]
 8003520:	e7ce      	b.n	80034c0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6919      	ldr	r1, [r3, #16]
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	4413      	add	r3, r2
 800352c:	b2ca      	uxtb	r2, r1
 800352e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	0a19      	lsrs	r1, r3, #8
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	3301      	adds	r3, #1
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	4413      	add	r3, r2
 800353e:	b2ca      	uxtb	r2, r1
 8003540:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	0c19      	lsrs	r1, r3, #16
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	3302      	adds	r3, #2
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	4413      	add	r3, r2
 8003550:	b2ca      	uxtb	r2, r1
 8003552:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	0e19      	lsrs	r1, r3, #24
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	3303      	adds	r3, #3
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	4413      	add	r3, r2
 8003562:	b2ca      	uxtb	r2, r1
 8003564:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	3304      	adds	r3, #4
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	429a      	cmp	r2, r3
 8003578:	d22b      	bcs.n	80035d2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8003588:	68f9      	ldr	r1, [r7, #12]
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	4413      	add	r3, r2
 8003590:	b2ca      	uxtb	r2, r1
 8003592:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	0a19      	lsrs	r1, r3, #8
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	3301      	adds	r3, #1
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	4413      	add	r3, r2
 80035a0:	b2ca      	uxtb	r2, r1
 80035a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	0c19      	lsrs	r1, r3, #16
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	3302      	adds	r3, #2
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	4413      	add	r3, r2
 80035b0:	b2ca      	uxtb	r2, r1
 80035b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	0e19      	lsrs	r1, r3, #24
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	3303      	adds	r3, #3
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	4413      	add	r3, r2
 80035c0:	b2ca      	uxtb	r2, r1
 80035c2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	3304      	adds	r3, #4
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	3301      	adds	r3, #1
 80035ce:	61fb      	str	r3, [r7, #28]
 80035d0:	e7ce      	b.n	8003570 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69d9      	ldr	r1, [r3, #28]
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	4413      	add	r3, r2
 80035dc:	b2ca      	uxtb	r2, r1
 80035de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	0a19      	lsrs	r1, r3, #8
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	3301      	adds	r3, #1
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	4413      	add	r3, r2
 80035ee:	b2ca      	uxtb	r2, r1
 80035f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	0c19      	lsrs	r1, r3, #16
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	3302      	adds	r3, #2
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	4413      	add	r3, r2
 8003600:	b2ca      	uxtb	r2, r1
 8003602:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	0e19      	lsrs	r1, r3, #24
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	3303      	adds	r3, #3
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	4413      	add	r3, r2
 8003612:	b2ca      	uxtb	r2, r1
 8003614:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	3304      	adds	r3, #4
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800361c:	2300      	movs	r3, #0
 800361e:	61bb      	str	r3, [r7, #24]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	429a      	cmp	r2, r3
 8003628:	d228      	bcs.n	800367c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fc fdca 	bl	80001d0 <strlen>
 800363c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	4413      	add	r3, r2
 8003644:	6979      	ldr	r1, [r7, #20]
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fbfe 	bl	8003e48 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	3304      	adds	r3, #4
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	18d0      	adds	r0, r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4619      	mov	r1, r3
 8003668:	f005 fda0 	bl	80091ac <memcpy>
      offset += length_stringsi;
 800366c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	4413      	add	r3, r2
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	3301      	adds	r3, #1
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	e7d1      	b.n	8003620 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800367e:	4618      	mov	r0, r3
 8003680:	3728      	adds	r7, #40	; 0x28
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003686:	b580      	push	{r7, lr}
 8003688:	b08e      	sub	sp, #56	; 0x38
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	4413      	add	r3, r2
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800369e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a0:	3301      	adds	r3, #1
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	4413      	add	r3, r2
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	6a3a      	ldr	r2, [r7, #32]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80036b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b2:	3302      	adds	r3, #2
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	4413      	add	r3, r2
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	041b      	lsls	r3, r3, #16
 80036bc:	6a3a      	ldr	r2, [r7, #32]
 80036be:	4313      	orrs	r3, r2
 80036c0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80036c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c4:	3303      	adds	r3, #3
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	4413      	add	r3, r2
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	061b      	lsls	r3, r3, #24
 80036ce:	6a3a      	ldr	r2, [r7, #32]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80036d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d6:	3304      	adds	r3, #4
 80036d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	6a3a      	ldr	r2, [r7, #32]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d90a      	bls.n	80036fa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4619      	mov	r1, r3
 80036ee:	4610      	mov	r0, r2
 80036f0:	f006 fbec 	bl	8009ecc <realloc>
 80036f4:	4602      	mov	r2, r0
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a3a      	ldr	r2, [r7, #32]
 80036fe:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8003700:	2300      	movs	r3, #0
 8003702:	633b      	str	r3, [r7, #48]	; 0x30
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800370a:	429a      	cmp	r2, r3
 800370c:	d236      	bcs.n	800377c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003716:	6839      	ldr	r1, [r7, #0]
 8003718:	440a      	add	r2, r1
 800371a:	7812      	ldrb	r2, [r2, #0]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003724:	3301      	adds	r3, #1
 8003726:	6839      	ldr	r1, [r7, #0]
 8003728:	440b      	add	r3, r1
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	021b      	lsls	r3, r3, #8
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003736:	3302      	adds	r3, #2
 8003738:	6839      	ldr	r1, [r7, #0]
 800373a:	440b      	add	r3, r1
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	041b      	lsls	r3, r3, #16
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003748:	3303      	adds	r3, #3
 800374a:	6839      	ldr	r1, [r7, #0]
 800374c:	440b      	add	r3, r1
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	061b      	lsls	r3, r3, #24
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800375c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375e:	3304      	adds	r3, #4
 8003760:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	3208      	adds	r2, #8
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8003774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003776:	3301      	adds	r3, #1
 8003778:	633b      	str	r3, [r7, #48]	; 0x30
 800377a:	e7c3      	b.n	8003704 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800377c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	4413      	add	r3, r2
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003788:	3301      	adds	r3, #1
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	4413      	add	r3, r2
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	69fa      	ldr	r2, [r7, #28]
 8003794:	4313      	orrs	r3, r2
 8003796:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379a:	3302      	adds	r3, #2
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	4413      	add	r3, r2
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	041b      	lsls	r3, r3, #16
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80037aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ac:	3303      	adds	r3, #3
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	4413      	add	r3, r2
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	061b      	lsls	r3, r3, #24
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80037bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037be:	3304      	adds	r3, #4
 80037c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d90a      	bls.n	80037e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	699a      	ldr	r2, [r3, #24]
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4619      	mov	r1, r3
 80037d6:	4610      	mov	r0, r2
 80037d8:	f006 fb78 	bl	8009ecc <realloc>
 80037dc:	4602      	mov	r2, r0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69fa      	ldr	r2, [r7, #28]
 80037e6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80037e8:	2300      	movs	r3, #0
 80037ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d236      	bcs.n	8003864 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037fe:	6839      	ldr	r1, [r7, #0]
 8003800:	440a      	add	r2, r1
 8003802:	7812      	ldrb	r2, [r2, #0]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800380c:	3301      	adds	r3, #1
 800380e:	6839      	ldr	r1, [r7, #0]
 8003810:	440b      	add	r3, r1
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	4313      	orrs	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381e:	3302      	adds	r3, #2
 8003820:	6839      	ldr	r1, [r7, #0]
 8003822:	440b      	add	r3, r1
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	041b      	lsls	r3, r3, #16
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003830:	3303      	adds	r3, #3
 8003832:	6839      	ldr	r1, [r7, #0]
 8003834:	440b      	add	r3, r1
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	061b      	lsls	r3, r3, #24
 800383a:	4313      	orrs	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003846:	3304      	adds	r3, #4
 8003848:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699a      	ldr	r2, [r3, #24]
 800384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	3214      	adds	r2, #20
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385e:	3301      	adds	r3, #1
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003862:	e7c3      	b.n	80037ec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	4413      	add	r3, r2
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800386e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003870:	3301      	adds	r3, #1
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	4413      	add	r3, r2
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	021b      	lsls	r3, r3, #8
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4313      	orrs	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003882:	3302      	adds	r3, #2
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	4413      	add	r3, r2
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	041b      	lsls	r3, r3, #16
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4313      	orrs	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003894:	3303      	adds	r3, #3
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	4413      	add	r3, r2
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	061b      	lsls	r3, r3, #24
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80038a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a6:	3304      	adds	r3, #4
 80038a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d90a      	bls.n	80038ca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4619      	mov	r1, r3
 80038be:	4610      	mov	r0, r2
 80038c0:	f006 fb04 	bl	8009ecc <realloc>
 80038c4:	4602      	mov	r2, r0
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80038d0:	2300      	movs	r3, #0
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038da:	429a      	cmp	r2, r3
 80038dc:	d23f      	bcs.n	800395e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80038de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	441a      	add	r2, r3
 80038e4:	f107 030c 	add.w	r3, r7, #12
 80038e8:	4611      	mov	r1, r2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 faca 	bl	8003e84 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80038f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f2:	3304      	adds	r3, #4
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80038f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
 80038fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003902:	429a      	cmp	r2, r3
 8003904:	d20c      	bcs.n	8003920 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	441a      	add	r2, r3
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	3b01      	subs	r3, #1
 8003910:	6839      	ldr	r1, [r7, #0]
 8003912:	440b      	add	r3, r1
 8003914:	7812      	ldrb	r2, [r2, #0]
 8003916:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	3301      	adds	r3, #1
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
 800391e:	e7ec      	b.n	80038fa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8003920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4413      	add	r3, r2
 8003926:	3b01      	subs	r3, #1
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	4413      	add	r3, r2
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8003930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003932:	3b01      	subs	r3, #1
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	441a      	add	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800393c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4413      	add	r3, r2
 8003942:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	3220      	adds	r2, #32
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	3301      	adds	r3, #1
 800395a:	62bb      	str	r3, [r7, #40]	; 0x28
 800395c:	e7ba      	b.n	80038d4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800395e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003960:	4618      	mov	r0, r3
 8003962:	3738      	adds	r7, #56	; 0x38
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	4b03      	ldr	r3, [pc, #12]	; (8003980 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8003972:	4618      	mov	r0, r3
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	0800dce8 	.word	0x0800dce8

08003984 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	0800dbf0 	.word	0x0800dbf0

080039a0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
 80039ac:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	605a      	str	r2, [r3, #4]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	611a      	str	r2, [r3, #16]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b082      	sub	sp, #8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68d8      	ldr	r0, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6891      	ldr	r1, [r2, #8]
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	4798      	blx	r3
 80039ec:	4603      	mov	r3, r0
  };
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
  }
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
      data("")
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe fc22 	bl	8002264 <_ZN3ros3MsgC1Ev>
 8003a20:	4a05      	ldr	r2, [pc, #20]	; (8003a38 <_ZN8std_msgs6StringC1Ev+0x28>)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a04      	ldr	r2, [pc, #16]	; (8003a3c <_ZN8std_msgs6StringC1Ev+0x2c>)
 8003a2a:	605a      	str	r2, [r3, #4]
    {
    }
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	0800dd68 	.word	0x0800dd68
 8003a3c:	0800db74 	.word	0x0800db74

08003a40 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fc fbbc 	bl	80001d0 <strlen>
 8003a58:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	4413      	add	r3, r2
 8003a60:	68b9      	ldr	r1, [r7, #8]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 f9f0 	bl	8003e48 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	18d0      	adds	r0, r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	f005 fb96 	bl	80091ac <memcpy>
      offset += length_data;
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	4413      	add	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]
      return offset;
 8003a88:	68fb      	ldr	r3, [r7, #12]
    }
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b086      	sub	sp, #24
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	441a      	add	r2, r3
 8003aa6:	f107 030c 	add.w	r3, r7, #12
 8003aaa:	4611      	mov	r1, r2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 f9e9 	bl	8003e84 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d20c      	bcs.n	8003ae2 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	441a      	add	r2, r3
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	6839      	ldr	r1, [r7, #0]
 8003ad4:	440b      	add	r3, r1
 8003ad6:	7812      	ldrb	r2, [r2, #0]
 8003ad8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	3301      	adds	r3, #1
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	e7ec      	b.n	8003abc <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	4413      	add	r3, r2
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	441a      	add	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4413      	add	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
     return offset;
 8003b06:	693b      	ldr	r3, [r7, #16]
    }
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	4b03      	ldr	r3, [pc, #12]	; (8003b28 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	0800dc14 	.word	0x0800dc14

08003b2c <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	4b03      	ldr	r3, [pc, #12]	; (8003b44 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8003b36:	4618      	mov	r0, r3
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	0800dc24 	.word	0x0800dc24

08003b48 <_ZN8std_msgs5Int16C1Ev>:
  {
    public:
      typedef int16_t _data_type;
      _data_type data;

    Int16():
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
      data(0)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fb86 	bl	8002264 <_ZN3ros3MsgC1Ev>
 8003b58:	4a05      	ldr	r2, [pc, #20]	; (8003b70 <_ZN8std_msgs5Int16C1Ev+0x28>)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	809a      	strh	r2, [r3, #4]
    {
    }
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	0800dd50 	.word	0x0800dd50

08003b74 <_ZNK8std_msgs5Int169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.real = this->data;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003b88:	813b      	strh	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003b8a:	8939      	ldrh	r1, [r7, #8]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	4413      	add	r3, r2
 8003b92:	b2ca      	uxtb	r2, r1
 8003b94:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8003b96:	893b      	ldrh	r3, [r7, #8]
 8003b98:	0a1b      	lsrs	r3, r3, #8
 8003b9a:	b299      	uxth	r1, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	b2ca      	uxtb	r2, r1
 8003ba6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	3302      	adds	r3, #2
 8003bac:	60fb      	str	r3, [r7, #12]
      return offset;
 8003bae:	68fb      	ldr	r3, [r7, #12]
    }
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <_ZN8std_msgs5Int1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.base = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003bce:	893a      	ldrh	r2, [r7, #8]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6839      	ldr	r1, [r7, #0]
 8003bd4:	440b      	add	r3, r1
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003be0:	893b      	ldrh	r3, [r7, #8]
 8003be2:	b21a      	sxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3301      	adds	r3, #1
 8003be8:	6839      	ldr	r1, [r7, #0]
 8003bea:	440b      	add	r3, r1
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	021b      	lsls	r3, r3, #8
 8003bf0:	b21b      	sxth	r3, r3
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	b21b      	sxth	r3, r3
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	813b      	strh	r3, [r7, #8]
      this->data = u_data.real;
 8003bfa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3302      	adds	r3, #2
 8003c06:	60fb      	str	r3, [r7, #12]
     return offset;
 8003c08:	68fb      	ldr	r3, [r7, #12]
    }
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <_ZN8std_msgs5Int167getTypeEv>:

    const char * getType(){ return "std_msgs/Int16"; };
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <_ZN8std_msgs5Int167getTypeEv+0x18>)
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	0800dc48 	.word	0x0800dc48

08003c34 <_ZN8std_msgs5Int166getMD5Ev>:
    const char * getMD5(){ return "8524586e34fbd7cb1c08c5f5f1ca0e57"; };
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	4b03      	ldr	r3, [pc, #12]	; (8003c4c <_ZN8std_msgs5Int166getMD5Ev+0x18>)
 8003c3e:	4618      	mov	r0, r3
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	0800dc58 	.word	0x0800dc58

08003c50 <setup>:

//Create a subscriber node to receive stop signal
ros::Subscriber<std_msgs::Int16> stop_sub("stop", &stop_cb);

void setup(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  nh.initNode();
 8003c54:	480c      	ldr	r0, [pc, #48]	; (8003c88 <setup+0x38>)
 8003c56:	f000 fa21 	bl	800409c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 8003c5a:	490c      	ldr	r1, [pc, #48]	; (8003c8c <setup+0x3c>)
 8003c5c:	480a      	ldr	r0, [pc, #40]	; (8003c88 <setup+0x38>)
 8003c5e:	f000 fa3a 	bl	80040d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(pid_pub);
 8003c62:	490b      	ldr	r1, [pc, #44]	; (8003c90 <setup+0x40>)
 8003c64:	4808      	ldr	r0, [pc, #32]	; (8003c88 <setup+0x38>)
 8003c66:	f000 fa36 	bl	80040d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  //nh.advertise(mpu_pub);
  nh.subscribe(vel_sub);
 8003c6a:	490a      	ldr	r1, [pc, #40]	; (8003c94 <setup+0x44>)
 8003c6c:	4806      	ldr	r0, [pc, #24]	; (8003c88 <setup+0x38>)
 8003c6e:	f000 fa60 	bl	8004132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN10custom_msg17encoder_input_msgEvEEEEbRT_>
  nh.subscribe(pid_ctrl_sub);
 8003c72:	4909      	ldr	r1, [pc, #36]	; (8003c98 <setup+0x48>)
 8003c74:	4804      	ldr	r0, [pc, #16]	; (8003c88 <setup+0x38>)
 8003c76:	f000 fa5c 	bl	8004132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN10custom_msg17encoder_input_msgEvEEEEbRT_>
  nh.subscribe(stop_sub);
 8003c7a:	4908      	ldr	r1, [pc, #32]	; (8003c9c <setup+0x4c>)
 8003c7c:	4802      	ldr	r0, [pc, #8]	; (8003c88 <setup+0x38>)
 8003c7e:	f000 fa85 	bl	800418c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_>
}
 8003c82:	bf00      	nop
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20001544 	.word	0x20001544
 8003c8c:	20001a7c 	.word	0x20001a7c
 8003c90:	20001aac 	.word	0x20001aac
 8003c94:	20001ac0 	.word	0x20001ac0
 8003c98:	20001af8 	.word	0x20001af8
 8003c9c:	20001b30 	.word	0x20001b30

08003ca0 <loop>:

void loop(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
	str_msg.data = hello;
 8003ca4:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <loop+0x5c>)
 8003ca6:	4a16      	ldr	r2, [pc, #88]	; (8003d00 <loop+0x60>)
 8003ca8:	605a      	str	r2, [r3, #4]

	pid_msg.output_controller_m1 = m1.u;
 8003caa:	4b16      	ldr	r3, [pc, #88]	; (8003d04 <loop+0x64>)
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	4a16      	ldr	r2, [pc, #88]	; (8003d08 <loop+0x68>)
 8003cb0:	6093      	str	r3, [r2, #8]
	pid_msg.output_rpm_m1 = m1.v;
 8003cb2:	4b14      	ldr	r3, [pc, #80]	; (8003d04 <loop+0x64>)
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	4a14      	ldr	r2, [pc, #80]	; (8003d08 <loop+0x68>)
 8003cb8:	6053      	str	r3, [r2, #4]
	pid_msg.output_controller_m2 = m2.u;
 8003cba:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <loop+0x6c>)
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	4a12      	ldr	r2, [pc, #72]	; (8003d08 <loop+0x68>)
 8003cc0:	6153      	str	r3, [r2, #20]
	pid_msg.output_rpm_m2 = m2.v;
 8003cc2:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <loop+0x6c>)
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	4a10      	ldr	r2, [pc, #64]	; (8003d08 <loop+0x68>)
 8003cc8:	6113      	str	r3, [r2, #16]
	pid_msg.error_m1 = m1.e;
 8003cca:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <loop+0x64>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	4a0e      	ldr	r2, [pc, #56]	; (8003d08 <loop+0x68>)
 8003cd0:	60d3      	str	r3, [r2, #12]
	pid_msg.error_m2 = m2.e;
 8003cd2:	4b0e      	ldr	r3, [pc, #56]	; (8003d0c <loop+0x6c>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4a0c      	ldr	r2, [pc, #48]	; (8003d08 <loop+0x68>)
 8003cd8:	6193      	str	r3, [r2, #24]

//	mpu_msg.roll = -attitude.r;
//	mpu_msg.pitch = attitude.p;
//	mpu_msg.yaw = attitude.y;

	chatter.publish(&str_msg);
 8003cda:	4908      	ldr	r1, [pc, #32]	; (8003cfc <loop+0x5c>)
 8003cdc:	480c      	ldr	r0, [pc, #48]	; (8003d10 <loop+0x70>)
 8003cde:	f7ff fe76 	bl	80039ce <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	pid_pub.publish(&pid_msg);
 8003ce2:	4909      	ldr	r1, [pc, #36]	; (8003d08 <loop+0x68>)
 8003ce4:	480b      	ldr	r0, [pc, #44]	; (8003d14 <loop+0x74>)
 8003ce6:	f7ff fe72 	bl	80039ce <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	//mpu_pub.publish(&mpu_msg);?

	nh.spinOnce();
 8003cea:	480b      	ldr	r0, [pc, #44]	; (8003d18 <loop+0x78>)
 8003cec:	f000 fa7b 	bl	80041e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	HAL_Delay(50);
 8003cf0:	2032      	movs	r0, #50	; 0x32
 8003cf2:	f001 fb8d 	bl	8005410 <HAL_Delay>
}
 8003cf6:	bf00      	nop
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20001a74 	.word	0x20001a74
 8003d00:	20000004 	.word	0x20000004
 8003d04:	200014b4 	.word	0x200014b4
 8003d08:	20001a90 	.word	0x20001a90
 8003d0c:	200014d8 	.word	0x200014d8
 8003d10:	20001a7c 	.word	0x20001a7c
 8003d14:	20001aac 	.word	0x20001aac
 8003d18:	20001544 	.word	0x20001544

08003d1c <_Z6vel_cbRKN10custom_msg17encoder_input_msgE>:

void vel_cb(const custom_msg::encoder_input_msg& msg){
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	Setpoint_value_m1 = msg.input_setpoint_m1;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	4a11      	ldr	r2, [pc, #68]	; (8003d70 <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x54>)
 8003d2a:	6013      	str	r3, [r2, #0]
	Kp_m1 = msg.input_Kp_m1;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	4a10      	ldr	r2, [pc, #64]	; (8003d74 <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x58>)
 8003d32:	6013      	str	r3, [r2, #0]
	Ki_m1 = msg.input_Ki_m1;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	4a0f      	ldr	r2, [pc, #60]	; (8003d78 <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x5c>)
 8003d3a:	6013      	str	r3, [r2, #0]
	Kd_m1 = msg.input_Kd_m1;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	4a0e      	ldr	r2, [pc, #56]	; (8003d7c <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x60>)
 8003d42:	6013      	str	r3, [r2, #0]
	Setpoint_value_m2 = msg.input_setpoint_m2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	4a0d      	ldr	r2, [pc, #52]	; (8003d80 <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x64>)
 8003d4a:	6013      	str	r3, [r2, #0]
	Kp_m2 = msg.input_Kp_m2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	4a0c      	ldr	r2, [pc, #48]	; (8003d84 <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x68>)
 8003d52:	6013      	str	r3, [r2, #0]
	Ki_m2 = msg.input_Ki_m2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	4a0b      	ldr	r2, [pc, #44]	; (8003d88 <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x6c>)
 8003d5a:	6013      	str	r3, [r2, #0]
	Kd_m2 = msg.input_Kd_m2;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	4a0a      	ldr	r2, [pc, #40]	; (8003d8c <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x70>)
 8003d62:	6013      	str	r3, [r2, #0]
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	20001490 	.word	0x20001490
 8003d74:	20001498 	.word	0x20001498
 8003d78:	200014a0 	.word	0x200014a0
 8003d7c:	200014a8 	.word	0x200014a8
 8003d80:	20001494 	.word	0x20001494
 8003d84:	2000149c 	.word	0x2000149c
 8003d88:	200014a4 	.word	0x200014a4
 8003d8c:	200014ac 	.word	0x200014ac

08003d90 <_Z10control_cbRKN10custom_msg17encoder_input_msgE>:

void control_cb(const custom_msg::encoder_input_msg& msg){
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	Setpoint_value_m1 = msg.input_setpoint_m1;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4a11      	ldr	r2, [pc, #68]	; (8003de4 <_Z10control_cbRKN10custom_msg17encoder_input_msgE+0x54>)
 8003d9e:	6013      	str	r3, [r2, #0]
	Kp_m1 = msg.input_Kp_m1;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	4a10      	ldr	r2, [pc, #64]	; (8003de8 <_Z10control_cbRKN10custom_msg17encoder_input_msgE+0x58>)
 8003da6:	6013      	str	r3, [r2, #0]
	Ki_m1 = msg.input_Ki_m1;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	4a0f      	ldr	r2, [pc, #60]	; (8003dec <_Z10control_cbRKN10custom_msg17encoder_input_msgE+0x5c>)
 8003dae:	6013      	str	r3, [r2, #0]
	Kd_m1 = msg.input_Kd_m1;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	4a0e      	ldr	r2, [pc, #56]	; (8003df0 <_Z10control_cbRKN10custom_msg17encoder_input_msgE+0x60>)
 8003db6:	6013      	str	r3, [r2, #0]
	Setpoint_value_m2 = msg.input_setpoint_m2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	4a0d      	ldr	r2, [pc, #52]	; (8003df4 <_Z10control_cbRKN10custom_msg17encoder_input_msgE+0x64>)
 8003dbe:	6013      	str	r3, [r2, #0]
	Kp_m2 = msg.input_Kp_m2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	4a0c      	ldr	r2, [pc, #48]	; (8003df8 <_Z10control_cbRKN10custom_msg17encoder_input_msgE+0x68>)
 8003dc6:	6013      	str	r3, [r2, #0]
	Ki_m2 = msg.input_Ki_m2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	4a0b      	ldr	r2, [pc, #44]	; (8003dfc <_Z10control_cbRKN10custom_msg17encoder_input_msgE+0x6c>)
 8003dce:	6013      	str	r3, [r2, #0]
	Kd_m2 = msg.input_Kd_m2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <_Z10control_cbRKN10custom_msg17encoder_input_msgE+0x70>)
 8003dd6:	6013      	str	r3, [r2, #0]
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	20001490 	.word	0x20001490
 8003de8:	20001498 	.word	0x20001498
 8003dec:	200014a0 	.word	0x200014a0
 8003df0:	200014a8 	.word	0x200014a8
 8003df4:	20001494 	.word	0x20001494
 8003df8:	2000149c 	.word	0x2000149c
 8003dfc:	200014a4 	.word	0x200014a4
 8003e00:	200014ac 	.word	0x200014ac

08003e04 <_Z7stop_cbRKN8std_msgs5Int16E>:

void stop_cb(const std_msgs::Int16& msg){
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
	stop = msg.data;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003e12:	461a      	mov	r2, r3
 8003e14:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <_Z7stop_cbRKN8std_msgs5Int16E+0x38>)
 8003e16:	601a      	str	r2, [r3, #0]
	if (stop == 1)
 8003e18:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <_Z7stop_cbRKN8std_msgs5Int16E+0x38>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d107      	bne.n	8003e30 <_Z7stop_cbRKN8std_msgs5Int16E+0x2c>
	{
		Setpoint_value_m1 = 0;
 8003e20:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <_Z7stop_cbRKN8std_msgs5Int16E+0x3c>)
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
		Setpoint_value_m2 = 0;
 8003e28:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <_Z7stop_cbRKN8std_msgs5Int16E+0x40>)
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
	}
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	20001540 	.word	0x20001540
 8003e40:	20001490 	.word	0x20001490
 8003e44:	20001494 	.word	0x20001494

08003e48 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d80d      	bhi.n	8003e78 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	fa22 f103 	lsr.w	r1, r2, r3
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	b2ca      	uxtb	r2, r1
 8003e6e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3301      	adds	r3, #1
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	e7ee      	b.n	8003e56 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d811      	bhi.n	8003ec2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6839      	ldr	r1, [r7, #0]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	440a      	add	r2, r1
 8003ea8:	7812      	ldrb	r2, [r2, #0]
 8003eaa:	4611      	mov	r1, r2
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	00d2      	lsls	r2, r2, #3
 8003eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	e7ea      	b.n	8003e98 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003ec2:	bf00      	nop
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
	...

08003ed0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	4a04      	ldr	r2, [pc, #16]	; (8003eec <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	0800dd98 	.word	0x0800dd98

08003ef0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff ffe8 	bl	8003ed0 <_ZN3ros15NodeHandleBase_C1Ev>
 8003f00:	4a39      	ldr	r2, [pc, #228]	; (8003fe8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xf8>)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fe feca 	bl	8002ca4 <_ZN13STM32HardwareC1Ev>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fa7c 	bl	800341c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2b18      	cmp	r3, #24
 8003f2c:	d80a      	bhi.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003f36:	2100      	movs	r1, #0
 8003f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	e7f1      	b.n	8003f28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003f44:	2300      	movs	r3, #0
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b18      	cmp	r3, #24
 8003f4c:	d80b      	bhi.n	8003f66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	3301      	adds	r3, #1
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	e7f0      	b.n	8003f48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f70:	d209      	bcs.n	8003f86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x96>
      message_in[i] = 0;
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4413      	add	r3, r2
 8003f78:	3318      	adds	r3, #24
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3301      	adds	r3, #1
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	e7f1      	b.n	8003f6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003f86:	2300      	movs	r3, #0
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f90:	d20a      	bcs.n	8003fa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xb8>
      message_out[i] = 0;
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	e7f0      	b.n	8003f8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    req_param_resp.floats_length = 0;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    req_param_resp.floats = NULL;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    req_param_resp.ints_length = 0;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514

    spin_timeout_ = 0;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	615a      	str	r2, [r3, #20]
  }
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	0800dd3c 	.word	0x0800dd3c

08003fec <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	4a04      	ldr	r2, [pc, #16]	; (8004008 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	0800dd80 	.word	0x0800dd80

0800400c <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff ffe5 	bl	8003fec <_ZN3ros11Subscriber_C1Ev>
 8004022:	4a0b      	ldr	r2, [pc, #44]	; (8004050 <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	330c      	adds	r3, #12
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe f929 	bl	8002284 <_ZN10custom_msg17encoder_input_msgC1Ev>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	631a      	str	r2, [r3, #48]	; 0x30
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	609a      	str	r2, [r3, #8]
  };
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	0800dd24 	.word	0x0800dd24

08004054 <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff ffc1 	bl	8003fec <_ZN3ros11Subscriber_C1Ev>
 800406a:	4a0b      	ldr	r2, [pc, #44]	; (8004098 <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei+0x44>)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	330c      	adds	r3, #12
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff fd67 	bl	8003b48 <_ZN8std_msgs5Int16C1Ev>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	615a      	str	r2, [r3, #20]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	609a      	str	r2, [r3, #8]
  };
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	0800dd0c 	.word	0x0800dd0c

0800409c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fe fe0b 	bl	8002cc4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80040d6:	b480      	push	{r7}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b18      	cmp	r3, #24
 80040e8:	dc1c      	bgt.n	8004124 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4e>
    {
      if (publishers[i] == 0) // empty slot
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80040f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d110      	bne.n	800411c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004102:	6839      	ldr	r1, [r7, #0]
 8004104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	60da      	str	r2, [r3, #12]
        return true;
 8004118:	2301      	movs	r3, #1
 800411a:	e004      	b.n	8004126 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	3301      	adds	r3, #1
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	e7df      	b.n	80040e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8004124:	2300      	movs	r3, #0
  }
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN10custom_msg17encoder_input_msgEvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8004132:	b480      	push	{r7}
 8004134:	b085      	sub	sp, #20
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b18      	cmp	r3, #24
 8004144:	dc1b      	bgt.n	800417e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN10custom_msg17encoder_input_msgEvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10e      	bne.n	8004176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN10custom_msg17encoder_input_msgEvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	605a      	str	r2, [r3, #4]
        return true;
 8004172:	2301      	movs	r3, #1
 8004174:	e004      	b.n	8004180 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN10custom_msg17encoder_input_msgEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3301      	adds	r3, #1
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	e7e0      	b.n	8004140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN10custom_msg17encoder_input_msgEvEEEEbRT_+0xe>
      }
    }
    return false;
 800417e:	2300      	movs	r3, #0
  }
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2b18      	cmp	r3, #24
 800419e:	dc1b      	bgt.n	80041d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_+0x4c>
      if (subscribers[i] == 0) // empty slot
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10e      	bne.n	80041d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_+0x44>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	605a      	str	r2, [r3, #4]
        return true;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e004      	b.n	80041da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3301      	adds	r3, #1
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	e7e0      	b.n	800419a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_+0xe>
    return false;
 80041d8:	2300      	movs	r3, #0
  }
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3304      	adds	r3, #4
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe fd92 	bl	8002d1c <_ZN13STM32Hardware4timeEv>
 80041f8:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004208:	4293      	cmp	r3, r2
 800420a:	d903      	bls.n	8004214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	429a      	cmp	r2, r3
 8004228:	d903      	bls.n	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d013      	beq.n	8004262 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3304      	adds	r3, #4
 800423e:	4618      	mov	r0, r3
 8004240:	f7fe fd6c 	bl	8002d1c <_ZN13STM32Hardware4timeEv>
 8004244:	4602      	mov	r2, r0
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	1ad2      	subs	r2, r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	429a      	cmp	r2, r3
 8004250:	bf8c      	ite	hi
 8004252:	2301      	movhi	r3, #1
 8004254:	2300      	movls	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 800425c:	f06f 0301 	mvn.w	r3, #1
 8004260:	e190      	b.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	3304      	adds	r3, #4
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe fd39 	bl	8002cde <_ZN13STM32Hardware4readEv>
 800426c:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f2c0 8170 	blt.w	8004556 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>
      checksum_ += data;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	441a      	add	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800428c:	2b07      	cmp	r3, #7
 800428e:	d11d      	bne.n	80042cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004296:	1c59      	adds	r1, r3, #1
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	b2d1      	uxtb	r1, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4413      	add	r3, r2
 80042a6:	460a      	mov	r2, r1
 80042a8:	761a      	strb	r2, [r3, #24]
        bytes_--;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80042b0:	1e5a      	subs	r2, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1b7      	bne.n	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2208      	movs	r2, #8
 80042c6:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80042ca:	e7b2      	b.n	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d128      	bne.n	8004328 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2bff      	cmp	r3, #255	; 0xff
 80042da:	d10d      	bne.n	80042f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f103 0214 	add.w	r2, r3, #20
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 80042f6:	e79c      	b.n	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3304      	adds	r3, #4
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fe fd0d 	bl	8002d1c <_ZN13STM32Hardware4timeEv>
 8004302:	4602      	mov	r2, r0
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	f241 3288 	movw	r2, #5000	; 0x1388
 800430c:	4293      	cmp	r3, r2
 800430e:	bf8c      	ite	hi
 8004310:	2301      	movhi	r3, #1
 8004312:	2300      	movls	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d08b      	beq.n	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 8004322:	f06f 0301 	mvn.w	r3, #1
 8004326:	e12d      	b.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800432e:	2b01      	cmp	r3, #1
 8004330:	d118      	bne.n	8004364 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2bfe      	cmp	r3, #254	; 0xfe
 8004336:	d107      	bne.n	8004348 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004346:	e774      	b.n	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004356:	2b00      	cmp	r3, #0
 8004358:	f47f af6b 	bne.w	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f915 	bl	800458c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004362:	e766      	b.n	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800436a:	2b02      	cmp	r3, #2
 800436c:	d113      	bne.n	8004396 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b0>
        bytes_ = data;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8004394:	e74d      	b.n	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800439c:	2b03      	cmp	r3, #3
 800439e:	d110      	bne.n	80043c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	021b      	lsls	r3, r3, #8
 80043aa:	441a      	add	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80043c0:	e737      	b.n	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d116      	bne.n	80043fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80043d2:	425a      	negs	r2, r3
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	bf58      	it	pl
 80043da:	4253      	negpl	r3, r2
 80043dc:	2bff      	cmp	r3, #255	; 0xff
 80043de:	d107      	bne.n	80043f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20a>
          mode_++;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80043ee:	e720      	b.n	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80043f8:	e71b      	b.n	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004400:	2b05      	cmp	r3, #5
 8004402:	d10f      	bne.n	8004424 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
        topic_ = data;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8004422:	e706      	b.n	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800442a:	2b06      	cmp	r3, #6
 800442c:	d117      	bne.n	800445e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        topic_ += data << 8;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	441a      	add	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2207      	movs	r2, #7
 8004444:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800444e:	2b00      	cmp	r3, #0
 8004450:	f47f aeef 	bne.w	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2208      	movs	r2, #8
 8004458:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800445c:	e6e9      	b.n	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004464:	2b08      	cmp	r3, #8
 8004466:	f47f aee4 	bne.w	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004478:	425a      	negs	r2, r3
 800447a:	b2db      	uxtb	r3, r3
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	bf58      	it	pl
 8004480:	4253      	negpl	r3, r2
 8004482:	2bff      	cmp	r3, #255	; 0xff
 8004484:	f47f aed5 	bne.w	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d110      	bne.n	80044b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
            requestSyncTime();
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f87a 	bl	800458c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f894 	bl	80045c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 80044ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044b2:	e067      	b.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80044ba:	2b0a      	cmp	r3, #10
 80044bc:	d106      	bne.n	80044cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3318      	adds	r3, #24
 80044c2:	4619      	mov	r1, r3
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f95f 	bl	8004788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80044ca:	e6b2      	b.n	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80044d2:	2b06      	cmp	r3, #6
 80044d4:	d10d      	bne.n	80044f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3318      	adds	r3, #24
 80044e0:	4619      	mov	r1, r3
 80044e2:	4610      	mov	r0, r2
 80044e4:	f7ff f8cf 	bl	8003686 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 80044f0:	e69f      	b.n	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80044f8:	2b0b      	cmp	r3, #11
 80044fa:	d104      	bne.n	8004506 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x320>
            configured_ = false;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8004504:	e695      	b.n	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800450c:	3b64      	subs	r3, #100	; 0x64
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	f43f ae89 	beq.w	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004526:	3b64      	subs	r3, #100	; 0x64
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	6858      	ldr	r0, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800453a:	3b64      	subs	r3, #100	; 0x64
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	3218      	adds	r2, #24
 8004550:	4611      	mov	r1, r2
 8004552:	4798      	blx	r3
    while (true)
 8004554:	e66d      	b.n	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004556:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00f      	beq.n	8004582 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004570:	4293      	cmp	r3, r2
 8004572:	d906      	bls.n	8004582 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
      requestSyncTime();
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f809 	bl	800458c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 8004582:	2300      	movs	r3, #0
  }
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004594:	f107 030c 	add.w	r3, r7, #12
 8004598:	4618      	mov	r0, r3
 800459a:	f7fe fbdb 	bl	8002d54 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f107 020c 	add.w	r2, r7, #12
 80045a8:	210a      	movs	r1, #10
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	4798      	blx	r3
    rt_time = hardware_.time();
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3304      	adds	r3, #4
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fe fbb2 	bl	8002d1c <_ZN13STM32Hardware4timeEv>
 80045b8:	4602      	mov	r2, r0
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	609a      	str	r2, [r3, #8]
  }
 80045be:	bf00      	nop
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80045c6:	b590      	push	{r4, r7, lr}
 80045c8:	b08b      	sub	sp, #44	; 0x2c
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80045ce:	f107 030c 	add.w	r3, r7, #12
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fe fcae 	bl	8002f34 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80045d8:	2300      	movs	r3, #0
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	2b18      	cmp	r3, #24
 80045e0:	dc5b      	bgt.n	800469a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e6:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80045ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d04f      	beq.n	8004692 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f6:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80045fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	b29b      	uxth	r3, r3
 8004602:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004608:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800460c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004618:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800461c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004620:	6859      	ldr	r1, [r3, #4]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004626:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800462a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3308      	adds	r3, #8
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4608      	mov	r0, r1
 8004638:	4798      	blx	r3
 800463a:	4603      	mov	r3, r0
 800463c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004642:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800464a:	6859      	ldr	r1, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004650:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	330c      	adds	r3, #12
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4608      	mov	r0, r1
 8004662:	4798      	blx	r3
 8004664:	4603      	mov	r3, r0
 8004666:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800466c:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681c      	ldr	r4, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004678:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800467c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff f9b8 	bl	80039f6 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004686:	4601      	mov	r1, r0
 8004688:	f107 030c 	add.w	r3, r7, #12
 800468c:	461a      	mov	r2, r3
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	3301      	adds	r3, #1
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
 8004698:	e7a0      	b.n	80045dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800469a:	2300      	movs	r3, #0
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	2b18      	cmp	r3, #24
 80046a2:	dc68      	bgt.n	8004776 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d05b      	beq.n	800476e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	6859      	ldr	r1, [r3, #4]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3308      	adds	r3, #8
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4608      	mov	r0, r1
 8004700:	4798      	blx	r3
 8004702:	4603      	mov	r3, r0
 8004704:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	6859      	ldr	r1, [r3, #4]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	330c      	adds	r3, #12
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4608      	mov	r0, r1
 800472a:	4798      	blx	r3
 800472c:	4603      	mov	r3, r0
 800472e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004734:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681c      	ldr	r4, [r3, #0]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	6859      	ldr	r1, [r3, #4]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3304      	adds	r3, #4
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4608      	mov	r0, r1
 8004760:	4798      	blx	r3
 8004762:	4601      	mov	r1, r0
 8004764:	f107 030c 	add.w	r3, r7, #12
 8004768:	461a      	mov	r2, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	3301      	adds	r3, #1
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
 8004774:	e793      	b.n	800469e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 800477e:	bf00      	nop
 8004780:	372c      	adds	r7, #44	; 0x2c
 8004782:	46bd      	mov	sp, r7
 8004784:	bd90      	pop	{r4, r7, pc}
	...

08004788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004792:	f107 0308 	add.w	r3, r7, #8
 8004796:	4618      	mov	r0, r3
 8004798:	f7fe fadc 	bl	8002d54 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fe fabb 	bl	8002d1c <_ZN13STM32Hardware4timeEv>
 80047a6:	4602      	mov	r2, r0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80047b0:	f107 0308 	add.w	r3, r7, #8
 80047b4:	6839      	ldr	r1, [r7, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fe fb3c 	bl	8002e34 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	4914      	ldr	r1, [pc, #80]	; (8004814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 80047c2:	fba1 1303 	umull	r1, r3, r1, r3
 80047c6:	099b      	lsrs	r3, r3, #6
 80047c8:	4413      	add	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80047cc:	6939      	ldr	r1, [r7, #16]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4b10      	ldr	r3, [pc, #64]	; (8004814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 80047d2:	fba3 0302 	umull	r0, r3, r3, r2
 80047d6:	099b      	lsrs	r3, r3, #6
 80047d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047dc:	fb00 f303 	mul.w	r3, r0, r3
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	4a0d      	ldr	r2, [pc, #52]	; (8004818 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80047e4:	fb02 f303 	mul.w	r3, r2, r3
 80047e8:	440b      	add	r3, r1
 80047ea:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80047ec:	f107 0308 	add.w	r3, r7, #8
 80047f0:	3304      	adds	r3, #4
 80047f2:	4619      	mov	r1, r3
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f8a5 	bl	8004944 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3304      	adds	r3, #4
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fe fa8c 	bl	8002d1c <_ZN13STM32Hardware4timeEv>
 8004804:	4602      	mov	r2, r0
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 800480c:	bf00      	nop
 800480e:	3718      	adds	r7, #24
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	10624dd3 	.word	0x10624dd3
 8004818:	000f4240 	.word	0x000f4240

0800481c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b63      	cmp	r3, #99	; 0x63
 800482c:	dd09      	ble.n	8004842 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004834:	f083 0301 	eor.w	r3, r3, #1
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800483e:	2300      	movs	r3, #0
 8004840:	e079      	b.n	8004936 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	f502 7206 	add.w	r2, r2, #536	; 0x218
 800484e:	3207      	adds	r2, #7
 8004850:	4611      	mov	r1, r2
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	4798      	blx	r3
 8004856:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	22ff      	movs	r2, #255	; 0xff
 800485c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	22fe      	movs	r2, #254	; 0xfe
 8004864:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	b2da      	uxtb	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	b29b      	uxth	r3, r3
 8004876:	0a1b      	lsrs	r3, r3, #8
 8004878:	b29b      	uxth	r3, r3
 800487a:	b2da      	uxtb	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 800488e:	4413      	add	r3, r2
 8004890:	b2db      	uxtb	r3, r3
 8004892:	43db      	mvns	r3, r3
 8004894:	b2da      	uxtb	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	b21b      	sxth	r3, r3
 80048aa:	121b      	asrs	r3, r3, #8
 80048ac:	b21b      	sxth	r3, r3
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80048ba:	2305      	movs	r3, #5
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	3306      	adds	r3, #6
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	dc0d      	bgt.n	80048e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	4413      	add	r3, r2
 80048da:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	3301      	adds	r3, #1
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	e7ec      	b.n	80048be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	3307      	adds	r3, #7
 80048e8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	425a      	negs	r2, r3
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	bf58      	it	pl
 80048f4:	4253      	negpl	r3, r2
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	1c59      	adds	r1, r3, #1
 80048fc:	6179      	str	r1, [r7, #20]
 80048fe:	43d2      	mvns	r2, r2
 8004900:	b2d1      	uxtb	r1, r2
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4413      	add	r3, r2
 8004906:	460a      	mov	r2, r1
 8004908:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004912:	dc0a      	bgt.n	800492a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	1d18      	adds	r0, r3, #4
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	4619      	mov	r1, r3
 8004922:	f7fe f9ea 	bl	8002cfa <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	e005      	b.n	8004936 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800492a:	4905      	ldr	r1, [pc, #20]	; (8004940 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f847 	bl	80049c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004936:	4618      	mov	r0, r3
 8004938:	3720      	adds	r7, #32
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	0800dc7c 	.word	0x0800dc7c

08004944 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3304      	adds	r3, #4
 8004952:	4618      	mov	r0, r3
 8004954:	f7fe f9e2 	bl	8002d1c <_ZN13STM32Hardware4timeEv>
 8004958:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4914      	ldr	r1, [pc, #80]	; (80049b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 8004962:	fba1 1303 	umull	r1, r3, r1, r3
 8004966:	099b      	lsrs	r3, r3, #6
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	1e5a      	subs	r2, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	6859      	ldr	r1, [r3, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4b0f      	ldr	r3, [pc, #60]	; (80049b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 8004978:	fba3 0302 	umull	r0, r3, r3, r2
 800497c:	099b      	lsrs	r3, r3, #6
 800497e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004982:	fb00 f303 	mul.w	r3, r0, r3
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	4a0b      	ldr	r2, [pc, #44]	; (80049b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	1aca      	subs	r2, r1, r3
 8004990:	4b0a      	ldr	r3, [pc, #40]	; (80049bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8004992:	4413      	add	r3, r2
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f103 020c 	add.w	r2, r3, #12
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3310      	adds	r3, #16
 80049a2:	4619      	mov	r1, r3
 80049a4:	4610      	mov	r0, r2
 80049a6:	f000 fc6b 	bl	8005280 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	10624dd3 	.word	0x10624dd3
 80049b8:	000f4240 	.word	0x000f4240
 80049bc:	3b9aca00 	.word	0x3b9aca00

080049c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	2103      	movs	r1, #3
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f804 	bl	80049dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80049d4:	bf00      	nop
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	460b      	mov	r3, r1
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80049ea:	f107 0314 	add.w	r3, r7, #20
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe fc64 	bl	80032bc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80049f4:	7afb      	ldrb	r3, [r7, #11]
 80049f6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f107 0214 	add.w	r2, r7, #20
 8004a06:	2107      	movs	r1, #7
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	4798      	blx	r3
  }
 8004a0c:	bf00      	nop
 8004a0e:	3720      	adds	r7, #32
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <_Z41__static_initialization_and_destruction_0ii>:
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d12b      	bne.n	8004a7c <_Z41__static_initialization_and_destruction_0ii+0x68>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d126      	bne.n	8004a7c <_Z41__static_initialization_and_destruction_0ii+0x68>
ros::NodeHandle nh;
 8004a2e:	4815      	ldr	r0, [pc, #84]	; (8004a84 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004a30:	f7ff fa5e 	bl	8003ef0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8004a34:	4814      	ldr	r0, [pc, #80]	; (8004a88 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004a36:	f7fe ffeb 	bl	8003a10 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	4a12      	ldr	r2, [pc, #72]	; (8004a88 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004a3e:	4913      	ldr	r1, [pc, #76]	; (8004a8c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004a40:	4813      	ldr	r0, [pc, #76]	; (8004a90 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004a42:	f7fe ffad 	bl	80039a0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
custom_msg::encoder_output_msg pid_msg;
 8004a46:	4813      	ldr	r0, [pc, #76]	; (8004a94 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004a48:	f7fd fef6 	bl	8002838 <_ZN10custom_msg18encoder_output_msgC1Ev>
ros::Publisher pid_pub("PID_data", &pid_msg);
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	4a11      	ldr	r2, [pc, #68]	; (8004a94 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004a50:	4911      	ldr	r1, [pc, #68]	; (8004a98 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004a52:	4812      	ldr	r0, [pc, #72]	; (8004a9c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004a54:	f7fe ffa4 	bl	80039a0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<custom_msg::encoder_input_msg> vel_sub("cmd_vel", &vel_cb);
 8004a58:	2301      	movs	r3, #1
 8004a5a:	4a11      	ldr	r2, [pc, #68]	; (8004aa0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004a5c:	4911      	ldr	r1, [pc, #68]	; (8004aa4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004a5e:	4812      	ldr	r0, [pc, #72]	; (8004aa8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004a60:	f7ff fad4 	bl	800400c <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<custom_msg::encoder_input_msg> pid_ctrl_sub("PID_ctrl", &control_cb);
 8004a64:	2301      	movs	r3, #1
 8004a66:	4a11      	ldr	r2, [pc, #68]	; (8004aac <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004a68:	4911      	ldr	r1, [pc, #68]	; (8004ab0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004a6a:	4812      	ldr	r0, [pc, #72]	; (8004ab4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004a6c:	f7ff face 	bl	800400c <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int16> stop_sub("stop", &stop_cb);
 8004a70:	2301      	movs	r3, #1
 8004a72:	4a11      	ldr	r2, [pc, #68]	; (8004ab8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004a74:	4911      	ldr	r1, [pc, #68]	; (8004abc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004a76:	4812      	ldr	r0, [pc, #72]	; (8004ac0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8004a78:	f7ff faec 	bl	8004054 <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei>
}
 8004a7c:	bf00      	nop
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20001544 	.word	0x20001544
 8004a88:	20001a74 	.word	0x20001a74
 8004a8c:	0800dcb8 	.word	0x0800dcb8
 8004a90:	20001a7c 	.word	0x20001a7c
 8004a94:	20001a90 	.word	0x20001a90
 8004a98:	0800dcc0 	.word	0x0800dcc0
 8004a9c:	20001aac 	.word	0x20001aac
 8004aa0:	08003d1d 	.word	0x08003d1d
 8004aa4:	0800dccc 	.word	0x0800dccc
 8004aa8:	20001ac0 	.word	0x20001ac0
 8004aac:	08003d91 	.word	0x08003d91
 8004ab0:	0800dcd4 	.word	0x0800dcd4
 8004ab4:	20001af8 	.word	0x20001af8
 8004ab8:	08003e05 	.word	0x08003e05
 8004abc:	0800dce0 	.word	0x0800dce0
 8004ac0:	20001b30 	.word	0x20001b30

08004ac4 <_ZN3ros10SubscriberIN8std_msgs5Int16EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	6839      	ldr	r1, [r7, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff f871 	bl	8003bbc <_ZN8std_msgs5Int1611deserializeEPh>
    this->cb_(msg);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	320c      	adds	r2, #12
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	4798      	blx	r3
  }
 8004ae6:	bf00      	nop
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <_ZN3ros10SubscriberIN8std_msgs5Int16EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
  }
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <_ZN3ros10SubscriberIN8std_msgs5Int16EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b082      	sub	sp, #8
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	330c      	adds	r3, #12
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff f880 	bl	8003c18 <_ZN8std_msgs5Int167getTypeEv>
 8004b18:	4603      	mov	r3, r0
  }
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <_ZN3ros10SubscriberIN8std_msgs5Int16EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b082      	sub	sp, #8
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff f880 	bl	8003c34 <_ZN8std_msgs5Int166getMD5Ev>
 8004b34:	4603      	mov	r3, r0
  }
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	6839      	ldr	r1, [r7, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fd fcf8 	bl	8002544 <_ZN10custom_msg17encoder_input_msg11deserializeEPh>
    this->cb_(msg);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	320c      	adds	r2, #12
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	4798      	blx	r3
  }
 8004b60:	bf00      	nop
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	330c      	adds	r3, #12
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fd fe37 	bl	8002800 <_ZN10custom_msg17encoder_input_msg7getTypeEv>
 8004b92:	4603      	mov	r3, r0
  }
 8004b94:	4618      	mov	r0, r3
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	330c      	adds	r3, #12
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fd fe37 	bl	800281c <_ZN10custom_msg17encoder_input_msg6getMD5Ev>
 8004bae:	4603      	mov	r3, r0
  }
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
    return configured_;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <_GLOBAL__sub_I_nh>:
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004bda:	2001      	movs	r0, #1
 8004bdc:	f7ff ff1a 	bl	8004a14 <_Z41__static_initialization_and_destruction_0ii>
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	607b      	str	r3, [r7, #4]
 8004bee:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <HAL_MspInit+0x4c>)
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf2:	4a0f      	ldr	r2, [pc, #60]	; (8004c30 <HAL_MspInit+0x4c>)
 8004bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <HAL_MspInit+0x4c>)
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c02:	607b      	str	r3, [r7, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	603b      	str	r3, [r7, #0]
 8004c0a:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <HAL_MspInit+0x4c>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	4a08      	ldr	r2, [pc, #32]	; (8004c30 <HAL_MspInit+0x4c>)
 8004c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c14:	6413      	str	r3, [r2, #64]	; 0x40
 8004c16:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <HAL_MspInit+0x4c>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40023800 	.word	0x40023800

08004c34 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08c      	sub	sp, #48	; 0x30
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c3c:	f107 031c 	add.w	r3, r7, #28
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	609a      	str	r2, [r3, #8]
 8004c48:	60da      	str	r2, [r3, #12]
 8004c4a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a32      	ldr	r2, [pc, #200]	; (8004d1c <HAL_TIM_Encoder_MspInit+0xe8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d12d      	bne.n	8004cb2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c56:	2300      	movs	r3, #0
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	4b31      	ldr	r3, [pc, #196]	; (8004d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5e:	4a30      	ldr	r2, [pc, #192]	; (8004d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	6453      	str	r3, [r2, #68]	; 0x44
 8004c66:	4b2e      	ldr	r3, [pc, #184]	; (8004d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8004c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	61bb      	str	r3, [r7, #24]
 8004c70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c72:	2300      	movs	r3, #0
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	4b2a      	ldr	r3, [pc, #168]	; (8004d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	4a29      	ldr	r2, [pc, #164]	; (8004d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8004c7c:	f043 0310 	orr.w	r3, r3, #16
 8004c80:	6313      	str	r3, [r2, #48]	; 0x30
 8004c82:	4b27      	ldr	r3, [pc, #156]	; (8004d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	f003 0310 	and.w	r3, r3, #16
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8004c8e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c94:	2302      	movs	r3, #2
 8004c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ca4:	f107 031c 	add.w	r3, r7, #28
 8004ca8:	4619      	mov	r1, r3
 8004caa:	481e      	ldr	r0, [pc, #120]	; (8004d24 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004cac:	f001 f8e8 	bl	8005e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004cb0:	e030      	b.n	8004d14 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM3)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a1c      	ldr	r2, [pc, #112]	; (8004d28 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d12b      	bne.n	8004d14 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	613b      	str	r3, [r7, #16]
 8004cc0:	4b17      	ldr	r3, [pc, #92]	; (8004d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	4a16      	ldr	r2, [pc, #88]	; (8004d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8004cc6:	f043 0302 	orr.w	r3, r3, #2
 8004cca:	6413      	str	r3, [r2, #64]	; 0x40
 8004ccc:	4b14      	ldr	r3, [pc, #80]	; (8004d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8004cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce0:	4a0f      	ldr	r2, [pc, #60]	; (8004d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8004ce2:	f043 0304 	orr.w	r3, r3, #4
 8004ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ce8:	4b0d      	ldr	r3, [pc, #52]	; (8004d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004cf4:	23c0      	movs	r3, #192	; 0xc0
 8004cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d00:	2300      	movs	r3, #0
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004d04:	2302      	movs	r3, #2
 8004d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d08:	f107 031c 	add.w	r3, r7, #28
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4807      	ldr	r0, [pc, #28]	; (8004d2c <HAL_TIM_Encoder_MspInit+0xf8>)
 8004d10:	f001 f8b6 	bl	8005e80 <HAL_GPIO_Init>
}
 8004d14:	bf00      	nop
 8004d16:	3730      	adds	r7, #48	; 0x30
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40023800 	.word	0x40023800
 8004d24:	40021000 	.word	0x40021000
 8004d28:	40000400 	.word	0x40000400
 8004d2c:	40020800 	.word	0x40020800

08004d30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d40:	d10d      	bne.n	8004d5e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	4b09      	ldr	r3, [pc, #36]	; (8004d6c <HAL_TIM_PWM_MspInit+0x3c>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	4a08      	ldr	r2, [pc, #32]	; (8004d6c <HAL_TIM_PWM_MspInit+0x3c>)
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	6413      	str	r3, [r2, #64]	; 0x40
 8004d52:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <HAL_TIM_PWM_MspInit+0x3c>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004d5e:	bf00      	nop
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40023800 	.word	0x40023800

08004d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a1c      	ldr	r2, [pc, #112]	; (8004df0 <HAL_TIM_Base_MspInit+0x80>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d116      	bne.n	8004db0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	4b1b      	ldr	r3, [pc, #108]	; (8004df4 <HAL_TIM_Base_MspInit+0x84>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	4a1a      	ldr	r2, [pc, #104]	; (8004df4 <HAL_TIM_Base_MspInit+0x84>)
 8004d8c:	f043 0308 	orr.w	r3, r3, #8
 8004d90:	6413      	str	r3, [r2, #64]	; 0x40
 8004d92:	4b18      	ldr	r3, [pc, #96]	; (8004df4 <HAL_TIM_Base_MspInit+0x84>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2100      	movs	r1, #0
 8004da2:	2032      	movs	r0, #50	; 0x32
 8004da4:	f000 fc33 	bl	800560e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004da8:	2032      	movs	r0, #50	; 0x32
 8004daa:	f000 fc4c 	bl	8005646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004dae:	e01a      	b.n	8004de6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM14)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a10      	ldr	r2, [pc, #64]	; (8004df8 <HAL_TIM_Base_MspInit+0x88>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d115      	bne.n	8004de6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60bb      	str	r3, [r7, #8]
 8004dbe:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <HAL_TIM_Base_MspInit+0x84>)
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	4a0c      	ldr	r2, [pc, #48]	; (8004df4 <HAL_TIM_Base_MspInit+0x84>)
 8004dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dca:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <HAL_TIM_Base_MspInit+0x84>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	2100      	movs	r1, #0
 8004dda:	202d      	movs	r0, #45	; 0x2d
 8004ddc:	f000 fc17 	bl	800560e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004de0:	202d      	movs	r0, #45	; 0x2d
 8004de2:	f000 fc30 	bl	8005646 <HAL_NVIC_EnableIRQ>
}
 8004de6:	bf00      	nop
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40000c00 	.word	0x40000c00
 8004df4:	40023800 	.word	0x40023800
 8004df8:	40002000 	.word	0x40002000

08004dfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08a      	sub	sp, #40	; 0x28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e04:	f107 0314 	add.w	r3, r7, #20
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	609a      	str	r2, [r3, #8]
 8004e10:	60da      	str	r2, [r3, #12]
 8004e12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1c:	d13b      	bne.n	8004e96 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e1e:	2300      	movs	r3, #0
 8004e20:	613b      	str	r3, [r7, #16]
 8004e22:	4b1f      	ldr	r3, [pc, #124]	; (8004ea0 <HAL_TIM_MspPostInit+0xa4>)
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	4a1e      	ldr	r2, [pc, #120]	; (8004ea0 <HAL_TIM_MspPostInit+0xa4>)
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e2e:	4b1c      	ldr	r3, [pc, #112]	; (8004ea0 <HAL_TIM_MspPostInit+0xa4>)
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	4b18      	ldr	r3, [pc, #96]	; (8004ea0 <HAL_TIM_MspPostInit+0xa4>)
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	4a17      	ldr	r2, [pc, #92]	; (8004ea0 <HAL_TIM_MspPostInit+0xa4>)
 8004e44:	f043 0302 	orr.w	r3, r3, #2
 8004e48:	6313      	str	r3, [r2, #48]	; 0x30
 8004e4a:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <HAL_TIM_MspPostInit+0xa4>)
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004e56:	2301      	movs	r3, #1
 8004e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e62:	2300      	movs	r3, #0
 8004e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e66:	2301      	movs	r3, #1
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e6a:	f107 0314 	add.w	r3, r7, #20
 8004e6e:	4619      	mov	r1, r3
 8004e70:	480c      	ldr	r0, [pc, #48]	; (8004ea4 <HAL_TIM_MspPostInit+0xa8>)
 8004e72:	f001 f805 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004e76:	2308      	movs	r3, #8
 8004e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e82:	2300      	movs	r3, #0
 8004e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e86:	2301      	movs	r3, #1
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e8a:	f107 0314 	add.w	r3, r7, #20
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4805      	ldr	r0, [pc, #20]	; (8004ea8 <HAL_TIM_MspPostInit+0xac>)
 8004e92:	f000 fff5 	bl	8005e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004e96:	bf00      	nop
 8004e98:	3728      	adds	r7, #40	; 0x28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	40020000 	.word	0x40020000
 8004ea8:	40020400 	.word	0x40020400

08004eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08a      	sub	sp, #40	; 0x28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eb4:	f107 0314 	add.w	r3, r7, #20
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	605a      	str	r2, [r3, #4]
 8004ebe:	609a      	str	r2, [r3, #8]
 8004ec0:	60da      	str	r2, [r3, #12]
 8004ec2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a4c      	ldr	r2, [pc, #304]	; (8004ffc <HAL_UART_MspInit+0x150>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	f040 8092 	bne.w	8004ff4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	4b4a      	ldr	r3, [pc, #296]	; (8005000 <HAL_UART_MspInit+0x154>)
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	4a49      	ldr	r2, [pc, #292]	; (8005000 <HAL_UART_MspInit+0x154>)
 8004eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ede:	6413      	str	r3, [r2, #64]	; 0x40
 8004ee0:	4b47      	ldr	r3, [pc, #284]	; (8005000 <HAL_UART_MspInit+0x154>)
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	4b43      	ldr	r3, [pc, #268]	; (8005000 <HAL_UART_MspInit+0x154>)
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef4:	4a42      	ldr	r2, [pc, #264]	; (8005000 <HAL_UART_MspInit+0x154>)
 8004ef6:	f043 0308 	orr.w	r3, r3, #8
 8004efa:	6313      	str	r3, [r2, #48]	; 0x30
 8004efc:	4b40      	ldr	r3, [pc, #256]	; (8005000 <HAL_UART_MspInit+0x154>)
 8004efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004f08:	2360      	movs	r3, #96	; 0x60
 8004f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f10:	2300      	movs	r3, #0
 8004f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f14:	2303      	movs	r3, #3
 8004f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004f18:	2307      	movs	r3, #7
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f1c:	f107 0314 	add.w	r3, r7, #20
 8004f20:	4619      	mov	r1, r3
 8004f22:	4838      	ldr	r0, [pc, #224]	; (8005004 <HAL_UART_MspInit+0x158>)
 8004f24:	f000 ffac 	bl	8005e80 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004f28:	4b37      	ldr	r3, [pc, #220]	; (8005008 <HAL_UART_MspInit+0x15c>)
 8004f2a:	4a38      	ldr	r2, [pc, #224]	; (800500c <HAL_UART_MspInit+0x160>)
 8004f2c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004f2e:	4b36      	ldr	r3, [pc, #216]	; (8005008 <HAL_UART_MspInit+0x15c>)
 8004f30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f34:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f36:	4b34      	ldr	r3, [pc, #208]	; (8005008 <HAL_UART_MspInit+0x15c>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f3c:	4b32      	ldr	r3, [pc, #200]	; (8005008 <HAL_UART_MspInit+0x15c>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004f42:	4b31      	ldr	r3, [pc, #196]	; (8005008 <HAL_UART_MspInit+0x15c>)
 8004f44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f48:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f4a:	4b2f      	ldr	r3, [pc, #188]	; (8005008 <HAL_UART_MspInit+0x15c>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f50:	4b2d      	ldr	r3, [pc, #180]	; (8005008 <HAL_UART_MspInit+0x15c>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004f56:	4b2c      	ldr	r3, [pc, #176]	; (8005008 <HAL_UART_MspInit+0x15c>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004f5c:	4b2a      	ldr	r3, [pc, #168]	; (8005008 <HAL_UART_MspInit+0x15c>)
 8004f5e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004f62:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f64:	4b28      	ldr	r3, [pc, #160]	; (8005008 <HAL_UART_MspInit+0x15c>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004f6a:	4827      	ldr	r0, [pc, #156]	; (8005008 <HAL_UART_MspInit+0x15c>)
 8004f6c:	f000 fb86 	bl	800567c <HAL_DMA_Init>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004f76:	f7fd f96f 	bl	8002258 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a22      	ldr	r2, [pc, #136]	; (8005008 <HAL_UART_MspInit+0x15c>)
 8004f7e:	639a      	str	r2, [r3, #56]	; 0x38
 8004f80:	4a21      	ldr	r2, [pc, #132]	; (8005008 <HAL_UART_MspInit+0x15c>)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004f86:	4b22      	ldr	r3, [pc, #136]	; (8005010 <HAL_UART_MspInit+0x164>)
 8004f88:	4a22      	ldr	r2, [pc, #136]	; (8005014 <HAL_UART_MspInit+0x168>)
 8004f8a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004f8c:	4b20      	ldr	r3, [pc, #128]	; (8005010 <HAL_UART_MspInit+0x164>)
 8004f8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f92:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f94:	4b1e      	ldr	r3, [pc, #120]	; (8005010 <HAL_UART_MspInit+0x164>)
 8004f96:	2240      	movs	r2, #64	; 0x40
 8004f98:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f9a:	4b1d      	ldr	r3, [pc, #116]	; (8005010 <HAL_UART_MspInit+0x164>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004fa0:	4b1b      	ldr	r3, [pc, #108]	; (8005010 <HAL_UART_MspInit+0x164>)
 8004fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fa6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fa8:	4b19      	ldr	r3, [pc, #100]	; (8005010 <HAL_UART_MspInit+0x164>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004fae:	4b18      	ldr	r3, [pc, #96]	; (8005010 <HAL_UART_MspInit+0x164>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004fb4:	4b16      	ldr	r3, [pc, #88]	; (8005010 <HAL_UART_MspInit+0x164>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004fba:	4b15      	ldr	r3, [pc, #84]	; (8005010 <HAL_UART_MspInit+0x164>)
 8004fbc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004fc0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004fc2:	4b13      	ldr	r3, [pc, #76]	; (8005010 <HAL_UART_MspInit+0x164>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004fc8:	4811      	ldr	r0, [pc, #68]	; (8005010 <HAL_UART_MspInit+0x164>)
 8004fca:	f000 fb57 	bl	800567c <HAL_DMA_Init>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8004fd4:	f7fd f940 	bl	8002258 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a0d      	ldr	r2, [pc, #52]	; (8005010 <HAL_UART_MspInit+0x164>)
 8004fdc:	635a      	str	r2, [r3, #52]	; 0x34
 8004fde:	4a0c      	ldr	r2, [pc, #48]	; (8005010 <HAL_UART_MspInit+0x164>)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	2026      	movs	r0, #38	; 0x26
 8004fea:	f000 fb10 	bl	800560e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004fee:	2026      	movs	r0, #38	; 0x26
 8004ff0:	f000 fb29 	bl	8005646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004ff4:	bf00      	nop
 8004ff6:	3728      	adds	r7, #40	; 0x28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40004400 	.word	0x40004400
 8005000:	40023800 	.word	0x40023800
 8005004:	40020c00 	.word	0x40020c00
 8005008:	200013d0 	.word	0x200013d0
 800500c:	40026088 	.word	0x40026088
 8005010:	20001430 	.word	0x20001430
 8005014:	400260a0 	.word	0x400260a0

08005018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800501c:	e7fe      	b.n	800501c <NMI_Handler+0x4>

0800501e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800501e:	b480      	push	{r7}
 8005020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005022:	e7fe      	b.n	8005022 <HardFault_Handler+0x4>

08005024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005028:	e7fe      	b.n	8005028 <MemManage_Handler+0x4>

0800502a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800502a:	b480      	push	{r7}
 800502c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800502e:	e7fe      	b.n	800502e <BusFault_Handler+0x4>

08005030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005034:	e7fe      	b.n	8005034 <UsageFault_Handler+0x4>

08005036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005036:	b480      	push	{r7}
 8005038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800503a:	bf00      	nop
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005048:	bf00      	nop
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005052:	b480      	push	{r7}
 8005054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005056:	bf00      	nop
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005064:	f000 f9b4 	bl	80053d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005068:	bf00      	nop
 800506a:	bd80      	pop	{r7, pc}

0800506c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005070:	4802      	ldr	r0, [pc, #8]	; (800507c <DMA1_Stream5_IRQHandler+0x10>)
 8005072:	f000 fc9b 	bl	80059ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005076:	bf00      	nop
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	200013d0 	.word	0x200013d0

08005080 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005084:	4802      	ldr	r0, [pc, #8]	; (8005090 <DMA1_Stream6_IRQHandler+0x10>)
 8005086:	f000 fc91 	bl	80059ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800508a:	bf00      	nop
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	20001430 	.word	0x20001430

08005094 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005098:	4802      	ldr	r0, [pc, #8]	; (80050a4 <USART2_IRQHandler+0x10>)
 800509a:	f002 ff61 	bl	8007f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800509e:	bf00      	nop
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	2000138c 	.word	0x2000138c

080050a8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80050ac:	4802      	ldr	r0, [pc, #8]	; (80050b8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80050ae:	f002 f801 	bl	80070b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80050b2:	bf00      	nop
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	20001344 	.word	0x20001344

080050bc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80050c0:	4802      	ldr	r0, [pc, #8]	; (80050cc <TIM5_IRQHandler+0x10>)
 80050c2:	f001 fff7 	bl	80070b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80050c6:	bf00      	nop
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	200012fc 	.word	0x200012fc

080050d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  return 1;
 80050d4:	2301      	movs	r3, #1
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <_kill>:

int _kill(int pid, int sig)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80050ea:	f004 f835 	bl	8009158 <__errno>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2216      	movs	r2, #22
 80050f2:	601a      	str	r2, [r3, #0]
  return -1;
 80050f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <_exit>:

void _exit (int status)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff ffe7 	bl	80050e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005112:	e7fe      	b.n	8005112 <_exit+0x12>

08005114 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	e00a      	b.n	800513c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005126:	f3af 8000 	nop.w
 800512a:	4601      	mov	r1, r0
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	60ba      	str	r2, [r7, #8]
 8005132:	b2ca      	uxtb	r2, r1
 8005134:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	3301      	adds	r3, #1
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	429a      	cmp	r2, r3
 8005142:	dbf0      	blt.n	8005126 <_read+0x12>
  }

  return len;
 8005144:	687b      	ldr	r3, [r7, #4]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b086      	sub	sp, #24
 8005152:	af00      	add	r7, sp, #0
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	e009      	b.n	8005174 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	60ba      	str	r2, [r7, #8]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	4618      	mov	r0, r3
 800516a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	3301      	adds	r3, #1
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	429a      	cmp	r2, r3
 800517a:	dbf1      	blt.n	8005160 <_write+0x12>
  }
  return len;
 800517c:	687b      	ldr	r3, [r7, #4]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <_close>:

int _close(int file)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800518e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005192:	4618      	mov	r0, r3
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051ae:	605a      	str	r2, [r3, #4]
  return 0;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <_isatty>:

int _isatty(int file)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80051c6:	2301      	movs	r3, #1
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
	...

080051f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051f8:	4a14      	ldr	r2, [pc, #80]	; (800524c <_sbrk+0x5c>)
 80051fa:	4b15      	ldr	r3, [pc, #84]	; (8005250 <_sbrk+0x60>)
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005204:	4b13      	ldr	r3, [pc, #76]	; (8005254 <_sbrk+0x64>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d102      	bne.n	8005212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800520c:	4b11      	ldr	r3, [pc, #68]	; (8005254 <_sbrk+0x64>)
 800520e:	4a12      	ldr	r2, [pc, #72]	; (8005258 <_sbrk+0x68>)
 8005210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005212:	4b10      	ldr	r3, [pc, #64]	; (8005254 <_sbrk+0x64>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4413      	add	r3, r2
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	429a      	cmp	r2, r3
 800521e:	d207      	bcs.n	8005230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005220:	f003 ff9a 	bl	8009158 <__errno>
 8005224:	4603      	mov	r3, r0
 8005226:	220c      	movs	r2, #12
 8005228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800522a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800522e:	e009      	b.n	8005244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005230:	4b08      	ldr	r3, [pc, #32]	; (8005254 <_sbrk+0x64>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005236:	4b07      	ldr	r3, [pc, #28]	; (8005254 <_sbrk+0x64>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4413      	add	r3, r2
 800523e:	4a05      	ldr	r2, [pc, #20]	; (8005254 <_sbrk+0x64>)
 8005240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005242:	68fb      	ldr	r3, [r7, #12]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20020000 	.word	0x20020000
 8005250:	00000400 	.word	0x00000400
 8005254:	20001b4c 	.word	0x20001b4c
 8005258:	20001b68 	.word	0x20001b68

0800525c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005260:	4b06      	ldr	r3, [pc, #24]	; (800527c <SystemInit+0x20>)
 8005262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005266:	4a05      	ldr	r2, [pc, #20]	; (800527c <SystemInit+0x20>)
 8005268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800526c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005270:	bf00      	nop
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	e000ed00 	.word	0xe000ed00

08005280 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	0a5a      	lsrs	r2, r3, #9
 8005290:	490f      	ldr	r1, [pc, #60]	; (80052d0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8005292:	fba1 1202 	umull	r1, r2, r1, r2
 8005296:	09d2      	lsrs	r2, r2, #7
 8005298:	490e      	ldr	r1, [pc, #56]	; (80052d4 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800529a:	fb01 f202 	mul.w	r2, r1, r2
 800529e:	1a9b      	subs	r3, r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	0a5b      	lsrs	r3, r3, #9
 80052a8:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80052aa:	fba2 2303 	umull	r2, r3, r2, r3
 80052ae:	09db      	lsrs	r3, r3, #7
 80052b0:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	441a      	add	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	601a      	str	r2, [r3, #0]
}
 80052c4:	bf00      	nop
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	00044b83 	.word	0x00044b83
 80052d4:	3b9aca00 	.word	0x3b9aca00

080052d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80052d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005310 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80052dc:	480d      	ldr	r0, [pc, #52]	; (8005314 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80052de:	490e      	ldr	r1, [pc, #56]	; (8005318 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80052e0:	4a0e      	ldr	r2, [pc, #56]	; (800531c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80052e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052e4:	e002      	b.n	80052ec <LoopCopyDataInit>

080052e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052ea:	3304      	adds	r3, #4

080052ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052f0:	d3f9      	bcc.n	80052e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052f2:	4a0b      	ldr	r2, [pc, #44]	; (8005320 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80052f4:	4c0b      	ldr	r4, [pc, #44]	; (8005324 <LoopFillZerobss+0x26>)
  movs r3, #0
 80052f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052f8:	e001      	b.n	80052fe <LoopFillZerobss>

080052fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052fc:	3204      	adds	r2, #4

080052fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005300:	d3fb      	bcc.n	80052fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005302:	f7ff ffab 	bl	800525c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005306:	f003 ff2d 	bl	8009164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800530a:	f7fc f851 	bl	80013b0 <main>
  bx  lr    
 800530e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005310:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005318:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800531c:	0800e32c 	.word	0x0800e32c
  ldr r2, =_sbss
 8005320:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8005324:	20001b64 	.word	0x20001b64

08005328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005328:	e7fe      	b.n	8005328 <ADC_IRQHandler>
	...

0800532c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005330:	4b0e      	ldr	r3, [pc, #56]	; (800536c <HAL_Init+0x40>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a0d      	ldr	r2, [pc, #52]	; (800536c <HAL_Init+0x40>)
 8005336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800533a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800533c:	4b0b      	ldr	r3, [pc, #44]	; (800536c <HAL_Init+0x40>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a0a      	ldr	r2, [pc, #40]	; (800536c <HAL_Init+0x40>)
 8005342:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005346:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005348:	4b08      	ldr	r3, [pc, #32]	; (800536c <HAL_Init+0x40>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a07      	ldr	r2, [pc, #28]	; (800536c <HAL_Init+0x40>)
 800534e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005352:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005354:	2003      	movs	r0, #3
 8005356:	f000 f94f 	bl	80055f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800535a:	200f      	movs	r0, #15
 800535c:	f000 f808 	bl	8005370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005360:	f7ff fc40 	bl	8004be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40023c00 	.word	0x40023c00

08005370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005378:	4b12      	ldr	r3, [pc, #72]	; (80053c4 <HAL_InitTick+0x54>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	4b12      	ldr	r3, [pc, #72]	; (80053c8 <HAL_InitTick+0x58>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	4619      	mov	r1, r3
 8005382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005386:	fbb3 f3f1 	udiv	r3, r3, r1
 800538a:	fbb2 f3f3 	udiv	r3, r2, r3
 800538e:	4618      	mov	r0, r3
 8005390:	f000 f967 	bl	8005662 <HAL_SYSTICK_Config>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e00e      	b.n	80053bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b0f      	cmp	r3, #15
 80053a2:	d80a      	bhi.n	80053ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053a4:	2200      	movs	r2, #0
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053ac:	f000 f92f 	bl	800560e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80053b0:	4a06      	ldr	r2, [pc, #24]	; (80053cc <HAL_InitTick+0x5c>)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	e000      	b.n	80053bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	20000014 	.word	0x20000014
 80053c8:	2000001c 	.word	0x2000001c
 80053cc:	20000018 	.word	0x20000018

080053d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053d4:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <HAL_IncTick+0x20>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <HAL_IncTick+0x24>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4413      	add	r3, r2
 80053e0:	4a04      	ldr	r2, [pc, #16]	; (80053f4 <HAL_IncTick+0x24>)
 80053e2:	6013      	str	r3, [r2, #0]
}
 80053e4:	bf00      	nop
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	2000001c 	.word	0x2000001c
 80053f4:	20001b50 	.word	0x20001b50

080053f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return uwTick;
 80053fc:	4b03      	ldr	r3, [pc, #12]	; (800540c <HAL_GetTick+0x14>)
 80053fe:	681b      	ldr	r3, [r3, #0]
}
 8005400:	4618      	mov	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	20001b50 	.word	0x20001b50

08005410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005418:	f7ff ffee 	bl	80053f8 <HAL_GetTick>
 800541c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005428:	d005      	beq.n	8005436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800542a:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <HAL_Delay+0x44>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005436:	bf00      	nop
 8005438:	f7ff ffde 	bl	80053f8 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	429a      	cmp	r2, r3
 8005446:	d8f7      	bhi.n	8005438 <HAL_Delay+0x28>
  {
  }
}
 8005448:	bf00      	nop
 800544a:	bf00      	nop
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	2000001c 	.word	0x2000001c

08005458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005468:	4b0c      	ldr	r3, [pc, #48]	; (800549c <__NVIC_SetPriorityGrouping+0x44>)
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005474:	4013      	ands	r3, r2
 8005476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800548a:	4a04      	ldr	r2, [pc, #16]	; (800549c <__NVIC_SetPriorityGrouping+0x44>)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	60d3      	str	r3, [r2, #12]
}
 8005490:	bf00      	nop
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	e000ed00 	.word	0xe000ed00

080054a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054a4:	4b04      	ldr	r3, [pc, #16]	; (80054b8 <__NVIC_GetPriorityGrouping+0x18>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	0a1b      	lsrs	r3, r3, #8
 80054aa:	f003 0307 	and.w	r3, r3, #7
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	e000ed00 	.word	0xe000ed00

080054bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4603      	mov	r3, r0
 80054c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	db0b      	blt.n	80054e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054ce:	79fb      	ldrb	r3, [r7, #7]
 80054d0:	f003 021f 	and.w	r2, r3, #31
 80054d4:	4907      	ldr	r1, [pc, #28]	; (80054f4 <__NVIC_EnableIRQ+0x38>)
 80054d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	2001      	movs	r0, #1
 80054de:	fa00 f202 	lsl.w	r2, r0, r2
 80054e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	e000e100 	.word	0xe000e100

080054f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	4603      	mov	r3, r0
 8005500:	6039      	str	r1, [r7, #0]
 8005502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005508:	2b00      	cmp	r3, #0
 800550a:	db0a      	blt.n	8005522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	b2da      	uxtb	r2, r3
 8005510:	490c      	ldr	r1, [pc, #48]	; (8005544 <__NVIC_SetPriority+0x4c>)
 8005512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005516:	0112      	lsls	r2, r2, #4
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	440b      	add	r3, r1
 800551c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005520:	e00a      	b.n	8005538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	b2da      	uxtb	r2, r3
 8005526:	4908      	ldr	r1, [pc, #32]	; (8005548 <__NVIC_SetPriority+0x50>)
 8005528:	79fb      	ldrb	r3, [r7, #7]
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	3b04      	subs	r3, #4
 8005530:	0112      	lsls	r2, r2, #4
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	440b      	add	r3, r1
 8005536:	761a      	strb	r2, [r3, #24]
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	e000e100 	.word	0xe000e100
 8005548:	e000ed00 	.word	0xe000ed00

0800554c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800554c:	b480      	push	{r7}
 800554e:	b089      	sub	sp, #36	; 0x24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f1c3 0307 	rsb	r3, r3, #7
 8005566:	2b04      	cmp	r3, #4
 8005568:	bf28      	it	cs
 800556a:	2304      	movcs	r3, #4
 800556c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	3304      	adds	r3, #4
 8005572:	2b06      	cmp	r3, #6
 8005574:	d902      	bls.n	800557c <NVIC_EncodePriority+0x30>
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	3b03      	subs	r3, #3
 800557a:	e000      	b.n	800557e <NVIC_EncodePriority+0x32>
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005580:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	fa02 f303 	lsl.w	r3, r2, r3
 800558a:	43da      	mvns	r2, r3
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	401a      	ands	r2, r3
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005594:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	fa01 f303 	lsl.w	r3, r1, r3
 800559e:	43d9      	mvns	r1, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055a4:	4313      	orrs	r3, r2
         );
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3724      	adds	r7, #36	; 0x24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
	...

080055b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3b01      	subs	r3, #1
 80055c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055c4:	d301      	bcc.n	80055ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055c6:	2301      	movs	r3, #1
 80055c8:	e00f      	b.n	80055ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055ca:	4a0a      	ldr	r2, [pc, #40]	; (80055f4 <SysTick_Config+0x40>)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055d2:	210f      	movs	r1, #15
 80055d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055d8:	f7ff ff8e 	bl	80054f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055dc:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <SysTick_Config+0x40>)
 80055de:	2200      	movs	r2, #0
 80055e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055e2:	4b04      	ldr	r3, [pc, #16]	; (80055f4 <SysTick_Config+0x40>)
 80055e4:	2207      	movs	r2, #7
 80055e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	e000e010 	.word	0xe000e010

080055f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff ff29 	bl	8005458 <__NVIC_SetPriorityGrouping>
}
 8005606:	bf00      	nop
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800560e:	b580      	push	{r7, lr}
 8005610:	b086      	sub	sp, #24
 8005612:	af00      	add	r7, sp, #0
 8005614:	4603      	mov	r3, r0
 8005616:	60b9      	str	r1, [r7, #8]
 8005618:	607a      	str	r2, [r7, #4]
 800561a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800561c:	2300      	movs	r3, #0
 800561e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005620:	f7ff ff3e 	bl	80054a0 <__NVIC_GetPriorityGrouping>
 8005624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	68b9      	ldr	r1, [r7, #8]
 800562a:	6978      	ldr	r0, [r7, #20]
 800562c:	f7ff ff8e 	bl	800554c <NVIC_EncodePriority>
 8005630:	4602      	mov	r2, r0
 8005632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005636:	4611      	mov	r1, r2
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff ff5d 	bl	80054f8 <__NVIC_SetPriority>
}
 800563e:	bf00      	nop
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b082      	sub	sp, #8
 800564a:	af00      	add	r7, sp, #0
 800564c:	4603      	mov	r3, r0
 800564e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff ff31 	bl	80054bc <__NVIC_EnableIRQ>
}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b082      	sub	sp, #8
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7ff ffa2 	bl	80055b4 <SysTick_Config>
 8005670:	4603      	mov	r3, r0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005688:	f7ff feb6 	bl	80053f8 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e099      	b.n	80057cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0201 	bic.w	r2, r2, #1
 80056b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056b8:	e00f      	b.n	80056da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056ba:	f7ff fe9d 	bl	80053f8 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b05      	cmp	r3, #5
 80056c6:	d908      	bls.n	80056da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2220      	movs	r2, #32
 80056cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2203      	movs	r2, #3
 80056d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e078      	b.n	80057cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e8      	bne.n	80056ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4b38      	ldr	r3, [pc, #224]	; (80057d4 <HAL_DMA_Init+0x158>)
 80056f4:	4013      	ands	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005706:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005712:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800571e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	2b04      	cmp	r3, #4
 8005732:	d107      	bne.n	8005744 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573c:	4313      	orrs	r3, r2
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f023 0307 	bic.w	r3, r3, #7
 800575a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	2b04      	cmp	r3, #4
 800576c:	d117      	bne.n	800579e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00e      	beq.n	800579e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fb01 	bl	8005d88 <DMA_CheckFifoParam>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d008      	beq.n	800579e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2240      	movs	r2, #64	; 0x40
 8005790:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800579a:	2301      	movs	r3, #1
 800579c:	e016      	b.n	80057cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fab8 	bl	8005d1c <DMA_CalcBaseAndBitshift>
 80057ac:	4603      	mov	r3, r0
 80057ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b4:	223f      	movs	r2, #63	; 0x3f
 80057b6:	409a      	lsls	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	f010803f 	.word	0xf010803f

080057d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d101      	bne.n	80057fe <HAL_DMA_Start_IT+0x26>
 80057fa:	2302      	movs	r3, #2
 80057fc:	e040      	b.n	8005880 <HAL_DMA_Start_IT+0xa8>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b01      	cmp	r3, #1
 8005810:	d12f      	bne.n	8005872 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2202      	movs	r2, #2
 8005816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	68b9      	ldr	r1, [r7, #8]
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 fa4a 	bl	8005cc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005830:	223f      	movs	r2, #63	; 0x3f
 8005832:	409a      	lsls	r2, r3
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0216 	orr.w	r2, r2, #22
 8005846:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	2b00      	cmp	r3, #0
 800584e:	d007      	beq.n	8005860 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0208 	orr.w	r2, r2, #8
 800585e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	e005      	b.n	800587e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800587a:	2302      	movs	r3, #2
 800587c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800587e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005894:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005896:	f7ff fdaf 	bl	80053f8 <HAL_GetTick>
 800589a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d008      	beq.n	80058ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2280      	movs	r2, #128	; 0x80
 80058ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e052      	b.n	8005960 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0216 	bic.w	r2, r2, #22
 80058c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695a      	ldr	r2, [r3, #20]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d103      	bne.n	80058ea <HAL_DMA_Abort+0x62>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d007      	beq.n	80058fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0208 	bic.w	r2, r2, #8
 80058f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0201 	bic.w	r2, r2, #1
 8005908:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800590a:	e013      	b.n	8005934 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800590c:	f7ff fd74 	bl	80053f8 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b05      	cmp	r3, #5
 8005918:	d90c      	bls.n	8005934 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2220      	movs	r2, #32
 800591e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2203      	movs	r2, #3
 8005924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e015      	b.n	8005960 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e4      	bne.n	800590c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005946:	223f      	movs	r2, #63	; 0x3f
 8005948:	409a      	lsls	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d004      	beq.n	8005986 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2280      	movs	r2, #128	; 0x80
 8005980:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e00c      	b.n	80059a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2205      	movs	r2, #5
 800598a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0201 	bic.w	r2, r2, #1
 800599c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80059b8:	4b8e      	ldr	r3, [pc, #568]	; (8005bf4 <HAL_DMA_IRQHandler+0x248>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a8e      	ldr	r2, [pc, #568]	; (8005bf8 <HAL_DMA_IRQHandler+0x24c>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	0a9b      	lsrs	r3, r3, #10
 80059c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d6:	2208      	movs	r2, #8
 80059d8:	409a      	lsls	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4013      	ands	r3, r2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d01a      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d013      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0204 	bic.w	r2, r2, #4
 80059fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a04:	2208      	movs	r2, #8
 8005a06:	409a      	lsls	r2, r3
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a10:	f043 0201 	orr.w	r2, r3, #1
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	409a      	lsls	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4013      	ands	r3, r2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d012      	beq.n	8005a4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00b      	beq.n	8005a4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	409a      	lsls	r2, r3
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a46:	f043 0202 	orr.w	r2, r3, #2
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a52:	2204      	movs	r2, #4
 8005a54:	409a      	lsls	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4013      	ands	r3, r2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d012      	beq.n	8005a84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00b      	beq.n	8005a84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a70:	2204      	movs	r2, #4
 8005a72:	409a      	lsls	r2, r3
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7c:	f043 0204 	orr.w	r2, r3, #4
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a88:	2210      	movs	r2, #16
 8005a8a:	409a      	lsls	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d043      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0308 	and.w	r3, r3, #8
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d03c      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa6:	2210      	movs	r2, #16
 8005aa8:	409a      	lsls	r2, r3
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d018      	beq.n	8005aee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d108      	bne.n	8005adc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d024      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	4798      	blx	r3
 8005ada:	e01f      	b.n	8005b1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d01b      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	4798      	blx	r3
 8005aec:	e016      	b.n	8005b1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d107      	bne.n	8005b0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0208 	bic.w	r2, r2, #8
 8005b0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b20:	2220      	movs	r2, #32
 8005b22:	409a      	lsls	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4013      	ands	r3, r2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 808f 	beq.w	8005c4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 8087 	beq.w	8005c4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b42:	2220      	movs	r2, #32
 8005b44:	409a      	lsls	r2, r3
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b05      	cmp	r3, #5
 8005b54:	d136      	bne.n	8005bc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0216 	bic.w	r2, r2, #22
 8005b64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695a      	ldr	r2, [r3, #20]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d103      	bne.n	8005b86 <HAL_DMA_IRQHandler+0x1da>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d007      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0208 	bic.w	r2, r2, #8
 8005b94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b9a:	223f      	movs	r2, #63	; 0x3f
 8005b9c:	409a      	lsls	r2, r3
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d07e      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	4798      	blx	r3
        }
        return;
 8005bc2:	e079      	b.n	8005cb8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d01d      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10d      	bne.n	8005bfc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d031      	beq.n	8005c4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	4798      	blx	r3
 8005bf0:	e02c      	b.n	8005c4c <HAL_DMA_IRQHandler+0x2a0>
 8005bf2:	bf00      	nop
 8005bf4:	20000014 	.word	0x20000014
 8005bf8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d023      	beq.n	8005c4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	4798      	blx	r3
 8005c0c:	e01e      	b.n	8005c4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10f      	bne.n	8005c3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0210 	bic.w	r2, r2, #16
 8005c2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d032      	beq.n	8005cba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d022      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2205      	movs	r2, #5
 8005c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0201 	bic.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d307      	bcc.n	8005c94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f2      	bne.n	8005c78 <HAL_DMA_IRQHandler+0x2cc>
 8005c92:	e000      	b.n	8005c96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005c94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d005      	beq.n	8005cba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	4798      	blx	r3
 8005cb6:	e000      	b.n	8005cba <HAL_DMA_IRQHandler+0x30e>
        return;
 8005cb8:	bf00      	nop
    }
  }
}
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	2b40      	cmp	r3, #64	; 0x40
 8005cec:	d108      	bne.n	8005d00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005cfe:	e007      	b.n	8005d10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	60da      	str	r2, [r3, #12]
}
 8005d10:	bf00      	nop
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	3b10      	subs	r3, #16
 8005d2c:	4a14      	ldr	r2, [pc, #80]	; (8005d80 <DMA_CalcBaseAndBitshift+0x64>)
 8005d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d32:	091b      	lsrs	r3, r3, #4
 8005d34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d36:	4a13      	ldr	r2, [pc, #76]	; (8005d84 <DMA_CalcBaseAndBitshift+0x68>)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d909      	bls.n	8005d5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d52:	f023 0303 	bic.w	r3, r3, #3
 8005d56:	1d1a      	adds	r2, r3, #4
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	659a      	str	r2, [r3, #88]	; 0x58
 8005d5c:	e007      	b.n	8005d6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d66:	f023 0303 	bic.w	r3, r3, #3
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	aaaaaaab 	.word	0xaaaaaaab
 8005d84:	0800de64 	.word	0x0800de64

08005d88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d11f      	bne.n	8005de2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d856      	bhi.n	8005e56 <DMA_CheckFifoParam+0xce>
 8005da8:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <DMA_CheckFifoParam+0x28>)
 8005daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dae:	bf00      	nop
 8005db0:	08005dc1 	.word	0x08005dc1
 8005db4:	08005dd3 	.word	0x08005dd3
 8005db8:	08005dc1 	.word	0x08005dc1
 8005dbc:	08005e57 	.word	0x08005e57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d046      	beq.n	8005e5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dd0:	e043      	b.n	8005e5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005dda:	d140      	bne.n	8005e5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005de0:	e03d      	b.n	8005e5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dea:	d121      	bne.n	8005e30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d837      	bhi.n	8005e62 <DMA_CheckFifoParam+0xda>
 8005df2:	a201      	add	r2, pc, #4	; (adr r2, 8005df8 <DMA_CheckFifoParam+0x70>)
 8005df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df8:	08005e09 	.word	0x08005e09
 8005dfc:	08005e0f 	.word	0x08005e0f
 8005e00:	08005e09 	.word	0x08005e09
 8005e04:	08005e21 	.word	0x08005e21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e0c:	e030      	b.n	8005e70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d025      	beq.n	8005e66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e1e:	e022      	b.n	8005e66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e28:	d11f      	bne.n	8005e6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e2e:	e01c      	b.n	8005e6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d903      	bls.n	8005e3e <DMA_CheckFifoParam+0xb6>
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d003      	beq.n	8005e44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e3c:	e018      	b.n	8005e70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	73fb      	strb	r3, [r7, #15]
      break;
 8005e42:	e015      	b.n	8005e70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00e      	beq.n	8005e6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	73fb      	strb	r3, [r7, #15]
      break;
 8005e54:	e00b      	b.n	8005e6e <DMA_CheckFifoParam+0xe6>
      break;
 8005e56:	bf00      	nop
 8005e58:	e00a      	b.n	8005e70 <DMA_CheckFifoParam+0xe8>
      break;
 8005e5a:	bf00      	nop
 8005e5c:	e008      	b.n	8005e70 <DMA_CheckFifoParam+0xe8>
      break;
 8005e5e:	bf00      	nop
 8005e60:	e006      	b.n	8005e70 <DMA_CheckFifoParam+0xe8>
      break;
 8005e62:	bf00      	nop
 8005e64:	e004      	b.n	8005e70 <DMA_CheckFifoParam+0xe8>
      break;
 8005e66:	bf00      	nop
 8005e68:	e002      	b.n	8005e70 <DMA_CheckFifoParam+0xe8>
      break;   
 8005e6a:	bf00      	nop
 8005e6c:	e000      	b.n	8005e70 <DMA_CheckFifoParam+0xe8>
      break;
 8005e6e:	bf00      	nop
    }
  } 
  
  return status; 
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop

08005e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b089      	sub	sp, #36	; 0x24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e96:	2300      	movs	r3, #0
 8005e98:	61fb      	str	r3, [r7, #28]
 8005e9a:	e16b      	b.n	8006174 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4013      	ands	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	f040 815a 	bne.w	800616e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d005      	beq.n	8005ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d130      	bne.n	8005f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	2203      	movs	r2, #3
 8005ede:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee2:	43db      	mvns	r3, r3
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f08:	2201      	movs	r2, #1
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f10:	43db      	mvns	r3, r3
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	4013      	ands	r3, r2
 8005f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	091b      	lsrs	r3, r3, #4
 8005f1e:	f003 0201 	and.w	r2, r3, #1
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f003 0303 	and.w	r3, r3, #3
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d017      	beq.n	8005f70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	2203      	movs	r2, #3
 8005f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f50:	43db      	mvns	r3, r3
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	4013      	ands	r3, r2
 8005f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	fa02 f303 	lsl.w	r3, r2, r3
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f003 0303 	and.w	r3, r3, #3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d123      	bne.n	8005fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	08da      	lsrs	r2, r3, #3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3208      	adds	r2, #8
 8005f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	f003 0307 	and.w	r3, r3, #7
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	220f      	movs	r2, #15
 8005f94:	fa02 f303 	lsl.w	r3, r2, r3
 8005f98:	43db      	mvns	r3, r3
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	691a      	ldr	r2, [r3, #16]
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	08da      	lsrs	r2, r3, #3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3208      	adds	r2, #8
 8005fbe:	69b9      	ldr	r1, [r7, #24]
 8005fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	2203      	movs	r2, #3
 8005fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	4013      	ands	r3, r2
 8005fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f003 0203 	and.w	r2, r3, #3
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 80b4 	beq.w	800616e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	4b60      	ldr	r3, [pc, #384]	; (800618c <HAL_GPIO_Init+0x30c>)
 800600c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600e:	4a5f      	ldr	r2, [pc, #380]	; (800618c <HAL_GPIO_Init+0x30c>)
 8006010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006014:	6453      	str	r3, [r2, #68]	; 0x44
 8006016:	4b5d      	ldr	r3, [pc, #372]	; (800618c <HAL_GPIO_Init+0x30c>)
 8006018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006022:	4a5b      	ldr	r2, [pc, #364]	; (8006190 <HAL_GPIO_Init+0x310>)
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	089b      	lsrs	r3, r3, #2
 8006028:	3302      	adds	r3, #2
 800602a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800602e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	220f      	movs	r2, #15
 800603a:	fa02 f303 	lsl.w	r3, r2, r3
 800603e:	43db      	mvns	r3, r3
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	4013      	ands	r3, r2
 8006044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a52      	ldr	r2, [pc, #328]	; (8006194 <HAL_GPIO_Init+0x314>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d02b      	beq.n	80060a6 <HAL_GPIO_Init+0x226>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a51      	ldr	r2, [pc, #324]	; (8006198 <HAL_GPIO_Init+0x318>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d025      	beq.n	80060a2 <HAL_GPIO_Init+0x222>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a50      	ldr	r2, [pc, #320]	; (800619c <HAL_GPIO_Init+0x31c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d01f      	beq.n	800609e <HAL_GPIO_Init+0x21e>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a4f      	ldr	r2, [pc, #316]	; (80061a0 <HAL_GPIO_Init+0x320>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d019      	beq.n	800609a <HAL_GPIO_Init+0x21a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a4e      	ldr	r2, [pc, #312]	; (80061a4 <HAL_GPIO_Init+0x324>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d013      	beq.n	8006096 <HAL_GPIO_Init+0x216>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a4d      	ldr	r2, [pc, #308]	; (80061a8 <HAL_GPIO_Init+0x328>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00d      	beq.n	8006092 <HAL_GPIO_Init+0x212>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a4c      	ldr	r2, [pc, #304]	; (80061ac <HAL_GPIO_Init+0x32c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d007      	beq.n	800608e <HAL_GPIO_Init+0x20e>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a4b      	ldr	r2, [pc, #300]	; (80061b0 <HAL_GPIO_Init+0x330>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d101      	bne.n	800608a <HAL_GPIO_Init+0x20a>
 8006086:	2307      	movs	r3, #7
 8006088:	e00e      	b.n	80060a8 <HAL_GPIO_Init+0x228>
 800608a:	2308      	movs	r3, #8
 800608c:	e00c      	b.n	80060a8 <HAL_GPIO_Init+0x228>
 800608e:	2306      	movs	r3, #6
 8006090:	e00a      	b.n	80060a8 <HAL_GPIO_Init+0x228>
 8006092:	2305      	movs	r3, #5
 8006094:	e008      	b.n	80060a8 <HAL_GPIO_Init+0x228>
 8006096:	2304      	movs	r3, #4
 8006098:	e006      	b.n	80060a8 <HAL_GPIO_Init+0x228>
 800609a:	2303      	movs	r3, #3
 800609c:	e004      	b.n	80060a8 <HAL_GPIO_Init+0x228>
 800609e:	2302      	movs	r3, #2
 80060a0:	e002      	b.n	80060a8 <HAL_GPIO_Init+0x228>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <HAL_GPIO_Init+0x228>
 80060a6:	2300      	movs	r3, #0
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	f002 0203 	and.w	r2, r2, #3
 80060ae:	0092      	lsls	r2, r2, #2
 80060b0:	4093      	lsls	r3, r2
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060b8:	4935      	ldr	r1, [pc, #212]	; (8006190 <HAL_GPIO_Init+0x310>)
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	089b      	lsrs	r3, r3, #2
 80060be:	3302      	adds	r3, #2
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060c6:	4b3b      	ldr	r3, [pc, #236]	; (80061b4 <HAL_GPIO_Init+0x334>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	43db      	mvns	r3, r3
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	4013      	ands	r3, r2
 80060d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060ea:	4a32      	ldr	r2, [pc, #200]	; (80061b4 <HAL_GPIO_Init+0x334>)
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060f0:	4b30      	ldr	r3, [pc, #192]	; (80061b4 <HAL_GPIO_Init+0x334>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	43db      	mvns	r3, r3
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	4013      	ands	r3, r2
 80060fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	4313      	orrs	r3, r2
 8006112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006114:	4a27      	ldr	r2, [pc, #156]	; (80061b4 <HAL_GPIO_Init+0x334>)
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800611a:	4b26      	ldr	r3, [pc, #152]	; (80061b4 <HAL_GPIO_Init+0x334>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	43db      	mvns	r3, r3
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	4013      	ands	r3, r2
 8006128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800613e:	4a1d      	ldr	r2, [pc, #116]	; (80061b4 <HAL_GPIO_Init+0x334>)
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006144:	4b1b      	ldr	r3, [pc, #108]	; (80061b4 <HAL_GPIO_Init+0x334>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	43db      	mvns	r3, r3
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	4013      	ands	r3, r2
 8006152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006168:	4a12      	ldr	r2, [pc, #72]	; (80061b4 <HAL_GPIO_Init+0x334>)
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	3301      	adds	r3, #1
 8006172:	61fb      	str	r3, [r7, #28]
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	2b0f      	cmp	r3, #15
 8006178:	f67f ae90 	bls.w	8005e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800617c:	bf00      	nop
 800617e:	bf00      	nop
 8006180:	3724      	adds	r7, #36	; 0x24
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40023800 	.word	0x40023800
 8006190:	40013800 	.word	0x40013800
 8006194:	40020000 	.word	0x40020000
 8006198:	40020400 	.word	0x40020400
 800619c:	40020800 	.word	0x40020800
 80061a0:	40020c00 	.word	0x40020c00
 80061a4:	40021000 	.word	0x40021000
 80061a8:	40021400 	.word	0x40021400
 80061ac:	40021800 	.word	0x40021800
 80061b0:	40021c00 	.word	0x40021c00
 80061b4:	40013c00 	.word	0x40013c00

080061b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	807b      	strh	r3, [r7, #2]
 80061c4:	4613      	mov	r3, r2
 80061c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061c8:	787b      	ldrb	r3, [r7, #1]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061ce:	887a      	ldrh	r2, [r7, #2]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061d4:	e003      	b.n	80061de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061d6:	887b      	ldrh	r3, [r7, #2]
 80061d8:	041a      	lsls	r2, r3, #16
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	619a      	str	r2, [r3, #24]
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
	...

080061ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e267      	b.n	80066ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d075      	beq.n	80062f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800620a:	4b88      	ldr	r3, [pc, #544]	; (800642c <HAL_RCC_OscConfig+0x240>)
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f003 030c 	and.w	r3, r3, #12
 8006212:	2b04      	cmp	r3, #4
 8006214:	d00c      	beq.n	8006230 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006216:	4b85      	ldr	r3, [pc, #532]	; (800642c <HAL_RCC_OscConfig+0x240>)
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800621e:	2b08      	cmp	r3, #8
 8006220:	d112      	bne.n	8006248 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006222:	4b82      	ldr	r3, [pc, #520]	; (800642c <HAL_RCC_OscConfig+0x240>)
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800622a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800622e:	d10b      	bne.n	8006248 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006230:	4b7e      	ldr	r3, [pc, #504]	; (800642c <HAL_RCC_OscConfig+0x240>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d05b      	beq.n	80062f4 <HAL_RCC_OscConfig+0x108>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d157      	bne.n	80062f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e242      	b.n	80066ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006250:	d106      	bne.n	8006260 <HAL_RCC_OscConfig+0x74>
 8006252:	4b76      	ldr	r3, [pc, #472]	; (800642c <HAL_RCC_OscConfig+0x240>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a75      	ldr	r2, [pc, #468]	; (800642c <HAL_RCC_OscConfig+0x240>)
 8006258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	e01d      	b.n	800629c <HAL_RCC_OscConfig+0xb0>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006268:	d10c      	bne.n	8006284 <HAL_RCC_OscConfig+0x98>
 800626a:	4b70      	ldr	r3, [pc, #448]	; (800642c <HAL_RCC_OscConfig+0x240>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a6f      	ldr	r2, [pc, #444]	; (800642c <HAL_RCC_OscConfig+0x240>)
 8006270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	4b6d      	ldr	r3, [pc, #436]	; (800642c <HAL_RCC_OscConfig+0x240>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a6c      	ldr	r2, [pc, #432]	; (800642c <HAL_RCC_OscConfig+0x240>)
 800627c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	e00b      	b.n	800629c <HAL_RCC_OscConfig+0xb0>
 8006284:	4b69      	ldr	r3, [pc, #420]	; (800642c <HAL_RCC_OscConfig+0x240>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a68      	ldr	r2, [pc, #416]	; (800642c <HAL_RCC_OscConfig+0x240>)
 800628a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	4b66      	ldr	r3, [pc, #408]	; (800642c <HAL_RCC_OscConfig+0x240>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a65      	ldr	r2, [pc, #404]	; (800642c <HAL_RCC_OscConfig+0x240>)
 8006296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800629a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d013      	beq.n	80062cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a4:	f7ff f8a8 	bl	80053f8 <HAL_GetTick>
 80062a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062ac:	f7ff f8a4 	bl	80053f8 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b64      	cmp	r3, #100	; 0x64
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e207      	b.n	80066ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062be:	4b5b      	ldr	r3, [pc, #364]	; (800642c <HAL_RCC_OscConfig+0x240>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0f0      	beq.n	80062ac <HAL_RCC_OscConfig+0xc0>
 80062ca:	e014      	b.n	80062f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062cc:	f7ff f894 	bl	80053f8 <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062d2:	e008      	b.n	80062e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062d4:	f7ff f890 	bl	80053f8 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b64      	cmp	r3, #100	; 0x64
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e1f3      	b.n	80066ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062e6:	4b51      	ldr	r3, [pc, #324]	; (800642c <HAL_RCC_OscConfig+0x240>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1f0      	bne.n	80062d4 <HAL_RCC_OscConfig+0xe8>
 80062f2:	e000      	b.n	80062f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d063      	beq.n	80063ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006302:	4b4a      	ldr	r3, [pc, #296]	; (800642c <HAL_RCC_OscConfig+0x240>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f003 030c 	and.w	r3, r3, #12
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00b      	beq.n	8006326 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800630e:	4b47      	ldr	r3, [pc, #284]	; (800642c <HAL_RCC_OscConfig+0x240>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006316:	2b08      	cmp	r3, #8
 8006318:	d11c      	bne.n	8006354 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800631a:	4b44      	ldr	r3, [pc, #272]	; (800642c <HAL_RCC_OscConfig+0x240>)
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d116      	bne.n	8006354 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006326:	4b41      	ldr	r3, [pc, #260]	; (800642c <HAL_RCC_OscConfig+0x240>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d005      	beq.n	800633e <HAL_RCC_OscConfig+0x152>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d001      	beq.n	800633e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e1c7      	b.n	80066ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800633e:	4b3b      	ldr	r3, [pc, #236]	; (800642c <HAL_RCC_OscConfig+0x240>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	4937      	ldr	r1, [pc, #220]	; (800642c <HAL_RCC_OscConfig+0x240>)
 800634e:	4313      	orrs	r3, r2
 8006350:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006352:	e03a      	b.n	80063ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d020      	beq.n	800639e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800635c:	4b34      	ldr	r3, [pc, #208]	; (8006430 <HAL_RCC_OscConfig+0x244>)
 800635e:	2201      	movs	r2, #1
 8006360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006362:	f7ff f849 	bl	80053f8 <HAL_GetTick>
 8006366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006368:	e008      	b.n	800637c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800636a:	f7ff f845 	bl	80053f8 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	2b02      	cmp	r3, #2
 8006376:	d901      	bls.n	800637c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e1a8      	b.n	80066ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800637c:	4b2b      	ldr	r3, [pc, #172]	; (800642c <HAL_RCC_OscConfig+0x240>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d0f0      	beq.n	800636a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006388:	4b28      	ldr	r3, [pc, #160]	; (800642c <HAL_RCC_OscConfig+0x240>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	4925      	ldr	r1, [pc, #148]	; (800642c <HAL_RCC_OscConfig+0x240>)
 8006398:	4313      	orrs	r3, r2
 800639a:	600b      	str	r3, [r1, #0]
 800639c:	e015      	b.n	80063ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800639e:	4b24      	ldr	r3, [pc, #144]	; (8006430 <HAL_RCC_OscConfig+0x244>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a4:	f7ff f828 	bl	80053f8 <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063aa:	e008      	b.n	80063be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063ac:	f7ff f824 	bl	80053f8 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e187      	b.n	80066ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063be:	4b1b      	ldr	r3, [pc, #108]	; (800642c <HAL_RCC_OscConfig+0x240>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1f0      	bne.n	80063ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0308 	and.w	r3, r3, #8
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d036      	beq.n	8006444 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d016      	beq.n	800640c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063de:	4b15      	ldr	r3, [pc, #84]	; (8006434 <HAL_RCC_OscConfig+0x248>)
 80063e0:	2201      	movs	r2, #1
 80063e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e4:	f7ff f808 	bl	80053f8 <HAL_GetTick>
 80063e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063ec:	f7ff f804 	bl	80053f8 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e167      	b.n	80066ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063fe:	4b0b      	ldr	r3, [pc, #44]	; (800642c <HAL_RCC_OscConfig+0x240>)
 8006400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0f0      	beq.n	80063ec <HAL_RCC_OscConfig+0x200>
 800640a:	e01b      	b.n	8006444 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800640c:	4b09      	ldr	r3, [pc, #36]	; (8006434 <HAL_RCC_OscConfig+0x248>)
 800640e:	2200      	movs	r2, #0
 8006410:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006412:	f7fe fff1 	bl	80053f8 <HAL_GetTick>
 8006416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006418:	e00e      	b.n	8006438 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800641a:	f7fe ffed 	bl	80053f8 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d907      	bls.n	8006438 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e150      	b.n	80066ce <HAL_RCC_OscConfig+0x4e2>
 800642c:	40023800 	.word	0x40023800
 8006430:	42470000 	.word	0x42470000
 8006434:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006438:	4b88      	ldr	r3, [pc, #544]	; (800665c <HAL_RCC_OscConfig+0x470>)
 800643a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1ea      	bne.n	800641a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 8097 	beq.w	8006580 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006452:	2300      	movs	r3, #0
 8006454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006456:	4b81      	ldr	r3, [pc, #516]	; (800665c <HAL_RCC_OscConfig+0x470>)
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10f      	bne.n	8006482 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006462:	2300      	movs	r3, #0
 8006464:	60bb      	str	r3, [r7, #8]
 8006466:	4b7d      	ldr	r3, [pc, #500]	; (800665c <HAL_RCC_OscConfig+0x470>)
 8006468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646a:	4a7c      	ldr	r2, [pc, #496]	; (800665c <HAL_RCC_OscConfig+0x470>)
 800646c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006470:	6413      	str	r3, [r2, #64]	; 0x40
 8006472:	4b7a      	ldr	r3, [pc, #488]	; (800665c <HAL_RCC_OscConfig+0x470>)
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800647a:	60bb      	str	r3, [r7, #8]
 800647c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800647e:	2301      	movs	r3, #1
 8006480:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006482:	4b77      	ldr	r3, [pc, #476]	; (8006660 <HAL_RCC_OscConfig+0x474>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800648a:	2b00      	cmp	r3, #0
 800648c:	d118      	bne.n	80064c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800648e:	4b74      	ldr	r3, [pc, #464]	; (8006660 <HAL_RCC_OscConfig+0x474>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a73      	ldr	r2, [pc, #460]	; (8006660 <HAL_RCC_OscConfig+0x474>)
 8006494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800649a:	f7fe ffad 	bl	80053f8 <HAL_GetTick>
 800649e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064a0:	e008      	b.n	80064b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064a2:	f7fe ffa9 	bl	80053f8 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d901      	bls.n	80064b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e10c      	b.n	80066ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b4:	4b6a      	ldr	r3, [pc, #424]	; (8006660 <HAL_RCC_OscConfig+0x474>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d0f0      	beq.n	80064a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d106      	bne.n	80064d6 <HAL_RCC_OscConfig+0x2ea>
 80064c8:	4b64      	ldr	r3, [pc, #400]	; (800665c <HAL_RCC_OscConfig+0x470>)
 80064ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064cc:	4a63      	ldr	r2, [pc, #396]	; (800665c <HAL_RCC_OscConfig+0x470>)
 80064ce:	f043 0301 	orr.w	r3, r3, #1
 80064d2:	6713      	str	r3, [r2, #112]	; 0x70
 80064d4:	e01c      	b.n	8006510 <HAL_RCC_OscConfig+0x324>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	2b05      	cmp	r3, #5
 80064dc:	d10c      	bne.n	80064f8 <HAL_RCC_OscConfig+0x30c>
 80064de:	4b5f      	ldr	r3, [pc, #380]	; (800665c <HAL_RCC_OscConfig+0x470>)
 80064e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e2:	4a5e      	ldr	r2, [pc, #376]	; (800665c <HAL_RCC_OscConfig+0x470>)
 80064e4:	f043 0304 	orr.w	r3, r3, #4
 80064e8:	6713      	str	r3, [r2, #112]	; 0x70
 80064ea:	4b5c      	ldr	r3, [pc, #368]	; (800665c <HAL_RCC_OscConfig+0x470>)
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	4a5b      	ldr	r2, [pc, #364]	; (800665c <HAL_RCC_OscConfig+0x470>)
 80064f0:	f043 0301 	orr.w	r3, r3, #1
 80064f4:	6713      	str	r3, [r2, #112]	; 0x70
 80064f6:	e00b      	b.n	8006510 <HAL_RCC_OscConfig+0x324>
 80064f8:	4b58      	ldr	r3, [pc, #352]	; (800665c <HAL_RCC_OscConfig+0x470>)
 80064fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fc:	4a57      	ldr	r2, [pc, #348]	; (800665c <HAL_RCC_OscConfig+0x470>)
 80064fe:	f023 0301 	bic.w	r3, r3, #1
 8006502:	6713      	str	r3, [r2, #112]	; 0x70
 8006504:	4b55      	ldr	r3, [pc, #340]	; (800665c <HAL_RCC_OscConfig+0x470>)
 8006506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006508:	4a54      	ldr	r2, [pc, #336]	; (800665c <HAL_RCC_OscConfig+0x470>)
 800650a:	f023 0304 	bic.w	r3, r3, #4
 800650e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d015      	beq.n	8006544 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006518:	f7fe ff6e 	bl	80053f8 <HAL_GetTick>
 800651c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800651e:	e00a      	b.n	8006536 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006520:	f7fe ff6a 	bl	80053f8 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	f241 3288 	movw	r2, #5000	; 0x1388
 800652e:	4293      	cmp	r3, r2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e0cb      	b.n	80066ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006536:	4b49      	ldr	r3, [pc, #292]	; (800665c <HAL_RCC_OscConfig+0x470>)
 8006538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d0ee      	beq.n	8006520 <HAL_RCC_OscConfig+0x334>
 8006542:	e014      	b.n	800656e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006544:	f7fe ff58 	bl	80053f8 <HAL_GetTick>
 8006548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800654a:	e00a      	b.n	8006562 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800654c:	f7fe ff54 	bl	80053f8 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	f241 3288 	movw	r2, #5000	; 0x1388
 800655a:	4293      	cmp	r3, r2
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e0b5      	b.n	80066ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006562:	4b3e      	ldr	r3, [pc, #248]	; (800665c <HAL_RCC_OscConfig+0x470>)
 8006564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1ee      	bne.n	800654c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800656e:	7dfb      	ldrb	r3, [r7, #23]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d105      	bne.n	8006580 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006574:	4b39      	ldr	r3, [pc, #228]	; (800665c <HAL_RCC_OscConfig+0x470>)
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	4a38      	ldr	r2, [pc, #224]	; (800665c <HAL_RCC_OscConfig+0x470>)
 800657a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800657e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 80a1 	beq.w	80066cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800658a:	4b34      	ldr	r3, [pc, #208]	; (800665c <HAL_RCC_OscConfig+0x470>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f003 030c 	and.w	r3, r3, #12
 8006592:	2b08      	cmp	r3, #8
 8006594:	d05c      	beq.n	8006650 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	2b02      	cmp	r3, #2
 800659c:	d141      	bne.n	8006622 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800659e:	4b31      	ldr	r3, [pc, #196]	; (8006664 <HAL_RCC_OscConfig+0x478>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a4:	f7fe ff28 	bl	80053f8 <HAL_GetTick>
 80065a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065aa:	e008      	b.n	80065be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065ac:	f7fe ff24 	bl	80053f8 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d901      	bls.n	80065be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e087      	b.n	80066ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065be:	4b27      	ldr	r3, [pc, #156]	; (800665c <HAL_RCC_OscConfig+0x470>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1f0      	bne.n	80065ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	69da      	ldr	r2, [r3, #28]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	431a      	orrs	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	019b      	lsls	r3, r3, #6
 80065da:	431a      	orrs	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	085b      	lsrs	r3, r3, #1
 80065e2:	3b01      	subs	r3, #1
 80065e4:	041b      	lsls	r3, r3, #16
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ec:	061b      	lsls	r3, r3, #24
 80065ee:	491b      	ldr	r1, [pc, #108]	; (800665c <HAL_RCC_OscConfig+0x470>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065f4:	4b1b      	ldr	r3, [pc, #108]	; (8006664 <HAL_RCC_OscConfig+0x478>)
 80065f6:	2201      	movs	r2, #1
 80065f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065fa:	f7fe fefd 	bl	80053f8 <HAL_GetTick>
 80065fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006600:	e008      	b.n	8006614 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006602:	f7fe fef9 	bl	80053f8 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2b02      	cmp	r3, #2
 800660e:	d901      	bls.n	8006614 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e05c      	b.n	80066ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006614:	4b11      	ldr	r3, [pc, #68]	; (800665c <HAL_RCC_OscConfig+0x470>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0f0      	beq.n	8006602 <HAL_RCC_OscConfig+0x416>
 8006620:	e054      	b.n	80066cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006622:	4b10      	ldr	r3, [pc, #64]	; (8006664 <HAL_RCC_OscConfig+0x478>)
 8006624:	2200      	movs	r2, #0
 8006626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006628:	f7fe fee6 	bl	80053f8 <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006630:	f7fe fee2 	bl	80053f8 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e045      	b.n	80066ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006642:	4b06      	ldr	r3, [pc, #24]	; (800665c <HAL_RCC_OscConfig+0x470>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1f0      	bne.n	8006630 <HAL_RCC_OscConfig+0x444>
 800664e:	e03d      	b.n	80066cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d107      	bne.n	8006668 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e038      	b.n	80066ce <HAL_RCC_OscConfig+0x4e2>
 800665c:	40023800 	.word	0x40023800
 8006660:	40007000 	.word	0x40007000
 8006664:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006668:	4b1b      	ldr	r3, [pc, #108]	; (80066d8 <HAL_RCC_OscConfig+0x4ec>)
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d028      	beq.n	80066c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006680:	429a      	cmp	r2, r3
 8006682:	d121      	bne.n	80066c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800668e:	429a      	cmp	r2, r3
 8006690:	d11a      	bne.n	80066c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006698:	4013      	ands	r3, r2
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800669e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d111      	bne.n	80066c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ae:	085b      	lsrs	r3, r3, #1
 80066b0:	3b01      	subs	r3, #1
 80066b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d107      	bne.n	80066c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d001      	beq.n	80066cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e000      	b.n	80066ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	40023800 	.word	0x40023800

080066dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e0cc      	b.n	800688a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066f0:	4b68      	ldr	r3, [pc, #416]	; (8006894 <HAL_RCC_ClockConfig+0x1b8>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d90c      	bls.n	8006718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066fe:	4b65      	ldr	r3, [pc, #404]	; (8006894 <HAL_RCC_ClockConfig+0x1b8>)
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	b2d2      	uxtb	r2, r2
 8006704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006706:	4b63      	ldr	r3, [pc, #396]	; (8006894 <HAL_RCC_ClockConfig+0x1b8>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0307 	and.w	r3, r3, #7
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	429a      	cmp	r2, r3
 8006712:	d001      	beq.n	8006718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e0b8      	b.n	800688a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d020      	beq.n	8006766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d005      	beq.n	800673c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006730:	4b59      	ldr	r3, [pc, #356]	; (8006898 <HAL_RCC_ClockConfig+0x1bc>)
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	4a58      	ldr	r2, [pc, #352]	; (8006898 <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800673a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0308 	and.w	r3, r3, #8
 8006744:	2b00      	cmp	r3, #0
 8006746:	d005      	beq.n	8006754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006748:	4b53      	ldr	r3, [pc, #332]	; (8006898 <HAL_RCC_ClockConfig+0x1bc>)
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	4a52      	ldr	r2, [pc, #328]	; (8006898 <HAL_RCC_ClockConfig+0x1bc>)
 800674e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006754:	4b50      	ldr	r3, [pc, #320]	; (8006898 <HAL_RCC_ClockConfig+0x1bc>)
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	494d      	ldr	r1, [pc, #308]	; (8006898 <HAL_RCC_ClockConfig+0x1bc>)
 8006762:	4313      	orrs	r3, r2
 8006764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b00      	cmp	r3, #0
 8006770:	d044      	beq.n	80067fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d107      	bne.n	800678a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800677a:	4b47      	ldr	r3, [pc, #284]	; (8006898 <HAL_RCC_ClockConfig+0x1bc>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d119      	bne.n	80067ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e07f      	b.n	800688a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	2b02      	cmp	r3, #2
 8006790:	d003      	beq.n	800679a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006796:	2b03      	cmp	r3, #3
 8006798:	d107      	bne.n	80067aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800679a:	4b3f      	ldr	r3, [pc, #252]	; (8006898 <HAL_RCC_ClockConfig+0x1bc>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d109      	bne.n	80067ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e06f      	b.n	800688a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067aa:	4b3b      	ldr	r3, [pc, #236]	; (8006898 <HAL_RCC_ClockConfig+0x1bc>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e067      	b.n	800688a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067ba:	4b37      	ldr	r3, [pc, #220]	; (8006898 <HAL_RCC_ClockConfig+0x1bc>)
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f023 0203 	bic.w	r2, r3, #3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	4934      	ldr	r1, [pc, #208]	; (8006898 <HAL_RCC_ClockConfig+0x1bc>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067cc:	f7fe fe14 	bl	80053f8 <HAL_GetTick>
 80067d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067d2:	e00a      	b.n	80067ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067d4:	f7fe fe10 	bl	80053f8 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e04f      	b.n	800688a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ea:	4b2b      	ldr	r3, [pc, #172]	; (8006898 <HAL_RCC_ClockConfig+0x1bc>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f003 020c 	and.w	r2, r3, #12
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d1eb      	bne.n	80067d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067fc:	4b25      	ldr	r3, [pc, #148]	; (8006894 <HAL_RCC_ClockConfig+0x1b8>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	429a      	cmp	r2, r3
 8006808:	d20c      	bcs.n	8006824 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800680a:	4b22      	ldr	r3, [pc, #136]	; (8006894 <HAL_RCC_ClockConfig+0x1b8>)
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	b2d2      	uxtb	r2, r2
 8006810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006812:	4b20      	ldr	r3, [pc, #128]	; (8006894 <HAL_RCC_ClockConfig+0x1b8>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d001      	beq.n	8006824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e032      	b.n	800688a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	d008      	beq.n	8006842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006830:	4b19      	ldr	r3, [pc, #100]	; (8006898 <HAL_RCC_ClockConfig+0x1bc>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	4916      	ldr	r1, [pc, #88]	; (8006898 <HAL_RCC_ClockConfig+0x1bc>)
 800683e:	4313      	orrs	r3, r2
 8006840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0308 	and.w	r3, r3, #8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d009      	beq.n	8006862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800684e:	4b12      	ldr	r3, [pc, #72]	; (8006898 <HAL_RCC_ClockConfig+0x1bc>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	490e      	ldr	r1, [pc, #56]	; (8006898 <HAL_RCC_ClockConfig+0x1bc>)
 800685e:	4313      	orrs	r3, r2
 8006860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006862:	f000 f821 	bl	80068a8 <HAL_RCC_GetSysClockFreq>
 8006866:	4602      	mov	r2, r0
 8006868:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <HAL_RCC_ClockConfig+0x1bc>)
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	091b      	lsrs	r3, r3, #4
 800686e:	f003 030f 	and.w	r3, r3, #15
 8006872:	490a      	ldr	r1, [pc, #40]	; (800689c <HAL_RCC_ClockConfig+0x1c0>)
 8006874:	5ccb      	ldrb	r3, [r1, r3]
 8006876:	fa22 f303 	lsr.w	r3, r2, r3
 800687a:	4a09      	ldr	r2, [pc, #36]	; (80068a0 <HAL_RCC_ClockConfig+0x1c4>)
 800687c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800687e:	4b09      	ldr	r3, [pc, #36]	; (80068a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe fd74 	bl	8005370 <HAL_InitTick>

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	40023c00 	.word	0x40023c00
 8006898:	40023800 	.word	0x40023800
 800689c:	0800de4c 	.word	0x0800de4c
 80068a0:	20000014 	.word	0x20000014
 80068a4:	20000018 	.word	0x20000018

080068a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068ac:	b090      	sub	sp, #64	; 0x40
 80068ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	637b      	str	r3, [r7, #52]	; 0x34
 80068b4:	2300      	movs	r3, #0
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b8:	2300      	movs	r3, #0
 80068ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80068bc:	2300      	movs	r3, #0
 80068be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068c0:	4b59      	ldr	r3, [pc, #356]	; (8006a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f003 030c 	and.w	r3, r3, #12
 80068c8:	2b08      	cmp	r3, #8
 80068ca:	d00d      	beq.n	80068e8 <HAL_RCC_GetSysClockFreq+0x40>
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	f200 80a1 	bhi.w	8006a14 <HAL_RCC_GetSysClockFreq+0x16c>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <HAL_RCC_GetSysClockFreq+0x34>
 80068d6:	2b04      	cmp	r3, #4
 80068d8:	d003      	beq.n	80068e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80068da:	e09b      	b.n	8006a14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068dc:	4b53      	ldr	r3, [pc, #332]	; (8006a2c <HAL_RCC_GetSysClockFreq+0x184>)
 80068de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80068e0:	e09b      	b.n	8006a1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068e2:	4b53      	ldr	r3, [pc, #332]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x188>)
 80068e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80068e6:	e098      	b.n	8006a1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068e8:	4b4f      	ldr	r3, [pc, #316]	; (8006a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068f2:	4b4d      	ldr	r3, [pc, #308]	; (8006a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d028      	beq.n	8006950 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068fe:	4b4a      	ldr	r3, [pc, #296]	; (8006a28 <HAL_RCC_GetSysClockFreq+0x180>)
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	099b      	lsrs	r3, r3, #6
 8006904:	2200      	movs	r2, #0
 8006906:	623b      	str	r3, [r7, #32]
 8006908:	627a      	str	r2, [r7, #36]	; 0x24
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006910:	2100      	movs	r1, #0
 8006912:	4b47      	ldr	r3, [pc, #284]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x188>)
 8006914:	fb03 f201 	mul.w	r2, r3, r1
 8006918:	2300      	movs	r3, #0
 800691a:	fb00 f303 	mul.w	r3, r0, r3
 800691e:	4413      	add	r3, r2
 8006920:	4a43      	ldr	r2, [pc, #268]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x188>)
 8006922:	fba0 1202 	umull	r1, r2, r0, r2
 8006926:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006928:	460a      	mov	r2, r1
 800692a:	62ba      	str	r2, [r7, #40]	; 0x28
 800692c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800692e:	4413      	add	r3, r2
 8006930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006934:	2200      	movs	r2, #0
 8006936:	61bb      	str	r3, [r7, #24]
 8006938:	61fa      	str	r2, [r7, #28]
 800693a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800693e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006942:	f7fa f9a1 	bl	8000c88 <__aeabi_uldivmod>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	4613      	mov	r3, r2
 800694c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800694e:	e053      	b.n	80069f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006950:	4b35      	ldr	r3, [pc, #212]	; (8006a28 <HAL_RCC_GetSysClockFreq+0x180>)
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	099b      	lsrs	r3, r3, #6
 8006956:	2200      	movs	r2, #0
 8006958:	613b      	str	r3, [r7, #16]
 800695a:	617a      	str	r2, [r7, #20]
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006962:	f04f 0b00 	mov.w	fp, #0
 8006966:	4652      	mov	r2, sl
 8006968:	465b      	mov	r3, fp
 800696a:	f04f 0000 	mov.w	r0, #0
 800696e:	f04f 0100 	mov.w	r1, #0
 8006972:	0159      	lsls	r1, r3, #5
 8006974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006978:	0150      	lsls	r0, r2, #5
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
 800697e:	ebb2 080a 	subs.w	r8, r2, sl
 8006982:	eb63 090b 	sbc.w	r9, r3, fp
 8006986:	f04f 0200 	mov.w	r2, #0
 800698a:	f04f 0300 	mov.w	r3, #0
 800698e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006992:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006996:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800699a:	ebb2 0408 	subs.w	r4, r2, r8
 800699e:	eb63 0509 	sbc.w	r5, r3, r9
 80069a2:	f04f 0200 	mov.w	r2, #0
 80069a6:	f04f 0300 	mov.w	r3, #0
 80069aa:	00eb      	lsls	r3, r5, #3
 80069ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069b0:	00e2      	lsls	r2, r4, #3
 80069b2:	4614      	mov	r4, r2
 80069b4:	461d      	mov	r5, r3
 80069b6:	eb14 030a 	adds.w	r3, r4, sl
 80069ba:	603b      	str	r3, [r7, #0]
 80069bc:	eb45 030b 	adc.w	r3, r5, fp
 80069c0:	607b      	str	r3, [r7, #4]
 80069c2:	f04f 0200 	mov.w	r2, #0
 80069c6:	f04f 0300 	mov.w	r3, #0
 80069ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069ce:	4629      	mov	r1, r5
 80069d0:	028b      	lsls	r3, r1, #10
 80069d2:	4621      	mov	r1, r4
 80069d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069d8:	4621      	mov	r1, r4
 80069da:	028a      	lsls	r2, r1, #10
 80069dc:	4610      	mov	r0, r2
 80069de:	4619      	mov	r1, r3
 80069e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e2:	2200      	movs	r2, #0
 80069e4:	60bb      	str	r3, [r7, #8]
 80069e6:	60fa      	str	r2, [r7, #12]
 80069e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069ec:	f7fa f94c 	bl	8000c88 <__aeabi_uldivmod>
 80069f0:	4602      	mov	r2, r0
 80069f2:	460b      	mov	r3, r1
 80069f4:	4613      	mov	r3, r2
 80069f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80069f8:	4b0b      	ldr	r3, [pc, #44]	; (8006a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	0c1b      	lsrs	r3, r3, #16
 80069fe:	f003 0303 	and.w	r3, r3, #3
 8006a02:	3301      	adds	r3, #1
 8006a04:	005b      	lsls	r3, r3, #1
 8006a06:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006a08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a12:	e002      	b.n	8006a1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a14:	4b05      	ldr	r3, [pc, #20]	; (8006a2c <HAL_RCC_GetSysClockFreq+0x184>)
 8006a16:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3740      	adds	r7, #64	; 0x40
 8006a20:	46bd      	mov	sp, r7
 8006a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a26:	bf00      	nop
 8006a28:	40023800 	.word	0x40023800
 8006a2c:	00f42400 	.word	0x00f42400
 8006a30:	017d7840 	.word	0x017d7840

08006a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a38:	4b03      	ldr	r3, [pc, #12]	; (8006a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	20000014 	.word	0x20000014

08006a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a50:	f7ff fff0 	bl	8006a34 <HAL_RCC_GetHCLKFreq>
 8006a54:	4602      	mov	r2, r0
 8006a56:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	0a9b      	lsrs	r3, r3, #10
 8006a5c:	f003 0307 	and.w	r3, r3, #7
 8006a60:	4903      	ldr	r1, [pc, #12]	; (8006a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a62:	5ccb      	ldrb	r3, [r1, r3]
 8006a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	40023800 	.word	0x40023800
 8006a70:	0800de5c 	.word	0x0800de5c

08006a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a78:	f7ff ffdc 	bl	8006a34 <HAL_RCC_GetHCLKFreq>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	0b5b      	lsrs	r3, r3, #13
 8006a84:	f003 0307 	and.w	r3, r3, #7
 8006a88:	4903      	ldr	r1, [pc, #12]	; (8006a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a8a:	5ccb      	ldrb	r3, [r1, r3]
 8006a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	40023800 	.word	0x40023800
 8006a98:	0800de5c 	.word	0x0800de5c

08006a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e041      	b.n	8006b32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fe f954 	bl	8004d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4610      	mov	r0, r2
 8006adc:	f000 fda4 	bl	8007628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
	...

08006b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d001      	beq.n	8006b54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e04e      	b.n	8006bf2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68da      	ldr	r2, [r3, #12]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0201 	orr.w	r2, r2, #1
 8006b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a23      	ldr	r2, [pc, #140]	; (8006c00 <HAL_TIM_Base_Start_IT+0xc4>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d022      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b7e:	d01d      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a1f      	ldr	r2, [pc, #124]	; (8006c04 <HAL_TIM_Base_Start_IT+0xc8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d018      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a1e      	ldr	r2, [pc, #120]	; (8006c08 <HAL_TIM_Base_Start_IT+0xcc>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d013      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a1c      	ldr	r2, [pc, #112]	; (8006c0c <HAL_TIM_Base_Start_IT+0xd0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00e      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a1b      	ldr	r2, [pc, #108]	; (8006c10 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d009      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a19      	ldr	r2, [pc, #100]	; (8006c14 <HAL_TIM_Base_Start_IT+0xd8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d004      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a18      	ldr	r2, [pc, #96]	; (8006c18 <HAL_TIM_Base_Start_IT+0xdc>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d111      	bne.n	8006be0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 0307 	and.w	r3, r3, #7
 8006bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b06      	cmp	r3, #6
 8006bcc:	d010      	beq.n	8006bf0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f042 0201 	orr.w	r2, r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bde:	e007      	b.n	8006bf0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0201 	orr.w	r2, r2, #1
 8006bee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	40010000 	.word	0x40010000
 8006c04:	40000400 	.word	0x40000400
 8006c08:	40000800 	.word	0x40000800
 8006c0c:	40000c00 	.word	0x40000c00
 8006c10:	40010400 	.word	0x40010400
 8006c14:	40014000 	.word	0x40014000
 8006c18:	40001800 	.word	0x40001800

08006c1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e041      	b.n	8006cb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d106      	bne.n	8006c48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7fe f874 	bl	8004d30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	f000 fce4 	bl	8007628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d109      	bne.n	8006ce0 <HAL_TIM_PWM_Start+0x24>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	bf14      	ite	ne
 8006cd8:	2301      	movne	r3, #1
 8006cda:	2300      	moveq	r3, #0
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	e022      	b.n	8006d26 <HAL_TIM_PWM_Start+0x6a>
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2b04      	cmp	r3, #4
 8006ce4:	d109      	bne.n	8006cfa <HAL_TIM_PWM_Start+0x3e>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	bf14      	ite	ne
 8006cf2:	2301      	movne	r3, #1
 8006cf4:	2300      	moveq	r3, #0
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	e015      	b.n	8006d26 <HAL_TIM_PWM_Start+0x6a>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	d109      	bne.n	8006d14 <HAL_TIM_PWM_Start+0x58>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	bf14      	ite	ne
 8006d0c:	2301      	movne	r3, #1
 8006d0e:	2300      	moveq	r3, #0
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	e008      	b.n	8006d26 <HAL_TIM_PWM_Start+0x6a>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	bf14      	ite	ne
 8006d20:	2301      	movne	r3, #1
 8006d22:	2300      	moveq	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e07c      	b.n	8006e28 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d104      	bne.n	8006d3e <HAL_TIM_PWM_Start+0x82>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d3c:	e013      	b.n	8006d66 <HAL_TIM_PWM_Start+0xaa>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d104      	bne.n	8006d4e <HAL_TIM_PWM_Start+0x92>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d4c:	e00b      	b.n	8006d66 <HAL_TIM_PWM_Start+0xaa>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d104      	bne.n	8006d5e <HAL_TIM_PWM_Start+0xa2>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d5c:	e003      	b.n	8006d66 <HAL_TIM_PWM_Start+0xaa>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2202      	movs	r2, #2
 8006d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 ff44 	bl	8007bfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a2d      	ldr	r2, [pc, #180]	; (8006e30 <HAL_TIM_PWM_Start+0x174>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d004      	beq.n	8006d88 <HAL_TIM_PWM_Start+0xcc>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a2c      	ldr	r2, [pc, #176]	; (8006e34 <HAL_TIM_PWM_Start+0x178>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d101      	bne.n	8006d8c <HAL_TIM_PWM_Start+0xd0>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e000      	b.n	8006d8e <HAL_TIM_PWM_Start+0xd2>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d007      	beq.n	8006da2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006da0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a22      	ldr	r2, [pc, #136]	; (8006e30 <HAL_TIM_PWM_Start+0x174>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d022      	beq.n	8006df2 <HAL_TIM_PWM_Start+0x136>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db4:	d01d      	beq.n	8006df2 <HAL_TIM_PWM_Start+0x136>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a1f      	ldr	r2, [pc, #124]	; (8006e38 <HAL_TIM_PWM_Start+0x17c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d018      	beq.n	8006df2 <HAL_TIM_PWM_Start+0x136>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a1d      	ldr	r2, [pc, #116]	; (8006e3c <HAL_TIM_PWM_Start+0x180>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d013      	beq.n	8006df2 <HAL_TIM_PWM_Start+0x136>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a1c      	ldr	r2, [pc, #112]	; (8006e40 <HAL_TIM_PWM_Start+0x184>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00e      	beq.n	8006df2 <HAL_TIM_PWM_Start+0x136>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a16      	ldr	r2, [pc, #88]	; (8006e34 <HAL_TIM_PWM_Start+0x178>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d009      	beq.n	8006df2 <HAL_TIM_PWM_Start+0x136>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a18      	ldr	r2, [pc, #96]	; (8006e44 <HAL_TIM_PWM_Start+0x188>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d004      	beq.n	8006df2 <HAL_TIM_PWM_Start+0x136>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a16      	ldr	r2, [pc, #88]	; (8006e48 <HAL_TIM_PWM_Start+0x18c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d111      	bne.n	8006e16 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2b06      	cmp	r3, #6
 8006e02:	d010      	beq.n	8006e26 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f042 0201 	orr.w	r2, r2, #1
 8006e12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e14:	e007      	b.n	8006e26 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0201 	orr.w	r2, r2, #1
 8006e24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	40010000 	.word	0x40010000
 8006e34:	40010400 	.word	0x40010400
 8006e38:	40000400 	.word	0x40000400
 8006e3c:	40000800 	.word	0x40000800
 8006e40:	40000c00 	.word	0x40000c00
 8006e44:	40014000 	.word	0x40014000
 8006e48:	40001800 	.word	0x40001800

08006e4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e097      	b.n	8006f90 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d106      	bne.n	8006e7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7fd fedd 	bl	8004c34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6812      	ldr	r2, [r2, #0]
 8006e8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e90:	f023 0307 	bic.w	r3, r3, #7
 8006e94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	f000 fbc1 	bl	8007628 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ece:	f023 0303 	bic.w	r3, r3, #3
 8006ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	021b      	lsls	r3, r3, #8
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006eec:	f023 030c 	bic.w	r3, r3, #12
 8006ef0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ef8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006efc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68da      	ldr	r2, [r3, #12]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	021b      	lsls	r3, r3, #8
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	011a      	lsls	r2, r3, #4
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	031b      	lsls	r3, r3, #12
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006f2a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006f32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	011b      	lsls	r3, r3, #4
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3718      	adds	r7, #24
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fa8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fb0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fb8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006fc0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d110      	bne.n	8006fea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d102      	bne.n	8006fd4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fce:	7b7b      	ldrb	r3, [r7, #13]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d001      	beq.n	8006fd8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e069      	b.n	80070ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fe8:	e031      	b.n	800704e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	d110      	bne.n	8007012 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d102      	bne.n	8006ffc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ff6:	7b3b      	ldrb	r3, [r7, #12]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d001      	beq.n	8007000 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e055      	b.n	80070ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007010:	e01d      	b.n	800704e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007012:	7bfb      	ldrb	r3, [r7, #15]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d108      	bne.n	800702a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007018:	7bbb      	ldrb	r3, [r7, #14]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d105      	bne.n	800702a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800701e:	7b7b      	ldrb	r3, [r7, #13]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d102      	bne.n	800702a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007024:	7b3b      	ldrb	r3, [r7, #12]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d001      	beq.n	800702e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e03e      	b.n	80070ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2202      	movs	r2, #2
 8007032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2202      	movs	r2, #2
 800703a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2202      	movs	r2, #2
 8007042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2202      	movs	r2, #2
 800704a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <HAL_TIM_Encoder_Start+0xc4>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2b04      	cmp	r3, #4
 8007058:	d008      	beq.n	800706c <HAL_TIM_Encoder_Start+0xd4>
 800705a:	e00f      	b.n	800707c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2201      	movs	r2, #1
 8007062:	2100      	movs	r1, #0
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fdc9 	bl	8007bfc <TIM_CCxChannelCmd>
      break;
 800706a:	e016      	b.n	800709a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2201      	movs	r2, #1
 8007072:	2104      	movs	r1, #4
 8007074:	4618      	mov	r0, r3
 8007076:	f000 fdc1 	bl	8007bfc <TIM_CCxChannelCmd>
      break;
 800707a:	e00e      	b.n	800709a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2201      	movs	r2, #1
 8007082:	2100      	movs	r1, #0
 8007084:	4618      	mov	r0, r3
 8007086:	f000 fdb9 	bl	8007bfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2201      	movs	r2, #1
 8007090:	2104      	movs	r1, #4
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fdb2 	bl	8007bfc <TIM_CCxChannelCmd>
      break;
 8007098:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f042 0201 	orr.w	r2, r2, #1
 80070a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d122      	bne.n	8007110 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d11b      	bne.n	8007110 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f06f 0202 	mvn.w	r2, #2
 80070e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	f003 0303 	and.w	r3, r3, #3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fa77 	bl	80075ea <HAL_TIM_IC_CaptureCallback>
 80070fc:	e005      	b.n	800710a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fa69 	bl	80075d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fa7a 	bl	80075fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f003 0304 	and.w	r3, r3, #4
 800711a:	2b04      	cmp	r3, #4
 800711c:	d122      	bne.n	8007164 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f003 0304 	and.w	r3, r3, #4
 8007128:	2b04      	cmp	r3, #4
 800712a:	d11b      	bne.n	8007164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f06f 0204 	mvn.w	r2, #4
 8007134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2202      	movs	r2, #2
 800713a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fa4d 	bl	80075ea <HAL_TIM_IC_CaptureCallback>
 8007150:	e005      	b.n	800715e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fa3f 	bl	80075d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fa50 	bl	80075fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f003 0308 	and.w	r3, r3, #8
 800716e:	2b08      	cmp	r3, #8
 8007170:	d122      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f003 0308 	and.w	r3, r3, #8
 800717c:	2b08      	cmp	r3, #8
 800717e:	d11b      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f06f 0208 	mvn.w	r2, #8
 8007188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2204      	movs	r2, #4
 800718e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	f003 0303 	and.w	r3, r3, #3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d003      	beq.n	80071a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fa23 	bl	80075ea <HAL_TIM_IC_CaptureCallback>
 80071a4:	e005      	b.n	80071b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fa15 	bl	80075d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fa26 	bl	80075fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f003 0310 	and.w	r3, r3, #16
 80071c2:	2b10      	cmp	r3, #16
 80071c4:	d122      	bne.n	800720c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f003 0310 	and.w	r3, r3, #16
 80071d0:	2b10      	cmp	r3, #16
 80071d2:	d11b      	bne.n	800720c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f06f 0210 	mvn.w	r2, #16
 80071dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2208      	movs	r2, #8
 80071e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d003      	beq.n	80071fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f9f9 	bl	80075ea <HAL_TIM_IC_CaptureCallback>
 80071f8:	e005      	b.n	8007206 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f9eb 	bl	80075d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f9fc 	bl	80075fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b01      	cmp	r3, #1
 8007218:	d10e      	bne.n	8007238 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b01      	cmp	r3, #1
 8007226:	d107      	bne.n	8007238 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f06f 0201 	mvn.w	r2, #1
 8007230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7fa fc64 	bl	8001b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007242:	2b80      	cmp	r3, #128	; 0x80
 8007244:	d10e      	bne.n	8007264 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007250:	2b80      	cmp	r3, #128	; 0x80
 8007252:	d107      	bne.n	8007264 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800725c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fd78 	bl	8007d54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726e:	2b40      	cmp	r3, #64	; 0x40
 8007270:	d10e      	bne.n	8007290 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727c:	2b40      	cmp	r3, #64	; 0x40
 800727e:	d107      	bne.n	8007290 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f9c1 	bl	8007612 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f003 0320 	and.w	r3, r3, #32
 800729a:	2b20      	cmp	r3, #32
 800729c:	d10e      	bne.n	80072bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f003 0320 	and.w	r3, r3, #32
 80072a8:	2b20      	cmp	r3, #32
 80072aa:	d107      	bne.n	80072bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0220 	mvn.w	r2, #32
 80072b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fd42 	bl	8007d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072bc:	bf00      	nop
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d101      	bne.n	80072e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072de:	2302      	movs	r3, #2
 80072e0:	e0ae      	b.n	8007440 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b0c      	cmp	r3, #12
 80072ee:	f200 809f 	bhi.w	8007430 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80072f2:	a201      	add	r2, pc, #4	; (adr r2, 80072f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f8:	0800732d 	.word	0x0800732d
 80072fc:	08007431 	.word	0x08007431
 8007300:	08007431 	.word	0x08007431
 8007304:	08007431 	.word	0x08007431
 8007308:	0800736d 	.word	0x0800736d
 800730c:	08007431 	.word	0x08007431
 8007310:	08007431 	.word	0x08007431
 8007314:	08007431 	.word	0x08007431
 8007318:	080073af 	.word	0x080073af
 800731c:	08007431 	.word	0x08007431
 8007320:	08007431 	.word	0x08007431
 8007324:	08007431 	.word	0x08007431
 8007328:	080073ef 	.word	0x080073ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68b9      	ldr	r1, [r7, #8]
 8007332:	4618      	mov	r0, r3
 8007334:	f000 fa18 	bl	8007768 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	699a      	ldr	r2, [r3, #24]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f042 0208 	orr.w	r2, r2, #8
 8007346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	699a      	ldr	r2, [r3, #24]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 0204 	bic.w	r2, r2, #4
 8007356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6999      	ldr	r1, [r3, #24]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	691a      	ldr	r2, [r3, #16]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	619a      	str	r2, [r3, #24]
      break;
 800736a:	e064      	b.n	8007436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68b9      	ldr	r1, [r7, #8]
 8007372:	4618      	mov	r0, r3
 8007374:	f000 fa68 	bl	8007848 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	699a      	ldr	r2, [r3, #24]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	699a      	ldr	r2, [r3, #24]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6999      	ldr	r1, [r3, #24]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	021a      	lsls	r2, r3, #8
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	430a      	orrs	r2, r1
 80073aa:	619a      	str	r2, [r3, #24]
      break;
 80073ac:	e043      	b.n	8007436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68b9      	ldr	r1, [r7, #8]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f000 fabd 	bl	8007934 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69da      	ldr	r2, [r3, #28]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f042 0208 	orr.w	r2, r2, #8
 80073c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	69da      	ldr	r2, [r3, #28]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f022 0204 	bic.w	r2, r2, #4
 80073d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	69d9      	ldr	r1, [r3, #28]
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	430a      	orrs	r2, r1
 80073ea:	61da      	str	r2, [r3, #28]
      break;
 80073ec:	e023      	b.n	8007436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68b9      	ldr	r1, [r7, #8]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f000 fb11 	bl	8007a1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	69da      	ldr	r2, [r3, #28]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	69da      	ldr	r2, [r3, #28]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	69d9      	ldr	r1, [r3, #28]
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	021a      	lsls	r2, r3, #8
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	61da      	str	r2, [r3, #28]
      break;
 800742e:	e002      	b.n	8007436 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	75fb      	strb	r3, [r7, #23]
      break;
 8007434:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800743e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800745c:	2b01      	cmp	r3, #1
 800745e:	d101      	bne.n	8007464 <HAL_TIM_ConfigClockSource+0x1c>
 8007460:	2302      	movs	r3, #2
 8007462:	e0b4      	b.n	80075ce <HAL_TIM_ConfigClockSource+0x186>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2202      	movs	r2, #2
 8007470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800748a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800749c:	d03e      	beq.n	800751c <HAL_TIM_ConfigClockSource+0xd4>
 800749e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a2:	f200 8087 	bhi.w	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074aa:	f000 8086 	beq.w	80075ba <HAL_TIM_ConfigClockSource+0x172>
 80074ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b2:	d87f      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074b4:	2b70      	cmp	r3, #112	; 0x70
 80074b6:	d01a      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0xa6>
 80074b8:	2b70      	cmp	r3, #112	; 0x70
 80074ba:	d87b      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074bc:	2b60      	cmp	r3, #96	; 0x60
 80074be:	d050      	beq.n	8007562 <HAL_TIM_ConfigClockSource+0x11a>
 80074c0:	2b60      	cmp	r3, #96	; 0x60
 80074c2:	d877      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074c4:	2b50      	cmp	r3, #80	; 0x50
 80074c6:	d03c      	beq.n	8007542 <HAL_TIM_ConfigClockSource+0xfa>
 80074c8:	2b50      	cmp	r3, #80	; 0x50
 80074ca:	d873      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074cc:	2b40      	cmp	r3, #64	; 0x40
 80074ce:	d058      	beq.n	8007582 <HAL_TIM_ConfigClockSource+0x13a>
 80074d0:	2b40      	cmp	r3, #64	; 0x40
 80074d2:	d86f      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074d4:	2b30      	cmp	r3, #48	; 0x30
 80074d6:	d064      	beq.n	80075a2 <HAL_TIM_ConfigClockSource+0x15a>
 80074d8:	2b30      	cmp	r3, #48	; 0x30
 80074da:	d86b      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074dc:	2b20      	cmp	r3, #32
 80074de:	d060      	beq.n	80075a2 <HAL_TIM_ConfigClockSource+0x15a>
 80074e0:	2b20      	cmp	r3, #32
 80074e2:	d867      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d05c      	beq.n	80075a2 <HAL_TIM_ConfigClockSource+0x15a>
 80074e8:	2b10      	cmp	r3, #16
 80074ea:	d05a      	beq.n	80075a2 <HAL_TIM_ConfigClockSource+0x15a>
 80074ec:	e062      	b.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6818      	ldr	r0, [r3, #0]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	6899      	ldr	r1, [r3, #8]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f000 fb5d 	bl	8007bbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007510:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	609a      	str	r2, [r3, #8]
      break;
 800751a:	e04f      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6818      	ldr	r0, [r3, #0]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	6899      	ldr	r1, [r3, #8]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f000 fb46 	bl	8007bbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800753e:	609a      	str	r2, [r3, #8]
      break;
 8007540:	e03c      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6818      	ldr	r0, [r3, #0]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	6859      	ldr	r1, [r3, #4]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	461a      	mov	r2, r3
 8007550:	f000 faba 	bl	8007ac8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2150      	movs	r1, #80	; 0x50
 800755a:	4618      	mov	r0, r3
 800755c:	f000 fb13 	bl	8007b86 <TIM_ITRx_SetConfig>
      break;
 8007560:	e02c      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6818      	ldr	r0, [r3, #0]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	6859      	ldr	r1, [r3, #4]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	461a      	mov	r2, r3
 8007570:	f000 fad9 	bl	8007b26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2160      	movs	r1, #96	; 0x60
 800757a:	4618      	mov	r0, r3
 800757c:	f000 fb03 	bl	8007b86 <TIM_ITRx_SetConfig>
      break;
 8007580:	e01c      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6818      	ldr	r0, [r3, #0]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	6859      	ldr	r1, [r3, #4]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	461a      	mov	r2, r3
 8007590:	f000 fa9a 	bl	8007ac8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2140      	movs	r1, #64	; 0x40
 800759a:	4618      	mov	r0, r3
 800759c:	f000 faf3 	bl	8007b86 <TIM_ITRx_SetConfig>
      break;
 80075a0:	e00c      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4619      	mov	r1, r3
 80075ac:	4610      	mov	r0, r2
 80075ae:	f000 faea 	bl	8007b86 <TIM_ITRx_SetConfig>
      break;
 80075b2:	e003      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	73fb      	strb	r3, [r7, #15]
      break;
 80075b8:	e000      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b083      	sub	sp, #12
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075f2:	bf00      	nop
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075fe:	b480      	push	{r7}
 8007600:	b083      	sub	sp, #12
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007606:	bf00      	nop
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007612:	b480      	push	{r7}
 8007614:	b083      	sub	sp, #12
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800761a:	bf00      	nop
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
	...

08007628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a40      	ldr	r2, [pc, #256]	; (800773c <TIM_Base_SetConfig+0x114>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d013      	beq.n	8007668 <TIM_Base_SetConfig+0x40>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007646:	d00f      	beq.n	8007668 <TIM_Base_SetConfig+0x40>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a3d      	ldr	r2, [pc, #244]	; (8007740 <TIM_Base_SetConfig+0x118>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00b      	beq.n	8007668 <TIM_Base_SetConfig+0x40>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a3c      	ldr	r2, [pc, #240]	; (8007744 <TIM_Base_SetConfig+0x11c>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d007      	beq.n	8007668 <TIM_Base_SetConfig+0x40>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a3b      	ldr	r2, [pc, #236]	; (8007748 <TIM_Base_SetConfig+0x120>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d003      	beq.n	8007668 <TIM_Base_SetConfig+0x40>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a3a      	ldr	r2, [pc, #232]	; (800774c <TIM_Base_SetConfig+0x124>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d108      	bne.n	800767a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a2f      	ldr	r2, [pc, #188]	; (800773c <TIM_Base_SetConfig+0x114>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d02b      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007688:	d027      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a2c      	ldr	r2, [pc, #176]	; (8007740 <TIM_Base_SetConfig+0x118>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d023      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a2b      	ldr	r2, [pc, #172]	; (8007744 <TIM_Base_SetConfig+0x11c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d01f      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a2a      	ldr	r2, [pc, #168]	; (8007748 <TIM_Base_SetConfig+0x120>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d01b      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a29      	ldr	r2, [pc, #164]	; (800774c <TIM_Base_SetConfig+0x124>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d017      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a28      	ldr	r2, [pc, #160]	; (8007750 <TIM_Base_SetConfig+0x128>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d013      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a27      	ldr	r2, [pc, #156]	; (8007754 <TIM_Base_SetConfig+0x12c>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00f      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a26      	ldr	r2, [pc, #152]	; (8007758 <TIM_Base_SetConfig+0x130>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d00b      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a25      	ldr	r2, [pc, #148]	; (800775c <TIM_Base_SetConfig+0x134>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d007      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a24      	ldr	r2, [pc, #144]	; (8007760 <TIM_Base_SetConfig+0x138>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d003      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a23      	ldr	r2, [pc, #140]	; (8007764 <TIM_Base_SetConfig+0x13c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d108      	bne.n	80076ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	689a      	ldr	r2, [r3, #8]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a0a      	ldr	r2, [pc, #40]	; (800773c <TIM_Base_SetConfig+0x114>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d003      	beq.n	8007720 <TIM_Base_SetConfig+0xf8>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a0c      	ldr	r2, [pc, #48]	; (800774c <TIM_Base_SetConfig+0x124>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d103      	bne.n	8007728 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	691a      	ldr	r2, [r3, #16]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	615a      	str	r2, [r3, #20]
}
 800772e:	bf00      	nop
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	40010000 	.word	0x40010000
 8007740:	40000400 	.word	0x40000400
 8007744:	40000800 	.word	0x40000800
 8007748:	40000c00 	.word	0x40000c00
 800774c:	40010400 	.word	0x40010400
 8007750:	40014000 	.word	0x40014000
 8007754:	40014400 	.word	0x40014400
 8007758:	40014800 	.word	0x40014800
 800775c:	40001800 	.word	0x40001800
 8007760:	40001c00 	.word	0x40001c00
 8007764:	40002000 	.word	0x40002000

08007768 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	f023 0201 	bic.w	r2, r3, #1
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f023 0303 	bic.w	r3, r3, #3
 800779e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f023 0302 	bic.w	r3, r3, #2
 80077b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a20      	ldr	r2, [pc, #128]	; (8007840 <TIM_OC1_SetConfig+0xd8>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d003      	beq.n	80077cc <TIM_OC1_SetConfig+0x64>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a1f      	ldr	r2, [pc, #124]	; (8007844 <TIM_OC1_SetConfig+0xdc>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d10c      	bne.n	80077e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f023 0308 	bic.w	r3, r3, #8
 80077d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	697a      	ldr	r2, [r7, #20]
 80077da:	4313      	orrs	r3, r2
 80077dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f023 0304 	bic.w	r3, r3, #4
 80077e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a15      	ldr	r2, [pc, #84]	; (8007840 <TIM_OC1_SetConfig+0xd8>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d003      	beq.n	80077f6 <TIM_OC1_SetConfig+0x8e>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a14      	ldr	r2, [pc, #80]	; (8007844 <TIM_OC1_SetConfig+0xdc>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d111      	bne.n	800781a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	4313      	orrs	r3, r2
 800780e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	4313      	orrs	r3, r2
 8007818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	621a      	str	r2, [r3, #32]
}
 8007834:	bf00      	nop
 8007836:	371c      	adds	r7, #28
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	40010000 	.word	0x40010000
 8007844:	40010400 	.word	0x40010400

08007848 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	f023 0210 	bic.w	r2, r3, #16
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800787e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	021b      	lsls	r3, r3, #8
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	4313      	orrs	r3, r2
 800788a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f023 0320 	bic.w	r3, r3, #32
 8007892:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	011b      	lsls	r3, r3, #4
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	4313      	orrs	r3, r2
 800789e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a22      	ldr	r2, [pc, #136]	; (800792c <TIM_OC2_SetConfig+0xe4>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d003      	beq.n	80078b0 <TIM_OC2_SetConfig+0x68>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a21      	ldr	r2, [pc, #132]	; (8007930 <TIM_OC2_SetConfig+0xe8>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d10d      	bne.n	80078cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	011b      	lsls	r3, r3, #4
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a17      	ldr	r2, [pc, #92]	; (800792c <TIM_OC2_SetConfig+0xe4>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d003      	beq.n	80078dc <TIM_OC2_SetConfig+0x94>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a16      	ldr	r2, [pc, #88]	; (8007930 <TIM_OC2_SetConfig+0xe8>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d113      	bne.n	8007904 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	4313      	orrs	r3, r2
 8007902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	621a      	str	r2, [r3, #32]
}
 800791e:	bf00      	nop
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	40010000 	.word	0x40010000
 8007930:	40010400 	.word	0x40010400

08007934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 0303 	bic.w	r3, r3, #3
 800796a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	4313      	orrs	r3, r2
 8007974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800797c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	021b      	lsls	r3, r3, #8
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	4313      	orrs	r3, r2
 8007988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a21      	ldr	r2, [pc, #132]	; (8007a14 <TIM_OC3_SetConfig+0xe0>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d003      	beq.n	800799a <TIM_OC3_SetConfig+0x66>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a20      	ldr	r2, [pc, #128]	; (8007a18 <TIM_OC3_SetConfig+0xe4>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d10d      	bne.n	80079b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	021b      	lsls	r3, r3, #8
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a16      	ldr	r2, [pc, #88]	; (8007a14 <TIM_OC3_SetConfig+0xe0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d003      	beq.n	80079c6 <TIM_OC3_SetConfig+0x92>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a15      	ldr	r2, [pc, #84]	; (8007a18 <TIM_OC3_SetConfig+0xe4>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d113      	bne.n	80079ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	011b      	lsls	r3, r3, #4
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	4313      	orrs	r3, r2
 80079e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	011b      	lsls	r3, r3, #4
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	697a      	ldr	r2, [r7, #20]
 8007a06:	621a      	str	r2, [r3, #32]
}
 8007a08:	bf00      	nop
 8007a0a:	371c      	adds	r7, #28
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	40010000 	.word	0x40010000
 8007a18:	40010400 	.word	0x40010400

08007a1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	021b      	lsls	r3, r3, #8
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	031b      	lsls	r3, r3, #12
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a12      	ldr	r2, [pc, #72]	; (8007ac0 <TIM_OC4_SetConfig+0xa4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d003      	beq.n	8007a84 <TIM_OC4_SetConfig+0x68>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a11      	ldr	r2, [pc, #68]	; (8007ac4 <TIM_OC4_SetConfig+0xa8>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d109      	bne.n	8007a98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	019b      	lsls	r3, r3, #6
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	621a      	str	r2, [r3, #32]
}
 8007ab2:	bf00      	nop
 8007ab4:	371c      	adds	r7, #28
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	40010000 	.word	0x40010000
 8007ac4:	40010400 	.word	0x40010400

08007ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	f023 0201 	bic.w	r2, r3, #1
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	011b      	lsls	r3, r3, #4
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f023 030a 	bic.w	r3, r3, #10
 8007b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	621a      	str	r2, [r3, #32]
}
 8007b1a:	bf00      	nop
 8007b1c:	371c      	adds	r7, #28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b087      	sub	sp, #28
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	60f8      	str	r0, [r7, #12]
 8007b2e:	60b9      	str	r1, [r7, #8]
 8007b30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	f023 0210 	bic.w	r2, r3, #16
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	031b      	lsls	r3, r3, #12
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	011b      	lsls	r3, r3, #4
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	621a      	str	r2, [r3, #32]
}
 8007b7a:	bf00      	nop
 8007b7c:	371c      	adds	r7, #28
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b86:	b480      	push	{r7}
 8007b88:	b085      	sub	sp, #20
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	f043 0307 	orr.w	r3, r3, #7
 8007ba8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	609a      	str	r2, [r3, #8]
}
 8007bb0:	bf00      	nop
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b087      	sub	sp, #28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
 8007bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	021a      	lsls	r2, r3, #8
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	431a      	orrs	r2, r3
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	609a      	str	r2, [r3, #8]
}
 8007bf0:	bf00      	nop
 8007bf2:	371c      	adds	r7, #28
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	f003 031f 	and.w	r3, r3, #31
 8007c0e:	2201      	movs	r2, #1
 8007c10:	fa02 f303 	lsl.w	r3, r2, r3
 8007c14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6a1a      	ldr	r2, [r3, #32]
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	43db      	mvns	r3, r3
 8007c1e:	401a      	ands	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6a1a      	ldr	r2, [r3, #32]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	f003 031f 	and.w	r3, r3, #31
 8007c2e:	6879      	ldr	r1, [r7, #4]
 8007c30:	fa01 f303 	lsl.w	r3, r1, r3
 8007c34:	431a      	orrs	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	621a      	str	r2, [r3, #32]
}
 8007c3a:	bf00      	nop
 8007c3c:	371c      	adds	r7, #28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
	...

08007c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d101      	bne.n	8007c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	e05a      	b.n	8007d16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a21      	ldr	r2, [pc, #132]	; (8007d24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d022      	beq.n	8007cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cac:	d01d      	beq.n	8007cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a1d      	ldr	r2, [pc, #116]	; (8007d28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d018      	beq.n	8007cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a1b      	ldr	r2, [pc, #108]	; (8007d2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d013      	beq.n	8007cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a1a      	ldr	r2, [pc, #104]	; (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d00e      	beq.n	8007cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a18      	ldr	r2, [pc, #96]	; (8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d009      	beq.n	8007cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a17      	ldr	r2, [pc, #92]	; (8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d004      	beq.n	8007cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a15      	ldr	r2, [pc, #84]	; (8007d3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d10c      	bne.n	8007d04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3714      	adds	r7, #20
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	40010000 	.word	0x40010000
 8007d28:	40000400 	.word	0x40000400
 8007d2c:	40000800 	.word	0x40000800
 8007d30:	40000c00 	.word	0x40000c00
 8007d34:	40010400 	.word	0x40010400
 8007d38:	40014000 	.word	0x40014000
 8007d3c:	40001800 	.word	0x40001800

08007d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e03f      	b.n	8007dfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d106      	bne.n	8007d94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7fd f88c 	bl	8004eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2224      	movs	r2, #36	; 0x24
 8007d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68da      	ldr	r2, [r3, #12]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007daa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 ff43 	bl	8008c38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	691a      	ldr	r2, [r3, #16]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	695a      	ldr	r2, [r3, #20]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68da      	ldr	r2, [r3, #12]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007de0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2220      	movs	r2, #32
 8007df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08c      	sub	sp, #48	; 0x30
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	d165      	bne.n	8007eea <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <HAL_UART_Transmit_DMA+0x26>
 8007e24:	88fb      	ldrh	r3, [r7, #6]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e05e      	b.n	8007eec <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d101      	bne.n	8007e3c <HAL_UART_Transmit_DMA+0x38>
 8007e38:	2302      	movs	r3, #2
 8007e3a:	e057      	b.n	8007eec <HAL_UART_Transmit_DMA+0xe8>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	88fa      	ldrh	r2, [r7, #6]
 8007e4e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	88fa      	ldrh	r2, [r7, #6]
 8007e54:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2221      	movs	r2, #33	; 0x21
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e68:	4a22      	ldr	r2, [pc, #136]	; (8007ef4 <HAL_UART_Transmit_DMA+0xf0>)
 8007e6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e70:	4a21      	ldr	r2, [pc, #132]	; (8007ef8 <HAL_UART_Transmit_DMA+0xf4>)
 8007e72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e78:	4a20      	ldr	r2, [pc, #128]	; (8007efc <HAL_UART_Transmit_DMA+0xf8>)
 8007e7a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e80:	2200      	movs	r2, #0
 8007e82:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007e84:	f107 0308 	add.w	r3, r7, #8
 8007e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e90:	6819      	ldr	r1, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	3304      	adds	r3, #4
 8007e98:	461a      	mov	r2, r3
 8007e9a:	88fb      	ldrh	r3, [r7, #6]
 8007e9c:	f7fd fc9c 	bl	80057d8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ea8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3314      	adds	r3, #20
 8007eb8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	e853 3f00 	ldrex	r3, [r3]
 8007ec0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	3314      	adds	r3, #20
 8007ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ed2:	627a      	str	r2, [r7, #36]	; 0x24
 8007ed4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed6:	6a39      	ldr	r1, [r7, #32]
 8007ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eda:	e841 2300 	strex	r3, r2, [r1]
 8007ede:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1e5      	bne.n	8007eb2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	e000      	b.n	8007eec <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007eea:	2302      	movs	r3, #2
  }
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3730      	adds	r7, #48	; 0x30
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	080084d1 	.word	0x080084d1
 8007ef8:	0800856b 	.word	0x0800856b
 8007efc:	080086e3 	.word	0x080086e3

08007f00 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b20      	cmp	r3, #32
 8007f18:	d11d      	bne.n	8007f56 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <HAL_UART_Receive_DMA+0x26>
 8007f20:	88fb      	ldrh	r3, [r7, #6]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d101      	bne.n	8007f2a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e016      	b.n	8007f58 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d101      	bne.n	8007f38 <HAL_UART_Receive_DMA+0x38>
 8007f34:	2302      	movs	r3, #2
 8007f36:	e00f      	b.n	8007f58 <HAL_UART_Receive_DMA+0x58>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007f46:	88fb      	ldrh	r3, [r7, #6]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	68b9      	ldr	r1, [r7, #8]
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f000 fc13 	bl	8008778 <UART_Start_Receive_DMA>
 8007f52:	4603      	mov	r3, r0
 8007f54:	e000      	b.n	8007f58 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007f56:	2302      	movs	r3, #2
  }
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b0ba      	sub	sp, #232	; 0xe8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10f      	bne.n	8007fc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007faa:	f003 0320 	and.w	r3, r3, #32
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d009      	beq.n	8007fc6 <HAL_UART_IRQHandler+0x66>
 8007fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb6:	f003 0320 	and.w	r3, r3, #32
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d003      	beq.n	8007fc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fd7f 	bl	8008ac2 <UART_Receive_IT>
      return;
 8007fc4:	e256      	b.n	8008474 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f000 80de 	beq.w	800818c <HAL_UART_IRQHandler+0x22c>
 8007fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d106      	bne.n	8007fea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fe0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 80d1 	beq.w	800818c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fee:	f003 0301 	and.w	r3, r3, #1
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00b      	beq.n	800800e <HAL_UART_IRQHandler+0xae>
 8007ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d005      	beq.n	800800e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008006:	f043 0201 	orr.w	r2, r3, #1
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800800e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008012:	f003 0304 	and.w	r3, r3, #4
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00b      	beq.n	8008032 <HAL_UART_IRQHandler+0xd2>
 800801a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	2b00      	cmp	r3, #0
 8008024:	d005      	beq.n	8008032 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802a:	f043 0202 	orr.w	r2, r3, #2
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008036:	f003 0302 	and.w	r3, r3, #2
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00b      	beq.n	8008056 <HAL_UART_IRQHandler+0xf6>
 800803e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	2b00      	cmp	r3, #0
 8008048:	d005      	beq.n	8008056 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804e:	f043 0204 	orr.w	r2, r3, #4
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800805a:	f003 0308 	and.w	r3, r3, #8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d011      	beq.n	8008086 <HAL_UART_IRQHandler+0x126>
 8008062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008066:	f003 0320 	and.w	r3, r3, #32
 800806a:	2b00      	cmp	r3, #0
 800806c:	d105      	bne.n	800807a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800806e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	2b00      	cmp	r3, #0
 8008078:	d005      	beq.n	8008086 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807e:	f043 0208 	orr.w	r2, r3, #8
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 81ed 	beq.w	800846a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008094:	f003 0320 	and.w	r3, r3, #32
 8008098:	2b00      	cmp	r3, #0
 800809a:	d008      	beq.n	80080ae <HAL_UART_IRQHandler+0x14e>
 800809c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080a0:	f003 0320 	and.w	r3, r3, #32
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d002      	beq.n	80080ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fd0a 	bl	8008ac2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b8:	2b40      	cmp	r3, #64	; 0x40
 80080ba:	bf0c      	ite	eq
 80080bc:	2301      	moveq	r3, #1
 80080be:	2300      	movne	r3, #0
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ca:	f003 0308 	and.w	r3, r3, #8
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d103      	bne.n	80080da <HAL_UART_IRQHandler+0x17a>
 80080d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d04f      	beq.n	800817a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fc12 	bl	8008904 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ea:	2b40      	cmp	r3, #64	; 0x40
 80080ec:	d141      	bne.n	8008172 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3314      	adds	r3, #20
 80080f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008104:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800810c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3314      	adds	r3, #20
 8008116:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800811a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800811e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008122:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008126:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800812a:	e841 2300 	strex	r3, r2, [r1]
 800812e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1d9      	bne.n	80080ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813e:	2b00      	cmp	r3, #0
 8008140:	d013      	beq.n	800816a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008146:	4a7d      	ldr	r2, [pc, #500]	; (800833c <HAL_UART_IRQHandler+0x3dc>)
 8008148:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814e:	4618      	mov	r0, r3
 8008150:	f7fd fc0a 	bl	8005968 <HAL_DMA_Abort_IT>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d016      	beq.n	8008188 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008164:	4610      	mov	r0, r2
 8008166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008168:	e00e      	b.n	8008188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f99a 	bl	80084a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008170:	e00a      	b.n	8008188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f996 	bl	80084a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008178:	e006      	b.n	8008188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f992 	bl	80084a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008186:	e170      	b.n	800846a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008188:	bf00      	nop
    return;
 800818a:	e16e      	b.n	800846a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008190:	2b01      	cmp	r3, #1
 8008192:	f040 814a 	bne.w	800842a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800819a:	f003 0310 	and.w	r3, r3, #16
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f000 8143 	beq.w	800842a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80081a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a8:	f003 0310 	and.w	r3, r3, #16
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 813c 	beq.w	800842a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081b2:	2300      	movs	r3, #0
 80081b4:	60bb      	str	r3, [r7, #8]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	60bb      	str	r3, [r7, #8]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	60bb      	str	r3, [r7, #8]
 80081c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d2:	2b40      	cmp	r3, #64	; 0x40
 80081d4:	f040 80b4 	bne.w	8008340 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 8140 	beq.w	800846e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081f6:	429a      	cmp	r2, r3
 80081f8:	f080 8139 	bcs.w	800846e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008202:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800820e:	f000 8088 	beq.w	8008322 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	330c      	adds	r3, #12
 8008218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008220:	e853 3f00 	ldrex	r3, [r3]
 8008224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008228:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800822c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008230:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	330c      	adds	r3, #12
 800823a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800823e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800824a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800824e:	e841 2300 	strex	r3, r2, [r1]
 8008252:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1d9      	bne.n	8008212 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3314      	adds	r3, #20
 8008264:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008268:	e853 3f00 	ldrex	r3, [r3]
 800826c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800826e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008270:	f023 0301 	bic.w	r3, r3, #1
 8008274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3314      	adds	r3, #20
 800827e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008282:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008286:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008288:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800828a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800828e:	e841 2300 	strex	r3, r2, [r1]
 8008292:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1e1      	bne.n	800825e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3314      	adds	r3, #20
 80082a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082a4:	e853 3f00 	ldrex	r3, [r3]
 80082a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80082aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3314      	adds	r3, #20
 80082ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80082be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80082c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80082c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082c6:	e841 2300 	strex	r3, r2, [r1]
 80082ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1e3      	bne.n	800829a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2220      	movs	r2, #32
 80082d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	330c      	adds	r3, #12
 80082e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082ea:	e853 3f00 	ldrex	r3, [r3]
 80082ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082f2:	f023 0310 	bic.w	r3, r3, #16
 80082f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	330c      	adds	r3, #12
 8008300:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008304:	65ba      	str	r2, [r7, #88]	; 0x58
 8008306:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008308:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800830a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800830c:	e841 2300 	strex	r3, r2, [r1]
 8008310:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1e3      	bne.n	80082e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831c:	4618      	mov	r0, r3
 800831e:	f7fd fab3 	bl	8005888 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800832a:	b29b      	uxth	r3, r3
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	b29b      	uxth	r3, r3
 8008330:	4619      	mov	r1, r3
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f8c0 	bl	80084b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008338:	e099      	b.n	800846e <HAL_UART_IRQHandler+0x50e>
 800833a:	bf00      	nop
 800833c:	080089cb 	.word	0x080089cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008348:	b29b      	uxth	r3, r3
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008354:	b29b      	uxth	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	f000 808b 	beq.w	8008472 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800835c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008360:	2b00      	cmp	r3, #0
 8008362:	f000 8086 	beq.w	8008472 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	330c      	adds	r3, #12
 800836c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008370:	e853 3f00 	ldrex	r3, [r3]
 8008374:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008378:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800837c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	330c      	adds	r3, #12
 8008386:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800838a:	647a      	str	r2, [r7, #68]	; 0x44
 800838c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008392:	e841 2300 	strex	r3, r2, [r1]
 8008396:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1e3      	bne.n	8008366 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3314      	adds	r3, #20
 80083a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	e853 3f00 	ldrex	r3, [r3]
 80083ac:	623b      	str	r3, [r7, #32]
   return(result);
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	f023 0301 	bic.w	r3, r3, #1
 80083b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3314      	adds	r3, #20
 80083be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80083c2:	633a      	str	r2, [r7, #48]	; 0x30
 80083c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ca:	e841 2300 	strex	r3, r2, [r1]
 80083ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1e3      	bne.n	800839e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2220      	movs	r2, #32
 80083da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	330c      	adds	r3, #12
 80083ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	e853 3f00 	ldrex	r3, [r3]
 80083f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f023 0310 	bic.w	r3, r3, #16
 80083fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	330c      	adds	r3, #12
 8008404:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008408:	61fa      	str	r2, [r7, #28]
 800840a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840c:	69b9      	ldr	r1, [r7, #24]
 800840e:	69fa      	ldr	r2, [r7, #28]
 8008410:	e841 2300 	strex	r3, r2, [r1]
 8008414:	617b      	str	r3, [r7, #20]
   return(result);
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e3      	bne.n	80083e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800841c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f848 	bl	80084b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008428:	e023      	b.n	8008472 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800842a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800842e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008432:	2b00      	cmp	r3, #0
 8008434:	d009      	beq.n	800844a <HAL_UART_IRQHandler+0x4ea>
 8008436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800843a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843e:	2b00      	cmp	r3, #0
 8008440:	d003      	beq.n	800844a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fad5 	bl	80089f2 <UART_Transmit_IT>
    return;
 8008448:	e014      	b.n	8008474 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800844a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800844e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00e      	beq.n	8008474 <HAL_UART_IRQHandler+0x514>
 8008456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800845a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800845e:	2b00      	cmp	r3, #0
 8008460:	d008      	beq.n	8008474 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fb15 	bl	8008a92 <UART_EndTransmit_IT>
    return;
 8008468:	e004      	b.n	8008474 <HAL_UART_IRQHandler+0x514>
    return;
 800846a:	bf00      	nop
 800846c:	e002      	b.n	8008474 <HAL_UART_IRQHandler+0x514>
      return;
 800846e:	bf00      	nop
 8008470:	e000      	b.n	8008474 <HAL_UART_IRQHandler+0x514>
      return;
 8008472:	bf00      	nop
  }
}
 8008474:	37e8      	adds	r7, #232	; 0xe8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop

0800847c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	460b      	mov	r3, r1
 80084c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b090      	sub	sp, #64	; 0x40
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d137      	bne.n	800855c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80084ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ee:	2200      	movs	r2, #0
 80084f0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	3314      	adds	r3, #20
 80084f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	e853 3f00 	ldrex	r3, [r3]
 8008500:	623b      	str	r3, [r7, #32]
   return(result);
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008508:	63bb      	str	r3, [r7, #56]	; 0x38
 800850a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3314      	adds	r3, #20
 8008510:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008512:	633a      	str	r2, [r7, #48]	; 0x30
 8008514:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800851a:	e841 2300 	strex	r3, r2, [r1]
 800851e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1e5      	bne.n	80084f2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	330c      	adds	r3, #12
 800852c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	e853 3f00 	ldrex	r3, [r3]
 8008534:	60fb      	str	r3, [r7, #12]
   return(result);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800853c:	637b      	str	r3, [r7, #52]	; 0x34
 800853e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	330c      	adds	r3, #12
 8008544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008546:	61fa      	str	r2, [r7, #28]
 8008548:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854a:	69b9      	ldr	r1, [r7, #24]
 800854c:	69fa      	ldr	r2, [r7, #28]
 800854e:	e841 2300 	strex	r3, r2, [r1]
 8008552:	617b      	str	r3, [r7, #20]
   return(result);
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1e5      	bne.n	8008526 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800855a:	e002      	b.n	8008562 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800855c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800855e:	f7f8 fedb 	bl	8001318 <HAL_UART_TxCpltCallback>
}
 8008562:	bf00      	nop
 8008564:	3740      	adds	r7, #64	; 0x40
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008576:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f7ff ff7f 	bl	800847c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800857e:	bf00      	nop
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b09c      	sub	sp, #112	; 0x70
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008592:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d172      	bne.n	8008688 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80085a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085a4:	2200      	movs	r2, #0
 80085a6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	330c      	adds	r3, #12
 80085ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b2:	e853 3f00 	ldrex	r3, [r3]
 80085b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085be:	66bb      	str	r3, [r7, #104]	; 0x68
 80085c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	330c      	adds	r3, #12
 80085c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80085c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80085ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085d0:	e841 2300 	strex	r3, r2, [r1]
 80085d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1e5      	bne.n	80085a8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3314      	adds	r3, #20
 80085e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e6:	e853 3f00 	ldrex	r3, [r3]
 80085ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ee:	f023 0301 	bic.w	r3, r3, #1
 80085f2:	667b      	str	r3, [r7, #100]	; 0x64
 80085f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3314      	adds	r3, #20
 80085fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80085fc:	647a      	str	r2, [r7, #68]	; 0x44
 80085fe:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008600:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008602:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008604:	e841 2300 	strex	r3, r2, [r1]
 8008608:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800860a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e5      	bne.n	80085dc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3314      	adds	r3, #20
 8008616:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861a:	e853 3f00 	ldrex	r3, [r3]
 800861e:	623b      	str	r3, [r7, #32]
   return(result);
 8008620:	6a3b      	ldr	r3, [r7, #32]
 8008622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008626:	663b      	str	r3, [r7, #96]	; 0x60
 8008628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3314      	adds	r3, #20
 800862e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008630:	633a      	str	r2, [r7, #48]	; 0x30
 8008632:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008634:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008638:	e841 2300 	strex	r3, r2, [r1]
 800863c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800863e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1e5      	bne.n	8008610 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008646:	2220      	movs	r2, #32
 8008648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800864c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800864e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008650:	2b01      	cmp	r3, #1
 8008652:	d119      	bne.n	8008688 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	330c      	adds	r3, #12
 800865a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	e853 3f00 	ldrex	r3, [r3]
 8008662:	60fb      	str	r3, [r7, #12]
   return(result);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f023 0310 	bic.w	r3, r3, #16
 800866a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800866c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	330c      	adds	r3, #12
 8008672:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008674:	61fa      	str	r2, [r7, #28]
 8008676:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008678:	69b9      	ldr	r1, [r7, #24]
 800867a:	69fa      	ldr	r2, [r7, #28]
 800867c:	e841 2300 	strex	r3, r2, [r1]
 8008680:	617b      	str	r3, [r7, #20]
   return(result);
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1e5      	bne.n	8008654 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800868a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868c:	2b01      	cmp	r3, #1
 800868e:	d106      	bne.n	800869e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008692:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008694:	4619      	mov	r1, r3
 8008696:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008698:	f7ff ff0e 	bl	80084b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800869c:	e002      	b.n	80086a4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800869e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086a0:	f7f8 fe56 	bl	8001350 <HAL_UART_RxCpltCallback>
}
 80086a4:	bf00      	nop
 80086a6:	3770      	adds	r7, #112	; 0x70
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d108      	bne.n	80086d4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086c6:	085b      	lsrs	r3, r3, #1
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	4619      	mov	r1, r3
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f7ff fef3 	bl	80084b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086d2:	e002      	b.n	80086da <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f7ff fedb 	bl	8008490 <HAL_UART_RxHalfCpltCallback>
}
 80086da:	bf00      	nop
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80086ea:	2300      	movs	r3, #0
 80086ec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086fe:	2b80      	cmp	r3, #128	; 0x80
 8008700:	bf0c      	ite	eq
 8008702:	2301      	moveq	r3, #1
 8008704:	2300      	movne	r3, #0
 8008706:	b2db      	uxtb	r3, r3
 8008708:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008710:	b2db      	uxtb	r3, r3
 8008712:	2b21      	cmp	r3, #33	; 0x21
 8008714:	d108      	bne.n	8008728 <UART_DMAError+0x46>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d005      	beq.n	8008728 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	2200      	movs	r2, #0
 8008720:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008722:	68b8      	ldr	r0, [r7, #8]
 8008724:	f000 f8c6 	bl	80088b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008732:	2b40      	cmp	r3, #64	; 0x40
 8008734:	bf0c      	ite	eq
 8008736:	2301      	moveq	r3, #1
 8008738:	2300      	movne	r3, #0
 800873a:	b2db      	uxtb	r3, r3
 800873c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008744:	b2db      	uxtb	r3, r3
 8008746:	2b22      	cmp	r3, #34	; 0x22
 8008748:	d108      	bne.n	800875c <UART_DMAError+0x7a>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d005      	beq.n	800875c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	2200      	movs	r2, #0
 8008754:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008756:	68b8      	ldr	r0, [r7, #8]
 8008758:	f000 f8d4 	bl	8008904 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008760:	f043 0210 	orr.w	r2, r3, #16
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008768:	68b8      	ldr	r0, [r7, #8]
 800876a:	f7ff fe9b 	bl	80084a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800876e:	bf00      	nop
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
	...

08008778 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b098      	sub	sp, #96	; 0x60
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	4613      	mov	r3, r2
 8008784:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	88fa      	ldrh	r2, [r7, #6]
 8008790:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2222      	movs	r2, #34	; 0x22
 800879c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a4:	4a40      	ldr	r2, [pc, #256]	; (80088a8 <UART_Start_Receive_DMA+0x130>)
 80087a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ac:	4a3f      	ldr	r2, [pc, #252]	; (80088ac <UART_Start_Receive_DMA+0x134>)
 80087ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b4:	4a3e      	ldr	r2, [pc, #248]	; (80088b0 <UART_Start_Receive_DMA+0x138>)
 80087b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087bc:	2200      	movs	r2, #0
 80087be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80087c0:	f107 0308 	add.w	r3, r7, #8
 80087c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	3304      	adds	r3, #4
 80087d0:	4619      	mov	r1, r3
 80087d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	88fb      	ldrh	r3, [r7, #6]
 80087d8:	f7fc fffe 	bl	80057d8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80087dc:	2300      	movs	r3, #0
 80087de:	613b      	str	r3, [r7, #16]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	613b      	str	r3, [r7, #16]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	613b      	str	r3, [r7, #16]
 80087f0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d019      	beq.n	8008836 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	330c      	adds	r3, #12
 8008808:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008818:	65bb      	str	r3, [r7, #88]	; 0x58
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	330c      	adds	r3, #12
 8008820:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008822:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008824:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008826:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008828:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800882a:	e841 2300 	strex	r3, r2, [r1]
 800882e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1e5      	bne.n	8008802 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3314      	adds	r3, #20
 800883c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008840:	e853 3f00 	ldrex	r3, [r3]
 8008844:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008848:	f043 0301 	orr.w	r3, r3, #1
 800884c:	657b      	str	r3, [r7, #84]	; 0x54
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3314      	adds	r3, #20
 8008854:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008856:	63ba      	str	r2, [r7, #56]	; 0x38
 8008858:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800885c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800885e:	e841 2300 	strex	r3, r2, [r1]
 8008862:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1e5      	bne.n	8008836 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	3314      	adds	r3, #20
 8008870:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	e853 3f00 	ldrex	r3, [r3]
 8008878:	617b      	str	r3, [r7, #20]
   return(result);
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008880:	653b      	str	r3, [r7, #80]	; 0x50
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	3314      	adds	r3, #20
 8008888:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800888a:	627a      	str	r2, [r7, #36]	; 0x24
 800888c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888e:	6a39      	ldr	r1, [r7, #32]
 8008890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008892:	e841 2300 	strex	r3, r2, [r1]
 8008896:	61fb      	str	r3, [r7, #28]
   return(result);
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1e5      	bne.n	800886a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3760      	adds	r7, #96	; 0x60
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	08008587 	.word	0x08008587
 80088ac:	080086ad 	.word	0x080086ad
 80088b0:	080086e3 	.word	0x080086e3

080088b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b089      	sub	sp, #36	; 0x24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	330c      	adds	r3, #12
 80088c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	e853 3f00 	ldrex	r3, [r3]
 80088ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80088d2:	61fb      	str	r3, [r7, #28]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	330c      	adds	r3, #12
 80088da:	69fa      	ldr	r2, [r7, #28]
 80088dc:	61ba      	str	r2, [r7, #24]
 80088de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e0:	6979      	ldr	r1, [r7, #20]
 80088e2:	69ba      	ldr	r2, [r7, #24]
 80088e4:	e841 2300 	strex	r3, r2, [r1]
 80088e8:	613b      	str	r3, [r7, #16]
   return(result);
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e5      	bne.n	80088bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80088f8:	bf00      	nop
 80088fa:	3724      	adds	r7, #36	; 0x24
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008904:	b480      	push	{r7}
 8008906:	b095      	sub	sp, #84	; 0x54
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	330c      	adds	r3, #12
 8008912:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008916:	e853 3f00 	ldrex	r3, [r3]
 800891a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800891c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	330c      	adds	r3, #12
 800892a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800892c:	643a      	str	r2, [r7, #64]	; 0x40
 800892e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008930:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008932:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008934:	e841 2300 	strex	r3, r2, [r1]
 8008938:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800893a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1e5      	bne.n	800890c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3314      	adds	r3, #20
 8008946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	e853 3f00 	ldrex	r3, [r3]
 800894e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	f023 0301 	bic.w	r3, r3, #1
 8008956:	64bb      	str	r3, [r7, #72]	; 0x48
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3314      	adds	r3, #20
 800895e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008960:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008962:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008968:	e841 2300 	strex	r3, r2, [r1]
 800896c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1e5      	bne.n	8008940 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008978:	2b01      	cmp	r3, #1
 800897a:	d119      	bne.n	80089b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	330c      	adds	r3, #12
 8008982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	e853 3f00 	ldrex	r3, [r3]
 800898a:	60bb      	str	r3, [r7, #8]
   return(result);
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	f023 0310 	bic.w	r3, r3, #16
 8008992:	647b      	str	r3, [r7, #68]	; 0x44
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	330c      	adds	r3, #12
 800899a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800899c:	61ba      	str	r2, [r7, #24]
 800899e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a0:	6979      	ldr	r1, [r7, #20]
 80089a2:	69ba      	ldr	r2, [r7, #24]
 80089a4:	e841 2300 	strex	r3, r2, [r1]
 80089a8:	613b      	str	r3, [r7, #16]
   return(result);
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1e5      	bne.n	800897c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2220      	movs	r2, #32
 80089b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80089be:	bf00      	nop
 80089c0:	3754      	adds	r7, #84	; 0x54
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f7ff fd5d 	bl	80084a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089ea:	bf00      	nop
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b085      	sub	sp, #20
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b21      	cmp	r3, #33	; 0x21
 8008a04:	d13e      	bne.n	8008a84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a0e:	d114      	bne.n	8008a3a <UART_Transmit_IT+0x48>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d110      	bne.n	8008a3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6a1b      	ldr	r3, [r3, #32]
 8008a1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a1b      	ldr	r3, [r3, #32]
 8008a32:	1c9a      	adds	r2, r3, #2
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	621a      	str	r2, [r3, #32]
 8008a38:	e008      	b.n	8008a4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	1c59      	adds	r1, r3, #1
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	6211      	str	r1, [r2, #32]
 8008a44:	781a      	ldrb	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	3b01      	subs	r3, #1
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10f      	bne.n	8008a80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68da      	ldr	r2, [r3, #12]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68da      	ldr	r2, [r3, #12]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	e000      	b.n	8008a86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a84:	2302      	movs	r3, #2
  }
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3714      	adds	r7, #20
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b082      	sub	sp, #8
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68da      	ldr	r2, [r3, #12]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008aa8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2220      	movs	r2, #32
 8008aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7f8 fc30 	bl	8001318 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b08c      	sub	sp, #48	; 0x30
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b22      	cmp	r3, #34	; 0x22
 8008ad4:	f040 80ab 	bne.w	8008c2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ae0:	d117      	bne.n	8008b12 <UART_Receive_IT+0x50>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d113      	bne.n	8008b12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008aea:	2300      	movs	r3, #0
 8008aec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0a:	1c9a      	adds	r2, r3, #2
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	629a      	str	r2, [r3, #40]	; 0x28
 8008b10:	e026      	b.n	8008b60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b24:	d007      	beq.n	8008b36 <UART_Receive_IT+0x74>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10a      	bne.n	8008b44 <UART_Receive_IT+0x82>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d106      	bne.n	8008b44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	b2da      	uxtb	r2, r3
 8008b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b40:	701a      	strb	r2, [r3, #0]
 8008b42:	e008      	b.n	8008b56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	3b01      	subs	r3, #1
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d15a      	bne.n	8008c2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68da      	ldr	r2, [r3, #12]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f022 0220 	bic.w	r2, r2, #32
 8008b82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68da      	ldr	r2, [r3, #12]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	695a      	ldr	r2, [r3, #20]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f022 0201 	bic.w	r2, r2, #1
 8008ba2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2220      	movs	r2, #32
 8008ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d135      	bne.n	8008c20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	330c      	adds	r3, #12
 8008bc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	e853 3f00 	ldrex	r3, [r3]
 8008bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	f023 0310 	bic.w	r3, r3, #16
 8008bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	330c      	adds	r3, #12
 8008bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bda:	623a      	str	r2, [r7, #32]
 8008bdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bde:	69f9      	ldr	r1, [r7, #28]
 8008be0:	6a3a      	ldr	r2, [r7, #32]
 8008be2:	e841 2300 	strex	r3, r2, [r1]
 8008be6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1e5      	bne.n	8008bba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 0310 	and.w	r3, r3, #16
 8008bf8:	2b10      	cmp	r3, #16
 8008bfa:	d10a      	bne.n	8008c12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	60fb      	str	r3, [r7, #12]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7ff fc4d 	bl	80084b8 <HAL_UARTEx_RxEventCallback>
 8008c1e:	e002      	b.n	8008c26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7f8 fb95 	bl	8001350 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	e002      	b.n	8008c30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	e000      	b.n	8008c30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008c2e:	2302      	movs	r3, #2
  }
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3730      	adds	r7, #48	; 0x30
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c3c:	b0c0      	sub	sp, #256	; 0x100
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c54:	68d9      	ldr	r1, [r3, #12]
 8008c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	ea40 0301 	orr.w	r3, r0, r1
 8008c60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c66:	689a      	ldr	r2, [r3, #8]
 8008c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	431a      	orrs	r2, r3
 8008c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c74:	695b      	ldr	r3, [r3, #20]
 8008c76:	431a      	orrs	r2, r3
 8008c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c90:	f021 010c 	bic.w	r1, r1, #12
 8008c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c9e:	430b      	orrs	r3, r1
 8008ca0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb2:	6999      	ldr	r1, [r3, #24]
 8008cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	ea40 0301 	orr.w	r3, r0, r1
 8008cbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	4b8f      	ldr	r3, [pc, #572]	; (8008f04 <UART_SetConfig+0x2cc>)
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d005      	beq.n	8008cd8 <UART_SetConfig+0xa0>
 8008ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	4b8d      	ldr	r3, [pc, #564]	; (8008f08 <UART_SetConfig+0x2d0>)
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d104      	bne.n	8008ce2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008cd8:	f7fd fecc 	bl	8006a74 <HAL_RCC_GetPCLK2Freq>
 8008cdc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008ce0:	e003      	b.n	8008cea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ce2:	f7fd feb3 	bl	8006a4c <HAL_RCC_GetPCLK1Freq>
 8008ce6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cee:	69db      	ldr	r3, [r3, #28]
 8008cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cf4:	f040 810c 	bne.w	8008f10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008d06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008d0a:	4622      	mov	r2, r4
 8008d0c:	462b      	mov	r3, r5
 8008d0e:	1891      	adds	r1, r2, r2
 8008d10:	65b9      	str	r1, [r7, #88]	; 0x58
 8008d12:	415b      	adcs	r3, r3
 8008d14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008d1a:	4621      	mov	r1, r4
 8008d1c:	eb12 0801 	adds.w	r8, r2, r1
 8008d20:	4629      	mov	r1, r5
 8008d22:	eb43 0901 	adc.w	r9, r3, r1
 8008d26:	f04f 0200 	mov.w	r2, #0
 8008d2a:	f04f 0300 	mov.w	r3, #0
 8008d2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d3a:	4690      	mov	r8, r2
 8008d3c:	4699      	mov	r9, r3
 8008d3e:	4623      	mov	r3, r4
 8008d40:	eb18 0303 	adds.w	r3, r8, r3
 8008d44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d48:	462b      	mov	r3, r5
 8008d4a:	eb49 0303 	adc.w	r3, r9, r3
 8008d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008d62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008d66:	460b      	mov	r3, r1
 8008d68:	18db      	adds	r3, r3, r3
 8008d6a:	653b      	str	r3, [r7, #80]	; 0x50
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	eb42 0303 	adc.w	r3, r2, r3
 8008d72:	657b      	str	r3, [r7, #84]	; 0x54
 8008d74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008d78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008d7c:	f7f7 ff84 	bl	8000c88 <__aeabi_uldivmod>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4b61      	ldr	r3, [pc, #388]	; (8008f0c <UART_SetConfig+0x2d4>)
 8008d86:	fba3 2302 	umull	r2, r3, r3, r2
 8008d8a:	095b      	lsrs	r3, r3, #5
 8008d8c:	011c      	lsls	r4, r3, #4
 8008d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d92:	2200      	movs	r2, #0
 8008d94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008d9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008da0:	4642      	mov	r2, r8
 8008da2:	464b      	mov	r3, r9
 8008da4:	1891      	adds	r1, r2, r2
 8008da6:	64b9      	str	r1, [r7, #72]	; 0x48
 8008da8:	415b      	adcs	r3, r3
 8008daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008db0:	4641      	mov	r1, r8
 8008db2:	eb12 0a01 	adds.w	sl, r2, r1
 8008db6:	4649      	mov	r1, r9
 8008db8:	eb43 0b01 	adc.w	fp, r3, r1
 8008dbc:	f04f 0200 	mov.w	r2, #0
 8008dc0:	f04f 0300 	mov.w	r3, #0
 8008dc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008dc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008dcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008dd0:	4692      	mov	sl, r2
 8008dd2:	469b      	mov	fp, r3
 8008dd4:	4643      	mov	r3, r8
 8008dd6:	eb1a 0303 	adds.w	r3, sl, r3
 8008dda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008dde:	464b      	mov	r3, r9
 8008de0:	eb4b 0303 	adc.w	r3, fp, r3
 8008de4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008df4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008df8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	18db      	adds	r3, r3, r3
 8008e00:	643b      	str	r3, [r7, #64]	; 0x40
 8008e02:	4613      	mov	r3, r2
 8008e04:	eb42 0303 	adc.w	r3, r2, r3
 8008e08:	647b      	str	r3, [r7, #68]	; 0x44
 8008e0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008e0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008e12:	f7f7 ff39 	bl	8000c88 <__aeabi_uldivmod>
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	4611      	mov	r1, r2
 8008e1c:	4b3b      	ldr	r3, [pc, #236]	; (8008f0c <UART_SetConfig+0x2d4>)
 8008e1e:	fba3 2301 	umull	r2, r3, r3, r1
 8008e22:	095b      	lsrs	r3, r3, #5
 8008e24:	2264      	movs	r2, #100	; 0x64
 8008e26:	fb02 f303 	mul.w	r3, r2, r3
 8008e2a:	1acb      	subs	r3, r1, r3
 8008e2c:	00db      	lsls	r3, r3, #3
 8008e2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008e32:	4b36      	ldr	r3, [pc, #216]	; (8008f0c <UART_SetConfig+0x2d4>)
 8008e34:	fba3 2302 	umull	r2, r3, r3, r2
 8008e38:	095b      	lsrs	r3, r3, #5
 8008e3a:	005b      	lsls	r3, r3, #1
 8008e3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e40:	441c      	add	r4, r3
 8008e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e46:	2200      	movs	r2, #0
 8008e48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008e50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008e54:	4642      	mov	r2, r8
 8008e56:	464b      	mov	r3, r9
 8008e58:	1891      	adds	r1, r2, r2
 8008e5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008e5c:	415b      	adcs	r3, r3
 8008e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008e64:	4641      	mov	r1, r8
 8008e66:	1851      	adds	r1, r2, r1
 8008e68:	6339      	str	r1, [r7, #48]	; 0x30
 8008e6a:	4649      	mov	r1, r9
 8008e6c:	414b      	adcs	r3, r1
 8008e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8008e70:	f04f 0200 	mov.w	r2, #0
 8008e74:	f04f 0300 	mov.w	r3, #0
 8008e78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008e7c:	4659      	mov	r1, fp
 8008e7e:	00cb      	lsls	r3, r1, #3
 8008e80:	4651      	mov	r1, sl
 8008e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e86:	4651      	mov	r1, sl
 8008e88:	00ca      	lsls	r2, r1, #3
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4603      	mov	r3, r0
 8008e90:	4642      	mov	r2, r8
 8008e92:	189b      	adds	r3, r3, r2
 8008e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e98:	464b      	mov	r3, r9
 8008e9a:	460a      	mov	r2, r1
 8008e9c:	eb42 0303 	adc.w	r3, r2, r3
 8008ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008eb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008eb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008eb8:	460b      	mov	r3, r1
 8008eba:	18db      	adds	r3, r3, r3
 8008ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	eb42 0303 	adc.w	r3, r2, r3
 8008ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ec6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008eca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008ece:	f7f7 fedb 	bl	8000c88 <__aeabi_uldivmod>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4b0d      	ldr	r3, [pc, #52]	; (8008f0c <UART_SetConfig+0x2d4>)
 8008ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8008edc:	095b      	lsrs	r3, r3, #5
 8008ede:	2164      	movs	r1, #100	; 0x64
 8008ee0:	fb01 f303 	mul.w	r3, r1, r3
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	00db      	lsls	r3, r3, #3
 8008ee8:	3332      	adds	r3, #50	; 0x32
 8008eea:	4a08      	ldr	r2, [pc, #32]	; (8008f0c <UART_SetConfig+0x2d4>)
 8008eec:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef0:	095b      	lsrs	r3, r3, #5
 8008ef2:	f003 0207 	and.w	r2, r3, #7
 8008ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4422      	add	r2, r4
 8008efe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f00:	e105      	b.n	800910e <UART_SetConfig+0x4d6>
 8008f02:	bf00      	nop
 8008f04:	40011000 	.word	0x40011000
 8008f08:	40011400 	.word	0x40011400
 8008f0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f14:	2200      	movs	r2, #0
 8008f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008f1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008f22:	4642      	mov	r2, r8
 8008f24:	464b      	mov	r3, r9
 8008f26:	1891      	adds	r1, r2, r2
 8008f28:	6239      	str	r1, [r7, #32]
 8008f2a:	415b      	adcs	r3, r3
 8008f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f32:	4641      	mov	r1, r8
 8008f34:	1854      	adds	r4, r2, r1
 8008f36:	4649      	mov	r1, r9
 8008f38:	eb43 0501 	adc.w	r5, r3, r1
 8008f3c:	f04f 0200 	mov.w	r2, #0
 8008f40:	f04f 0300 	mov.w	r3, #0
 8008f44:	00eb      	lsls	r3, r5, #3
 8008f46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f4a:	00e2      	lsls	r2, r4, #3
 8008f4c:	4614      	mov	r4, r2
 8008f4e:	461d      	mov	r5, r3
 8008f50:	4643      	mov	r3, r8
 8008f52:	18e3      	adds	r3, r4, r3
 8008f54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f58:	464b      	mov	r3, r9
 8008f5a:	eb45 0303 	adc.w	r3, r5, r3
 8008f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f72:	f04f 0200 	mov.w	r2, #0
 8008f76:	f04f 0300 	mov.w	r3, #0
 8008f7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008f7e:	4629      	mov	r1, r5
 8008f80:	008b      	lsls	r3, r1, #2
 8008f82:	4621      	mov	r1, r4
 8008f84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f88:	4621      	mov	r1, r4
 8008f8a:	008a      	lsls	r2, r1, #2
 8008f8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008f90:	f7f7 fe7a 	bl	8000c88 <__aeabi_uldivmod>
 8008f94:	4602      	mov	r2, r0
 8008f96:	460b      	mov	r3, r1
 8008f98:	4b60      	ldr	r3, [pc, #384]	; (800911c <UART_SetConfig+0x4e4>)
 8008f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8008f9e:	095b      	lsrs	r3, r3, #5
 8008fa0:	011c      	lsls	r4, r3, #4
 8008fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008fac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008fb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008fb4:	4642      	mov	r2, r8
 8008fb6:	464b      	mov	r3, r9
 8008fb8:	1891      	adds	r1, r2, r2
 8008fba:	61b9      	str	r1, [r7, #24]
 8008fbc:	415b      	adcs	r3, r3
 8008fbe:	61fb      	str	r3, [r7, #28]
 8008fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008fc4:	4641      	mov	r1, r8
 8008fc6:	1851      	adds	r1, r2, r1
 8008fc8:	6139      	str	r1, [r7, #16]
 8008fca:	4649      	mov	r1, r9
 8008fcc:	414b      	adcs	r3, r1
 8008fce:	617b      	str	r3, [r7, #20]
 8008fd0:	f04f 0200 	mov.w	r2, #0
 8008fd4:	f04f 0300 	mov.w	r3, #0
 8008fd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008fdc:	4659      	mov	r1, fp
 8008fde:	00cb      	lsls	r3, r1, #3
 8008fe0:	4651      	mov	r1, sl
 8008fe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fe6:	4651      	mov	r1, sl
 8008fe8:	00ca      	lsls	r2, r1, #3
 8008fea:	4610      	mov	r0, r2
 8008fec:	4619      	mov	r1, r3
 8008fee:	4603      	mov	r3, r0
 8008ff0:	4642      	mov	r2, r8
 8008ff2:	189b      	adds	r3, r3, r2
 8008ff4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ff8:	464b      	mov	r3, r9
 8008ffa:	460a      	mov	r2, r1
 8008ffc:	eb42 0303 	adc.w	r3, r2, r3
 8009000:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	67bb      	str	r3, [r7, #120]	; 0x78
 800900e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009010:	f04f 0200 	mov.w	r2, #0
 8009014:	f04f 0300 	mov.w	r3, #0
 8009018:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800901c:	4649      	mov	r1, r9
 800901e:	008b      	lsls	r3, r1, #2
 8009020:	4641      	mov	r1, r8
 8009022:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009026:	4641      	mov	r1, r8
 8009028:	008a      	lsls	r2, r1, #2
 800902a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800902e:	f7f7 fe2b 	bl	8000c88 <__aeabi_uldivmod>
 8009032:	4602      	mov	r2, r0
 8009034:	460b      	mov	r3, r1
 8009036:	4b39      	ldr	r3, [pc, #228]	; (800911c <UART_SetConfig+0x4e4>)
 8009038:	fba3 1302 	umull	r1, r3, r3, r2
 800903c:	095b      	lsrs	r3, r3, #5
 800903e:	2164      	movs	r1, #100	; 0x64
 8009040:	fb01 f303 	mul.w	r3, r1, r3
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	011b      	lsls	r3, r3, #4
 8009048:	3332      	adds	r3, #50	; 0x32
 800904a:	4a34      	ldr	r2, [pc, #208]	; (800911c <UART_SetConfig+0x4e4>)
 800904c:	fba2 2303 	umull	r2, r3, r2, r3
 8009050:	095b      	lsrs	r3, r3, #5
 8009052:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009056:	441c      	add	r4, r3
 8009058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800905c:	2200      	movs	r2, #0
 800905e:	673b      	str	r3, [r7, #112]	; 0x70
 8009060:	677a      	str	r2, [r7, #116]	; 0x74
 8009062:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009066:	4642      	mov	r2, r8
 8009068:	464b      	mov	r3, r9
 800906a:	1891      	adds	r1, r2, r2
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	415b      	adcs	r3, r3
 8009070:	60fb      	str	r3, [r7, #12]
 8009072:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009076:	4641      	mov	r1, r8
 8009078:	1851      	adds	r1, r2, r1
 800907a:	6039      	str	r1, [r7, #0]
 800907c:	4649      	mov	r1, r9
 800907e:	414b      	adcs	r3, r1
 8009080:	607b      	str	r3, [r7, #4]
 8009082:	f04f 0200 	mov.w	r2, #0
 8009086:	f04f 0300 	mov.w	r3, #0
 800908a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800908e:	4659      	mov	r1, fp
 8009090:	00cb      	lsls	r3, r1, #3
 8009092:	4651      	mov	r1, sl
 8009094:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009098:	4651      	mov	r1, sl
 800909a:	00ca      	lsls	r2, r1, #3
 800909c:	4610      	mov	r0, r2
 800909e:	4619      	mov	r1, r3
 80090a0:	4603      	mov	r3, r0
 80090a2:	4642      	mov	r2, r8
 80090a4:	189b      	adds	r3, r3, r2
 80090a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80090a8:	464b      	mov	r3, r9
 80090aa:	460a      	mov	r2, r1
 80090ac:	eb42 0303 	adc.w	r3, r2, r3
 80090b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	663b      	str	r3, [r7, #96]	; 0x60
 80090bc:	667a      	str	r2, [r7, #100]	; 0x64
 80090be:	f04f 0200 	mov.w	r2, #0
 80090c2:	f04f 0300 	mov.w	r3, #0
 80090c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80090ca:	4649      	mov	r1, r9
 80090cc:	008b      	lsls	r3, r1, #2
 80090ce:	4641      	mov	r1, r8
 80090d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090d4:	4641      	mov	r1, r8
 80090d6:	008a      	lsls	r2, r1, #2
 80090d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80090dc:	f7f7 fdd4 	bl	8000c88 <__aeabi_uldivmod>
 80090e0:	4602      	mov	r2, r0
 80090e2:	460b      	mov	r3, r1
 80090e4:	4b0d      	ldr	r3, [pc, #52]	; (800911c <UART_SetConfig+0x4e4>)
 80090e6:	fba3 1302 	umull	r1, r3, r3, r2
 80090ea:	095b      	lsrs	r3, r3, #5
 80090ec:	2164      	movs	r1, #100	; 0x64
 80090ee:	fb01 f303 	mul.w	r3, r1, r3
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	011b      	lsls	r3, r3, #4
 80090f6:	3332      	adds	r3, #50	; 0x32
 80090f8:	4a08      	ldr	r2, [pc, #32]	; (800911c <UART_SetConfig+0x4e4>)
 80090fa:	fba2 2303 	umull	r2, r3, r2, r3
 80090fe:	095b      	lsrs	r3, r3, #5
 8009100:	f003 020f 	and.w	r2, r3, #15
 8009104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4422      	add	r2, r4
 800910c:	609a      	str	r2, [r3, #8]
}
 800910e:	bf00      	nop
 8009110:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009114:	46bd      	mov	sp, r7
 8009116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800911a:	bf00      	nop
 800911c:	51eb851f 	.word	0x51eb851f

08009120 <__cxa_pure_virtual>:
 8009120:	b508      	push	{r3, lr}
 8009122:	f000 f80d 	bl	8009140 <_ZSt9terminatev>

08009126 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009126:	b508      	push	{r3, lr}
 8009128:	4780      	blx	r0
 800912a:	f000 f80e 	bl	800914a <abort>
	...

08009130 <_ZSt13get_terminatev>:
 8009130:	4b02      	ldr	r3, [pc, #8]	; (800913c <_ZSt13get_terminatev+0xc>)
 8009132:	6818      	ldr	r0, [r3, #0]
 8009134:	f3bf 8f5b 	dmb	ish
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	20000020 	.word	0x20000020

08009140 <_ZSt9terminatev>:
 8009140:	b508      	push	{r3, lr}
 8009142:	f7ff fff5 	bl	8009130 <_ZSt13get_terminatev>
 8009146:	f7ff ffee 	bl	8009126 <_ZN10__cxxabiv111__terminateEPFvvE>

0800914a <abort>:
 800914a:	b508      	push	{r3, lr}
 800914c:	2006      	movs	r0, #6
 800914e:	f000 fef3 	bl	8009f38 <raise>
 8009152:	2001      	movs	r0, #1
 8009154:	f7fb ffd4 	bl	8005100 <_exit>

08009158 <__errno>:
 8009158:	4b01      	ldr	r3, [pc, #4]	; (8009160 <__errno+0x8>)
 800915a:	6818      	ldr	r0, [r3, #0]
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	20000024 	.word	0x20000024

08009164 <__libc_init_array>:
 8009164:	b570      	push	{r4, r5, r6, lr}
 8009166:	4d0d      	ldr	r5, [pc, #52]	; (800919c <__libc_init_array+0x38>)
 8009168:	4c0d      	ldr	r4, [pc, #52]	; (80091a0 <__libc_init_array+0x3c>)
 800916a:	1b64      	subs	r4, r4, r5
 800916c:	10a4      	asrs	r4, r4, #2
 800916e:	2600      	movs	r6, #0
 8009170:	42a6      	cmp	r6, r4
 8009172:	d109      	bne.n	8009188 <__libc_init_array+0x24>
 8009174:	4d0b      	ldr	r5, [pc, #44]	; (80091a4 <__libc_init_array+0x40>)
 8009176:	4c0c      	ldr	r4, [pc, #48]	; (80091a8 <__libc_init_array+0x44>)
 8009178:	f004 fc90 	bl	800da9c <_init>
 800917c:	1b64      	subs	r4, r4, r5
 800917e:	10a4      	asrs	r4, r4, #2
 8009180:	2600      	movs	r6, #0
 8009182:	42a6      	cmp	r6, r4
 8009184:	d105      	bne.n	8009192 <__libc_init_array+0x2e>
 8009186:	bd70      	pop	{r4, r5, r6, pc}
 8009188:	f855 3b04 	ldr.w	r3, [r5], #4
 800918c:	4798      	blx	r3
 800918e:	3601      	adds	r6, #1
 8009190:	e7ee      	b.n	8009170 <__libc_init_array+0xc>
 8009192:	f855 3b04 	ldr.w	r3, [r5], #4
 8009196:	4798      	blx	r3
 8009198:	3601      	adds	r6, #1
 800919a:	e7f2      	b.n	8009182 <__libc_init_array+0x1e>
 800919c:	0800e31c 	.word	0x0800e31c
 80091a0:	0800e31c 	.word	0x0800e31c
 80091a4:	0800e31c 	.word	0x0800e31c
 80091a8:	0800e328 	.word	0x0800e328

080091ac <memcpy>:
 80091ac:	440a      	add	r2, r1
 80091ae:	4291      	cmp	r1, r2
 80091b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80091b4:	d100      	bne.n	80091b8 <memcpy+0xc>
 80091b6:	4770      	bx	lr
 80091b8:	b510      	push	{r4, lr}
 80091ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091c2:	4291      	cmp	r1, r2
 80091c4:	d1f9      	bne.n	80091ba <memcpy+0xe>
 80091c6:	bd10      	pop	{r4, pc}

080091c8 <memset>:
 80091c8:	4402      	add	r2, r0
 80091ca:	4603      	mov	r3, r0
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d100      	bne.n	80091d2 <memset+0xa>
 80091d0:	4770      	bx	lr
 80091d2:	f803 1b01 	strb.w	r1, [r3], #1
 80091d6:	e7f9      	b.n	80091cc <memset+0x4>

080091d8 <__cvt>:
 80091d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091dc:	ec55 4b10 	vmov	r4, r5, d0
 80091e0:	2d00      	cmp	r5, #0
 80091e2:	460e      	mov	r6, r1
 80091e4:	4619      	mov	r1, r3
 80091e6:	462b      	mov	r3, r5
 80091e8:	bfbb      	ittet	lt
 80091ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80091ee:	461d      	movlt	r5, r3
 80091f0:	2300      	movge	r3, #0
 80091f2:	232d      	movlt	r3, #45	; 0x2d
 80091f4:	700b      	strb	r3, [r1, #0]
 80091f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80091fc:	4691      	mov	r9, r2
 80091fe:	f023 0820 	bic.w	r8, r3, #32
 8009202:	bfbc      	itt	lt
 8009204:	4622      	movlt	r2, r4
 8009206:	4614      	movlt	r4, r2
 8009208:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800920c:	d005      	beq.n	800921a <__cvt+0x42>
 800920e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009212:	d100      	bne.n	8009216 <__cvt+0x3e>
 8009214:	3601      	adds	r6, #1
 8009216:	2102      	movs	r1, #2
 8009218:	e000      	b.n	800921c <__cvt+0x44>
 800921a:	2103      	movs	r1, #3
 800921c:	ab03      	add	r3, sp, #12
 800921e:	9301      	str	r3, [sp, #4]
 8009220:	ab02      	add	r3, sp, #8
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	ec45 4b10 	vmov	d0, r4, r5
 8009228:	4653      	mov	r3, sl
 800922a:	4632      	mov	r2, r6
 800922c:	f001 fdf8 	bl	800ae20 <_dtoa_r>
 8009230:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009234:	4607      	mov	r7, r0
 8009236:	d102      	bne.n	800923e <__cvt+0x66>
 8009238:	f019 0f01 	tst.w	r9, #1
 800923c:	d022      	beq.n	8009284 <__cvt+0xac>
 800923e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009242:	eb07 0906 	add.w	r9, r7, r6
 8009246:	d110      	bne.n	800926a <__cvt+0x92>
 8009248:	783b      	ldrb	r3, [r7, #0]
 800924a:	2b30      	cmp	r3, #48	; 0x30
 800924c:	d10a      	bne.n	8009264 <__cvt+0x8c>
 800924e:	2200      	movs	r2, #0
 8009250:	2300      	movs	r3, #0
 8009252:	4620      	mov	r0, r4
 8009254:	4629      	mov	r1, r5
 8009256:	f7f7 fc37 	bl	8000ac8 <__aeabi_dcmpeq>
 800925a:	b918      	cbnz	r0, 8009264 <__cvt+0x8c>
 800925c:	f1c6 0601 	rsb	r6, r6, #1
 8009260:	f8ca 6000 	str.w	r6, [sl]
 8009264:	f8da 3000 	ldr.w	r3, [sl]
 8009268:	4499      	add	r9, r3
 800926a:	2200      	movs	r2, #0
 800926c:	2300      	movs	r3, #0
 800926e:	4620      	mov	r0, r4
 8009270:	4629      	mov	r1, r5
 8009272:	f7f7 fc29 	bl	8000ac8 <__aeabi_dcmpeq>
 8009276:	b108      	cbz	r0, 800927c <__cvt+0xa4>
 8009278:	f8cd 900c 	str.w	r9, [sp, #12]
 800927c:	2230      	movs	r2, #48	; 0x30
 800927e:	9b03      	ldr	r3, [sp, #12]
 8009280:	454b      	cmp	r3, r9
 8009282:	d307      	bcc.n	8009294 <__cvt+0xbc>
 8009284:	9b03      	ldr	r3, [sp, #12]
 8009286:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009288:	1bdb      	subs	r3, r3, r7
 800928a:	4638      	mov	r0, r7
 800928c:	6013      	str	r3, [r2, #0]
 800928e:	b004      	add	sp, #16
 8009290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009294:	1c59      	adds	r1, r3, #1
 8009296:	9103      	str	r1, [sp, #12]
 8009298:	701a      	strb	r2, [r3, #0]
 800929a:	e7f0      	b.n	800927e <__cvt+0xa6>

0800929c <__exponent>:
 800929c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800929e:	4603      	mov	r3, r0
 80092a0:	2900      	cmp	r1, #0
 80092a2:	bfb8      	it	lt
 80092a4:	4249      	neglt	r1, r1
 80092a6:	f803 2b02 	strb.w	r2, [r3], #2
 80092aa:	bfb4      	ite	lt
 80092ac:	222d      	movlt	r2, #45	; 0x2d
 80092ae:	222b      	movge	r2, #43	; 0x2b
 80092b0:	2909      	cmp	r1, #9
 80092b2:	7042      	strb	r2, [r0, #1]
 80092b4:	dd2a      	ble.n	800930c <__exponent+0x70>
 80092b6:	f10d 0407 	add.w	r4, sp, #7
 80092ba:	46a4      	mov	ip, r4
 80092bc:	270a      	movs	r7, #10
 80092be:	46a6      	mov	lr, r4
 80092c0:	460a      	mov	r2, r1
 80092c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80092c6:	fb07 1516 	mls	r5, r7, r6, r1
 80092ca:	3530      	adds	r5, #48	; 0x30
 80092cc:	2a63      	cmp	r2, #99	; 0x63
 80092ce:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80092d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80092d6:	4631      	mov	r1, r6
 80092d8:	dcf1      	bgt.n	80092be <__exponent+0x22>
 80092da:	3130      	adds	r1, #48	; 0x30
 80092dc:	f1ae 0502 	sub.w	r5, lr, #2
 80092e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80092e4:	1c44      	adds	r4, r0, #1
 80092e6:	4629      	mov	r1, r5
 80092e8:	4561      	cmp	r1, ip
 80092ea:	d30a      	bcc.n	8009302 <__exponent+0x66>
 80092ec:	f10d 0209 	add.w	r2, sp, #9
 80092f0:	eba2 020e 	sub.w	r2, r2, lr
 80092f4:	4565      	cmp	r5, ip
 80092f6:	bf88      	it	hi
 80092f8:	2200      	movhi	r2, #0
 80092fa:	4413      	add	r3, r2
 80092fc:	1a18      	subs	r0, r3, r0
 80092fe:	b003      	add	sp, #12
 8009300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009302:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009306:	f804 2f01 	strb.w	r2, [r4, #1]!
 800930a:	e7ed      	b.n	80092e8 <__exponent+0x4c>
 800930c:	2330      	movs	r3, #48	; 0x30
 800930e:	3130      	adds	r1, #48	; 0x30
 8009310:	7083      	strb	r3, [r0, #2]
 8009312:	70c1      	strb	r1, [r0, #3]
 8009314:	1d03      	adds	r3, r0, #4
 8009316:	e7f1      	b.n	80092fc <__exponent+0x60>

08009318 <_printf_float>:
 8009318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931c:	ed2d 8b02 	vpush	{d8}
 8009320:	b08d      	sub	sp, #52	; 0x34
 8009322:	460c      	mov	r4, r1
 8009324:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009328:	4616      	mov	r6, r2
 800932a:	461f      	mov	r7, r3
 800932c:	4605      	mov	r5, r0
 800932e:	f002 fed5 	bl	800c0dc <_localeconv_r>
 8009332:	f8d0 a000 	ldr.w	sl, [r0]
 8009336:	4650      	mov	r0, sl
 8009338:	f7f6 ff4a 	bl	80001d0 <strlen>
 800933c:	2300      	movs	r3, #0
 800933e:	930a      	str	r3, [sp, #40]	; 0x28
 8009340:	6823      	ldr	r3, [r4, #0]
 8009342:	9305      	str	r3, [sp, #20]
 8009344:	f8d8 3000 	ldr.w	r3, [r8]
 8009348:	f894 b018 	ldrb.w	fp, [r4, #24]
 800934c:	3307      	adds	r3, #7
 800934e:	f023 0307 	bic.w	r3, r3, #7
 8009352:	f103 0208 	add.w	r2, r3, #8
 8009356:	f8c8 2000 	str.w	r2, [r8]
 800935a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009362:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009366:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800936a:	9307      	str	r3, [sp, #28]
 800936c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009370:	ee08 0a10 	vmov	s16, r0
 8009374:	4b9f      	ldr	r3, [pc, #636]	; (80095f4 <_printf_float+0x2dc>)
 8009376:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800937a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800937e:	f7f7 fbd5 	bl	8000b2c <__aeabi_dcmpun>
 8009382:	bb88      	cbnz	r0, 80093e8 <_printf_float+0xd0>
 8009384:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009388:	4b9a      	ldr	r3, [pc, #616]	; (80095f4 <_printf_float+0x2dc>)
 800938a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800938e:	f7f7 fbaf 	bl	8000af0 <__aeabi_dcmple>
 8009392:	bb48      	cbnz	r0, 80093e8 <_printf_float+0xd0>
 8009394:	2200      	movs	r2, #0
 8009396:	2300      	movs	r3, #0
 8009398:	4640      	mov	r0, r8
 800939a:	4649      	mov	r1, r9
 800939c:	f7f7 fb9e 	bl	8000adc <__aeabi_dcmplt>
 80093a0:	b110      	cbz	r0, 80093a8 <_printf_float+0x90>
 80093a2:	232d      	movs	r3, #45	; 0x2d
 80093a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093a8:	4b93      	ldr	r3, [pc, #588]	; (80095f8 <_printf_float+0x2e0>)
 80093aa:	4894      	ldr	r0, [pc, #592]	; (80095fc <_printf_float+0x2e4>)
 80093ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80093b0:	bf94      	ite	ls
 80093b2:	4698      	movls	r8, r3
 80093b4:	4680      	movhi	r8, r0
 80093b6:	2303      	movs	r3, #3
 80093b8:	6123      	str	r3, [r4, #16]
 80093ba:	9b05      	ldr	r3, [sp, #20]
 80093bc:	f023 0204 	bic.w	r2, r3, #4
 80093c0:	6022      	str	r2, [r4, #0]
 80093c2:	f04f 0900 	mov.w	r9, #0
 80093c6:	9700      	str	r7, [sp, #0]
 80093c8:	4633      	mov	r3, r6
 80093ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80093cc:	4621      	mov	r1, r4
 80093ce:	4628      	mov	r0, r5
 80093d0:	f000 f9d8 	bl	8009784 <_printf_common>
 80093d4:	3001      	adds	r0, #1
 80093d6:	f040 8090 	bne.w	80094fa <_printf_float+0x1e2>
 80093da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093de:	b00d      	add	sp, #52	; 0x34
 80093e0:	ecbd 8b02 	vpop	{d8}
 80093e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e8:	4642      	mov	r2, r8
 80093ea:	464b      	mov	r3, r9
 80093ec:	4640      	mov	r0, r8
 80093ee:	4649      	mov	r1, r9
 80093f0:	f7f7 fb9c 	bl	8000b2c <__aeabi_dcmpun>
 80093f4:	b140      	cbz	r0, 8009408 <_printf_float+0xf0>
 80093f6:	464b      	mov	r3, r9
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	bfbc      	itt	lt
 80093fc:	232d      	movlt	r3, #45	; 0x2d
 80093fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009402:	487f      	ldr	r0, [pc, #508]	; (8009600 <_printf_float+0x2e8>)
 8009404:	4b7f      	ldr	r3, [pc, #508]	; (8009604 <_printf_float+0x2ec>)
 8009406:	e7d1      	b.n	80093ac <_printf_float+0x94>
 8009408:	6863      	ldr	r3, [r4, #4]
 800940a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800940e:	9206      	str	r2, [sp, #24]
 8009410:	1c5a      	adds	r2, r3, #1
 8009412:	d13f      	bne.n	8009494 <_printf_float+0x17c>
 8009414:	2306      	movs	r3, #6
 8009416:	6063      	str	r3, [r4, #4]
 8009418:	9b05      	ldr	r3, [sp, #20]
 800941a:	6861      	ldr	r1, [r4, #4]
 800941c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009420:	2300      	movs	r3, #0
 8009422:	9303      	str	r3, [sp, #12]
 8009424:	ab0a      	add	r3, sp, #40	; 0x28
 8009426:	e9cd b301 	strd	fp, r3, [sp, #4]
 800942a:	ab09      	add	r3, sp, #36	; 0x24
 800942c:	ec49 8b10 	vmov	d0, r8, r9
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	6022      	str	r2, [r4, #0]
 8009434:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009438:	4628      	mov	r0, r5
 800943a:	f7ff fecd 	bl	80091d8 <__cvt>
 800943e:	9b06      	ldr	r3, [sp, #24]
 8009440:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009442:	2b47      	cmp	r3, #71	; 0x47
 8009444:	4680      	mov	r8, r0
 8009446:	d108      	bne.n	800945a <_printf_float+0x142>
 8009448:	1cc8      	adds	r0, r1, #3
 800944a:	db02      	blt.n	8009452 <_printf_float+0x13a>
 800944c:	6863      	ldr	r3, [r4, #4]
 800944e:	4299      	cmp	r1, r3
 8009450:	dd41      	ble.n	80094d6 <_printf_float+0x1be>
 8009452:	f1ab 0b02 	sub.w	fp, fp, #2
 8009456:	fa5f fb8b 	uxtb.w	fp, fp
 800945a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800945e:	d820      	bhi.n	80094a2 <_printf_float+0x18a>
 8009460:	3901      	subs	r1, #1
 8009462:	465a      	mov	r2, fp
 8009464:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009468:	9109      	str	r1, [sp, #36]	; 0x24
 800946a:	f7ff ff17 	bl	800929c <__exponent>
 800946e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009470:	1813      	adds	r3, r2, r0
 8009472:	2a01      	cmp	r2, #1
 8009474:	4681      	mov	r9, r0
 8009476:	6123      	str	r3, [r4, #16]
 8009478:	dc02      	bgt.n	8009480 <_printf_float+0x168>
 800947a:	6822      	ldr	r2, [r4, #0]
 800947c:	07d2      	lsls	r2, r2, #31
 800947e:	d501      	bpl.n	8009484 <_printf_float+0x16c>
 8009480:	3301      	adds	r3, #1
 8009482:	6123      	str	r3, [r4, #16]
 8009484:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009488:	2b00      	cmp	r3, #0
 800948a:	d09c      	beq.n	80093c6 <_printf_float+0xae>
 800948c:	232d      	movs	r3, #45	; 0x2d
 800948e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009492:	e798      	b.n	80093c6 <_printf_float+0xae>
 8009494:	9a06      	ldr	r2, [sp, #24]
 8009496:	2a47      	cmp	r2, #71	; 0x47
 8009498:	d1be      	bne.n	8009418 <_printf_float+0x100>
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1bc      	bne.n	8009418 <_printf_float+0x100>
 800949e:	2301      	movs	r3, #1
 80094a0:	e7b9      	b.n	8009416 <_printf_float+0xfe>
 80094a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80094a6:	d118      	bne.n	80094da <_printf_float+0x1c2>
 80094a8:	2900      	cmp	r1, #0
 80094aa:	6863      	ldr	r3, [r4, #4]
 80094ac:	dd0b      	ble.n	80094c6 <_printf_float+0x1ae>
 80094ae:	6121      	str	r1, [r4, #16]
 80094b0:	b913      	cbnz	r3, 80094b8 <_printf_float+0x1a0>
 80094b2:	6822      	ldr	r2, [r4, #0]
 80094b4:	07d0      	lsls	r0, r2, #31
 80094b6:	d502      	bpl.n	80094be <_printf_float+0x1a6>
 80094b8:	3301      	adds	r3, #1
 80094ba:	440b      	add	r3, r1
 80094bc:	6123      	str	r3, [r4, #16]
 80094be:	65a1      	str	r1, [r4, #88]	; 0x58
 80094c0:	f04f 0900 	mov.w	r9, #0
 80094c4:	e7de      	b.n	8009484 <_printf_float+0x16c>
 80094c6:	b913      	cbnz	r3, 80094ce <_printf_float+0x1b6>
 80094c8:	6822      	ldr	r2, [r4, #0]
 80094ca:	07d2      	lsls	r2, r2, #31
 80094cc:	d501      	bpl.n	80094d2 <_printf_float+0x1ba>
 80094ce:	3302      	adds	r3, #2
 80094d0:	e7f4      	b.n	80094bc <_printf_float+0x1a4>
 80094d2:	2301      	movs	r3, #1
 80094d4:	e7f2      	b.n	80094bc <_printf_float+0x1a4>
 80094d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80094da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094dc:	4299      	cmp	r1, r3
 80094de:	db05      	blt.n	80094ec <_printf_float+0x1d4>
 80094e0:	6823      	ldr	r3, [r4, #0]
 80094e2:	6121      	str	r1, [r4, #16]
 80094e4:	07d8      	lsls	r0, r3, #31
 80094e6:	d5ea      	bpl.n	80094be <_printf_float+0x1a6>
 80094e8:	1c4b      	adds	r3, r1, #1
 80094ea:	e7e7      	b.n	80094bc <_printf_float+0x1a4>
 80094ec:	2900      	cmp	r1, #0
 80094ee:	bfd4      	ite	le
 80094f0:	f1c1 0202 	rsble	r2, r1, #2
 80094f4:	2201      	movgt	r2, #1
 80094f6:	4413      	add	r3, r2
 80094f8:	e7e0      	b.n	80094bc <_printf_float+0x1a4>
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	055a      	lsls	r2, r3, #21
 80094fe:	d407      	bmi.n	8009510 <_printf_float+0x1f8>
 8009500:	6923      	ldr	r3, [r4, #16]
 8009502:	4642      	mov	r2, r8
 8009504:	4631      	mov	r1, r6
 8009506:	4628      	mov	r0, r5
 8009508:	47b8      	blx	r7
 800950a:	3001      	adds	r0, #1
 800950c:	d12c      	bne.n	8009568 <_printf_float+0x250>
 800950e:	e764      	b.n	80093da <_printf_float+0xc2>
 8009510:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009514:	f240 80e0 	bls.w	80096d8 <_printf_float+0x3c0>
 8009518:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800951c:	2200      	movs	r2, #0
 800951e:	2300      	movs	r3, #0
 8009520:	f7f7 fad2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009524:	2800      	cmp	r0, #0
 8009526:	d034      	beq.n	8009592 <_printf_float+0x27a>
 8009528:	4a37      	ldr	r2, [pc, #220]	; (8009608 <_printf_float+0x2f0>)
 800952a:	2301      	movs	r3, #1
 800952c:	4631      	mov	r1, r6
 800952e:	4628      	mov	r0, r5
 8009530:	47b8      	blx	r7
 8009532:	3001      	adds	r0, #1
 8009534:	f43f af51 	beq.w	80093da <_printf_float+0xc2>
 8009538:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800953c:	429a      	cmp	r2, r3
 800953e:	db02      	blt.n	8009546 <_printf_float+0x22e>
 8009540:	6823      	ldr	r3, [r4, #0]
 8009542:	07d8      	lsls	r0, r3, #31
 8009544:	d510      	bpl.n	8009568 <_printf_float+0x250>
 8009546:	ee18 3a10 	vmov	r3, s16
 800954a:	4652      	mov	r2, sl
 800954c:	4631      	mov	r1, r6
 800954e:	4628      	mov	r0, r5
 8009550:	47b8      	blx	r7
 8009552:	3001      	adds	r0, #1
 8009554:	f43f af41 	beq.w	80093da <_printf_float+0xc2>
 8009558:	f04f 0800 	mov.w	r8, #0
 800955c:	f104 091a 	add.w	r9, r4, #26
 8009560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009562:	3b01      	subs	r3, #1
 8009564:	4543      	cmp	r3, r8
 8009566:	dc09      	bgt.n	800957c <_printf_float+0x264>
 8009568:	6823      	ldr	r3, [r4, #0]
 800956a:	079b      	lsls	r3, r3, #30
 800956c:	f100 8105 	bmi.w	800977a <_printf_float+0x462>
 8009570:	68e0      	ldr	r0, [r4, #12]
 8009572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009574:	4298      	cmp	r0, r3
 8009576:	bfb8      	it	lt
 8009578:	4618      	movlt	r0, r3
 800957a:	e730      	b.n	80093de <_printf_float+0xc6>
 800957c:	2301      	movs	r3, #1
 800957e:	464a      	mov	r2, r9
 8009580:	4631      	mov	r1, r6
 8009582:	4628      	mov	r0, r5
 8009584:	47b8      	blx	r7
 8009586:	3001      	adds	r0, #1
 8009588:	f43f af27 	beq.w	80093da <_printf_float+0xc2>
 800958c:	f108 0801 	add.w	r8, r8, #1
 8009590:	e7e6      	b.n	8009560 <_printf_float+0x248>
 8009592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009594:	2b00      	cmp	r3, #0
 8009596:	dc39      	bgt.n	800960c <_printf_float+0x2f4>
 8009598:	4a1b      	ldr	r2, [pc, #108]	; (8009608 <_printf_float+0x2f0>)
 800959a:	2301      	movs	r3, #1
 800959c:	4631      	mov	r1, r6
 800959e:	4628      	mov	r0, r5
 80095a0:	47b8      	blx	r7
 80095a2:	3001      	adds	r0, #1
 80095a4:	f43f af19 	beq.w	80093da <_printf_float+0xc2>
 80095a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095ac:	4313      	orrs	r3, r2
 80095ae:	d102      	bne.n	80095b6 <_printf_float+0x29e>
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	07d9      	lsls	r1, r3, #31
 80095b4:	d5d8      	bpl.n	8009568 <_printf_float+0x250>
 80095b6:	ee18 3a10 	vmov	r3, s16
 80095ba:	4652      	mov	r2, sl
 80095bc:	4631      	mov	r1, r6
 80095be:	4628      	mov	r0, r5
 80095c0:	47b8      	blx	r7
 80095c2:	3001      	adds	r0, #1
 80095c4:	f43f af09 	beq.w	80093da <_printf_float+0xc2>
 80095c8:	f04f 0900 	mov.w	r9, #0
 80095cc:	f104 0a1a 	add.w	sl, r4, #26
 80095d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d2:	425b      	negs	r3, r3
 80095d4:	454b      	cmp	r3, r9
 80095d6:	dc01      	bgt.n	80095dc <_printf_float+0x2c4>
 80095d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095da:	e792      	b.n	8009502 <_printf_float+0x1ea>
 80095dc:	2301      	movs	r3, #1
 80095de:	4652      	mov	r2, sl
 80095e0:	4631      	mov	r1, r6
 80095e2:	4628      	mov	r0, r5
 80095e4:	47b8      	blx	r7
 80095e6:	3001      	adds	r0, #1
 80095e8:	f43f aef7 	beq.w	80093da <_printf_float+0xc2>
 80095ec:	f109 0901 	add.w	r9, r9, #1
 80095f0:	e7ee      	b.n	80095d0 <_printf_float+0x2b8>
 80095f2:	bf00      	nop
 80095f4:	7fefffff 	.word	0x7fefffff
 80095f8:	0800de70 	.word	0x0800de70
 80095fc:	0800de74 	.word	0x0800de74
 8009600:	0800de7c 	.word	0x0800de7c
 8009604:	0800de78 	.word	0x0800de78
 8009608:	0800de80 	.word	0x0800de80
 800960c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800960e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009610:	429a      	cmp	r2, r3
 8009612:	bfa8      	it	ge
 8009614:	461a      	movge	r2, r3
 8009616:	2a00      	cmp	r2, #0
 8009618:	4691      	mov	r9, r2
 800961a:	dc37      	bgt.n	800968c <_printf_float+0x374>
 800961c:	f04f 0b00 	mov.w	fp, #0
 8009620:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009624:	f104 021a 	add.w	r2, r4, #26
 8009628:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800962a:	9305      	str	r3, [sp, #20]
 800962c:	eba3 0309 	sub.w	r3, r3, r9
 8009630:	455b      	cmp	r3, fp
 8009632:	dc33      	bgt.n	800969c <_printf_float+0x384>
 8009634:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009638:	429a      	cmp	r2, r3
 800963a:	db3b      	blt.n	80096b4 <_printf_float+0x39c>
 800963c:	6823      	ldr	r3, [r4, #0]
 800963e:	07da      	lsls	r2, r3, #31
 8009640:	d438      	bmi.n	80096b4 <_printf_float+0x39c>
 8009642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009644:	9a05      	ldr	r2, [sp, #20]
 8009646:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009648:	1a9a      	subs	r2, r3, r2
 800964a:	eba3 0901 	sub.w	r9, r3, r1
 800964e:	4591      	cmp	r9, r2
 8009650:	bfa8      	it	ge
 8009652:	4691      	movge	r9, r2
 8009654:	f1b9 0f00 	cmp.w	r9, #0
 8009658:	dc35      	bgt.n	80096c6 <_printf_float+0x3ae>
 800965a:	f04f 0800 	mov.w	r8, #0
 800965e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009662:	f104 0a1a 	add.w	sl, r4, #26
 8009666:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800966a:	1a9b      	subs	r3, r3, r2
 800966c:	eba3 0309 	sub.w	r3, r3, r9
 8009670:	4543      	cmp	r3, r8
 8009672:	f77f af79 	ble.w	8009568 <_printf_float+0x250>
 8009676:	2301      	movs	r3, #1
 8009678:	4652      	mov	r2, sl
 800967a:	4631      	mov	r1, r6
 800967c:	4628      	mov	r0, r5
 800967e:	47b8      	blx	r7
 8009680:	3001      	adds	r0, #1
 8009682:	f43f aeaa 	beq.w	80093da <_printf_float+0xc2>
 8009686:	f108 0801 	add.w	r8, r8, #1
 800968a:	e7ec      	b.n	8009666 <_printf_float+0x34e>
 800968c:	4613      	mov	r3, r2
 800968e:	4631      	mov	r1, r6
 8009690:	4642      	mov	r2, r8
 8009692:	4628      	mov	r0, r5
 8009694:	47b8      	blx	r7
 8009696:	3001      	adds	r0, #1
 8009698:	d1c0      	bne.n	800961c <_printf_float+0x304>
 800969a:	e69e      	b.n	80093da <_printf_float+0xc2>
 800969c:	2301      	movs	r3, #1
 800969e:	4631      	mov	r1, r6
 80096a0:	4628      	mov	r0, r5
 80096a2:	9205      	str	r2, [sp, #20]
 80096a4:	47b8      	blx	r7
 80096a6:	3001      	adds	r0, #1
 80096a8:	f43f ae97 	beq.w	80093da <_printf_float+0xc2>
 80096ac:	9a05      	ldr	r2, [sp, #20]
 80096ae:	f10b 0b01 	add.w	fp, fp, #1
 80096b2:	e7b9      	b.n	8009628 <_printf_float+0x310>
 80096b4:	ee18 3a10 	vmov	r3, s16
 80096b8:	4652      	mov	r2, sl
 80096ba:	4631      	mov	r1, r6
 80096bc:	4628      	mov	r0, r5
 80096be:	47b8      	blx	r7
 80096c0:	3001      	adds	r0, #1
 80096c2:	d1be      	bne.n	8009642 <_printf_float+0x32a>
 80096c4:	e689      	b.n	80093da <_printf_float+0xc2>
 80096c6:	9a05      	ldr	r2, [sp, #20]
 80096c8:	464b      	mov	r3, r9
 80096ca:	4442      	add	r2, r8
 80096cc:	4631      	mov	r1, r6
 80096ce:	4628      	mov	r0, r5
 80096d0:	47b8      	blx	r7
 80096d2:	3001      	adds	r0, #1
 80096d4:	d1c1      	bne.n	800965a <_printf_float+0x342>
 80096d6:	e680      	b.n	80093da <_printf_float+0xc2>
 80096d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096da:	2a01      	cmp	r2, #1
 80096dc:	dc01      	bgt.n	80096e2 <_printf_float+0x3ca>
 80096de:	07db      	lsls	r3, r3, #31
 80096e0:	d538      	bpl.n	8009754 <_printf_float+0x43c>
 80096e2:	2301      	movs	r3, #1
 80096e4:	4642      	mov	r2, r8
 80096e6:	4631      	mov	r1, r6
 80096e8:	4628      	mov	r0, r5
 80096ea:	47b8      	blx	r7
 80096ec:	3001      	adds	r0, #1
 80096ee:	f43f ae74 	beq.w	80093da <_printf_float+0xc2>
 80096f2:	ee18 3a10 	vmov	r3, s16
 80096f6:	4652      	mov	r2, sl
 80096f8:	4631      	mov	r1, r6
 80096fa:	4628      	mov	r0, r5
 80096fc:	47b8      	blx	r7
 80096fe:	3001      	adds	r0, #1
 8009700:	f43f ae6b 	beq.w	80093da <_printf_float+0xc2>
 8009704:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009708:	2200      	movs	r2, #0
 800970a:	2300      	movs	r3, #0
 800970c:	f7f7 f9dc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009710:	b9d8      	cbnz	r0, 800974a <_printf_float+0x432>
 8009712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009714:	f108 0201 	add.w	r2, r8, #1
 8009718:	3b01      	subs	r3, #1
 800971a:	4631      	mov	r1, r6
 800971c:	4628      	mov	r0, r5
 800971e:	47b8      	blx	r7
 8009720:	3001      	adds	r0, #1
 8009722:	d10e      	bne.n	8009742 <_printf_float+0x42a>
 8009724:	e659      	b.n	80093da <_printf_float+0xc2>
 8009726:	2301      	movs	r3, #1
 8009728:	4652      	mov	r2, sl
 800972a:	4631      	mov	r1, r6
 800972c:	4628      	mov	r0, r5
 800972e:	47b8      	blx	r7
 8009730:	3001      	adds	r0, #1
 8009732:	f43f ae52 	beq.w	80093da <_printf_float+0xc2>
 8009736:	f108 0801 	add.w	r8, r8, #1
 800973a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800973c:	3b01      	subs	r3, #1
 800973e:	4543      	cmp	r3, r8
 8009740:	dcf1      	bgt.n	8009726 <_printf_float+0x40e>
 8009742:	464b      	mov	r3, r9
 8009744:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009748:	e6dc      	b.n	8009504 <_printf_float+0x1ec>
 800974a:	f04f 0800 	mov.w	r8, #0
 800974e:	f104 0a1a 	add.w	sl, r4, #26
 8009752:	e7f2      	b.n	800973a <_printf_float+0x422>
 8009754:	2301      	movs	r3, #1
 8009756:	4642      	mov	r2, r8
 8009758:	e7df      	b.n	800971a <_printf_float+0x402>
 800975a:	2301      	movs	r3, #1
 800975c:	464a      	mov	r2, r9
 800975e:	4631      	mov	r1, r6
 8009760:	4628      	mov	r0, r5
 8009762:	47b8      	blx	r7
 8009764:	3001      	adds	r0, #1
 8009766:	f43f ae38 	beq.w	80093da <_printf_float+0xc2>
 800976a:	f108 0801 	add.w	r8, r8, #1
 800976e:	68e3      	ldr	r3, [r4, #12]
 8009770:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009772:	1a5b      	subs	r3, r3, r1
 8009774:	4543      	cmp	r3, r8
 8009776:	dcf0      	bgt.n	800975a <_printf_float+0x442>
 8009778:	e6fa      	b.n	8009570 <_printf_float+0x258>
 800977a:	f04f 0800 	mov.w	r8, #0
 800977e:	f104 0919 	add.w	r9, r4, #25
 8009782:	e7f4      	b.n	800976e <_printf_float+0x456>

08009784 <_printf_common>:
 8009784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009788:	4616      	mov	r6, r2
 800978a:	4699      	mov	r9, r3
 800978c:	688a      	ldr	r2, [r1, #8]
 800978e:	690b      	ldr	r3, [r1, #16]
 8009790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009794:	4293      	cmp	r3, r2
 8009796:	bfb8      	it	lt
 8009798:	4613      	movlt	r3, r2
 800979a:	6033      	str	r3, [r6, #0]
 800979c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097a0:	4607      	mov	r7, r0
 80097a2:	460c      	mov	r4, r1
 80097a4:	b10a      	cbz	r2, 80097aa <_printf_common+0x26>
 80097a6:	3301      	adds	r3, #1
 80097a8:	6033      	str	r3, [r6, #0]
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	0699      	lsls	r1, r3, #26
 80097ae:	bf42      	ittt	mi
 80097b0:	6833      	ldrmi	r3, [r6, #0]
 80097b2:	3302      	addmi	r3, #2
 80097b4:	6033      	strmi	r3, [r6, #0]
 80097b6:	6825      	ldr	r5, [r4, #0]
 80097b8:	f015 0506 	ands.w	r5, r5, #6
 80097bc:	d106      	bne.n	80097cc <_printf_common+0x48>
 80097be:	f104 0a19 	add.w	sl, r4, #25
 80097c2:	68e3      	ldr	r3, [r4, #12]
 80097c4:	6832      	ldr	r2, [r6, #0]
 80097c6:	1a9b      	subs	r3, r3, r2
 80097c8:	42ab      	cmp	r3, r5
 80097ca:	dc26      	bgt.n	800981a <_printf_common+0x96>
 80097cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097d0:	1e13      	subs	r3, r2, #0
 80097d2:	6822      	ldr	r2, [r4, #0]
 80097d4:	bf18      	it	ne
 80097d6:	2301      	movne	r3, #1
 80097d8:	0692      	lsls	r2, r2, #26
 80097da:	d42b      	bmi.n	8009834 <_printf_common+0xb0>
 80097dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097e0:	4649      	mov	r1, r9
 80097e2:	4638      	mov	r0, r7
 80097e4:	47c0      	blx	r8
 80097e6:	3001      	adds	r0, #1
 80097e8:	d01e      	beq.n	8009828 <_printf_common+0xa4>
 80097ea:	6823      	ldr	r3, [r4, #0]
 80097ec:	68e5      	ldr	r5, [r4, #12]
 80097ee:	6832      	ldr	r2, [r6, #0]
 80097f0:	f003 0306 	and.w	r3, r3, #6
 80097f4:	2b04      	cmp	r3, #4
 80097f6:	bf08      	it	eq
 80097f8:	1aad      	subeq	r5, r5, r2
 80097fa:	68a3      	ldr	r3, [r4, #8]
 80097fc:	6922      	ldr	r2, [r4, #16]
 80097fe:	bf0c      	ite	eq
 8009800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009804:	2500      	movne	r5, #0
 8009806:	4293      	cmp	r3, r2
 8009808:	bfc4      	itt	gt
 800980a:	1a9b      	subgt	r3, r3, r2
 800980c:	18ed      	addgt	r5, r5, r3
 800980e:	2600      	movs	r6, #0
 8009810:	341a      	adds	r4, #26
 8009812:	42b5      	cmp	r5, r6
 8009814:	d11a      	bne.n	800984c <_printf_common+0xc8>
 8009816:	2000      	movs	r0, #0
 8009818:	e008      	b.n	800982c <_printf_common+0xa8>
 800981a:	2301      	movs	r3, #1
 800981c:	4652      	mov	r2, sl
 800981e:	4649      	mov	r1, r9
 8009820:	4638      	mov	r0, r7
 8009822:	47c0      	blx	r8
 8009824:	3001      	adds	r0, #1
 8009826:	d103      	bne.n	8009830 <_printf_common+0xac>
 8009828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800982c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009830:	3501      	adds	r5, #1
 8009832:	e7c6      	b.n	80097c2 <_printf_common+0x3e>
 8009834:	18e1      	adds	r1, r4, r3
 8009836:	1c5a      	adds	r2, r3, #1
 8009838:	2030      	movs	r0, #48	; 0x30
 800983a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800983e:	4422      	add	r2, r4
 8009840:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009844:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009848:	3302      	adds	r3, #2
 800984a:	e7c7      	b.n	80097dc <_printf_common+0x58>
 800984c:	2301      	movs	r3, #1
 800984e:	4622      	mov	r2, r4
 8009850:	4649      	mov	r1, r9
 8009852:	4638      	mov	r0, r7
 8009854:	47c0      	blx	r8
 8009856:	3001      	adds	r0, #1
 8009858:	d0e6      	beq.n	8009828 <_printf_common+0xa4>
 800985a:	3601      	adds	r6, #1
 800985c:	e7d9      	b.n	8009812 <_printf_common+0x8e>
	...

08009860 <_printf_i>:
 8009860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009864:	7e0f      	ldrb	r7, [r1, #24]
 8009866:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009868:	2f78      	cmp	r7, #120	; 0x78
 800986a:	4691      	mov	r9, r2
 800986c:	4680      	mov	r8, r0
 800986e:	460c      	mov	r4, r1
 8009870:	469a      	mov	sl, r3
 8009872:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009876:	d807      	bhi.n	8009888 <_printf_i+0x28>
 8009878:	2f62      	cmp	r7, #98	; 0x62
 800987a:	d80a      	bhi.n	8009892 <_printf_i+0x32>
 800987c:	2f00      	cmp	r7, #0
 800987e:	f000 80d8 	beq.w	8009a32 <_printf_i+0x1d2>
 8009882:	2f58      	cmp	r7, #88	; 0x58
 8009884:	f000 80a3 	beq.w	80099ce <_printf_i+0x16e>
 8009888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800988c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009890:	e03a      	b.n	8009908 <_printf_i+0xa8>
 8009892:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009896:	2b15      	cmp	r3, #21
 8009898:	d8f6      	bhi.n	8009888 <_printf_i+0x28>
 800989a:	a101      	add	r1, pc, #4	; (adr r1, 80098a0 <_printf_i+0x40>)
 800989c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098a0:	080098f9 	.word	0x080098f9
 80098a4:	0800990d 	.word	0x0800990d
 80098a8:	08009889 	.word	0x08009889
 80098ac:	08009889 	.word	0x08009889
 80098b0:	08009889 	.word	0x08009889
 80098b4:	08009889 	.word	0x08009889
 80098b8:	0800990d 	.word	0x0800990d
 80098bc:	08009889 	.word	0x08009889
 80098c0:	08009889 	.word	0x08009889
 80098c4:	08009889 	.word	0x08009889
 80098c8:	08009889 	.word	0x08009889
 80098cc:	08009a19 	.word	0x08009a19
 80098d0:	0800993d 	.word	0x0800993d
 80098d4:	080099fb 	.word	0x080099fb
 80098d8:	08009889 	.word	0x08009889
 80098dc:	08009889 	.word	0x08009889
 80098e0:	08009a3b 	.word	0x08009a3b
 80098e4:	08009889 	.word	0x08009889
 80098e8:	0800993d 	.word	0x0800993d
 80098ec:	08009889 	.word	0x08009889
 80098f0:	08009889 	.word	0x08009889
 80098f4:	08009a03 	.word	0x08009a03
 80098f8:	682b      	ldr	r3, [r5, #0]
 80098fa:	1d1a      	adds	r2, r3, #4
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	602a      	str	r2, [r5, #0]
 8009900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009908:	2301      	movs	r3, #1
 800990a:	e0a3      	b.n	8009a54 <_printf_i+0x1f4>
 800990c:	6820      	ldr	r0, [r4, #0]
 800990e:	6829      	ldr	r1, [r5, #0]
 8009910:	0606      	lsls	r6, r0, #24
 8009912:	f101 0304 	add.w	r3, r1, #4
 8009916:	d50a      	bpl.n	800992e <_printf_i+0xce>
 8009918:	680e      	ldr	r6, [r1, #0]
 800991a:	602b      	str	r3, [r5, #0]
 800991c:	2e00      	cmp	r6, #0
 800991e:	da03      	bge.n	8009928 <_printf_i+0xc8>
 8009920:	232d      	movs	r3, #45	; 0x2d
 8009922:	4276      	negs	r6, r6
 8009924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009928:	485e      	ldr	r0, [pc, #376]	; (8009aa4 <_printf_i+0x244>)
 800992a:	230a      	movs	r3, #10
 800992c:	e019      	b.n	8009962 <_printf_i+0x102>
 800992e:	680e      	ldr	r6, [r1, #0]
 8009930:	602b      	str	r3, [r5, #0]
 8009932:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009936:	bf18      	it	ne
 8009938:	b236      	sxthne	r6, r6
 800993a:	e7ef      	b.n	800991c <_printf_i+0xbc>
 800993c:	682b      	ldr	r3, [r5, #0]
 800993e:	6820      	ldr	r0, [r4, #0]
 8009940:	1d19      	adds	r1, r3, #4
 8009942:	6029      	str	r1, [r5, #0]
 8009944:	0601      	lsls	r1, r0, #24
 8009946:	d501      	bpl.n	800994c <_printf_i+0xec>
 8009948:	681e      	ldr	r6, [r3, #0]
 800994a:	e002      	b.n	8009952 <_printf_i+0xf2>
 800994c:	0646      	lsls	r6, r0, #25
 800994e:	d5fb      	bpl.n	8009948 <_printf_i+0xe8>
 8009950:	881e      	ldrh	r6, [r3, #0]
 8009952:	4854      	ldr	r0, [pc, #336]	; (8009aa4 <_printf_i+0x244>)
 8009954:	2f6f      	cmp	r7, #111	; 0x6f
 8009956:	bf0c      	ite	eq
 8009958:	2308      	moveq	r3, #8
 800995a:	230a      	movne	r3, #10
 800995c:	2100      	movs	r1, #0
 800995e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009962:	6865      	ldr	r5, [r4, #4]
 8009964:	60a5      	str	r5, [r4, #8]
 8009966:	2d00      	cmp	r5, #0
 8009968:	bfa2      	ittt	ge
 800996a:	6821      	ldrge	r1, [r4, #0]
 800996c:	f021 0104 	bicge.w	r1, r1, #4
 8009970:	6021      	strge	r1, [r4, #0]
 8009972:	b90e      	cbnz	r6, 8009978 <_printf_i+0x118>
 8009974:	2d00      	cmp	r5, #0
 8009976:	d04d      	beq.n	8009a14 <_printf_i+0x1b4>
 8009978:	4615      	mov	r5, r2
 800997a:	fbb6 f1f3 	udiv	r1, r6, r3
 800997e:	fb03 6711 	mls	r7, r3, r1, r6
 8009982:	5dc7      	ldrb	r7, [r0, r7]
 8009984:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009988:	4637      	mov	r7, r6
 800998a:	42bb      	cmp	r3, r7
 800998c:	460e      	mov	r6, r1
 800998e:	d9f4      	bls.n	800997a <_printf_i+0x11a>
 8009990:	2b08      	cmp	r3, #8
 8009992:	d10b      	bne.n	80099ac <_printf_i+0x14c>
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	07de      	lsls	r6, r3, #31
 8009998:	d508      	bpl.n	80099ac <_printf_i+0x14c>
 800999a:	6923      	ldr	r3, [r4, #16]
 800999c:	6861      	ldr	r1, [r4, #4]
 800999e:	4299      	cmp	r1, r3
 80099a0:	bfde      	ittt	le
 80099a2:	2330      	movle	r3, #48	; 0x30
 80099a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099a8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80099ac:	1b52      	subs	r2, r2, r5
 80099ae:	6122      	str	r2, [r4, #16]
 80099b0:	f8cd a000 	str.w	sl, [sp]
 80099b4:	464b      	mov	r3, r9
 80099b6:	aa03      	add	r2, sp, #12
 80099b8:	4621      	mov	r1, r4
 80099ba:	4640      	mov	r0, r8
 80099bc:	f7ff fee2 	bl	8009784 <_printf_common>
 80099c0:	3001      	adds	r0, #1
 80099c2:	d14c      	bne.n	8009a5e <_printf_i+0x1fe>
 80099c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099c8:	b004      	add	sp, #16
 80099ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ce:	4835      	ldr	r0, [pc, #212]	; (8009aa4 <_printf_i+0x244>)
 80099d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80099d4:	6829      	ldr	r1, [r5, #0]
 80099d6:	6823      	ldr	r3, [r4, #0]
 80099d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80099dc:	6029      	str	r1, [r5, #0]
 80099de:	061d      	lsls	r5, r3, #24
 80099e0:	d514      	bpl.n	8009a0c <_printf_i+0x1ac>
 80099e2:	07df      	lsls	r7, r3, #31
 80099e4:	bf44      	itt	mi
 80099e6:	f043 0320 	orrmi.w	r3, r3, #32
 80099ea:	6023      	strmi	r3, [r4, #0]
 80099ec:	b91e      	cbnz	r6, 80099f6 <_printf_i+0x196>
 80099ee:	6823      	ldr	r3, [r4, #0]
 80099f0:	f023 0320 	bic.w	r3, r3, #32
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	2310      	movs	r3, #16
 80099f8:	e7b0      	b.n	800995c <_printf_i+0xfc>
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	f043 0320 	orr.w	r3, r3, #32
 8009a00:	6023      	str	r3, [r4, #0]
 8009a02:	2378      	movs	r3, #120	; 0x78
 8009a04:	4828      	ldr	r0, [pc, #160]	; (8009aa8 <_printf_i+0x248>)
 8009a06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a0a:	e7e3      	b.n	80099d4 <_printf_i+0x174>
 8009a0c:	0659      	lsls	r1, r3, #25
 8009a0e:	bf48      	it	mi
 8009a10:	b2b6      	uxthmi	r6, r6
 8009a12:	e7e6      	b.n	80099e2 <_printf_i+0x182>
 8009a14:	4615      	mov	r5, r2
 8009a16:	e7bb      	b.n	8009990 <_printf_i+0x130>
 8009a18:	682b      	ldr	r3, [r5, #0]
 8009a1a:	6826      	ldr	r6, [r4, #0]
 8009a1c:	6961      	ldr	r1, [r4, #20]
 8009a1e:	1d18      	adds	r0, r3, #4
 8009a20:	6028      	str	r0, [r5, #0]
 8009a22:	0635      	lsls	r5, r6, #24
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	d501      	bpl.n	8009a2c <_printf_i+0x1cc>
 8009a28:	6019      	str	r1, [r3, #0]
 8009a2a:	e002      	b.n	8009a32 <_printf_i+0x1d2>
 8009a2c:	0670      	lsls	r0, r6, #25
 8009a2e:	d5fb      	bpl.n	8009a28 <_printf_i+0x1c8>
 8009a30:	8019      	strh	r1, [r3, #0]
 8009a32:	2300      	movs	r3, #0
 8009a34:	6123      	str	r3, [r4, #16]
 8009a36:	4615      	mov	r5, r2
 8009a38:	e7ba      	b.n	80099b0 <_printf_i+0x150>
 8009a3a:	682b      	ldr	r3, [r5, #0]
 8009a3c:	1d1a      	adds	r2, r3, #4
 8009a3e:	602a      	str	r2, [r5, #0]
 8009a40:	681d      	ldr	r5, [r3, #0]
 8009a42:	6862      	ldr	r2, [r4, #4]
 8009a44:	2100      	movs	r1, #0
 8009a46:	4628      	mov	r0, r5
 8009a48:	f7f6 fbca 	bl	80001e0 <memchr>
 8009a4c:	b108      	cbz	r0, 8009a52 <_printf_i+0x1f2>
 8009a4e:	1b40      	subs	r0, r0, r5
 8009a50:	6060      	str	r0, [r4, #4]
 8009a52:	6863      	ldr	r3, [r4, #4]
 8009a54:	6123      	str	r3, [r4, #16]
 8009a56:	2300      	movs	r3, #0
 8009a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a5c:	e7a8      	b.n	80099b0 <_printf_i+0x150>
 8009a5e:	6923      	ldr	r3, [r4, #16]
 8009a60:	462a      	mov	r2, r5
 8009a62:	4649      	mov	r1, r9
 8009a64:	4640      	mov	r0, r8
 8009a66:	47d0      	blx	sl
 8009a68:	3001      	adds	r0, #1
 8009a6a:	d0ab      	beq.n	80099c4 <_printf_i+0x164>
 8009a6c:	6823      	ldr	r3, [r4, #0]
 8009a6e:	079b      	lsls	r3, r3, #30
 8009a70:	d413      	bmi.n	8009a9a <_printf_i+0x23a>
 8009a72:	68e0      	ldr	r0, [r4, #12]
 8009a74:	9b03      	ldr	r3, [sp, #12]
 8009a76:	4298      	cmp	r0, r3
 8009a78:	bfb8      	it	lt
 8009a7a:	4618      	movlt	r0, r3
 8009a7c:	e7a4      	b.n	80099c8 <_printf_i+0x168>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	4632      	mov	r2, r6
 8009a82:	4649      	mov	r1, r9
 8009a84:	4640      	mov	r0, r8
 8009a86:	47d0      	blx	sl
 8009a88:	3001      	adds	r0, #1
 8009a8a:	d09b      	beq.n	80099c4 <_printf_i+0x164>
 8009a8c:	3501      	adds	r5, #1
 8009a8e:	68e3      	ldr	r3, [r4, #12]
 8009a90:	9903      	ldr	r1, [sp, #12]
 8009a92:	1a5b      	subs	r3, r3, r1
 8009a94:	42ab      	cmp	r3, r5
 8009a96:	dcf2      	bgt.n	8009a7e <_printf_i+0x21e>
 8009a98:	e7eb      	b.n	8009a72 <_printf_i+0x212>
 8009a9a:	2500      	movs	r5, #0
 8009a9c:	f104 0619 	add.w	r6, r4, #25
 8009aa0:	e7f5      	b.n	8009a8e <_printf_i+0x22e>
 8009aa2:	bf00      	nop
 8009aa4:	0800de82 	.word	0x0800de82
 8009aa8:	0800de93 	.word	0x0800de93

08009aac <_scanf_float>:
 8009aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab0:	b087      	sub	sp, #28
 8009ab2:	4617      	mov	r7, r2
 8009ab4:	9303      	str	r3, [sp, #12]
 8009ab6:	688b      	ldr	r3, [r1, #8]
 8009ab8:	1e5a      	subs	r2, r3, #1
 8009aba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009abe:	bf83      	ittte	hi
 8009ac0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009ac4:	195b      	addhi	r3, r3, r5
 8009ac6:	9302      	strhi	r3, [sp, #8]
 8009ac8:	2300      	movls	r3, #0
 8009aca:	bf86      	itte	hi
 8009acc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009ad0:	608b      	strhi	r3, [r1, #8]
 8009ad2:	9302      	strls	r3, [sp, #8]
 8009ad4:	680b      	ldr	r3, [r1, #0]
 8009ad6:	468b      	mov	fp, r1
 8009ad8:	2500      	movs	r5, #0
 8009ada:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009ade:	f84b 3b1c 	str.w	r3, [fp], #28
 8009ae2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009ae6:	4680      	mov	r8, r0
 8009ae8:	460c      	mov	r4, r1
 8009aea:	465e      	mov	r6, fp
 8009aec:	46aa      	mov	sl, r5
 8009aee:	46a9      	mov	r9, r5
 8009af0:	9501      	str	r5, [sp, #4]
 8009af2:	68a2      	ldr	r2, [r4, #8]
 8009af4:	b152      	cbz	r2, 8009b0c <_scanf_float+0x60>
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	2b4e      	cmp	r3, #78	; 0x4e
 8009afc:	d864      	bhi.n	8009bc8 <_scanf_float+0x11c>
 8009afe:	2b40      	cmp	r3, #64	; 0x40
 8009b00:	d83c      	bhi.n	8009b7c <_scanf_float+0xd0>
 8009b02:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009b06:	b2c8      	uxtb	r0, r1
 8009b08:	280e      	cmp	r0, #14
 8009b0a:	d93a      	bls.n	8009b82 <_scanf_float+0xd6>
 8009b0c:	f1b9 0f00 	cmp.w	r9, #0
 8009b10:	d003      	beq.n	8009b1a <_scanf_float+0x6e>
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b18:	6023      	str	r3, [r4, #0]
 8009b1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009b1e:	f1ba 0f01 	cmp.w	sl, #1
 8009b22:	f200 8113 	bhi.w	8009d4c <_scanf_float+0x2a0>
 8009b26:	455e      	cmp	r6, fp
 8009b28:	f200 8105 	bhi.w	8009d36 <_scanf_float+0x28a>
 8009b2c:	2501      	movs	r5, #1
 8009b2e:	4628      	mov	r0, r5
 8009b30:	b007      	add	sp, #28
 8009b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b36:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009b3a:	2a0d      	cmp	r2, #13
 8009b3c:	d8e6      	bhi.n	8009b0c <_scanf_float+0x60>
 8009b3e:	a101      	add	r1, pc, #4	; (adr r1, 8009b44 <_scanf_float+0x98>)
 8009b40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009b44:	08009c83 	.word	0x08009c83
 8009b48:	08009b0d 	.word	0x08009b0d
 8009b4c:	08009b0d 	.word	0x08009b0d
 8009b50:	08009b0d 	.word	0x08009b0d
 8009b54:	08009ce3 	.word	0x08009ce3
 8009b58:	08009cbb 	.word	0x08009cbb
 8009b5c:	08009b0d 	.word	0x08009b0d
 8009b60:	08009b0d 	.word	0x08009b0d
 8009b64:	08009c91 	.word	0x08009c91
 8009b68:	08009b0d 	.word	0x08009b0d
 8009b6c:	08009b0d 	.word	0x08009b0d
 8009b70:	08009b0d 	.word	0x08009b0d
 8009b74:	08009b0d 	.word	0x08009b0d
 8009b78:	08009c49 	.word	0x08009c49
 8009b7c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009b80:	e7db      	b.n	8009b3a <_scanf_float+0x8e>
 8009b82:	290e      	cmp	r1, #14
 8009b84:	d8c2      	bhi.n	8009b0c <_scanf_float+0x60>
 8009b86:	a001      	add	r0, pc, #4	; (adr r0, 8009b8c <_scanf_float+0xe0>)
 8009b88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009b8c:	08009c3b 	.word	0x08009c3b
 8009b90:	08009b0d 	.word	0x08009b0d
 8009b94:	08009c3b 	.word	0x08009c3b
 8009b98:	08009ccf 	.word	0x08009ccf
 8009b9c:	08009b0d 	.word	0x08009b0d
 8009ba0:	08009be9 	.word	0x08009be9
 8009ba4:	08009c25 	.word	0x08009c25
 8009ba8:	08009c25 	.word	0x08009c25
 8009bac:	08009c25 	.word	0x08009c25
 8009bb0:	08009c25 	.word	0x08009c25
 8009bb4:	08009c25 	.word	0x08009c25
 8009bb8:	08009c25 	.word	0x08009c25
 8009bbc:	08009c25 	.word	0x08009c25
 8009bc0:	08009c25 	.word	0x08009c25
 8009bc4:	08009c25 	.word	0x08009c25
 8009bc8:	2b6e      	cmp	r3, #110	; 0x6e
 8009bca:	d809      	bhi.n	8009be0 <_scanf_float+0x134>
 8009bcc:	2b60      	cmp	r3, #96	; 0x60
 8009bce:	d8b2      	bhi.n	8009b36 <_scanf_float+0x8a>
 8009bd0:	2b54      	cmp	r3, #84	; 0x54
 8009bd2:	d077      	beq.n	8009cc4 <_scanf_float+0x218>
 8009bd4:	2b59      	cmp	r3, #89	; 0x59
 8009bd6:	d199      	bne.n	8009b0c <_scanf_float+0x60>
 8009bd8:	2d07      	cmp	r5, #7
 8009bda:	d197      	bne.n	8009b0c <_scanf_float+0x60>
 8009bdc:	2508      	movs	r5, #8
 8009bde:	e029      	b.n	8009c34 <_scanf_float+0x188>
 8009be0:	2b74      	cmp	r3, #116	; 0x74
 8009be2:	d06f      	beq.n	8009cc4 <_scanf_float+0x218>
 8009be4:	2b79      	cmp	r3, #121	; 0x79
 8009be6:	e7f6      	b.n	8009bd6 <_scanf_float+0x12a>
 8009be8:	6821      	ldr	r1, [r4, #0]
 8009bea:	05c8      	lsls	r0, r1, #23
 8009bec:	d51a      	bpl.n	8009c24 <_scanf_float+0x178>
 8009bee:	9b02      	ldr	r3, [sp, #8]
 8009bf0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009bf4:	6021      	str	r1, [r4, #0]
 8009bf6:	f109 0901 	add.w	r9, r9, #1
 8009bfa:	b11b      	cbz	r3, 8009c04 <_scanf_float+0x158>
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	3201      	adds	r2, #1
 8009c00:	9302      	str	r3, [sp, #8]
 8009c02:	60a2      	str	r2, [r4, #8]
 8009c04:	68a3      	ldr	r3, [r4, #8]
 8009c06:	3b01      	subs	r3, #1
 8009c08:	60a3      	str	r3, [r4, #8]
 8009c0a:	6923      	ldr	r3, [r4, #16]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	6123      	str	r3, [r4, #16]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	607b      	str	r3, [r7, #4]
 8009c18:	f340 8084 	ble.w	8009d24 <_scanf_float+0x278>
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	603b      	str	r3, [r7, #0]
 8009c22:	e766      	b.n	8009af2 <_scanf_float+0x46>
 8009c24:	eb1a 0f05 	cmn.w	sl, r5
 8009c28:	f47f af70 	bne.w	8009b0c <_scanf_float+0x60>
 8009c2c:	6822      	ldr	r2, [r4, #0]
 8009c2e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009c32:	6022      	str	r2, [r4, #0]
 8009c34:	f806 3b01 	strb.w	r3, [r6], #1
 8009c38:	e7e4      	b.n	8009c04 <_scanf_float+0x158>
 8009c3a:	6822      	ldr	r2, [r4, #0]
 8009c3c:	0610      	lsls	r0, r2, #24
 8009c3e:	f57f af65 	bpl.w	8009b0c <_scanf_float+0x60>
 8009c42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c46:	e7f4      	b.n	8009c32 <_scanf_float+0x186>
 8009c48:	f1ba 0f00 	cmp.w	sl, #0
 8009c4c:	d10e      	bne.n	8009c6c <_scanf_float+0x1c0>
 8009c4e:	f1b9 0f00 	cmp.w	r9, #0
 8009c52:	d10e      	bne.n	8009c72 <_scanf_float+0x1c6>
 8009c54:	6822      	ldr	r2, [r4, #0]
 8009c56:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009c5a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009c5e:	d108      	bne.n	8009c72 <_scanf_float+0x1c6>
 8009c60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009c64:	6022      	str	r2, [r4, #0]
 8009c66:	f04f 0a01 	mov.w	sl, #1
 8009c6a:	e7e3      	b.n	8009c34 <_scanf_float+0x188>
 8009c6c:	f1ba 0f02 	cmp.w	sl, #2
 8009c70:	d055      	beq.n	8009d1e <_scanf_float+0x272>
 8009c72:	2d01      	cmp	r5, #1
 8009c74:	d002      	beq.n	8009c7c <_scanf_float+0x1d0>
 8009c76:	2d04      	cmp	r5, #4
 8009c78:	f47f af48 	bne.w	8009b0c <_scanf_float+0x60>
 8009c7c:	3501      	adds	r5, #1
 8009c7e:	b2ed      	uxtb	r5, r5
 8009c80:	e7d8      	b.n	8009c34 <_scanf_float+0x188>
 8009c82:	f1ba 0f01 	cmp.w	sl, #1
 8009c86:	f47f af41 	bne.w	8009b0c <_scanf_float+0x60>
 8009c8a:	f04f 0a02 	mov.w	sl, #2
 8009c8e:	e7d1      	b.n	8009c34 <_scanf_float+0x188>
 8009c90:	b97d      	cbnz	r5, 8009cb2 <_scanf_float+0x206>
 8009c92:	f1b9 0f00 	cmp.w	r9, #0
 8009c96:	f47f af3c 	bne.w	8009b12 <_scanf_float+0x66>
 8009c9a:	6822      	ldr	r2, [r4, #0]
 8009c9c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009ca0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009ca4:	f47f af39 	bne.w	8009b1a <_scanf_float+0x6e>
 8009ca8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009cac:	6022      	str	r2, [r4, #0]
 8009cae:	2501      	movs	r5, #1
 8009cb0:	e7c0      	b.n	8009c34 <_scanf_float+0x188>
 8009cb2:	2d03      	cmp	r5, #3
 8009cb4:	d0e2      	beq.n	8009c7c <_scanf_float+0x1d0>
 8009cb6:	2d05      	cmp	r5, #5
 8009cb8:	e7de      	b.n	8009c78 <_scanf_float+0x1cc>
 8009cba:	2d02      	cmp	r5, #2
 8009cbc:	f47f af26 	bne.w	8009b0c <_scanf_float+0x60>
 8009cc0:	2503      	movs	r5, #3
 8009cc2:	e7b7      	b.n	8009c34 <_scanf_float+0x188>
 8009cc4:	2d06      	cmp	r5, #6
 8009cc6:	f47f af21 	bne.w	8009b0c <_scanf_float+0x60>
 8009cca:	2507      	movs	r5, #7
 8009ccc:	e7b2      	b.n	8009c34 <_scanf_float+0x188>
 8009cce:	6822      	ldr	r2, [r4, #0]
 8009cd0:	0591      	lsls	r1, r2, #22
 8009cd2:	f57f af1b 	bpl.w	8009b0c <_scanf_float+0x60>
 8009cd6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009cda:	6022      	str	r2, [r4, #0]
 8009cdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ce0:	e7a8      	b.n	8009c34 <_scanf_float+0x188>
 8009ce2:	6822      	ldr	r2, [r4, #0]
 8009ce4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009ce8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009cec:	d006      	beq.n	8009cfc <_scanf_float+0x250>
 8009cee:	0550      	lsls	r0, r2, #21
 8009cf0:	f57f af0c 	bpl.w	8009b0c <_scanf_float+0x60>
 8009cf4:	f1b9 0f00 	cmp.w	r9, #0
 8009cf8:	f43f af0f 	beq.w	8009b1a <_scanf_float+0x6e>
 8009cfc:	0591      	lsls	r1, r2, #22
 8009cfe:	bf58      	it	pl
 8009d00:	9901      	ldrpl	r1, [sp, #4]
 8009d02:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009d06:	bf58      	it	pl
 8009d08:	eba9 0101 	subpl.w	r1, r9, r1
 8009d0c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009d10:	bf58      	it	pl
 8009d12:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009d16:	6022      	str	r2, [r4, #0]
 8009d18:	f04f 0900 	mov.w	r9, #0
 8009d1c:	e78a      	b.n	8009c34 <_scanf_float+0x188>
 8009d1e:	f04f 0a03 	mov.w	sl, #3
 8009d22:	e787      	b.n	8009c34 <_scanf_float+0x188>
 8009d24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009d28:	4639      	mov	r1, r7
 8009d2a:	4640      	mov	r0, r8
 8009d2c:	4798      	blx	r3
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	f43f aedf 	beq.w	8009af2 <_scanf_float+0x46>
 8009d34:	e6ea      	b.n	8009b0c <_scanf_float+0x60>
 8009d36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d3e:	463a      	mov	r2, r7
 8009d40:	4640      	mov	r0, r8
 8009d42:	4798      	blx	r3
 8009d44:	6923      	ldr	r3, [r4, #16]
 8009d46:	3b01      	subs	r3, #1
 8009d48:	6123      	str	r3, [r4, #16]
 8009d4a:	e6ec      	b.n	8009b26 <_scanf_float+0x7a>
 8009d4c:	1e6b      	subs	r3, r5, #1
 8009d4e:	2b06      	cmp	r3, #6
 8009d50:	d825      	bhi.n	8009d9e <_scanf_float+0x2f2>
 8009d52:	2d02      	cmp	r5, #2
 8009d54:	d836      	bhi.n	8009dc4 <_scanf_float+0x318>
 8009d56:	455e      	cmp	r6, fp
 8009d58:	f67f aee8 	bls.w	8009b2c <_scanf_float+0x80>
 8009d5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d60:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d64:	463a      	mov	r2, r7
 8009d66:	4640      	mov	r0, r8
 8009d68:	4798      	blx	r3
 8009d6a:	6923      	ldr	r3, [r4, #16]
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	6123      	str	r3, [r4, #16]
 8009d70:	e7f1      	b.n	8009d56 <_scanf_float+0x2aa>
 8009d72:	9802      	ldr	r0, [sp, #8]
 8009d74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d78:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009d7c:	9002      	str	r0, [sp, #8]
 8009d7e:	463a      	mov	r2, r7
 8009d80:	4640      	mov	r0, r8
 8009d82:	4798      	blx	r3
 8009d84:	6923      	ldr	r3, [r4, #16]
 8009d86:	3b01      	subs	r3, #1
 8009d88:	6123      	str	r3, [r4, #16]
 8009d8a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009d8e:	fa5f fa8a 	uxtb.w	sl, sl
 8009d92:	f1ba 0f02 	cmp.w	sl, #2
 8009d96:	d1ec      	bne.n	8009d72 <_scanf_float+0x2c6>
 8009d98:	3d03      	subs	r5, #3
 8009d9a:	b2ed      	uxtb	r5, r5
 8009d9c:	1b76      	subs	r6, r6, r5
 8009d9e:	6823      	ldr	r3, [r4, #0]
 8009da0:	05da      	lsls	r2, r3, #23
 8009da2:	d52f      	bpl.n	8009e04 <_scanf_float+0x358>
 8009da4:	055b      	lsls	r3, r3, #21
 8009da6:	d510      	bpl.n	8009dca <_scanf_float+0x31e>
 8009da8:	455e      	cmp	r6, fp
 8009daa:	f67f aebf 	bls.w	8009b2c <_scanf_float+0x80>
 8009dae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009db2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009db6:	463a      	mov	r2, r7
 8009db8:	4640      	mov	r0, r8
 8009dba:	4798      	blx	r3
 8009dbc:	6923      	ldr	r3, [r4, #16]
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	6123      	str	r3, [r4, #16]
 8009dc2:	e7f1      	b.n	8009da8 <_scanf_float+0x2fc>
 8009dc4:	46aa      	mov	sl, r5
 8009dc6:	9602      	str	r6, [sp, #8]
 8009dc8:	e7df      	b.n	8009d8a <_scanf_float+0x2de>
 8009dca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009dce:	6923      	ldr	r3, [r4, #16]
 8009dd0:	2965      	cmp	r1, #101	; 0x65
 8009dd2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009dd6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8009dda:	6123      	str	r3, [r4, #16]
 8009ddc:	d00c      	beq.n	8009df8 <_scanf_float+0x34c>
 8009dde:	2945      	cmp	r1, #69	; 0x45
 8009de0:	d00a      	beq.n	8009df8 <_scanf_float+0x34c>
 8009de2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009de6:	463a      	mov	r2, r7
 8009de8:	4640      	mov	r0, r8
 8009dea:	4798      	blx	r3
 8009dec:	6923      	ldr	r3, [r4, #16]
 8009dee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009df2:	3b01      	subs	r3, #1
 8009df4:	1eb5      	subs	r5, r6, #2
 8009df6:	6123      	str	r3, [r4, #16]
 8009df8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009dfc:	463a      	mov	r2, r7
 8009dfe:	4640      	mov	r0, r8
 8009e00:	4798      	blx	r3
 8009e02:	462e      	mov	r6, r5
 8009e04:	6825      	ldr	r5, [r4, #0]
 8009e06:	f015 0510 	ands.w	r5, r5, #16
 8009e0a:	d159      	bne.n	8009ec0 <_scanf_float+0x414>
 8009e0c:	7035      	strb	r5, [r6, #0]
 8009e0e:	6823      	ldr	r3, [r4, #0]
 8009e10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e18:	d11b      	bne.n	8009e52 <_scanf_float+0x3a6>
 8009e1a:	9b01      	ldr	r3, [sp, #4]
 8009e1c:	454b      	cmp	r3, r9
 8009e1e:	eba3 0209 	sub.w	r2, r3, r9
 8009e22:	d123      	bne.n	8009e6c <_scanf_float+0x3c0>
 8009e24:	2200      	movs	r2, #0
 8009e26:	4659      	mov	r1, fp
 8009e28:	4640      	mov	r0, r8
 8009e2a:	f000 fee3 	bl	800abf4 <_strtod_r>
 8009e2e:	6822      	ldr	r2, [r4, #0]
 8009e30:	9b03      	ldr	r3, [sp, #12]
 8009e32:	f012 0f02 	tst.w	r2, #2
 8009e36:	ec57 6b10 	vmov	r6, r7, d0
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	d021      	beq.n	8009e82 <_scanf_float+0x3d6>
 8009e3e:	9903      	ldr	r1, [sp, #12]
 8009e40:	1d1a      	adds	r2, r3, #4
 8009e42:	600a      	str	r2, [r1, #0]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	e9c3 6700 	strd	r6, r7, [r3]
 8009e4a:	68e3      	ldr	r3, [r4, #12]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	60e3      	str	r3, [r4, #12]
 8009e50:	e66d      	b.n	8009b2e <_scanf_float+0x82>
 8009e52:	9b04      	ldr	r3, [sp, #16]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d0e5      	beq.n	8009e24 <_scanf_float+0x378>
 8009e58:	9905      	ldr	r1, [sp, #20]
 8009e5a:	230a      	movs	r3, #10
 8009e5c:	462a      	mov	r2, r5
 8009e5e:	3101      	adds	r1, #1
 8009e60:	4640      	mov	r0, r8
 8009e62:	f000 ff4f 	bl	800ad04 <_strtol_r>
 8009e66:	9b04      	ldr	r3, [sp, #16]
 8009e68:	9e05      	ldr	r6, [sp, #20]
 8009e6a:	1ac2      	subs	r2, r0, r3
 8009e6c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009e70:	429e      	cmp	r6, r3
 8009e72:	bf28      	it	cs
 8009e74:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009e78:	4912      	ldr	r1, [pc, #72]	; (8009ec4 <_scanf_float+0x418>)
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	f000 f878 	bl	8009f70 <siprintf>
 8009e80:	e7d0      	b.n	8009e24 <_scanf_float+0x378>
 8009e82:	9903      	ldr	r1, [sp, #12]
 8009e84:	f012 0f04 	tst.w	r2, #4
 8009e88:	f103 0204 	add.w	r2, r3, #4
 8009e8c:	600a      	str	r2, [r1, #0]
 8009e8e:	d1d9      	bne.n	8009e44 <_scanf_float+0x398>
 8009e90:	f8d3 8000 	ldr.w	r8, [r3]
 8009e94:	ee10 2a10 	vmov	r2, s0
 8009e98:	ee10 0a10 	vmov	r0, s0
 8009e9c:	463b      	mov	r3, r7
 8009e9e:	4639      	mov	r1, r7
 8009ea0:	f7f6 fe44 	bl	8000b2c <__aeabi_dcmpun>
 8009ea4:	b128      	cbz	r0, 8009eb2 <_scanf_float+0x406>
 8009ea6:	4808      	ldr	r0, [pc, #32]	; (8009ec8 <_scanf_float+0x41c>)
 8009ea8:	f000 f818 	bl	8009edc <nanf>
 8009eac:	ed88 0a00 	vstr	s0, [r8]
 8009eb0:	e7cb      	b.n	8009e4a <_scanf_float+0x39e>
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	4639      	mov	r1, r7
 8009eb6:	f7f6 fe97 	bl	8000be8 <__aeabi_d2f>
 8009eba:	f8c8 0000 	str.w	r0, [r8]
 8009ebe:	e7c4      	b.n	8009e4a <_scanf_float+0x39e>
 8009ec0:	2500      	movs	r5, #0
 8009ec2:	e634      	b.n	8009b2e <_scanf_float+0x82>
 8009ec4:	0800dea4 	.word	0x0800dea4
 8009ec8:	0800e2b0 	.word	0x0800e2b0

08009ecc <realloc>:
 8009ecc:	4b02      	ldr	r3, [pc, #8]	; (8009ed8 <realloc+0xc>)
 8009ece:	460a      	mov	r2, r1
 8009ed0:	4601      	mov	r1, r0
 8009ed2:	6818      	ldr	r0, [r3, #0]
 8009ed4:	f002 bed8 	b.w	800cc88 <_realloc_r>
 8009ed8:	20000024 	.word	0x20000024

08009edc <nanf>:
 8009edc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009ee4 <nanf+0x8>
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	7fc00000 	.word	0x7fc00000

08009ee8 <_raise_r>:
 8009ee8:	291f      	cmp	r1, #31
 8009eea:	b538      	push	{r3, r4, r5, lr}
 8009eec:	4604      	mov	r4, r0
 8009eee:	460d      	mov	r5, r1
 8009ef0:	d904      	bls.n	8009efc <_raise_r+0x14>
 8009ef2:	2316      	movs	r3, #22
 8009ef4:	6003      	str	r3, [r0, #0]
 8009ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009efa:	bd38      	pop	{r3, r4, r5, pc}
 8009efc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009efe:	b112      	cbz	r2, 8009f06 <_raise_r+0x1e>
 8009f00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f04:	b94b      	cbnz	r3, 8009f1a <_raise_r+0x32>
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 f830 	bl	8009f6c <_getpid_r>
 8009f0c:	462a      	mov	r2, r5
 8009f0e:	4601      	mov	r1, r0
 8009f10:	4620      	mov	r0, r4
 8009f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f16:	f000 b817 	b.w	8009f48 <_kill_r>
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d00a      	beq.n	8009f34 <_raise_r+0x4c>
 8009f1e:	1c59      	adds	r1, r3, #1
 8009f20:	d103      	bne.n	8009f2a <_raise_r+0x42>
 8009f22:	2316      	movs	r3, #22
 8009f24:	6003      	str	r3, [r0, #0]
 8009f26:	2001      	movs	r0, #1
 8009f28:	e7e7      	b.n	8009efa <_raise_r+0x12>
 8009f2a:	2400      	movs	r4, #0
 8009f2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f30:	4628      	mov	r0, r5
 8009f32:	4798      	blx	r3
 8009f34:	2000      	movs	r0, #0
 8009f36:	e7e0      	b.n	8009efa <_raise_r+0x12>

08009f38 <raise>:
 8009f38:	4b02      	ldr	r3, [pc, #8]	; (8009f44 <raise+0xc>)
 8009f3a:	4601      	mov	r1, r0
 8009f3c:	6818      	ldr	r0, [r3, #0]
 8009f3e:	f7ff bfd3 	b.w	8009ee8 <_raise_r>
 8009f42:	bf00      	nop
 8009f44:	20000024 	.word	0x20000024

08009f48 <_kill_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	4d07      	ldr	r5, [pc, #28]	; (8009f68 <_kill_r+0x20>)
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	4604      	mov	r4, r0
 8009f50:	4608      	mov	r0, r1
 8009f52:	4611      	mov	r1, r2
 8009f54:	602b      	str	r3, [r5, #0]
 8009f56:	f7fb f8c3 	bl	80050e0 <_kill>
 8009f5a:	1c43      	adds	r3, r0, #1
 8009f5c:	d102      	bne.n	8009f64 <_kill_r+0x1c>
 8009f5e:	682b      	ldr	r3, [r5, #0]
 8009f60:	b103      	cbz	r3, 8009f64 <_kill_r+0x1c>
 8009f62:	6023      	str	r3, [r4, #0]
 8009f64:	bd38      	pop	{r3, r4, r5, pc}
 8009f66:	bf00      	nop
 8009f68:	20001b5c 	.word	0x20001b5c

08009f6c <_getpid_r>:
 8009f6c:	f7fb b8b0 	b.w	80050d0 <_getpid>

08009f70 <siprintf>:
 8009f70:	b40e      	push	{r1, r2, r3}
 8009f72:	b500      	push	{lr}
 8009f74:	b09c      	sub	sp, #112	; 0x70
 8009f76:	ab1d      	add	r3, sp, #116	; 0x74
 8009f78:	9002      	str	r0, [sp, #8]
 8009f7a:	9006      	str	r0, [sp, #24]
 8009f7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f80:	4809      	ldr	r0, [pc, #36]	; (8009fa8 <siprintf+0x38>)
 8009f82:	9107      	str	r1, [sp, #28]
 8009f84:	9104      	str	r1, [sp, #16]
 8009f86:	4909      	ldr	r1, [pc, #36]	; (8009fac <siprintf+0x3c>)
 8009f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f8c:	9105      	str	r1, [sp, #20]
 8009f8e:	6800      	ldr	r0, [r0, #0]
 8009f90:	9301      	str	r3, [sp, #4]
 8009f92:	a902      	add	r1, sp, #8
 8009f94:	f002 ff02 	bl	800cd9c <_svfiprintf_r>
 8009f98:	9b02      	ldr	r3, [sp, #8]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	701a      	strb	r2, [r3, #0]
 8009f9e:	b01c      	add	sp, #112	; 0x70
 8009fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fa4:	b003      	add	sp, #12
 8009fa6:	4770      	bx	lr
 8009fa8:	20000024 	.word	0x20000024
 8009fac:	ffff0208 	.word	0xffff0208

08009fb0 <sulp>:
 8009fb0:	b570      	push	{r4, r5, r6, lr}
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	460d      	mov	r5, r1
 8009fb6:	ec45 4b10 	vmov	d0, r4, r5
 8009fba:	4616      	mov	r6, r2
 8009fbc:	f002 fc1e 	bl	800c7fc <__ulp>
 8009fc0:	ec51 0b10 	vmov	r0, r1, d0
 8009fc4:	b17e      	cbz	r6, 8009fe6 <sulp+0x36>
 8009fc6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009fca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	dd09      	ble.n	8009fe6 <sulp+0x36>
 8009fd2:	051b      	lsls	r3, r3, #20
 8009fd4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009fd8:	2400      	movs	r4, #0
 8009fda:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009fde:	4622      	mov	r2, r4
 8009fe0:	462b      	mov	r3, r5
 8009fe2:	f7f6 fb09 	bl	80005f8 <__aeabi_dmul>
 8009fe6:	bd70      	pop	{r4, r5, r6, pc}

08009fe8 <_strtod_l>:
 8009fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	ed2d 8b02 	vpush	{d8}
 8009ff0:	b09d      	sub	sp, #116	; 0x74
 8009ff2:	461f      	mov	r7, r3
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	9318      	str	r3, [sp, #96]	; 0x60
 8009ff8:	4ba2      	ldr	r3, [pc, #648]	; (800a284 <_strtod_l+0x29c>)
 8009ffa:	9213      	str	r2, [sp, #76]	; 0x4c
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	9305      	str	r3, [sp, #20]
 800a000:	4604      	mov	r4, r0
 800a002:	4618      	mov	r0, r3
 800a004:	4688      	mov	r8, r1
 800a006:	f7f6 f8e3 	bl	80001d0 <strlen>
 800a00a:	f04f 0a00 	mov.w	sl, #0
 800a00e:	4605      	mov	r5, r0
 800a010:	f04f 0b00 	mov.w	fp, #0
 800a014:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a018:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a01a:	781a      	ldrb	r2, [r3, #0]
 800a01c:	2a2b      	cmp	r2, #43	; 0x2b
 800a01e:	d04e      	beq.n	800a0be <_strtod_l+0xd6>
 800a020:	d83b      	bhi.n	800a09a <_strtod_l+0xb2>
 800a022:	2a0d      	cmp	r2, #13
 800a024:	d834      	bhi.n	800a090 <_strtod_l+0xa8>
 800a026:	2a08      	cmp	r2, #8
 800a028:	d834      	bhi.n	800a094 <_strtod_l+0xac>
 800a02a:	2a00      	cmp	r2, #0
 800a02c:	d03e      	beq.n	800a0ac <_strtod_l+0xc4>
 800a02e:	2300      	movs	r3, #0
 800a030:	930a      	str	r3, [sp, #40]	; 0x28
 800a032:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a034:	7833      	ldrb	r3, [r6, #0]
 800a036:	2b30      	cmp	r3, #48	; 0x30
 800a038:	f040 80b0 	bne.w	800a19c <_strtod_l+0x1b4>
 800a03c:	7873      	ldrb	r3, [r6, #1]
 800a03e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a042:	2b58      	cmp	r3, #88	; 0x58
 800a044:	d168      	bne.n	800a118 <_strtod_l+0x130>
 800a046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a048:	9301      	str	r3, [sp, #4]
 800a04a:	ab18      	add	r3, sp, #96	; 0x60
 800a04c:	9702      	str	r7, [sp, #8]
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	4a8d      	ldr	r2, [pc, #564]	; (800a288 <_strtod_l+0x2a0>)
 800a052:	ab19      	add	r3, sp, #100	; 0x64
 800a054:	a917      	add	r1, sp, #92	; 0x5c
 800a056:	4620      	mov	r0, r4
 800a058:	f001 fd38 	bl	800bacc <__gethex>
 800a05c:	f010 0707 	ands.w	r7, r0, #7
 800a060:	4605      	mov	r5, r0
 800a062:	d005      	beq.n	800a070 <_strtod_l+0x88>
 800a064:	2f06      	cmp	r7, #6
 800a066:	d12c      	bne.n	800a0c2 <_strtod_l+0xda>
 800a068:	3601      	adds	r6, #1
 800a06a:	2300      	movs	r3, #0
 800a06c:	9617      	str	r6, [sp, #92]	; 0x5c
 800a06e:	930a      	str	r3, [sp, #40]	; 0x28
 800a070:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a072:	2b00      	cmp	r3, #0
 800a074:	f040 8590 	bne.w	800ab98 <_strtod_l+0xbb0>
 800a078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a07a:	b1eb      	cbz	r3, 800a0b8 <_strtod_l+0xd0>
 800a07c:	4652      	mov	r2, sl
 800a07e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a082:	ec43 2b10 	vmov	d0, r2, r3
 800a086:	b01d      	add	sp, #116	; 0x74
 800a088:	ecbd 8b02 	vpop	{d8}
 800a08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a090:	2a20      	cmp	r2, #32
 800a092:	d1cc      	bne.n	800a02e <_strtod_l+0x46>
 800a094:	3301      	adds	r3, #1
 800a096:	9317      	str	r3, [sp, #92]	; 0x5c
 800a098:	e7be      	b.n	800a018 <_strtod_l+0x30>
 800a09a:	2a2d      	cmp	r2, #45	; 0x2d
 800a09c:	d1c7      	bne.n	800a02e <_strtod_l+0x46>
 800a09e:	2201      	movs	r2, #1
 800a0a0:	920a      	str	r2, [sp, #40]	; 0x28
 800a0a2:	1c5a      	adds	r2, r3, #1
 800a0a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800a0a6:	785b      	ldrb	r3, [r3, #1]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d1c2      	bne.n	800a032 <_strtod_l+0x4a>
 800a0ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a0ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	f040 856e 	bne.w	800ab94 <_strtod_l+0xbac>
 800a0b8:	4652      	mov	r2, sl
 800a0ba:	465b      	mov	r3, fp
 800a0bc:	e7e1      	b.n	800a082 <_strtod_l+0x9a>
 800a0be:	2200      	movs	r2, #0
 800a0c0:	e7ee      	b.n	800a0a0 <_strtod_l+0xb8>
 800a0c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a0c4:	b13a      	cbz	r2, 800a0d6 <_strtod_l+0xee>
 800a0c6:	2135      	movs	r1, #53	; 0x35
 800a0c8:	a81a      	add	r0, sp, #104	; 0x68
 800a0ca:	f002 fca2 	bl	800ca12 <__copybits>
 800a0ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	f002 f861 	bl	800c198 <_Bfree>
 800a0d6:	3f01      	subs	r7, #1
 800a0d8:	2f04      	cmp	r7, #4
 800a0da:	d806      	bhi.n	800a0ea <_strtod_l+0x102>
 800a0dc:	e8df f007 	tbb	[pc, r7]
 800a0e0:	1714030a 	.word	0x1714030a
 800a0e4:	0a          	.byte	0x0a
 800a0e5:	00          	.byte	0x00
 800a0e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a0ea:	0728      	lsls	r0, r5, #28
 800a0ec:	d5c0      	bpl.n	800a070 <_strtod_l+0x88>
 800a0ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a0f2:	e7bd      	b.n	800a070 <_strtod_l+0x88>
 800a0f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a0f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a0fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a0fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a102:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a106:	e7f0      	b.n	800a0ea <_strtod_l+0x102>
 800a108:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a28c <_strtod_l+0x2a4>
 800a10c:	e7ed      	b.n	800a0ea <_strtod_l+0x102>
 800a10e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a112:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a116:	e7e8      	b.n	800a0ea <_strtod_l+0x102>
 800a118:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a11a:	1c5a      	adds	r2, r3, #1
 800a11c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a11e:	785b      	ldrb	r3, [r3, #1]
 800a120:	2b30      	cmp	r3, #48	; 0x30
 800a122:	d0f9      	beq.n	800a118 <_strtod_l+0x130>
 800a124:	2b00      	cmp	r3, #0
 800a126:	d0a3      	beq.n	800a070 <_strtod_l+0x88>
 800a128:	2301      	movs	r3, #1
 800a12a:	f04f 0900 	mov.w	r9, #0
 800a12e:	9304      	str	r3, [sp, #16]
 800a130:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a132:	9308      	str	r3, [sp, #32]
 800a134:	f8cd 901c 	str.w	r9, [sp, #28]
 800a138:	464f      	mov	r7, r9
 800a13a:	220a      	movs	r2, #10
 800a13c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a13e:	7806      	ldrb	r6, [r0, #0]
 800a140:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a144:	b2d9      	uxtb	r1, r3
 800a146:	2909      	cmp	r1, #9
 800a148:	d92a      	bls.n	800a1a0 <_strtod_l+0x1b8>
 800a14a:	9905      	ldr	r1, [sp, #20]
 800a14c:	462a      	mov	r2, r5
 800a14e:	f002 ff3f 	bl	800cfd0 <strncmp>
 800a152:	b398      	cbz	r0, 800a1bc <_strtod_l+0x1d4>
 800a154:	2000      	movs	r0, #0
 800a156:	4632      	mov	r2, r6
 800a158:	463d      	mov	r5, r7
 800a15a:	9005      	str	r0, [sp, #20]
 800a15c:	4603      	mov	r3, r0
 800a15e:	2a65      	cmp	r2, #101	; 0x65
 800a160:	d001      	beq.n	800a166 <_strtod_l+0x17e>
 800a162:	2a45      	cmp	r2, #69	; 0x45
 800a164:	d118      	bne.n	800a198 <_strtod_l+0x1b0>
 800a166:	b91d      	cbnz	r5, 800a170 <_strtod_l+0x188>
 800a168:	9a04      	ldr	r2, [sp, #16]
 800a16a:	4302      	orrs	r2, r0
 800a16c:	d09e      	beq.n	800a0ac <_strtod_l+0xc4>
 800a16e:	2500      	movs	r5, #0
 800a170:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a174:	f108 0201 	add.w	r2, r8, #1
 800a178:	9217      	str	r2, [sp, #92]	; 0x5c
 800a17a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a17e:	2a2b      	cmp	r2, #43	; 0x2b
 800a180:	d075      	beq.n	800a26e <_strtod_l+0x286>
 800a182:	2a2d      	cmp	r2, #45	; 0x2d
 800a184:	d07b      	beq.n	800a27e <_strtod_l+0x296>
 800a186:	f04f 0c00 	mov.w	ip, #0
 800a18a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a18e:	2909      	cmp	r1, #9
 800a190:	f240 8082 	bls.w	800a298 <_strtod_l+0x2b0>
 800a194:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a198:	2600      	movs	r6, #0
 800a19a:	e09d      	b.n	800a2d8 <_strtod_l+0x2f0>
 800a19c:	2300      	movs	r3, #0
 800a19e:	e7c4      	b.n	800a12a <_strtod_l+0x142>
 800a1a0:	2f08      	cmp	r7, #8
 800a1a2:	bfd8      	it	le
 800a1a4:	9907      	ldrle	r1, [sp, #28]
 800a1a6:	f100 0001 	add.w	r0, r0, #1
 800a1aa:	bfda      	itte	le
 800a1ac:	fb02 3301 	mlale	r3, r2, r1, r3
 800a1b0:	9307      	strle	r3, [sp, #28]
 800a1b2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a1b6:	3701      	adds	r7, #1
 800a1b8:	9017      	str	r0, [sp, #92]	; 0x5c
 800a1ba:	e7bf      	b.n	800a13c <_strtod_l+0x154>
 800a1bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1be:	195a      	adds	r2, r3, r5
 800a1c0:	9217      	str	r2, [sp, #92]	; 0x5c
 800a1c2:	5d5a      	ldrb	r2, [r3, r5]
 800a1c4:	2f00      	cmp	r7, #0
 800a1c6:	d037      	beq.n	800a238 <_strtod_l+0x250>
 800a1c8:	9005      	str	r0, [sp, #20]
 800a1ca:	463d      	mov	r5, r7
 800a1cc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a1d0:	2b09      	cmp	r3, #9
 800a1d2:	d912      	bls.n	800a1fa <_strtod_l+0x212>
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e7c2      	b.n	800a15e <_strtod_l+0x176>
 800a1d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1da:	1c5a      	adds	r2, r3, #1
 800a1dc:	9217      	str	r2, [sp, #92]	; 0x5c
 800a1de:	785a      	ldrb	r2, [r3, #1]
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	2a30      	cmp	r2, #48	; 0x30
 800a1e4:	d0f8      	beq.n	800a1d8 <_strtod_l+0x1f0>
 800a1e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a1ea:	2b08      	cmp	r3, #8
 800a1ec:	f200 84d9 	bhi.w	800aba2 <_strtod_l+0xbba>
 800a1f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1f2:	9005      	str	r0, [sp, #20]
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	9308      	str	r3, [sp, #32]
 800a1f8:	4605      	mov	r5, r0
 800a1fa:	3a30      	subs	r2, #48	; 0x30
 800a1fc:	f100 0301 	add.w	r3, r0, #1
 800a200:	d014      	beq.n	800a22c <_strtod_l+0x244>
 800a202:	9905      	ldr	r1, [sp, #20]
 800a204:	4419      	add	r1, r3
 800a206:	9105      	str	r1, [sp, #20]
 800a208:	462b      	mov	r3, r5
 800a20a:	eb00 0e05 	add.w	lr, r0, r5
 800a20e:	210a      	movs	r1, #10
 800a210:	4573      	cmp	r3, lr
 800a212:	d113      	bne.n	800a23c <_strtod_l+0x254>
 800a214:	182b      	adds	r3, r5, r0
 800a216:	2b08      	cmp	r3, #8
 800a218:	f105 0501 	add.w	r5, r5, #1
 800a21c:	4405      	add	r5, r0
 800a21e:	dc1c      	bgt.n	800a25a <_strtod_l+0x272>
 800a220:	9907      	ldr	r1, [sp, #28]
 800a222:	230a      	movs	r3, #10
 800a224:	fb03 2301 	mla	r3, r3, r1, r2
 800a228:	9307      	str	r3, [sp, #28]
 800a22a:	2300      	movs	r3, #0
 800a22c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a22e:	1c51      	adds	r1, r2, #1
 800a230:	9117      	str	r1, [sp, #92]	; 0x5c
 800a232:	7852      	ldrb	r2, [r2, #1]
 800a234:	4618      	mov	r0, r3
 800a236:	e7c9      	b.n	800a1cc <_strtod_l+0x1e4>
 800a238:	4638      	mov	r0, r7
 800a23a:	e7d2      	b.n	800a1e2 <_strtod_l+0x1fa>
 800a23c:	2b08      	cmp	r3, #8
 800a23e:	dc04      	bgt.n	800a24a <_strtod_l+0x262>
 800a240:	9e07      	ldr	r6, [sp, #28]
 800a242:	434e      	muls	r6, r1
 800a244:	9607      	str	r6, [sp, #28]
 800a246:	3301      	adds	r3, #1
 800a248:	e7e2      	b.n	800a210 <_strtod_l+0x228>
 800a24a:	f103 0c01 	add.w	ip, r3, #1
 800a24e:	f1bc 0f10 	cmp.w	ip, #16
 800a252:	bfd8      	it	le
 800a254:	fb01 f909 	mulle.w	r9, r1, r9
 800a258:	e7f5      	b.n	800a246 <_strtod_l+0x25e>
 800a25a:	2d10      	cmp	r5, #16
 800a25c:	bfdc      	itt	le
 800a25e:	230a      	movle	r3, #10
 800a260:	fb03 2909 	mlale	r9, r3, r9, r2
 800a264:	e7e1      	b.n	800a22a <_strtod_l+0x242>
 800a266:	2300      	movs	r3, #0
 800a268:	9305      	str	r3, [sp, #20]
 800a26a:	2301      	movs	r3, #1
 800a26c:	e77c      	b.n	800a168 <_strtod_l+0x180>
 800a26e:	f04f 0c00 	mov.w	ip, #0
 800a272:	f108 0202 	add.w	r2, r8, #2
 800a276:	9217      	str	r2, [sp, #92]	; 0x5c
 800a278:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a27c:	e785      	b.n	800a18a <_strtod_l+0x1a2>
 800a27e:	f04f 0c01 	mov.w	ip, #1
 800a282:	e7f6      	b.n	800a272 <_strtod_l+0x28a>
 800a284:	0800e0f8 	.word	0x0800e0f8
 800a288:	0800deac 	.word	0x0800deac
 800a28c:	7ff00000 	.word	0x7ff00000
 800a290:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a292:	1c51      	adds	r1, r2, #1
 800a294:	9117      	str	r1, [sp, #92]	; 0x5c
 800a296:	7852      	ldrb	r2, [r2, #1]
 800a298:	2a30      	cmp	r2, #48	; 0x30
 800a29a:	d0f9      	beq.n	800a290 <_strtod_l+0x2a8>
 800a29c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a2a0:	2908      	cmp	r1, #8
 800a2a2:	f63f af79 	bhi.w	800a198 <_strtod_l+0x1b0>
 800a2a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a2aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a2ac:	9206      	str	r2, [sp, #24]
 800a2ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a2b0:	1c51      	adds	r1, r2, #1
 800a2b2:	9117      	str	r1, [sp, #92]	; 0x5c
 800a2b4:	7852      	ldrb	r2, [r2, #1]
 800a2b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a2ba:	2e09      	cmp	r6, #9
 800a2bc:	d937      	bls.n	800a32e <_strtod_l+0x346>
 800a2be:	9e06      	ldr	r6, [sp, #24]
 800a2c0:	1b89      	subs	r1, r1, r6
 800a2c2:	2908      	cmp	r1, #8
 800a2c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a2c8:	dc02      	bgt.n	800a2d0 <_strtod_l+0x2e8>
 800a2ca:	4576      	cmp	r6, lr
 800a2cc:	bfa8      	it	ge
 800a2ce:	4676      	movge	r6, lr
 800a2d0:	f1bc 0f00 	cmp.w	ip, #0
 800a2d4:	d000      	beq.n	800a2d8 <_strtod_l+0x2f0>
 800a2d6:	4276      	negs	r6, r6
 800a2d8:	2d00      	cmp	r5, #0
 800a2da:	d14d      	bne.n	800a378 <_strtod_l+0x390>
 800a2dc:	9904      	ldr	r1, [sp, #16]
 800a2de:	4301      	orrs	r1, r0
 800a2e0:	f47f aec6 	bne.w	800a070 <_strtod_l+0x88>
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f47f aee1 	bne.w	800a0ac <_strtod_l+0xc4>
 800a2ea:	2a69      	cmp	r2, #105	; 0x69
 800a2ec:	d027      	beq.n	800a33e <_strtod_l+0x356>
 800a2ee:	dc24      	bgt.n	800a33a <_strtod_l+0x352>
 800a2f0:	2a49      	cmp	r2, #73	; 0x49
 800a2f2:	d024      	beq.n	800a33e <_strtod_l+0x356>
 800a2f4:	2a4e      	cmp	r2, #78	; 0x4e
 800a2f6:	f47f aed9 	bne.w	800a0ac <_strtod_l+0xc4>
 800a2fa:	499f      	ldr	r1, [pc, #636]	; (800a578 <_strtod_l+0x590>)
 800a2fc:	a817      	add	r0, sp, #92	; 0x5c
 800a2fe:	f001 fe3d 	bl	800bf7c <__match>
 800a302:	2800      	cmp	r0, #0
 800a304:	f43f aed2 	beq.w	800a0ac <_strtod_l+0xc4>
 800a308:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	2b28      	cmp	r3, #40	; 0x28
 800a30e:	d12d      	bne.n	800a36c <_strtod_l+0x384>
 800a310:	499a      	ldr	r1, [pc, #616]	; (800a57c <_strtod_l+0x594>)
 800a312:	aa1a      	add	r2, sp, #104	; 0x68
 800a314:	a817      	add	r0, sp, #92	; 0x5c
 800a316:	f001 fe45 	bl	800bfa4 <__hexnan>
 800a31a:	2805      	cmp	r0, #5
 800a31c:	d126      	bne.n	800a36c <_strtod_l+0x384>
 800a31e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a320:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a324:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a328:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a32c:	e6a0      	b.n	800a070 <_strtod_l+0x88>
 800a32e:	210a      	movs	r1, #10
 800a330:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a334:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a338:	e7b9      	b.n	800a2ae <_strtod_l+0x2c6>
 800a33a:	2a6e      	cmp	r2, #110	; 0x6e
 800a33c:	e7db      	b.n	800a2f6 <_strtod_l+0x30e>
 800a33e:	4990      	ldr	r1, [pc, #576]	; (800a580 <_strtod_l+0x598>)
 800a340:	a817      	add	r0, sp, #92	; 0x5c
 800a342:	f001 fe1b 	bl	800bf7c <__match>
 800a346:	2800      	cmp	r0, #0
 800a348:	f43f aeb0 	beq.w	800a0ac <_strtod_l+0xc4>
 800a34c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a34e:	498d      	ldr	r1, [pc, #564]	; (800a584 <_strtod_l+0x59c>)
 800a350:	3b01      	subs	r3, #1
 800a352:	a817      	add	r0, sp, #92	; 0x5c
 800a354:	9317      	str	r3, [sp, #92]	; 0x5c
 800a356:	f001 fe11 	bl	800bf7c <__match>
 800a35a:	b910      	cbnz	r0, 800a362 <_strtod_l+0x37a>
 800a35c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a35e:	3301      	adds	r3, #1
 800a360:	9317      	str	r3, [sp, #92]	; 0x5c
 800a362:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a594 <_strtod_l+0x5ac>
 800a366:	f04f 0a00 	mov.w	sl, #0
 800a36a:	e681      	b.n	800a070 <_strtod_l+0x88>
 800a36c:	4886      	ldr	r0, [pc, #536]	; (800a588 <_strtod_l+0x5a0>)
 800a36e:	f002 fe17 	bl	800cfa0 <nan>
 800a372:	ec5b ab10 	vmov	sl, fp, d0
 800a376:	e67b      	b.n	800a070 <_strtod_l+0x88>
 800a378:	9b05      	ldr	r3, [sp, #20]
 800a37a:	9807      	ldr	r0, [sp, #28]
 800a37c:	1af3      	subs	r3, r6, r3
 800a37e:	2f00      	cmp	r7, #0
 800a380:	bf08      	it	eq
 800a382:	462f      	moveq	r7, r5
 800a384:	2d10      	cmp	r5, #16
 800a386:	9306      	str	r3, [sp, #24]
 800a388:	46a8      	mov	r8, r5
 800a38a:	bfa8      	it	ge
 800a38c:	f04f 0810 	movge.w	r8, #16
 800a390:	f7f6 f8b8 	bl	8000504 <__aeabi_ui2d>
 800a394:	2d09      	cmp	r5, #9
 800a396:	4682      	mov	sl, r0
 800a398:	468b      	mov	fp, r1
 800a39a:	dd13      	ble.n	800a3c4 <_strtod_l+0x3dc>
 800a39c:	4b7b      	ldr	r3, [pc, #492]	; (800a58c <_strtod_l+0x5a4>)
 800a39e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a3a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a3a6:	f7f6 f927 	bl	80005f8 <__aeabi_dmul>
 800a3aa:	4682      	mov	sl, r0
 800a3ac:	4648      	mov	r0, r9
 800a3ae:	468b      	mov	fp, r1
 800a3b0:	f7f6 f8a8 	bl	8000504 <__aeabi_ui2d>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	4650      	mov	r0, sl
 800a3ba:	4659      	mov	r1, fp
 800a3bc:	f7f5 ff66 	bl	800028c <__adddf3>
 800a3c0:	4682      	mov	sl, r0
 800a3c2:	468b      	mov	fp, r1
 800a3c4:	2d0f      	cmp	r5, #15
 800a3c6:	dc38      	bgt.n	800a43a <_strtod_l+0x452>
 800a3c8:	9b06      	ldr	r3, [sp, #24]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f43f ae50 	beq.w	800a070 <_strtod_l+0x88>
 800a3d0:	dd24      	ble.n	800a41c <_strtod_l+0x434>
 800a3d2:	2b16      	cmp	r3, #22
 800a3d4:	dc0b      	bgt.n	800a3ee <_strtod_l+0x406>
 800a3d6:	496d      	ldr	r1, [pc, #436]	; (800a58c <_strtod_l+0x5a4>)
 800a3d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a3dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3e0:	4652      	mov	r2, sl
 800a3e2:	465b      	mov	r3, fp
 800a3e4:	f7f6 f908 	bl	80005f8 <__aeabi_dmul>
 800a3e8:	4682      	mov	sl, r0
 800a3ea:	468b      	mov	fp, r1
 800a3ec:	e640      	b.n	800a070 <_strtod_l+0x88>
 800a3ee:	9a06      	ldr	r2, [sp, #24]
 800a3f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	db20      	blt.n	800a43a <_strtod_l+0x452>
 800a3f8:	4c64      	ldr	r4, [pc, #400]	; (800a58c <_strtod_l+0x5a4>)
 800a3fa:	f1c5 050f 	rsb	r5, r5, #15
 800a3fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a402:	4652      	mov	r2, sl
 800a404:	465b      	mov	r3, fp
 800a406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a40a:	f7f6 f8f5 	bl	80005f8 <__aeabi_dmul>
 800a40e:	9b06      	ldr	r3, [sp, #24]
 800a410:	1b5d      	subs	r5, r3, r5
 800a412:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a416:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a41a:	e7e3      	b.n	800a3e4 <_strtod_l+0x3fc>
 800a41c:	9b06      	ldr	r3, [sp, #24]
 800a41e:	3316      	adds	r3, #22
 800a420:	db0b      	blt.n	800a43a <_strtod_l+0x452>
 800a422:	9b05      	ldr	r3, [sp, #20]
 800a424:	1b9e      	subs	r6, r3, r6
 800a426:	4b59      	ldr	r3, [pc, #356]	; (800a58c <_strtod_l+0x5a4>)
 800a428:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a42c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a430:	4650      	mov	r0, sl
 800a432:	4659      	mov	r1, fp
 800a434:	f7f6 fa0a 	bl	800084c <__aeabi_ddiv>
 800a438:	e7d6      	b.n	800a3e8 <_strtod_l+0x400>
 800a43a:	9b06      	ldr	r3, [sp, #24]
 800a43c:	eba5 0808 	sub.w	r8, r5, r8
 800a440:	4498      	add	r8, r3
 800a442:	f1b8 0f00 	cmp.w	r8, #0
 800a446:	dd74      	ble.n	800a532 <_strtod_l+0x54a>
 800a448:	f018 030f 	ands.w	r3, r8, #15
 800a44c:	d00a      	beq.n	800a464 <_strtod_l+0x47c>
 800a44e:	494f      	ldr	r1, [pc, #316]	; (800a58c <_strtod_l+0x5a4>)
 800a450:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a454:	4652      	mov	r2, sl
 800a456:	465b      	mov	r3, fp
 800a458:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a45c:	f7f6 f8cc 	bl	80005f8 <__aeabi_dmul>
 800a460:	4682      	mov	sl, r0
 800a462:	468b      	mov	fp, r1
 800a464:	f038 080f 	bics.w	r8, r8, #15
 800a468:	d04f      	beq.n	800a50a <_strtod_l+0x522>
 800a46a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a46e:	dd22      	ble.n	800a4b6 <_strtod_l+0x4ce>
 800a470:	2500      	movs	r5, #0
 800a472:	462e      	mov	r6, r5
 800a474:	9507      	str	r5, [sp, #28]
 800a476:	9505      	str	r5, [sp, #20]
 800a478:	2322      	movs	r3, #34	; 0x22
 800a47a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a594 <_strtod_l+0x5ac>
 800a47e:	6023      	str	r3, [r4, #0]
 800a480:	f04f 0a00 	mov.w	sl, #0
 800a484:	9b07      	ldr	r3, [sp, #28]
 800a486:	2b00      	cmp	r3, #0
 800a488:	f43f adf2 	beq.w	800a070 <_strtod_l+0x88>
 800a48c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a48e:	4620      	mov	r0, r4
 800a490:	f001 fe82 	bl	800c198 <_Bfree>
 800a494:	9905      	ldr	r1, [sp, #20]
 800a496:	4620      	mov	r0, r4
 800a498:	f001 fe7e 	bl	800c198 <_Bfree>
 800a49c:	4631      	mov	r1, r6
 800a49e:	4620      	mov	r0, r4
 800a4a0:	f001 fe7a 	bl	800c198 <_Bfree>
 800a4a4:	9907      	ldr	r1, [sp, #28]
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f001 fe76 	bl	800c198 <_Bfree>
 800a4ac:	4629      	mov	r1, r5
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f001 fe72 	bl	800c198 <_Bfree>
 800a4b4:	e5dc      	b.n	800a070 <_strtod_l+0x88>
 800a4b6:	4b36      	ldr	r3, [pc, #216]	; (800a590 <_strtod_l+0x5a8>)
 800a4b8:	9304      	str	r3, [sp, #16]
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a4c0:	4650      	mov	r0, sl
 800a4c2:	4659      	mov	r1, fp
 800a4c4:	4699      	mov	r9, r3
 800a4c6:	f1b8 0f01 	cmp.w	r8, #1
 800a4ca:	dc21      	bgt.n	800a510 <_strtod_l+0x528>
 800a4cc:	b10b      	cbz	r3, 800a4d2 <_strtod_l+0x4ea>
 800a4ce:	4682      	mov	sl, r0
 800a4d0:	468b      	mov	fp, r1
 800a4d2:	4b2f      	ldr	r3, [pc, #188]	; (800a590 <_strtod_l+0x5a8>)
 800a4d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a4d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a4dc:	4652      	mov	r2, sl
 800a4de:	465b      	mov	r3, fp
 800a4e0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a4e4:	f7f6 f888 	bl	80005f8 <__aeabi_dmul>
 800a4e8:	4b2a      	ldr	r3, [pc, #168]	; (800a594 <_strtod_l+0x5ac>)
 800a4ea:	460a      	mov	r2, r1
 800a4ec:	400b      	ands	r3, r1
 800a4ee:	492a      	ldr	r1, [pc, #168]	; (800a598 <_strtod_l+0x5b0>)
 800a4f0:	428b      	cmp	r3, r1
 800a4f2:	4682      	mov	sl, r0
 800a4f4:	d8bc      	bhi.n	800a470 <_strtod_l+0x488>
 800a4f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a4fa:	428b      	cmp	r3, r1
 800a4fc:	bf86      	itte	hi
 800a4fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a59c <_strtod_l+0x5b4>
 800a502:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800a506:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a50a:	2300      	movs	r3, #0
 800a50c:	9304      	str	r3, [sp, #16]
 800a50e:	e084      	b.n	800a61a <_strtod_l+0x632>
 800a510:	f018 0f01 	tst.w	r8, #1
 800a514:	d005      	beq.n	800a522 <_strtod_l+0x53a>
 800a516:	9b04      	ldr	r3, [sp, #16]
 800a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51c:	f7f6 f86c 	bl	80005f8 <__aeabi_dmul>
 800a520:	2301      	movs	r3, #1
 800a522:	9a04      	ldr	r2, [sp, #16]
 800a524:	3208      	adds	r2, #8
 800a526:	f109 0901 	add.w	r9, r9, #1
 800a52a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a52e:	9204      	str	r2, [sp, #16]
 800a530:	e7c9      	b.n	800a4c6 <_strtod_l+0x4de>
 800a532:	d0ea      	beq.n	800a50a <_strtod_l+0x522>
 800a534:	f1c8 0800 	rsb	r8, r8, #0
 800a538:	f018 020f 	ands.w	r2, r8, #15
 800a53c:	d00a      	beq.n	800a554 <_strtod_l+0x56c>
 800a53e:	4b13      	ldr	r3, [pc, #76]	; (800a58c <_strtod_l+0x5a4>)
 800a540:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a544:	4650      	mov	r0, sl
 800a546:	4659      	mov	r1, fp
 800a548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54c:	f7f6 f97e 	bl	800084c <__aeabi_ddiv>
 800a550:	4682      	mov	sl, r0
 800a552:	468b      	mov	fp, r1
 800a554:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a558:	d0d7      	beq.n	800a50a <_strtod_l+0x522>
 800a55a:	f1b8 0f1f 	cmp.w	r8, #31
 800a55e:	dd1f      	ble.n	800a5a0 <_strtod_l+0x5b8>
 800a560:	2500      	movs	r5, #0
 800a562:	462e      	mov	r6, r5
 800a564:	9507      	str	r5, [sp, #28]
 800a566:	9505      	str	r5, [sp, #20]
 800a568:	2322      	movs	r3, #34	; 0x22
 800a56a:	f04f 0a00 	mov.w	sl, #0
 800a56e:	f04f 0b00 	mov.w	fp, #0
 800a572:	6023      	str	r3, [r4, #0]
 800a574:	e786      	b.n	800a484 <_strtod_l+0x49c>
 800a576:	bf00      	nop
 800a578:	0800de7d 	.word	0x0800de7d
 800a57c:	0800dec0 	.word	0x0800dec0
 800a580:	0800de75 	.word	0x0800de75
 800a584:	0800e004 	.word	0x0800e004
 800a588:	0800e2b0 	.word	0x0800e2b0
 800a58c:	0800e190 	.word	0x0800e190
 800a590:	0800e168 	.word	0x0800e168
 800a594:	7ff00000 	.word	0x7ff00000
 800a598:	7ca00000 	.word	0x7ca00000
 800a59c:	7fefffff 	.word	0x7fefffff
 800a5a0:	f018 0310 	ands.w	r3, r8, #16
 800a5a4:	bf18      	it	ne
 800a5a6:	236a      	movne	r3, #106	; 0x6a
 800a5a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a958 <_strtod_l+0x970>
 800a5ac:	9304      	str	r3, [sp, #16]
 800a5ae:	4650      	mov	r0, sl
 800a5b0:	4659      	mov	r1, fp
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	f018 0f01 	tst.w	r8, #1
 800a5b8:	d004      	beq.n	800a5c4 <_strtod_l+0x5dc>
 800a5ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a5be:	f7f6 f81b 	bl	80005f8 <__aeabi_dmul>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a5c8:	f109 0908 	add.w	r9, r9, #8
 800a5cc:	d1f2      	bne.n	800a5b4 <_strtod_l+0x5cc>
 800a5ce:	b10b      	cbz	r3, 800a5d4 <_strtod_l+0x5ec>
 800a5d0:	4682      	mov	sl, r0
 800a5d2:	468b      	mov	fp, r1
 800a5d4:	9b04      	ldr	r3, [sp, #16]
 800a5d6:	b1c3      	cbz	r3, 800a60a <_strtod_l+0x622>
 800a5d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a5dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	4659      	mov	r1, fp
 800a5e4:	dd11      	ble.n	800a60a <_strtod_l+0x622>
 800a5e6:	2b1f      	cmp	r3, #31
 800a5e8:	f340 8124 	ble.w	800a834 <_strtod_l+0x84c>
 800a5ec:	2b34      	cmp	r3, #52	; 0x34
 800a5ee:	bfde      	ittt	le
 800a5f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a5f4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800a5f8:	fa03 f202 	lslle.w	r2, r3, r2
 800a5fc:	f04f 0a00 	mov.w	sl, #0
 800a600:	bfcc      	ite	gt
 800a602:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a606:	ea02 0b01 	andle.w	fp, r2, r1
 800a60a:	2200      	movs	r2, #0
 800a60c:	2300      	movs	r3, #0
 800a60e:	4650      	mov	r0, sl
 800a610:	4659      	mov	r1, fp
 800a612:	f7f6 fa59 	bl	8000ac8 <__aeabi_dcmpeq>
 800a616:	2800      	cmp	r0, #0
 800a618:	d1a2      	bne.n	800a560 <_strtod_l+0x578>
 800a61a:	9b07      	ldr	r3, [sp, #28]
 800a61c:	9300      	str	r3, [sp, #0]
 800a61e:	9908      	ldr	r1, [sp, #32]
 800a620:	462b      	mov	r3, r5
 800a622:	463a      	mov	r2, r7
 800a624:	4620      	mov	r0, r4
 800a626:	f001 fe1f 	bl	800c268 <__s2b>
 800a62a:	9007      	str	r0, [sp, #28]
 800a62c:	2800      	cmp	r0, #0
 800a62e:	f43f af1f 	beq.w	800a470 <_strtod_l+0x488>
 800a632:	9b05      	ldr	r3, [sp, #20]
 800a634:	1b9e      	subs	r6, r3, r6
 800a636:	9b06      	ldr	r3, [sp, #24]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	bfb4      	ite	lt
 800a63c:	4633      	movlt	r3, r6
 800a63e:	2300      	movge	r3, #0
 800a640:	930c      	str	r3, [sp, #48]	; 0x30
 800a642:	9b06      	ldr	r3, [sp, #24]
 800a644:	2500      	movs	r5, #0
 800a646:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a64a:	9312      	str	r3, [sp, #72]	; 0x48
 800a64c:	462e      	mov	r6, r5
 800a64e:	9b07      	ldr	r3, [sp, #28]
 800a650:	4620      	mov	r0, r4
 800a652:	6859      	ldr	r1, [r3, #4]
 800a654:	f001 fd60 	bl	800c118 <_Balloc>
 800a658:	9005      	str	r0, [sp, #20]
 800a65a:	2800      	cmp	r0, #0
 800a65c:	f43f af0c 	beq.w	800a478 <_strtod_l+0x490>
 800a660:	9b07      	ldr	r3, [sp, #28]
 800a662:	691a      	ldr	r2, [r3, #16]
 800a664:	3202      	adds	r2, #2
 800a666:	f103 010c 	add.w	r1, r3, #12
 800a66a:	0092      	lsls	r2, r2, #2
 800a66c:	300c      	adds	r0, #12
 800a66e:	f7fe fd9d 	bl	80091ac <memcpy>
 800a672:	ec4b ab10 	vmov	d0, sl, fp
 800a676:	aa1a      	add	r2, sp, #104	; 0x68
 800a678:	a919      	add	r1, sp, #100	; 0x64
 800a67a:	4620      	mov	r0, r4
 800a67c:	f002 f93a 	bl	800c8f4 <__d2b>
 800a680:	ec4b ab18 	vmov	d8, sl, fp
 800a684:	9018      	str	r0, [sp, #96]	; 0x60
 800a686:	2800      	cmp	r0, #0
 800a688:	f43f aef6 	beq.w	800a478 <_strtod_l+0x490>
 800a68c:	2101      	movs	r1, #1
 800a68e:	4620      	mov	r0, r4
 800a690:	f001 fe84 	bl	800c39c <__i2b>
 800a694:	4606      	mov	r6, r0
 800a696:	2800      	cmp	r0, #0
 800a698:	f43f aeee 	beq.w	800a478 <_strtod_l+0x490>
 800a69c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a69e:	9904      	ldr	r1, [sp, #16]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	bfab      	itete	ge
 800a6a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a6a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a6a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a6aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a6ae:	bfac      	ite	ge
 800a6b0:	eb03 0902 	addge.w	r9, r3, r2
 800a6b4:	1ad7      	sublt	r7, r2, r3
 800a6b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a6b8:	eba3 0801 	sub.w	r8, r3, r1
 800a6bc:	4490      	add	r8, r2
 800a6be:	4ba1      	ldr	r3, [pc, #644]	; (800a944 <_strtod_l+0x95c>)
 800a6c0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a6c4:	4598      	cmp	r8, r3
 800a6c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a6ca:	f280 80c7 	bge.w	800a85c <_strtod_l+0x874>
 800a6ce:	eba3 0308 	sub.w	r3, r3, r8
 800a6d2:	2b1f      	cmp	r3, #31
 800a6d4:	eba2 0203 	sub.w	r2, r2, r3
 800a6d8:	f04f 0101 	mov.w	r1, #1
 800a6dc:	f300 80b1 	bgt.w	800a842 <_strtod_l+0x85a>
 800a6e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a6e4:	930d      	str	r3, [sp, #52]	; 0x34
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	9308      	str	r3, [sp, #32]
 800a6ea:	eb09 0802 	add.w	r8, r9, r2
 800a6ee:	9b04      	ldr	r3, [sp, #16]
 800a6f0:	45c1      	cmp	r9, r8
 800a6f2:	4417      	add	r7, r2
 800a6f4:	441f      	add	r7, r3
 800a6f6:	464b      	mov	r3, r9
 800a6f8:	bfa8      	it	ge
 800a6fa:	4643      	movge	r3, r8
 800a6fc:	42bb      	cmp	r3, r7
 800a6fe:	bfa8      	it	ge
 800a700:	463b      	movge	r3, r7
 800a702:	2b00      	cmp	r3, #0
 800a704:	bfc2      	ittt	gt
 800a706:	eba8 0803 	subgt.w	r8, r8, r3
 800a70a:	1aff      	subgt	r7, r7, r3
 800a70c:	eba9 0903 	subgt.w	r9, r9, r3
 800a710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a712:	2b00      	cmp	r3, #0
 800a714:	dd17      	ble.n	800a746 <_strtod_l+0x75e>
 800a716:	4631      	mov	r1, r6
 800a718:	461a      	mov	r2, r3
 800a71a:	4620      	mov	r0, r4
 800a71c:	f001 fefe 	bl	800c51c <__pow5mult>
 800a720:	4606      	mov	r6, r0
 800a722:	2800      	cmp	r0, #0
 800a724:	f43f aea8 	beq.w	800a478 <_strtod_l+0x490>
 800a728:	4601      	mov	r1, r0
 800a72a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a72c:	4620      	mov	r0, r4
 800a72e:	f001 fe4b 	bl	800c3c8 <__multiply>
 800a732:	900b      	str	r0, [sp, #44]	; 0x2c
 800a734:	2800      	cmp	r0, #0
 800a736:	f43f ae9f 	beq.w	800a478 <_strtod_l+0x490>
 800a73a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a73c:	4620      	mov	r0, r4
 800a73e:	f001 fd2b 	bl	800c198 <_Bfree>
 800a742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a744:	9318      	str	r3, [sp, #96]	; 0x60
 800a746:	f1b8 0f00 	cmp.w	r8, #0
 800a74a:	f300 808c 	bgt.w	800a866 <_strtod_l+0x87e>
 800a74e:	9b06      	ldr	r3, [sp, #24]
 800a750:	2b00      	cmp	r3, #0
 800a752:	dd08      	ble.n	800a766 <_strtod_l+0x77e>
 800a754:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a756:	9905      	ldr	r1, [sp, #20]
 800a758:	4620      	mov	r0, r4
 800a75a:	f001 fedf 	bl	800c51c <__pow5mult>
 800a75e:	9005      	str	r0, [sp, #20]
 800a760:	2800      	cmp	r0, #0
 800a762:	f43f ae89 	beq.w	800a478 <_strtod_l+0x490>
 800a766:	2f00      	cmp	r7, #0
 800a768:	dd08      	ble.n	800a77c <_strtod_l+0x794>
 800a76a:	9905      	ldr	r1, [sp, #20]
 800a76c:	463a      	mov	r2, r7
 800a76e:	4620      	mov	r0, r4
 800a770:	f001 ff2e 	bl	800c5d0 <__lshift>
 800a774:	9005      	str	r0, [sp, #20]
 800a776:	2800      	cmp	r0, #0
 800a778:	f43f ae7e 	beq.w	800a478 <_strtod_l+0x490>
 800a77c:	f1b9 0f00 	cmp.w	r9, #0
 800a780:	dd08      	ble.n	800a794 <_strtod_l+0x7ac>
 800a782:	4631      	mov	r1, r6
 800a784:	464a      	mov	r2, r9
 800a786:	4620      	mov	r0, r4
 800a788:	f001 ff22 	bl	800c5d0 <__lshift>
 800a78c:	4606      	mov	r6, r0
 800a78e:	2800      	cmp	r0, #0
 800a790:	f43f ae72 	beq.w	800a478 <_strtod_l+0x490>
 800a794:	9a05      	ldr	r2, [sp, #20]
 800a796:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a798:	4620      	mov	r0, r4
 800a79a:	f001 ffa5 	bl	800c6e8 <__mdiff>
 800a79e:	4605      	mov	r5, r0
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	f43f ae69 	beq.w	800a478 <_strtod_l+0x490>
 800a7a6:	68c3      	ldr	r3, [r0, #12]
 800a7a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	60c3      	str	r3, [r0, #12]
 800a7ae:	4631      	mov	r1, r6
 800a7b0:	f001 ff7e 	bl	800c6b0 <__mcmp>
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	da60      	bge.n	800a87a <_strtod_l+0x892>
 800a7b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7ba:	ea53 030a 	orrs.w	r3, r3, sl
 800a7be:	f040 8082 	bne.w	800a8c6 <_strtod_l+0x8de>
 800a7c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d17d      	bne.n	800a8c6 <_strtod_l+0x8de>
 800a7ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a7ce:	0d1b      	lsrs	r3, r3, #20
 800a7d0:	051b      	lsls	r3, r3, #20
 800a7d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a7d6:	d976      	bls.n	800a8c6 <_strtod_l+0x8de>
 800a7d8:	696b      	ldr	r3, [r5, #20]
 800a7da:	b913      	cbnz	r3, 800a7e2 <_strtod_l+0x7fa>
 800a7dc:	692b      	ldr	r3, [r5, #16]
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	dd71      	ble.n	800a8c6 <_strtod_l+0x8de>
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f001 fef2 	bl	800c5d0 <__lshift>
 800a7ec:	4631      	mov	r1, r6
 800a7ee:	4605      	mov	r5, r0
 800a7f0:	f001 ff5e 	bl	800c6b0 <__mcmp>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	dd66      	ble.n	800a8c6 <_strtod_l+0x8de>
 800a7f8:	9904      	ldr	r1, [sp, #16]
 800a7fa:	4a53      	ldr	r2, [pc, #332]	; (800a948 <_strtod_l+0x960>)
 800a7fc:	465b      	mov	r3, fp
 800a7fe:	2900      	cmp	r1, #0
 800a800:	f000 8081 	beq.w	800a906 <_strtod_l+0x91e>
 800a804:	ea02 010b 	and.w	r1, r2, fp
 800a808:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a80c:	dc7b      	bgt.n	800a906 <_strtod_l+0x91e>
 800a80e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a812:	f77f aea9 	ble.w	800a568 <_strtod_l+0x580>
 800a816:	4b4d      	ldr	r3, [pc, #308]	; (800a94c <_strtod_l+0x964>)
 800a818:	4650      	mov	r0, sl
 800a81a:	4659      	mov	r1, fp
 800a81c:	2200      	movs	r2, #0
 800a81e:	f7f5 feeb 	bl	80005f8 <__aeabi_dmul>
 800a822:	460b      	mov	r3, r1
 800a824:	4303      	orrs	r3, r0
 800a826:	bf08      	it	eq
 800a828:	2322      	moveq	r3, #34	; 0x22
 800a82a:	4682      	mov	sl, r0
 800a82c:	468b      	mov	fp, r1
 800a82e:	bf08      	it	eq
 800a830:	6023      	streq	r3, [r4, #0]
 800a832:	e62b      	b.n	800a48c <_strtod_l+0x4a4>
 800a834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a838:	fa02 f303 	lsl.w	r3, r2, r3
 800a83c:	ea03 0a0a 	and.w	sl, r3, sl
 800a840:	e6e3      	b.n	800a60a <_strtod_l+0x622>
 800a842:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a846:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a84a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a84e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a852:	fa01 f308 	lsl.w	r3, r1, r8
 800a856:	9308      	str	r3, [sp, #32]
 800a858:	910d      	str	r1, [sp, #52]	; 0x34
 800a85a:	e746      	b.n	800a6ea <_strtod_l+0x702>
 800a85c:	2300      	movs	r3, #0
 800a85e:	9308      	str	r3, [sp, #32]
 800a860:	2301      	movs	r3, #1
 800a862:	930d      	str	r3, [sp, #52]	; 0x34
 800a864:	e741      	b.n	800a6ea <_strtod_l+0x702>
 800a866:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a868:	4642      	mov	r2, r8
 800a86a:	4620      	mov	r0, r4
 800a86c:	f001 feb0 	bl	800c5d0 <__lshift>
 800a870:	9018      	str	r0, [sp, #96]	; 0x60
 800a872:	2800      	cmp	r0, #0
 800a874:	f47f af6b 	bne.w	800a74e <_strtod_l+0x766>
 800a878:	e5fe      	b.n	800a478 <_strtod_l+0x490>
 800a87a:	465f      	mov	r7, fp
 800a87c:	d16e      	bne.n	800a95c <_strtod_l+0x974>
 800a87e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a880:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a884:	b342      	cbz	r2, 800a8d8 <_strtod_l+0x8f0>
 800a886:	4a32      	ldr	r2, [pc, #200]	; (800a950 <_strtod_l+0x968>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d128      	bne.n	800a8de <_strtod_l+0x8f6>
 800a88c:	9b04      	ldr	r3, [sp, #16]
 800a88e:	4651      	mov	r1, sl
 800a890:	b1eb      	cbz	r3, 800a8ce <_strtod_l+0x8e6>
 800a892:	4b2d      	ldr	r3, [pc, #180]	; (800a948 <_strtod_l+0x960>)
 800a894:	403b      	ands	r3, r7
 800a896:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a89a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a89e:	d819      	bhi.n	800a8d4 <_strtod_l+0x8ec>
 800a8a0:	0d1b      	lsrs	r3, r3, #20
 800a8a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a8a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8aa:	4299      	cmp	r1, r3
 800a8ac:	d117      	bne.n	800a8de <_strtod_l+0x8f6>
 800a8ae:	4b29      	ldr	r3, [pc, #164]	; (800a954 <_strtod_l+0x96c>)
 800a8b0:	429f      	cmp	r7, r3
 800a8b2:	d102      	bne.n	800a8ba <_strtod_l+0x8d2>
 800a8b4:	3101      	adds	r1, #1
 800a8b6:	f43f addf 	beq.w	800a478 <_strtod_l+0x490>
 800a8ba:	4b23      	ldr	r3, [pc, #140]	; (800a948 <_strtod_l+0x960>)
 800a8bc:	403b      	ands	r3, r7
 800a8be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a8c2:	f04f 0a00 	mov.w	sl, #0
 800a8c6:	9b04      	ldr	r3, [sp, #16]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1a4      	bne.n	800a816 <_strtod_l+0x82e>
 800a8cc:	e5de      	b.n	800a48c <_strtod_l+0x4a4>
 800a8ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8d2:	e7ea      	b.n	800a8aa <_strtod_l+0x8c2>
 800a8d4:	4613      	mov	r3, r2
 800a8d6:	e7e8      	b.n	800a8aa <_strtod_l+0x8c2>
 800a8d8:	ea53 030a 	orrs.w	r3, r3, sl
 800a8dc:	d08c      	beq.n	800a7f8 <_strtod_l+0x810>
 800a8de:	9b08      	ldr	r3, [sp, #32]
 800a8e0:	b1db      	cbz	r3, 800a91a <_strtod_l+0x932>
 800a8e2:	423b      	tst	r3, r7
 800a8e4:	d0ef      	beq.n	800a8c6 <_strtod_l+0x8de>
 800a8e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8e8:	9a04      	ldr	r2, [sp, #16]
 800a8ea:	4650      	mov	r0, sl
 800a8ec:	4659      	mov	r1, fp
 800a8ee:	b1c3      	cbz	r3, 800a922 <_strtod_l+0x93a>
 800a8f0:	f7ff fb5e 	bl	8009fb0 <sulp>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	ec51 0b18 	vmov	r0, r1, d8
 800a8fc:	f7f5 fcc6 	bl	800028c <__adddf3>
 800a900:	4682      	mov	sl, r0
 800a902:	468b      	mov	fp, r1
 800a904:	e7df      	b.n	800a8c6 <_strtod_l+0x8de>
 800a906:	4013      	ands	r3, r2
 800a908:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a90c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a910:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a914:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a918:	e7d5      	b.n	800a8c6 <_strtod_l+0x8de>
 800a91a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a91c:	ea13 0f0a 	tst.w	r3, sl
 800a920:	e7e0      	b.n	800a8e4 <_strtod_l+0x8fc>
 800a922:	f7ff fb45 	bl	8009fb0 <sulp>
 800a926:	4602      	mov	r2, r0
 800a928:	460b      	mov	r3, r1
 800a92a:	ec51 0b18 	vmov	r0, r1, d8
 800a92e:	f7f5 fcab 	bl	8000288 <__aeabi_dsub>
 800a932:	2200      	movs	r2, #0
 800a934:	2300      	movs	r3, #0
 800a936:	4682      	mov	sl, r0
 800a938:	468b      	mov	fp, r1
 800a93a:	f7f6 f8c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a93e:	2800      	cmp	r0, #0
 800a940:	d0c1      	beq.n	800a8c6 <_strtod_l+0x8de>
 800a942:	e611      	b.n	800a568 <_strtod_l+0x580>
 800a944:	fffffc02 	.word	0xfffffc02
 800a948:	7ff00000 	.word	0x7ff00000
 800a94c:	39500000 	.word	0x39500000
 800a950:	000fffff 	.word	0x000fffff
 800a954:	7fefffff 	.word	0x7fefffff
 800a958:	0800ded8 	.word	0x0800ded8
 800a95c:	4631      	mov	r1, r6
 800a95e:	4628      	mov	r0, r5
 800a960:	f002 f824 	bl	800c9ac <__ratio>
 800a964:	ec59 8b10 	vmov	r8, r9, d0
 800a968:	ee10 0a10 	vmov	r0, s0
 800a96c:	2200      	movs	r2, #0
 800a96e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a972:	4649      	mov	r1, r9
 800a974:	f7f6 f8bc 	bl	8000af0 <__aeabi_dcmple>
 800a978:	2800      	cmp	r0, #0
 800a97a:	d07a      	beq.n	800aa72 <_strtod_l+0xa8a>
 800a97c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d04a      	beq.n	800aa18 <_strtod_l+0xa30>
 800a982:	4b95      	ldr	r3, [pc, #596]	; (800abd8 <_strtod_l+0xbf0>)
 800a984:	2200      	movs	r2, #0
 800a986:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a98a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800abd8 <_strtod_l+0xbf0>
 800a98e:	f04f 0800 	mov.w	r8, #0
 800a992:	4b92      	ldr	r3, [pc, #584]	; (800abdc <_strtod_l+0xbf4>)
 800a994:	403b      	ands	r3, r7
 800a996:	930d      	str	r3, [sp, #52]	; 0x34
 800a998:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a99a:	4b91      	ldr	r3, [pc, #580]	; (800abe0 <_strtod_l+0xbf8>)
 800a99c:	429a      	cmp	r2, r3
 800a99e:	f040 80b0 	bne.w	800ab02 <_strtod_l+0xb1a>
 800a9a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a9a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a9aa:	ec4b ab10 	vmov	d0, sl, fp
 800a9ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a9b2:	f001 ff23 	bl	800c7fc <__ulp>
 800a9b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a9ba:	ec53 2b10 	vmov	r2, r3, d0
 800a9be:	f7f5 fe1b 	bl	80005f8 <__aeabi_dmul>
 800a9c2:	4652      	mov	r2, sl
 800a9c4:	465b      	mov	r3, fp
 800a9c6:	f7f5 fc61 	bl	800028c <__adddf3>
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	4983      	ldr	r1, [pc, #524]	; (800abdc <_strtod_l+0xbf4>)
 800a9ce:	4a85      	ldr	r2, [pc, #532]	; (800abe4 <_strtod_l+0xbfc>)
 800a9d0:	4019      	ands	r1, r3
 800a9d2:	4291      	cmp	r1, r2
 800a9d4:	4682      	mov	sl, r0
 800a9d6:	d960      	bls.n	800aa9a <_strtod_l+0xab2>
 800a9d8:	ee18 3a90 	vmov	r3, s17
 800a9dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d104      	bne.n	800a9ee <_strtod_l+0xa06>
 800a9e4:	ee18 3a10 	vmov	r3, s16
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	f43f ad45 	beq.w	800a478 <_strtod_l+0x490>
 800a9ee:	f8df b200 	ldr.w	fp, [pc, #512]	; 800abf0 <_strtod_l+0xc08>
 800a9f2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a9f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f001 fbcd 	bl	800c198 <_Bfree>
 800a9fe:	9905      	ldr	r1, [sp, #20]
 800aa00:	4620      	mov	r0, r4
 800aa02:	f001 fbc9 	bl	800c198 <_Bfree>
 800aa06:	4631      	mov	r1, r6
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f001 fbc5 	bl	800c198 <_Bfree>
 800aa0e:	4629      	mov	r1, r5
 800aa10:	4620      	mov	r0, r4
 800aa12:	f001 fbc1 	bl	800c198 <_Bfree>
 800aa16:	e61a      	b.n	800a64e <_strtod_l+0x666>
 800aa18:	f1ba 0f00 	cmp.w	sl, #0
 800aa1c:	d11b      	bne.n	800aa56 <_strtod_l+0xa6e>
 800aa1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa22:	b9f3      	cbnz	r3, 800aa62 <_strtod_l+0xa7a>
 800aa24:	4b6c      	ldr	r3, [pc, #432]	; (800abd8 <_strtod_l+0xbf0>)
 800aa26:	2200      	movs	r2, #0
 800aa28:	4640      	mov	r0, r8
 800aa2a:	4649      	mov	r1, r9
 800aa2c:	f7f6 f856 	bl	8000adc <__aeabi_dcmplt>
 800aa30:	b9d0      	cbnz	r0, 800aa68 <_strtod_l+0xa80>
 800aa32:	4640      	mov	r0, r8
 800aa34:	4649      	mov	r1, r9
 800aa36:	4b6c      	ldr	r3, [pc, #432]	; (800abe8 <_strtod_l+0xc00>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f7f5 fddd 	bl	80005f8 <__aeabi_dmul>
 800aa3e:	4680      	mov	r8, r0
 800aa40:	4689      	mov	r9, r1
 800aa42:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aa46:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800aa4a:	9315      	str	r3, [sp, #84]	; 0x54
 800aa4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800aa50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aa54:	e79d      	b.n	800a992 <_strtod_l+0x9aa>
 800aa56:	f1ba 0f01 	cmp.w	sl, #1
 800aa5a:	d102      	bne.n	800aa62 <_strtod_l+0xa7a>
 800aa5c:	2f00      	cmp	r7, #0
 800aa5e:	f43f ad83 	beq.w	800a568 <_strtod_l+0x580>
 800aa62:	4b62      	ldr	r3, [pc, #392]	; (800abec <_strtod_l+0xc04>)
 800aa64:	2200      	movs	r2, #0
 800aa66:	e78e      	b.n	800a986 <_strtod_l+0x99e>
 800aa68:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800abe8 <_strtod_l+0xc00>
 800aa6c:	f04f 0800 	mov.w	r8, #0
 800aa70:	e7e7      	b.n	800aa42 <_strtod_l+0xa5a>
 800aa72:	4b5d      	ldr	r3, [pc, #372]	; (800abe8 <_strtod_l+0xc00>)
 800aa74:	4640      	mov	r0, r8
 800aa76:	4649      	mov	r1, r9
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f7f5 fdbd 	bl	80005f8 <__aeabi_dmul>
 800aa7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa80:	4680      	mov	r8, r0
 800aa82:	4689      	mov	r9, r1
 800aa84:	b933      	cbnz	r3, 800aa94 <_strtod_l+0xaac>
 800aa86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa8a:	900e      	str	r0, [sp, #56]	; 0x38
 800aa8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800aa92:	e7dd      	b.n	800aa50 <_strtod_l+0xa68>
 800aa94:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800aa98:	e7f9      	b.n	800aa8e <_strtod_l+0xaa6>
 800aa9a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800aa9e:	9b04      	ldr	r3, [sp, #16]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1a8      	bne.n	800a9f6 <_strtod_l+0xa0e>
 800aaa4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aaa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aaaa:	0d1b      	lsrs	r3, r3, #20
 800aaac:	051b      	lsls	r3, r3, #20
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d1a1      	bne.n	800a9f6 <_strtod_l+0xa0e>
 800aab2:	4640      	mov	r0, r8
 800aab4:	4649      	mov	r1, r9
 800aab6:	f7f6 f8ff 	bl	8000cb8 <__aeabi_d2lz>
 800aaba:	f7f5 fd6f 	bl	800059c <__aeabi_l2d>
 800aabe:	4602      	mov	r2, r0
 800aac0:	460b      	mov	r3, r1
 800aac2:	4640      	mov	r0, r8
 800aac4:	4649      	mov	r1, r9
 800aac6:	f7f5 fbdf 	bl	8000288 <__aeabi_dsub>
 800aaca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aacc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aad0:	ea43 030a 	orr.w	r3, r3, sl
 800aad4:	4313      	orrs	r3, r2
 800aad6:	4680      	mov	r8, r0
 800aad8:	4689      	mov	r9, r1
 800aada:	d055      	beq.n	800ab88 <_strtod_l+0xba0>
 800aadc:	a336      	add	r3, pc, #216	; (adr r3, 800abb8 <_strtod_l+0xbd0>)
 800aade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae2:	f7f5 fffb 	bl	8000adc <__aeabi_dcmplt>
 800aae6:	2800      	cmp	r0, #0
 800aae8:	f47f acd0 	bne.w	800a48c <_strtod_l+0x4a4>
 800aaec:	a334      	add	r3, pc, #208	; (adr r3, 800abc0 <_strtod_l+0xbd8>)
 800aaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf2:	4640      	mov	r0, r8
 800aaf4:	4649      	mov	r1, r9
 800aaf6:	f7f6 f80f 	bl	8000b18 <__aeabi_dcmpgt>
 800aafa:	2800      	cmp	r0, #0
 800aafc:	f43f af7b 	beq.w	800a9f6 <_strtod_l+0xa0e>
 800ab00:	e4c4      	b.n	800a48c <_strtod_l+0x4a4>
 800ab02:	9b04      	ldr	r3, [sp, #16]
 800ab04:	b333      	cbz	r3, 800ab54 <_strtod_l+0xb6c>
 800ab06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab08:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ab0c:	d822      	bhi.n	800ab54 <_strtod_l+0xb6c>
 800ab0e:	a32e      	add	r3, pc, #184	; (adr r3, 800abc8 <_strtod_l+0xbe0>)
 800ab10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab14:	4640      	mov	r0, r8
 800ab16:	4649      	mov	r1, r9
 800ab18:	f7f5 ffea 	bl	8000af0 <__aeabi_dcmple>
 800ab1c:	b1a0      	cbz	r0, 800ab48 <_strtod_l+0xb60>
 800ab1e:	4649      	mov	r1, r9
 800ab20:	4640      	mov	r0, r8
 800ab22:	f7f6 f841 	bl	8000ba8 <__aeabi_d2uiz>
 800ab26:	2801      	cmp	r0, #1
 800ab28:	bf38      	it	cc
 800ab2a:	2001      	movcc	r0, #1
 800ab2c:	f7f5 fcea 	bl	8000504 <__aeabi_ui2d>
 800ab30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab32:	4680      	mov	r8, r0
 800ab34:	4689      	mov	r9, r1
 800ab36:	bb23      	cbnz	r3, 800ab82 <_strtod_l+0xb9a>
 800ab38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab3c:	9010      	str	r0, [sp, #64]	; 0x40
 800ab3e:	9311      	str	r3, [sp, #68]	; 0x44
 800ab40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab44:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ab48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab4c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ab50:	1a9b      	subs	r3, r3, r2
 800ab52:	9309      	str	r3, [sp, #36]	; 0x24
 800ab54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ab58:	eeb0 0a48 	vmov.f32	s0, s16
 800ab5c:	eef0 0a68 	vmov.f32	s1, s17
 800ab60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ab64:	f001 fe4a 	bl	800c7fc <__ulp>
 800ab68:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ab6c:	ec53 2b10 	vmov	r2, r3, d0
 800ab70:	f7f5 fd42 	bl	80005f8 <__aeabi_dmul>
 800ab74:	ec53 2b18 	vmov	r2, r3, d8
 800ab78:	f7f5 fb88 	bl	800028c <__adddf3>
 800ab7c:	4682      	mov	sl, r0
 800ab7e:	468b      	mov	fp, r1
 800ab80:	e78d      	b.n	800aa9e <_strtod_l+0xab6>
 800ab82:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ab86:	e7db      	b.n	800ab40 <_strtod_l+0xb58>
 800ab88:	a311      	add	r3, pc, #68	; (adr r3, 800abd0 <_strtod_l+0xbe8>)
 800ab8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8e:	f7f5 ffa5 	bl	8000adc <__aeabi_dcmplt>
 800ab92:	e7b2      	b.n	800aafa <_strtod_l+0xb12>
 800ab94:	2300      	movs	r3, #0
 800ab96:	930a      	str	r3, [sp, #40]	; 0x28
 800ab98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab9c:	6013      	str	r3, [r2, #0]
 800ab9e:	f7ff ba6b 	b.w	800a078 <_strtod_l+0x90>
 800aba2:	2a65      	cmp	r2, #101	; 0x65
 800aba4:	f43f ab5f 	beq.w	800a266 <_strtod_l+0x27e>
 800aba8:	2a45      	cmp	r2, #69	; 0x45
 800abaa:	f43f ab5c 	beq.w	800a266 <_strtod_l+0x27e>
 800abae:	2301      	movs	r3, #1
 800abb0:	f7ff bb94 	b.w	800a2dc <_strtod_l+0x2f4>
 800abb4:	f3af 8000 	nop.w
 800abb8:	94a03595 	.word	0x94a03595
 800abbc:	3fdfffff 	.word	0x3fdfffff
 800abc0:	35afe535 	.word	0x35afe535
 800abc4:	3fe00000 	.word	0x3fe00000
 800abc8:	ffc00000 	.word	0xffc00000
 800abcc:	41dfffff 	.word	0x41dfffff
 800abd0:	94a03595 	.word	0x94a03595
 800abd4:	3fcfffff 	.word	0x3fcfffff
 800abd8:	3ff00000 	.word	0x3ff00000
 800abdc:	7ff00000 	.word	0x7ff00000
 800abe0:	7fe00000 	.word	0x7fe00000
 800abe4:	7c9fffff 	.word	0x7c9fffff
 800abe8:	3fe00000 	.word	0x3fe00000
 800abec:	bff00000 	.word	0xbff00000
 800abf0:	7fefffff 	.word	0x7fefffff

0800abf4 <_strtod_r>:
 800abf4:	4b01      	ldr	r3, [pc, #4]	; (800abfc <_strtod_r+0x8>)
 800abf6:	f7ff b9f7 	b.w	8009fe8 <_strtod_l>
 800abfa:	bf00      	nop
 800abfc:	2000008c 	.word	0x2000008c

0800ac00 <_strtol_l.constprop.0>:
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac06:	d001      	beq.n	800ac0c <_strtol_l.constprop.0+0xc>
 800ac08:	2b24      	cmp	r3, #36	; 0x24
 800ac0a:	d906      	bls.n	800ac1a <_strtol_l.constprop.0+0x1a>
 800ac0c:	f7fe faa4 	bl	8009158 <__errno>
 800ac10:	2316      	movs	r3, #22
 800ac12:	6003      	str	r3, [r0, #0]
 800ac14:	2000      	movs	r0, #0
 800ac16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac1a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ad00 <_strtol_l.constprop.0+0x100>
 800ac1e:	460d      	mov	r5, r1
 800ac20:	462e      	mov	r6, r5
 800ac22:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac26:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ac2a:	f017 0708 	ands.w	r7, r7, #8
 800ac2e:	d1f7      	bne.n	800ac20 <_strtol_l.constprop.0+0x20>
 800ac30:	2c2d      	cmp	r4, #45	; 0x2d
 800ac32:	d132      	bne.n	800ac9a <_strtol_l.constprop.0+0x9a>
 800ac34:	782c      	ldrb	r4, [r5, #0]
 800ac36:	2701      	movs	r7, #1
 800ac38:	1cb5      	adds	r5, r6, #2
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d05b      	beq.n	800acf6 <_strtol_l.constprop.0+0xf6>
 800ac3e:	2b10      	cmp	r3, #16
 800ac40:	d109      	bne.n	800ac56 <_strtol_l.constprop.0+0x56>
 800ac42:	2c30      	cmp	r4, #48	; 0x30
 800ac44:	d107      	bne.n	800ac56 <_strtol_l.constprop.0+0x56>
 800ac46:	782c      	ldrb	r4, [r5, #0]
 800ac48:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ac4c:	2c58      	cmp	r4, #88	; 0x58
 800ac4e:	d14d      	bne.n	800acec <_strtol_l.constprop.0+0xec>
 800ac50:	786c      	ldrb	r4, [r5, #1]
 800ac52:	2310      	movs	r3, #16
 800ac54:	3502      	adds	r5, #2
 800ac56:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ac5a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ac5e:	f04f 0c00 	mov.w	ip, #0
 800ac62:	fbb8 f9f3 	udiv	r9, r8, r3
 800ac66:	4666      	mov	r6, ip
 800ac68:	fb03 8a19 	mls	sl, r3, r9, r8
 800ac6c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ac70:	f1be 0f09 	cmp.w	lr, #9
 800ac74:	d816      	bhi.n	800aca4 <_strtol_l.constprop.0+0xa4>
 800ac76:	4674      	mov	r4, lr
 800ac78:	42a3      	cmp	r3, r4
 800ac7a:	dd24      	ble.n	800acc6 <_strtol_l.constprop.0+0xc6>
 800ac7c:	f1bc 0f00 	cmp.w	ip, #0
 800ac80:	db1e      	blt.n	800acc0 <_strtol_l.constprop.0+0xc0>
 800ac82:	45b1      	cmp	r9, r6
 800ac84:	d31c      	bcc.n	800acc0 <_strtol_l.constprop.0+0xc0>
 800ac86:	d101      	bne.n	800ac8c <_strtol_l.constprop.0+0x8c>
 800ac88:	45a2      	cmp	sl, r4
 800ac8a:	db19      	blt.n	800acc0 <_strtol_l.constprop.0+0xc0>
 800ac8c:	fb06 4603 	mla	r6, r6, r3, r4
 800ac90:	f04f 0c01 	mov.w	ip, #1
 800ac94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac98:	e7e8      	b.n	800ac6c <_strtol_l.constprop.0+0x6c>
 800ac9a:	2c2b      	cmp	r4, #43	; 0x2b
 800ac9c:	bf04      	itt	eq
 800ac9e:	782c      	ldrbeq	r4, [r5, #0]
 800aca0:	1cb5      	addeq	r5, r6, #2
 800aca2:	e7ca      	b.n	800ac3a <_strtol_l.constprop.0+0x3a>
 800aca4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800aca8:	f1be 0f19 	cmp.w	lr, #25
 800acac:	d801      	bhi.n	800acb2 <_strtol_l.constprop.0+0xb2>
 800acae:	3c37      	subs	r4, #55	; 0x37
 800acb0:	e7e2      	b.n	800ac78 <_strtol_l.constprop.0+0x78>
 800acb2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800acb6:	f1be 0f19 	cmp.w	lr, #25
 800acba:	d804      	bhi.n	800acc6 <_strtol_l.constprop.0+0xc6>
 800acbc:	3c57      	subs	r4, #87	; 0x57
 800acbe:	e7db      	b.n	800ac78 <_strtol_l.constprop.0+0x78>
 800acc0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800acc4:	e7e6      	b.n	800ac94 <_strtol_l.constprop.0+0x94>
 800acc6:	f1bc 0f00 	cmp.w	ip, #0
 800acca:	da05      	bge.n	800acd8 <_strtol_l.constprop.0+0xd8>
 800accc:	2322      	movs	r3, #34	; 0x22
 800acce:	6003      	str	r3, [r0, #0]
 800acd0:	4646      	mov	r6, r8
 800acd2:	b942      	cbnz	r2, 800ace6 <_strtol_l.constprop.0+0xe6>
 800acd4:	4630      	mov	r0, r6
 800acd6:	e79e      	b.n	800ac16 <_strtol_l.constprop.0+0x16>
 800acd8:	b107      	cbz	r7, 800acdc <_strtol_l.constprop.0+0xdc>
 800acda:	4276      	negs	r6, r6
 800acdc:	2a00      	cmp	r2, #0
 800acde:	d0f9      	beq.n	800acd4 <_strtol_l.constprop.0+0xd4>
 800ace0:	f1bc 0f00 	cmp.w	ip, #0
 800ace4:	d000      	beq.n	800ace8 <_strtol_l.constprop.0+0xe8>
 800ace6:	1e69      	subs	r1, r5, #1
 800ace8:	6011      	str	r1, [r2, #0]
 800acea:	e7f3      	b.n	800acd4 <_strtol_l.constprop.0+0xd4>
 800acec:	2430      	movs	r4, #48	; 0x30
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1b1      	bne.n	800ac56 <_strtol_l.constprop.0+0x56>
 800acf2:	2308      	movs	r3, #8
 800acf4:	e7af      	b.n	800ac56 <_strtol_l.constprop.0+0x56>
 800acf6:	2c30      	cmp	r4, #48	; 0x30
 800acf8:	d0a5      	beq.n	800ac46 <_strtol_l.constprop.0+0x46>
 800acfa:	230a      	movs	r3, #10
 800acfc:	e7ab      	b.n	800ac56 <_strtol_l.constprop.0+0x56>
 800acfe:	bf00      	nop
 800ad00:	0800df01 	.word	0x0800df01

0800ad04 <_strtol_r>:
 800ad04:	f7ff bf7c 	b.w	800ac00 <_strtol_l.constprop.0>

0800ad08 <quorem>:
 800ad08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad0c:	6903      	ldr	r3, [r0, #16]
 800ad0e:	690c      	ldr	r4, [r1, #16]
 800ad10:	42a3      	cmp	r3, r4
 800ad12:	4607      	mov	r7, r0
 800ad14:	f2c0 8081 	blt.w	800ae1a <quorem+0x112>
 800ad18:	3c01      	subs	r4, #1
 800ad1a:	f101 0814 	add.w	r8, r1, #20
 800ad1e:	f100 0514 	add.w	r5, r0, #20
 800ad22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad26:	9301      	str	r3, [sp, #4]
 800ad28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad30:	3301      	adds	r3, #1
 800ad32:	429a      	cmp	r2, r3
 800ad34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ad38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad3c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad40:	d331      	bcc.n	800ada6 <quorem+0x9e>
 800ad42:	f04f 0e00 	mov.w	lr, #0
 800ad46:	4640      	mov	r0, r8
 800ad48:	46ac      	mov	ip, r5
 800ad4a:	46f2      	mov	sl, lr
 800ad4c:	f850 2b04 	ldr.w	r2, [r0], #4
 800ad50:	b293      	uxth	r3, r2
 800ad52:	fb06 e303 	mla	r3, r6, r3, lr
 800ad56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	ebaa 0303 	sub.w	r3, sl, r3
 800ad60:	f8dc a000 	ldr.w	sl, [ip]
 800ad64:	0c12      	lsrs	r2, r2, #16
 800ad66:	fa13 f38a 	uxtah	r3, r3, sl
 800ad6a:	fb06 e202 	mla	r2, r6, r2, lr
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	9b00      	ldr	r3, [sp, #0]
 800ad72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ad76:	b292      	uxth	r2, r2
 800ad78:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ad7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad80:	f8bd 3000 	ldrh.w	r3, [sp]
 800ad84:	4581      	cmp	r9, r0
 800ad86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad8a:	f84c 3b04 	str.w	r3, [ip], #4
 800ad8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ad92:	d2db      	bcs.n	800ad4c <quorem+0x44>
 800ad94:	f855 300b 	ldr.w	r3, [r5, fp]
 800ad98:	b92b      	cbnz	r3, 800ada6 <quorem+0x9e>
 800ad9a:	9b01      	ldr	r3, [sp, #4]
 800ad9c:	3b04      	subs	r3, #4
 800ad9e:	429d      	cmp	r5, r3
 800ada0:	461a      	mov	r2, r3
 800ada2:	d32e      	bcc.n	800ae02 <quorem+0xfa>
 800ada4:	613c      	str	r4, [r7, #16]
 800ada6:	4638      	mov	r0, r7
 800ada8:	f001 fc82 	bl	800c6b0 <__mcmp>
 800adac:	2800      	cmp	r0, #0
 800adae:	db24      	blt.n	800adfa <quorem+0xf2>
 800adb0:	3601      	adds	r6, #1
 800adb2:	4628      	mov	r0, r5
 800adb4:	f04f 0c00 	mov.w	ip, #0
 800adb8:	f858 2b04 	ldr.w	r2, [r8], #4
 800adbc:	f8d0 e000 	ldr.w	lr, [r0]
 800adc0:	b293      	uxth	r3, r2
 800adc2:	ebac 0303 	sub.w	r3, ip, r3
 800adc6:	0c12      	lsrs	r2, r2, #16
 800adc8:	fa13 f38e 	uxtah	r3, r3, lr
 800adcc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800add0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800add4:	b29b      	uxth	r3, r3
 800add6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adda:	45c1      	cmp	r9, r8
 800addc:	f840 3b04 	str.w	r3, [r0], #4
 800ade0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ade4:	d2e8      	bcs.n	800adb8 <quorem+0xb0>
 800ade6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800adea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800adee:	b922      	cbnz	r2, 800adfa <quorem+0xf2>
 800adf0:	3b04      	subs	r3, #4
 800adf2:	429d      	cmp	r5, r3
 800adf4:	461a      	mov	r2, r3
 800adf6:	d30a      	bcc.n	800ae0e <quorem+0x106>
 800adf8:	613c      	str	r4, [r7, #16]
 800adfa:	4630      	mov	r0, r6
 800adfc:	b003      	add	sp, #12
 800adfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae02:	6812      	ldr	r2, [r2, #0]
 800ae04:	3b04      	subs	r3, #4
 800ae06:	2a00      	cmp	r2, #0
 800ae08:	d1cc      	bne.n	800ada4 <quorem+0x9c>
 800ae0a:	3c01      	subs	r4, #1
 800ae0c:	e7c7      	b.n	800ad9e <quorem+0x96>
 800ae0e:	6812      	ldr	r2, [r2, #0]
 800ae10:	3b04      	subs	r3, #4
 800ae12:	2a00      	cmp	r2, #0
 800ae14:	d1f0      	bne.n	800adf8 <quorem+0xf0>
 800ae16:	3c01      	subs	r4, #1
 800ae18:	e7eb      	b.n	800adf2 <quorem+0xea>
 800ae1a:	2000      	movs	r0, #0
 800ae1c:	e7ee      	b.n	800adfc <quorem+0xf4>
	...

0800ae20 <_dtoa_r>:
 800ae20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae24:	ed2d 8b04 	vpush	{d8-d9}
 800ae28:	ec57 6b10 	vmov	r6, r7, d0
 800ae2c:	b093      	sub	sp, #76	; 0x4c
 800ae2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ae30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ae34:	9106      	str	r1, [sp, #24]
 800ae36:	ee10 aa10 	vmov	sl, s0
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	9209      	str	r2, [sp, #36]	; 0x24
 800ae3e:	930c      	str	r3, [sp, #48]	; 0x30
 800ae40:	46bb      	mov	fp, r7
 800ae42:	b975      	cbnz	r5, 800ae62 <_dtoa_r+0x42>
 800ae44:	2010      	movs	r0, #16
 800ae46:	f001 f94d 	bl	800c0e4 <malloc>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	6260      	str	r0, [r4, #36]	; 0x24
 800ae4e:	b920      	cbnz	r0, 800ae5a <_dtoa_r+0x3a>
 800ae50:	4ba7      	ldr	r3, [pc, #668]	; (800b0f0 <_dtoa_r+0x2d0>)
 800ae52:	21ea      	movs	r1, #234	; 0xea
 800ae54:	48a7      	ldr	r0, [pc, #668]	; (800b0f4 <_dtoa_r+0x2d4>)
 800ae56:	f002 f8dd 	bl	800d014 <__assert_func>
 800ae5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ae5e:	6005      	str	r5, [r0, #0]
 800ae60:	60c5      	str	r5, [r0, #12]
 800ae62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae64:	6819      	ldr	r1, [r3, #0]
 800ae66:	b151      	cbz	r1, 800ae7e <_dtoa_r+0x5e>
 800ae68:	685a      	ldr	r2, [r3, #4]
 800ae6a:	604a      	str	r2, [r1, #4]
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	4093      	lsls	r3, r2
 800ae70:	608b      	str	r3, [r1, #8]
 800ae72:	4620      	mov	r0, r4
 800ae74:	f001 f990 	bl	800c198 <_Bfree>
 800ae78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	601a      	str	r2, [r3, #0]
 800ae7e:	1e3b      	subs	r3, r7, #0
 800ae80:	bfaa      	itet	ge
 800ae82:	2300      	movge	r3, #0
 800ae84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ae88:	f8c8 3000 	strge.w	r3, [r8]
 800ae8c:	4b9a      	ldr	r3, [pc, #616]	; (800b0f8 <_dtoa_r+0x2d8>)
 800ae8e:	bfbc      	itt	lt
 800ae90:	2201      	movlt	r2, #1
 800ae92:	f8c8 2000 	strlt.w	r2, [r8]
 800ae96:	ea33 030b 	bics.w	r3, r3, fp
 800ae9a:	d11b      	bne.n	800aed4 <_dtoa_r+0xb4>
 800ae9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae9e:	f242 730f 	movw	r3, #9999	; 0x270f
 800aea2:	6013      	str	r3, [r2, #0]
 800aea4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aea8:	4333      	orrs	r3, r6
 800aeaa:	f000 8592 	beq.w	800b9d2 <_dtoa_r+0xbb2>
 800aeae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aeb0:	b963      	cbnz	r3, 800aecc <_dtoa_r+0xac>
 800aeb2:	4b92      	ldr	r3, [pc, #584]	; (800b0fc <_dtoa_r+0x2dc>)
 800aeb4:	e022      	b.n	800aefc <_dtoa_r+0xdc>
 800aeb6:	4b92      	ldr	r3, [pc, #584]	; (800b100 <_dtoa_r+0x2e0>)
 800aeb8:	9301      	str	r3, [sp, #4]
 800aeba:	3308      	adds	r3, #8
 800aebc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aebe:	6013      	str	r3, [r2, #0]
 800aec0:	9801      	ldr	r0, [sp, #4]
 800aec2:	b013      	add	sp, #76	; 0x4c
 800aec4:	ecbd 8b04 	vpop	{d8-d9}
 800aec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aecc:	4b8b      	ldr	r3, [pc, #556]	; (800b0fc <_dtoa_r+0x2dc>)
 800aece:	9301      	str	r3, [sp, #4]
 800aed0:	3303      	adds	r3, #3
 800aed2:	e7f3      	b.n	800aebc <_dtoa_r+0x9c>
 800aed4:	2200      	movs	r2, #0
 800aed6:	2300      	movs	r3, #0
 800aed8:	4650      	mov	r0, sl
 800aeda:	4659      	mov	r1, fp
 800aedc:	f7f5 fdf4 	bl	8000ac8 <__aeabi_dcmpeq>
 800aee0:	ec4b ab19 	vmov	d9, sl, fp
 800aee4:	4680      	mov	r8, r0
 800aee6:	b158      	cbz	r0, 800af00 <_dtoa_r+0xe0>
 800aee8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aeea:	2301      	movs	r3, #1
 800aeec:	6013      	str	r3, [r2, #0]
 800aeee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f000 856b 	beq.w	800b9cc <_dtoa_r+0xbac>
 800aef6:	4883      	ldr	r0, [pc, #524]	; (800b104 <_dtoa_r+0x2e4>)
 800aef8:	6018      	str	r0, [r3, #0]
 800aefa:	1e43      	subs	r3, r0, #1
 800aefc:	9301      	str	r3, [sp, #4]
 800aefe:	e7df      	b.n	800aec0 <_dtoa_r+0xa0>
 800af00:	ec4b ab10 	vmov	d0, sl, fp
 800af04:	aa10      	add	r2, sp, #64	; 0x40
 800af06:	a911      	add	r1, sp, #68	; 0x44
 800af08:	4620      	mov	r0, r4
 800af0a:	f001 fcf3 	bl	800c8f4 <__d2b>
 800af0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800af12:	ee08 0a10 	vmov	s16, r0
 800af16:	2d00      	cmp	r5, #0
 800af18:	f000 8084 	beq.w	800b024 <_dtoa_r+0x204>
 800af1c:	ee19 3a90 	vmov	r3, s19
 800af20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800af28:	4656      	mov	r6, sl
 800af2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800af2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800af32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800af36:	4b74      	ldr	r3, [pc, #464]	; (800b108 <_dtoa_r+0x2e8>)
 800af38:	2200      	movs	r2, #0
 800af3a:	4630      	mov	r0, r6
 800af3c:	4639      	mov	r1, r7
 800af3e:	f7f5 f9a3 	bl	8000288 <__aeabi_dsub>
 800af42:	a365      	add	r3, pc, #404	; (adr r3, 800b0d8 <_dtoa_r+0x2b8>)
 800af44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af48:	f7f5 fb56 	bl	80005f8 <__aeabi_dmul>
 800af4c:	a364      	add	r3, pc, #400	; (adr r3, 800b0e0 <_dtoa_r+0x2c0>)
 800af4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af52:	f7f5 f99b 	bl	800028c <__adddf3>
 800af56:	4606      	mov	r6, r0
 800af58:	4628      	mov	r0, r5
 800af5a:	460f      	mov	r7, r1
 800af5c:	f7f5 fae2 	bl	8000524 <__aeabi_i2d>
 800af60:	a361      	add	r3, pc, #388	; (adr r3, 800b0e8 <_dtoa_r+0x2c8>)
 800af62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af66:	f7f5 fb47 	bl	80005f8 <__aeabi_dmul>
 800af6a:	4602      	mov	r2, r0
 800af6c:	460b      	mov	r3, r1
 800af6e:	4630      	mov	r0, r6
 800af70:	4639      	mov	r1, r7
 800af72:	f7f5 f98b 	bl	800028c <__adddf3>
 800af76:	4606      	mov	r6, r0
 800af78:	460f      	mov	r7, r1
 800af7a:	f7f5 fded 	bl	8000b58 <__aeabi_d2iz>
 800af7e:	2200      	movs	r2, #0
 800af80:	9000      	str	r0, [sp, #0]
 800af82:	2300      	movs	r3, #0
 800af84:	4630      	mov	r0, r6
 800af86:	4639      	mov	r1, r7
 800af88:	f7f5 fda8 	bl	8000adc <__aeabi_dcmplt>
 800af8c:	b150      	cbz	r0, 800afa4 <_dtoa_r+0x184>
 800af8e:	9800      	ldr	r0, [sp, #0]
 800af90:	f7f5 fac8 	bl	8000524 <__aeabi_i2d>
 800af94:	4632      	mov	r2, r6
 800af96:	463b      	mov	r3, r7
 800af98:	f7f5 fd96 	bl	8000ac8 <__aeabi_dcmpeq>
 800af9c:	b910      	cbnz	r0, 800afa4 <_dtoa_r+0x184>
 800af9e:	9b00      	ldr	r3, [sp, #0]
 800afa0:	3b01      	subs	r3, #1
 800afa2:	9300      	str	r3, [sp, #0]
 800afa4:	9b00      	ldr	r3, [sp, #0]
 800afa6:	2b16      	cmp	r3, #22
 800afa8:	d85a      	bhi.n	800b060 <_dtoa_r+0x240>
 800afaa:	9a00      	ldr	r2, [sp, #0]
 800afac:	4b57      	ldr	r3, [pc, #348]	; (800b10c <_dtoa_r+0x2ec>)
 800afae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb6:	ec51 0b19 	vmov	r0, r1, d9
 800afba:	f7f5 fd8f 	bl	8000adc <__aeabi_dcmplt>
 800afbe:	2800      	cmp	r0, #0
 800afc0:	d050      	beq.n	800b064 <_dtoa_r+0x244>
 800afc2:	9b00      	ldr	r3, [sp, #0]
 800afc4:	3b01      	subs	r3, #1
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	2300      	movs	r3, #0
 800afca:	930b      	str	r3, [sp, #44]	; 0x2c
 800afcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afce:	1b5d      	subs	r5, r3, r5
 800afd0:	1e6b      	subs	r3, r5, #1
 800afd2:	9305      	str	r3, [sp, #20]
 800afd4:	bf45      	ittet	mi
 800afd6:	f1c5 0301 	rsbmi	r3, r5, #1
 800afda:	9304      	strmi	r3, [sp, #16]
 800afdc:	2300      	movpl	r3, #0
 800afde:	2300      	movmi	r3, #0
 800afe0:	bf4c      	ite	mi
 800afe2:	9305      	strmi	r3, [sp, #20]
 800afe4:	9304      	strpl	r3, [sp, #16]
 800afe6:	9b00      	ldr	r3, [sp, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	db3d      	blt.n	800b068 <_dtoa_r+0x248>
 800afec:	9b05      	ldr	r3, [sp, #20]
 800afee:	9a00      	ldr	r2, [sp, #0]
 800aff0:	920a      	str	r2, [sp, #40]	; 0x28
 800aff2:	4413      	add	r3, r2
 800aff4:	9305      	str	r3, [sp, #20]
 800aff6:	2300      	movs	r3, #0
 800aff8:	9307      	str	r3, [sp, #28]
 800affa:	9b06      	ldr	r3, [sp, #24]
 800affc:	2b09      	cmp	r3, #9
 800affe:	f200 8089 	bhi.w	800b114 <_dtoa_r+0x2f4>
 800b002:	2b05      	cmp	r3, #5
 800b004:	bfc4      	itt	gt
 800b006:	3b04      	subgt	r3, #4
 800b008:	9306      	strgt	r3, [sp, #24]
 800b00a:	9b06      	ldr	r3, [sp, #24]
 800b00c:	f1a3 0302 	sub.w	r3, r3, #2
 800b010:	bfcc      	ite	gt
 800b012:	2500      	movgt	r5, #0
 800b014:	2501      	movle	r5, #1
 800b016:	2b03      	cmp	r3, #3
 800b018:	f200 8087 	bhi.w	800b12a <_dtoa_r+0x30a>
 800b01c:	e8df f003 	tbb	[pc, r3]
 800b020:	59383a2d 	.word	0x59383a2d
 800b024:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b028:	441d      	add	r5, r3
 800b02a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b02e:	2b20      	cmp	r3, #32
 800b030:	bfc1      	itttt	gt
 800b032:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b036:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b03a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b03e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b042:	bfda      	itte	le
 800b044:	f1c3 0320 	rsble	r3, r3, #32
 800b048:	fa06 f003 	lslle.w	r0, r6, r3
 800b04c:	4318      	orrgt	r0, r3
 800b04e:	f7f5 fa59 	bl	8000504 <__aeabi_ui2d>
 800b052:	2301      	movs	r3, #1
 800b054:	4606      	mov	r6, r0
 800b056:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b05a:	3d01      	subs	r5, #1
 800b05c:	930e      	str	r3, [sp, #56]	; 0x38
 800b05e:	e76a      	b.n	800af36 <_dtoa_r+0x116>
 800b060:	2301      	movs	r3, #1
 800b062:	e7b2      	b.n	800afca <_dtoa_r+0x1aa>
 800b064:	900b      	str	r0, [sp, #44]	; 0x2c
 800b066:	e7b1      	b.n	800afcc <_dtoa_r+0x1ac>
 800b068:	9b04      	ldr	r3, [sp, #16]
 800b06a:	9a00      	ldr	r2, [sp, #0]
 800b06c:	1a9b      	subs	r3, r3, r2
 800b06e:	9304      	str	r3, [sp, #16]
 800b070:	4253      	negs	r3, r2
 800b072:	9307      	str	r3, [sp, #28]
 800b074:	2300      	movs	r3, #0
 800b076:	930a      	str	r3, [sp, #40]	; 0x28
 800b078:	e7bf      	b.n	800affa <_dtoa_r+0x1da>
 800b07a:	2300      	movs	r3, #0
 800b07c:	9308      	str	r3, [sp, #32]
 800b07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b080:	2b00      	cmp	r3, #0
 800b082:	dc55      	bgt.n	800b130 <_dtoa_r+0x310>
 800b084:	2301      	movs	r3, #1
 800b086:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b08a:	461a      	mov	r2, r3
 800b08c:	9209      	str	r2, [sp, #36]	; 0x24
 800b08e:	e00c      	b.n	800b0aa <_dtoa_r+0x28a>
 800b090:	2301      	movs	r3, #1
 800b092:	e7f3      	b.n	800b07c <_dtoa_r+0x25c>
 800b094:	2300      	movs	r3, #0
 800b096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b098:	9308      	str	r3, [sp, #32]
 800b09a:	9b00      	ldr	r3, [sp, #0]
 800b09c:	4413      	add	r3, r2
 800b09e:	9302      	str	r3, [sp, #8]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	9303      	str	r3, [sp, #12]
 800b0a6:	bfb8      	it	lt
 800b0a8:	2301      	movlt	r3, #1
 800b0aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	6042      	str	r2, [r0, #4]
 800b0b0:	2204      	movs	r2, #4
 800b0b2:	f102 0614 	add.w	r6, r2, #20
 800b0b6:	429e      	cmp	r6, r3
 800b0b8:	6841      	ldr	r1, [r0, #4]
 800b0ba:	d93d      	bls.n	800b138 <_dtoa_r+0x318>
 800b0bc:	4620      	mov	r0, r4
 800b0be:	f001 f82b 	bl	800c118 <_Balloc>
 800b0c2:	9001      	str	r0, [sp, #4]
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	d13b      	bne.n	800b140 <_dtoa_r+0x320>
 800b0c8:	4b11      	ldr	r3, [pc, #68]	; (800b110 <_dtoa_r+0x2f0>)
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b0d0:	e6c0      	b.n	800ae54 <_dtoa_r+0x34>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e7df      	b.n	800b096 <_dtoa_r+0x276>
 800b0d6:	bf00      	nop
 800b0d8:	636f4361 	.word	0x636f4361
 800b0dc:	3fd287a7 	.word	0x3fd287a7
 800b0e0:	8b60c8b3 	.word	0x8b60c8b3
 800b0e4:	3fc68a28 	.word	0x3fc68a28
 800b0e8:	509f79fb 	.word	0x509f79fb
 800b0ec:	3fd34413 	.word	0x3fd34413
 800b0f0:	0800e00e 	.word	0x0800e00e
 800b0f4:	0800e025 	.word	0x0800e025
 800b0f8:	7ff00000 	.word	0x7ff00000
 800b0fc:	0800e00a 	.word	0x0800e00a
 800b100:	0800e001 	.word	0x0800e001
 800b104:	0800de81 	.word	0x0800de81
 800b108:	3ff80000 	.word	0x3ff80000
 800b10c:	0800e190 	.word	0x0800e190
 800b110:	0800e080 	.word	0x0800e080
 800b114:	2501      	movs	r5, #1
 800b116:	2300      	movs	r3, #0
 800b118:	9306      	str	r3, [sp, #24]
 800b11a:	9508      	str	r5, [sp, #32]
 800b11c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b120:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b124:	2200      	movs	r2, #0
 800b126:	2312      	movs	r3, #18
 800b128:	e7b0      	b.n	800b08c <_dtoa_r+0x26c>
 800b12a:	2301      	movs	r3, #1
 800b12c:	9308      	str	r3, [sp, #32]
 800b12e:	e7f5      	b.n	800b11c <_dtoa_r+0x2fc>
 800b130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b132:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b136:	e7b8      	b.n	800b0aa <_dtoa_r+0x28a>
 800b138:	3101      	adds	r1, #1
 800b13a:	6041      	str	r1, [r0, #4]
 800b13c:	0052      	lsls	r2, r2, #1
 800b13e:	e7b8      	b.n	800b0b2 <_dtoa_r+0x292>
 800b140:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b142:	9a01      	ldr	r2, [sp, #4]
 800b144:	601a      	str	r2, [r3, #0]
 800b146:	9b03      	ldr	r3, [sp, #12]
 800b148:	2b0e      	cmp	r3, #14
 800b14a:	f200 809d 	bhi.w	800b288 <_dtoa_r+0x468>
 800b14e:	2d00      	cmp	r5, #0
 800b150:	f000 809a 	beq.w	800b288 <_dtoa_r+0x468>
 800b154:	9b00      	ldr	r3, [sp, #0]
 800b156:	2b00      	cmp	r3, #0
 800b158:	dd32      	ble.n	800b1c0 <_dtoa_r+0x3a0>
 800b15a:	4ab7      	ldr	r2, [pc, #732]	; (800b438 <_dtoa_r+0x618>)
 800b15c:	f003 030f 	and.w	r3, r3, #15
 800b160:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b164:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b168:	9b00      	ldr	r3, [sp, #0]
 800b16a:	05d8      	lsls	r0, r3, #23
 800b16c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b170:	d516      	bpl.n	800b1a0 <_dtoa_r+0x380>
 800b172:	4bb2      	ldr	r3, [pc, #712]	; (800b43c <_dtoa_r+0x61c>)
 800b174:	ec51 0b19 	vmov	r0, r1, d9
 800b178:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b17c:	f7f5 fb66 	bl	800084c <__aeabi_ddiv>
 800b180:	f007 070f 	and.w	r7, r7, #15
 800b184:	4682      	mov	sl, r0
 800b186:	468b      	mov	fp, r1
 800b188:	2503      	movs	r5, #3
 800b18a:	4eac      	ldr	r6, [pc, #688]	; (800b43c <_dtoa_r+0x61c>)
 800b18c:	b957      	cbnz	r7, 800b1a4 <_dtoa_r+0x384>
 800b18e:	4642      	mov	r2, r8
 800b190:	464b      	mov	r3, r9
 800b192:	4650      	mov	r0, sl
 800b194:	4659      	mov	r1, fp
 800b196:	f7f5 fb59 	bl	800084c <__aeabi_ddiv>
 800b19a:	4682      	mov	sl, r0
 800b19c:	468b      	mov	fp, r1
 800b19e:	e028      	b.n	800b1f2 <_dtoa_r+0x3d2>
 800b1a0:	2502      	movs	r5, #2
 800b1a2:	e7f2      	b.n	800b18a <_dtoa_r+0x36a>
 800b1a4:	07f9      	lsls	r1, r7, #31
 800b1a6:	d508      	bpl.n	800b1ba <_dtoa_r+0x39a>
 800b1a8:	4640      	mov	r0, r8
 800b1aa:	4649      	mov	r1, r9
 800b1ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b1b0:	f7f5 fa22 	bl	80005f8 <__aeabi_dmul>
 800b1b4:	3501      	adds	r5, #1
 800b1b6:	4680      	mov	r8, r0
 800b1b8:	4689      	mov	r9, r1
 800b1ba:	107f      	asrs	r7, r7, #1
 800b1bc:	3608      	adds	r6, #8
 800b1be:	e7e5      	b.n	800b18c <_dtoa_r+0x36c>
 800b1c0:	f000 809b 	beq.w	800b2fa <_dtoa_r+0x4da>
 800b1c4:	9b00      	ldr	r3, [sp, #0]
 800b1c6:	4f9d      	ldr	r7, [pc, #628]	; (800b43c <_dtoa_r+0x61c>)
 800b1c8:	425e      	negs	r6, r3
 800b1ca:	4b9b      	ldr	r3, [pc, #620]	; (800b438 <_dtoa_r+0x618>)
 800b1cc:	f006 020f 	and.w	r2, r6, #15
 800b1d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d8:	ec51 0b19 	vmov	r0, r1, d9
 800b1dc:	f7f5 fa0c 	bl	80005f8 <__aeabi_dmul>
 800b1e0:	1136      	asrs	r6, r6, #4
 800b1e2:	4682      	mov	sl, r0
 800b1e4:	468b      	mov	fp, r1
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	2502      	movs	r5, #2
 800b1ea:	2e00      	cmp	r6, #0
 800b1ec:	d17a      	bne.n	800b2e4 <_dtoa_r+0x4c4>
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1d3      	bne.n	800b19a <_dtoa_r+0x37a>
 800b1f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f000 8082 	beq.w	800b2fe <_dtoa_r+0x4de>
 800b1fa:	4b91      	ldr	r3, [pc, #580]	; (800b440 <_dtoa_r+0x620>)
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	4650      	mov	r0, sl
 800b200:	4659      	mov	r1, fp
 800b202:	f7f5 fc6b 	bl	8000adc <__aeabi_dcmplt>
 800b206:	2800      	cmp	r0, #0
 800b208:	d079      	beq.n	800b2fe <_dtoa_r+0x4de>
 800b20a:	9b03      	ldr	r3, [sp, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d076      	beq.n	800b2fe <_dtoa_r+0x4de>
 800b210:	9b02      	ldr	r3, [sp, #8]
 800b212:	2b00      	cmp	r3, #0
 800b214:	dd36      	ble.n	800b284 <_dtoa_r+0x464>
 800b216:	9b00      	ldr	r3, [sp, #0]
 800b218:	4650      	mov	r0, sl
 800b21a:	4659      	mov	r1, fp
 800b21c:	1e5f      	subs	r7, r3, #1
 800b21e:	2200      	movs	r2, #0
 800b220:	4b88      	ldr	r3, [pc, #544]	; (800b444 <_dtoa_r+0x624>)
 800b222:	f7f5 f9e9 	bl	80005f8 <__aeabi_dmul>
 800b226:	9e02      	ldr	r6, [sp, #8]
 800b228:	4682      	mov	sl, r0
 800b22a:	468b      	mov	fp, r1
 800b22c:	3501      	adds	r5, #1
 800b22e:	4628      	mov	r0, r5
 800b230:	f7f5 f978 	bl	8000524 <__aeabi_i2d>
 800b234:	4652      	mov	r2, sl
 800b236:	465b      	mov	r3, fp
 800b238:	f7f5 f9de 	bl	80005f8 <__aeabi_dmul>
 800b23c:	4b82      	ldr	r3, [pc, #520]	; (800b448 <_dtoa_r+0x628>)
 800b23e:	2200      	movs	r2, #0
 800b240:	f7f5 f824 	bl	800028c <__adddf3>
 800b244:	46d0      	mov	r8, sl
 800b246:	46d9      	mov	r9, fp
 800b248:	4682      	mov	sl, r0
 800b24a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b24e:	2e00      	cmp	r6, #0
 800b250:	d158      	bne.n	800b304 <_dtoa_r+0x4e4>
 800b252:	4b7e      	ldr	r3, [pc, #504]	; (800b44c <_dtoa_r+0x62c>)
 800b254:	2200      	movs	r2, #0
 800b256:	4640      	mov	r0, r8
 800b258:	4649      	mov	r1, r9
 800b25a:	f7f5 f815 	bl	8000288 <__aeabi_dsub>
 800b25e:	4652      	mov	r2, sl
 800b260:	465b      	mov	r3, fp
 800b262:	4680      	mov	r8, r0
 800b264:	4689      	mov	r9, r1
 800b266:	f7f5 fc57 	bl	8000b18 <__aeabi_dcmpgt>
 800b26a:	2800      	cmp	r0, #0
 800b26c:	f040 8295 	bne.w	800b79a <_dtoa_r+0x97a>
 800b270:	4652      	mov	r2, sl
 800b272:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b276:	4640      	mov	r0, r8
 800b278:	4649      	mov	r1, r9
 800b27a:	f7f5 fc2f 	bl	8000adc <__aeabi_dcmplt>
 800b27e:	2800      	cmp	r0, #0
 800b280:	f040 8289 	bne.w	800b796 <_dtoa_r+0x976>
 800b284:	ec5b ab19 	vmov	sl, fp, d9
 800b288:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f2c0 8148 	blt.w	800b520 <_dtoa_r+0x700>
 800b290:	9a00      	ldr	r2, [sp, #0]
 800b292:	2a0e      	cmp	r2, #14
 800b294:	f300 8144 	bgt.w	800b520 <_dtoa_r+0x700>
 800b298:	4b67      	ldr	r3, [pc, #412]	; (800b438 <_dtoa_r+0x618>)
 800b29a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b29e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f280 80d5 	bge.w	800b454 <_dtoa_r+0x634>
 800b2aa:	9b03      	ldr	r3, [sp, #12]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	f300 80d1 	bgt.w	800b454 <_dtoa_r+0x634>
 800b2b2:	f040 826f 	bne.w	800b794 <_dtoa_r+0x974>
 800b2b6:	4b65      	ldr	r3, [pc, #404]	; (800b44c <_dtoa_r+0x62c>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	4640      	mov	r0, r8
 800b2bc:	4649      	mov	r1, r9
 800b2be:	f7f5 f99b 	bl	80005f8 <__aeabi_dmul>
 800b2c2:	4652      	mov	r2, sl
 800b2c4:	465b      	mov	r3, fp
 800b2c6:	f7f5 fc1d 	bl	8000b04 <__aeabi_dcmpge>
 800b2ca:	9e03      	ldr	r6, [sp, #12]
 800b2cc:	4637      	mov	r7, r6
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	f040 8245 	bne.w	800b75e <_dtoa_r+0x93e>
 800b2d4:	9d01      	ldr	r5, [sp, #4]
 800b2d6:	2331      	movs	r3, #49	; 0x31
 800b2d8:	f805 3b01 	strb.w	r3, [r5], #1
 800b2dc:	9b00      	ldr	r3, [sp, #0]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	9300      	str	r3, [sp, #0]
 800b2e2:	e240      	b.n	800b766 <_dtoa_r+0x946>
 800b2e4:	07f2      	lsls	r2, r6, #31
 800b2e6:	d505      	bpl.n	800b2f4 <_dtoa_r+0x4d4>
 800b2e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2ec:	f7f5 f984 	bl	80005f8 <__aeabi_dmul>
 800b2f0:	3501      	adds	r5, #1
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	1076      	asrs	r6, r6, #1
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	e777      	b.n	800b1ea <_dtoa_r+0x3ca>
 800b2fa:	2502      	movs	r5, #2
 800b2fc:	e779      	b.n	800b1f2 <_dtoa_r+0x3d2>
 800b2fe:	9f00      	ldr	r7, [sp, #0]
 800b300:	9e03      	ldr	r6, [sp, #12]
 800b302:	e794      	b.n	800b22e <_dtoa_r+0x40e>
 800b304:	9901      	ldr	r1, [sp, #4]
 800b306:	4b4c      	ldr	r3, [pc, #304]	; (800b438 <_dtoa_r+0x618>)
 800b308:	4431      	add	r1, r6
 800b30a:	910d      	str	r1, [sp, #52]	; 0x34
 800b30c:	9908      	ldr	r1, [sp, #32]
 800b30e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b312:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b316:	2900      	cmp	r1, #0
 800b318:	d043      	beq.n	800b3a2 <_dtoa_r+0x582>
 800b31a:	494d      	ldr	r1, [pc, #308]	; (800b450 <_dtoa_r+0x630>)
 800b31c:	2000      	movs	r0, #0
 800b31e:	f7f5 fa95 	bl	800084c <__aeabi_ddiv>
 800b322:	4652      	mov	r2, sl
 800b324:	465b      	mov	r3, fp
 800b326:	f7f4 ffaf 	bl	8000288 <__aeabi_dsub>
 800b32a:	9d01      	ldr	r5, [sp, #4]
 800b32c:	4682      	mov	sl, r0
 800b32e:	468b      	mov	fp, r1
 800b330:	4649      	mov	r1, r9
 800b332:	4640      	mov	r0, r8
 800b334:	f7f5 fc10 	bl	8000b58 <__aeabi_d2iz>
 800b338:	4606      	mov	r6, r0
 800b33a:	f7f5 f8f3 	bl	8000524 <__aeabi_i2d>
 800b33e:	4602      	mov	r2, r0
 800b340:	460b      	mov	r3, r1
 800b342:	4640      	mov	r0, r8
 800b344:	4649      	mov	r1, r9
 800b346:	f7f4 ff9f 	bl	8000288 <__aeabi_dsub>
 800b34a:	3630      	adds	r6, #48	; 0x30
 800b34c:	f805 6b01 	strb.w	r6, [r5], #1
 800b350:	4652      	mov	r2, sl
 800b352:	465b      	mov	r3, fp
 800b354:	4680      	mov	r8, r0
 800b356:	4689      	mov	r9, r1
 800b358:	f7f5 fbc0 	bl	8000adc <__aeabi_dcmplt>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d163      	bne.n	800b428 <_dtoa_r+0x608>
 800b360:	4642      	mov	r2, r8
 800b362:	464b      	mov	r3, r9
 800b364:	4936      	ldr	r1, [pc, #216]	; (800b440 <_dtoa_r+0x620>)
 800b366:	2000      	movs	r0, #0
 800b368:	f7f4 ff8e 	bl	8000288 <__aeabi_dsub>
 800b36c:	4652      	mov	r2, sl
 800b36e:	465b      	mov	r3, fp
 800b370:	f7f5 fbb4 	bl	8000adc <__aeabi_dcmplt>
 800b374:	2800      	cmp	r0, #0
 800b376:	f040 80b5 	bne.w	800b4e4 <_dtoa_r+0x6c4>
 800b37a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b37c:	429d      	cmp	r5, r3
 800b37e:	d081      	beq.n	800b284 <_dtoa_r+0x464>
 800b380:	4b30      	ldr	r3, [pc, #192]	; (800b444 <_dtoa_r+0x624>)
 800b382:	2200      	movs	r2, #0
 800b384:	4650      	mov	r0, sl
 800b386:	4659      	mov	r1, fp
 800b388:	f7f5 f936 	bl	80005f8 <__aeabi_dmul>
 800b38c:	4b2d      	ldr	r3, [pc, #180]	; (800b444 <_dtoa_r+0x624>)
 800b38e:	4682      	mov	sl, r0
 800b390:	468b      	mov	fp, r1
 800b392:	4640      	mov	r0, r8
 800b394:	4649      	mov	r1, r9
 800b396:	2200      	movs	r2, #0
 800b398:	f7f5 f92e 	bl	80005f8 <__aeabi_dmul>
 800b39c:	4680      	mov	r8, r0
 800b39e:	4689      	mov	r9, r1
 800b3a0:	e7c6      	b.n	800b330 <_dtoa_r+0x510>
 800b3a2:	4650      	mov	r0, sl
 800b3a4:	4659      	mov	r1, fp
 800b3a6:	f7f5 f927 	bl	80005f8 <__aeabi_dmul>
 800b3aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3ac:	9d01      	ldr	r5, [sp, #4]
 800b3ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3b0:	4682      	mov	sl, r0
 800b3b2:	468b      	mov	fp, r1
 800b3b4:	4649      	mov	r1, r9
 800b3b6:	4640      	mov	r0, r8
 800b3b8:	f7f5 fbce 	bl	8000b58 <__aeabi_d2iz>
 800b3bc:	4606      	mov	r6, r0
 800b3be:	f7f5 f8b1 	bl	8000524 <__aeabi_i2d>
 800b3c2:	3630      	adds	r6, #48	; 0x30
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	4640      	mov	r0, r8
 800b3ca:	4649      	mov	r1, r9
 800b3cc:	f7f4 ff5c 	bl	8000288 <__aeabi_dsub>
 800b3d0:	f805 6b01 	strb.w	r6, [r5], #1
 800b3d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3d6:	429d      	cmp	r5, r3
 800b3d8:	4680      	mov	r8, r0
 800b3da:	4689      	mov	r9, r1
 800b3dc:	f04f 0200 	mov.w	r2, #0
 800b3e0:	d124      	bne.n	800b42c <_dtoa_r+0x60c>
 800b3e2:	4b1b      	ldr	r3, [pc, #108]	; (800b450 <_dtoa_r+0x630>)
 800b3e4:	4650      	mov	r0, sl
 800b3e6:	4659      	mov	r1, fp
 800b3e8:	f7f4 ff50 	bl	800028c <__adddf3>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	4640      	mov	r0, r8
 800b3f2:	4649      	mov	r1, r9
 800b3f4:	f7f5 fb90 	bl	8000b18 <__aeabi_dcmpgt>
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	d173      	bne.n	800b4e4 <_dtoa_r+0x6c4>
 800b3fc:	4652      	mov	r2, sl
 800b3fe:	465b      	mov	r3, fp
 800b400:	4913      	ldr	r1, [pc, #76]	; (800b450 <_dtoa_r+0x630>)
 800b402:	2000      	movs	r0, #0
 800b404:	f7f4 ff40 	bl	8000288 <__aeabi_dsub>
 800b408:	4602      	mov	r2, r0
 800b40a:	460b      	mov	r3, r1
 800b40c:	4640      	mov	r0, r8
 800b40e:	4649      	mov	r1, r9
 800b410:	f7f5 fb64 	bl	8000adc <__aeabi_dcmplt>
 800b414:	2800      	cmp	r0, #0
 800b416:	f43f af35 	beq.w	800b284 <_dtoa_r+0x464>
 800b41a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b41c:	1e6b      	subs	r3, r5, #1
 800b41e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b420:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b424:	2b30      	cmp	r3, #48	; 0x30
 800b426:	d0f8      	beq.n	800b41a <_dtoa_r+0x5fa>
 800b428:	9700      	str	r7, [sp, #0]
 800b42a:	e049      	b.n	800b4c0 <_dtoa_r+0x6a0>
 800b42c:	4b05      	ldr	r3, [pc, #20]	; (800b444 <_dtoa_r+0x624>)
 800b42e:	f7f5 f8e3 	bl	80005f8 <__aeabi_dmul>
 800b432:	4680      	mov	r8, r0
 800b434:	4689      	mov	r9, r1
 800b436:	e7bd      	b.n	800b3b4 <_dtoa_r+0x594>
 800b438:	0800e190 	.word	0x0800e190
 800b43c:	0800e168 	.word	0x0800e168
 800b440:	3ff00000 	.word	0x3ff00000
 800b444:	40240000 	.word	0x40240000
 800b448:	401c0000 	.word	0x401c0000
 800b44c:	40140000 	.word	0x40140000
 800b450:	3fe00000 	.word	0x3fe00000
 800b454:	9d01      	ldr	r5, [sp, #4]
 800b456:	4656      	mov	r6, sl
 800b458:	465f      	mov	r7, fp
 800b45a:	4642      	mov	r2, r8
 800b45c:	464b      	mov	r3, r9
 800b45e:	4630      	mov	r0, r6
 800b460:	4639      	mov	r1, r7
 800b462:	f7f5 f9f3 	bl	800084c <__aeabi_ddiv>
 800b466:	f7f5 fb77 	bl	8000b58 <__aeabi_d2iz>
 800b46a:	4682      	mov	sl, r0
 800b46c:	f7f5 f85a 	bl	8000524 <__aeabi_i2d>
 800b470:	4642      	mov	r2, r8
 800b472:	464b      	mov	r3, r9
 800b474:	f7f5 f8c0 	bl	80005f8 <__aeabi_dmul>
 800b478:	4602      	mov	r2, r0
 800b47a:	460b      	mov	r3, r1
 800b47c:	4630      	mov	r0, r6
 800b47e:	4639      	mov	r1, r7
 800b480:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b484:	f7f4 ff00 	bl	8000288 <__aeabi_dsub>
 800b488:	f805 6b01 	strb.w	r6, [r5], #1
 800b48c:	9e01      	ldr	r6, [sp, #4]
 800b48e:	9f03      	ldr	r7, [sp, #12]
 800b490:	1bae      	subs	r6, r5, r6
 800b492:	42b7      	cmp	r7, r6
 800b494:	4602      	mov	r2, r0
 800b496:	460b      	mov	r3, r1
 800b498:	d135      	bne.n	800b506 <_dtoa_r+0x6e6>
 800b49a:	f7f4 fef7 	bl	800028c <__adddf3>
 800b49e:	4642      	mov	r2, r8
 800b4a0:	464b      	mov	r3, r9
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	460f      	mov	r7, r1
 800b4a6:	f7f5 fb37 	bl	8000b18 <__aeabi_dcmpgt>
 800b4aa:	b9d0      	cbnz	r0, 800b4e2 <_dtoa_r+0x6c2>
 800b4ac:	4642      	mov	r2, r8
 800b4ae:	464b      	mov	r3, r9
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	4639      	mov	r1, r7
 800b4b4:	f7f5 fb08 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4b8:	b110      	cbz	r0, 800b4c0 <_dtoa_r+0x6a0>
 800b4ba:	f01a 0f01 	tst.w	sl, #1
 800b4be:	d110      	bne.n	800b4e2 <_dtoa_r+0x6c2>
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	ee18 1a10 	vmov	r1, s16
 800b4c6:	f000 fe67 	bl	800c198 <_Bfree>
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	9800      	ldr	r0, [sp, #0]
 800b4ce:	702b      	strb	r3, [r5, #0]
 800b4d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4d2:	3001      	adds	r0, #1
 800b4d4:	6018      	str	r0, [r3, #0]
 800b4d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f43f acf1 	beq.w	800aec0 <_dtoa_r+0xa0>
 800b4de:	601d      	str	r5, [r3, #0]
 800b4e0:	e4ee      	b.n	800aec0 <_dtoa_r+0xa0>
 800b4e2:	9f00      	ldr	r7, [sp, #0]
 800b4e4:	462b      	mov	r3, r5
 800b4e6:	461d      	mov	r5, r3
 800b4e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4ec:	2a39      	cmp	r2, #57	; 0x39
 800b4ee:	d106      	bne.n	800b4fe <_dtoa_r+0x6de>
 800b4f0:	9a01      	ldr	r2, [sp, #4]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d1f7      	bne.n	800b4e6 <_dtoa_r+0x6c6>
 800b4f6:	9901      	ldr	r1, [sp, #4]
 800b4f8:	2230      	movs	r2, #48	; 0x30
 800b4fa:	3701      	adds	r7, #1
 800b4fc:	700a      	strb	r2, [r1, #0]
 800b4fe:	781a      	ldrb	r2, [r3, #0]
 800b500:	3201      	adds	r2, #1
 800b502:	701a      	strb	r2, [r3, #0]
 800b504:	e790      	b.n	800b428 <_dtoa_r+0x608>
 800b506:	4ba6      	ldr	r3, [pc, #664]	; (800b7a0 <_dtoa_r+0x980>)
 800b508:	2200      	movs	r2, #0
 800b50a:	f7f5 f875 	bl	80005f8 <__aeabi_dmul>
 800b50e:	2200      	movs	r2, #0
 800b510:	2300      	movs	r3, #0
 800b512:	4606      	mov	r6, r0
 800b514:	460f      	mov	r7, r1
 800b516:	f7f5 fad7 	bl	8000ac8 <__aeabi_dcmpeq>
 800b51a:	2800      	cmp	r0, #0
 800b51c:	d09d      	beq.n	800b45a <_dtoa_r+0x63a>
 800b51e:	e7cf      	b.n	800b4c0 <_dtoa_r+0x6a0>
 800b520:	9a08      	ldr	r2, [sp, #32]
 800b522:	2a00      	cmp	r2, #0
 800b524:	f000 80d7 	beq.w	800b6d6 <_dtoa_r+0x8b6>
 800b528:	9a06      	ldr	r2, [sp, #24]
 800b52a:	2a01      	cmp	r2, #1
 800b52c:	f300 80ba 	bgt.w	800b6a4 <_dtoa_r+0x884>
 800b530:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b532:	2a00      	cmp	r2, #0
 800b534:	f000 80b2 	beq.w	800b69c <_dtoa_r+0x87c>
 800b538:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b53c:	9e07      	ldr	r6, [sp, #28]
 800b53e:	9d04      	ldr	r5, [sp, #16]
 800b540:	9a04      	ldr	r2, [sp, #16]
 800b542:	441a      	add	r2, r3
 800b544:	9204      	str	r2, [sp, #16]
 800b546:	9a05      	ldr	r2, [sp, #20]
 800b548:	2101      	movs	r1, #1
 800b54a:	441a      	add	r2, r3
 800b54c:	4620      	mov	r0, r4
 800b54e:	9205      	str	r2, [sp, #20]
 800b550:	f000 ff24 	bl	800c39c <__i2b>
 800b554:	4607      	mov	r7, r0
 800b556:	2d00      	cmp	r5, #0
 800b558:	dd0c      	ble.n	800b574 <_dtoa_r+0x754>
 800b55a:	9b05      	ldr	r3, [sp, #20]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	dd09      	ble.n	800b574 <_dtoa_r+0x754>
 800b560:	42ab      	cmp	r3, r5
 800b562:	9a04      	ldr	r2, [sp, #16]
 800b564:	bfa8      	it	ge
 800b566:	462b      	movge	r3, r5
 800b568:	1ad2      	subs	r2, r2, r3
 800b56a:	9204      	str	r2, [sp, #16]
 800b56c:	9a05      	ldr	r2, [sp, #20]
 800b56e:	1aed      	subs	r5, r5, r3
 800b570:	1ad3      	subs	r3, r2, r3
 800b572:	9305      	str	r3, [sp, #20]
 800b574:	9b07      	ldr	r3, [sp, #28]
 800b576:	b31b      	cbz	r3, 800b5c0 <_dtoa_r+0x7a0>
 800b578:	9b08      	ldr	r3, [sp, #32]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	f000 80af 	beq.w	800b6de <_dtoa_r+0x8be>
 800b580:	2e00      	cmp	r6, #0
 800b582:	dd13      	ble.n	800b5ac <_dtoa_r+0x78c>
 800b584:	4639      	mov	r1, r7
 800b586:	4632      	mov	r2, r6
 800b588:	4620      	mov	r0, r4
 800b58a:	f000 ffc7 	bl	800c51c <__pow5mult>
 800b58e:	ee18 2a10 	vmov	r2, s16
 800b592:	4601      	mov	r1, r0
 800b594:	4607      	mov	r7, r0
 800b596:	4620      	mov	r0, r4
 800b598:	f000 ff16 	bl	800c3c8 <__multiply>
 800b59c:	ee18 1a10 	vmov	r1, s16
 800b5a0:	4680      	mov	r8, r0
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f000 fdf8 	bl	800c198 <_Bfree>
 800b5a8:	ee08 8a10 	vmov	s16, r8
 800b5ac:	9b07      	ldr	r3, [sp, #28]
 800b5ae:	1b9a      	subs	r2, r3, r6
 800b5b0:	d006      	beq.n	800b5c0 <_dtoa_r+0x7a0>
 800b5b2:	ee18 1a10 	vmov	r1, s16
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f000 ffb0 	bl	800c51c <__pow5mult>
 800b5bc:	ee08 0a10 	vmov	s16, r0
 800b5c0:	2101      	movs	r1, #1
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f000 feea 	bl	800c39c <__i2b>
 800b5c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	4606      	mov	r6, r0
 800b5ce:	f340 8088 	ble.w	800b6e2 <_dtoa_r+0x8c2>
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	4601      	mov	r1, r0
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	f000 ffa0 	bl	800c51c <__pow5mult>
 800b5dc:	9b06      	ldr	r3, [sp, #24]
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	4606      	mov	r6, r0
 800b5e2:	f340 8081 	ble.w	800b6e8 <_dtoa_r+0x8c8>
 800b5e6:	f04f 0800 	mov.w	r8, #0
 800b5ea:	6933      	ldr	r3, [r6, #16]
 800b5ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b5f0:	6918      	ldr	r0, [r3, #16]
 800b5f2:	f000 fe83 	bl	800c2fc <__hi0bits>
 800b5f6:	f1c0 0020 	rsb	r0, r0, #32
 800b5fa:	9b05      	ldr	r3, [sp, #20]
 800b5fc:	4418      	add	r0, r3
 800b5fe:	f010 001f 	ands.w	r0, r0, #31
 800b602:	f000 8092 	beq.w	800b72a <_dtoa_r+0x90a>
 800b606:	f1c0 0320 	rsb	r3, r0, #32
 800b60a:	2b04      	cmp	r3, #4
 800b60c:	f340 808a 	ble.w	800b724 <_dtoa_r+0x904>
 800b610:	f1c0 001c 	rsb	r0, r0, #28
 800b614:	9b04      	ldr	r3, [sp, #16]
 800b616:	4403      	add	r3, r0
 800b618:	9304      	str	r3, [sp, #16]
 800b61a:	9b05      	ldr	r3, [sp, #20]
 800b61c:	4403      	add	r3, r0
 800b61e:	4405      	add	r5, r0
 800b620:	9305      	str	r3, [sp, #20]
 800b622:	9b04      	ldr	r3, [sp, #16]
 800b624:	2b00      	cmp	r3, #0
 800b626:	dd07      	ble.n	800b638 <_dtoa_r+0x818>
 800b628:	ee18 1a10 	vmov	r1, s16
 800b62c:	461a      	mov	r2, r3
 800b62e:	4620      	mov	r0, r4
 800b630:	f000 ffce 	bl	800c5d0 <__lshift>
 800b634:	ee08 0a10 	vmov	s16, r0
 800b638:	9b05      	ldr	r3, [sp, #20]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	dd05      	ble.n	800b64a <_dtoa_r+0x82a>
 800b63e:	4631      	mov	r1, r6
 800b640:	461a      	mov	r2, r3
 800b642:	4620      	mov	r0, r4
 800b644:	f000 ffc4 	bl	800c5d0 <__lshift>
 800b648:	4606      	mov	r6, r0
 800b64a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d06e      	beq.n	800b72e <_dtoa_r+0x90e>
 800b650:	ee18 0a10 	vmov	r0, s16
 800b654:	4631      	mov	r1, r6
 800b656:	f001 f82b 	bl	800c6b0 <__mcmp>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	da67      	bge.n	800b72e <_dtoa_r+0x90e>
 800b65e:	9b00      	ldr	r3, [sp, #0]
 800b660:	3b01      	subs	r3, #1
 800b662:	ee18 1a10 	vmov	r1, s16
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	220a      	movs	r2, #10
 800b66a:	2300      	movs	r3, #0
 800b66c:	4620      	mov	r0, r4
 800b66e:	f000 fdb5 	bl	800c1dc <__multadd>
 800b672:	9b08      	ldr	r3, [sp, #32]
 800b674:	ee08 0a10 	vmov	s16, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f000 81b1 	beq.w	800b9e0 <_dtoa_r+0xbc0>
 800b67e:	2300      	movs	r3, #0
 800b680:	4639      	mov	r1, r7
 800b682:	220a      	movs	r2, #10
 800b684:	4620      	mov	r0, r4
 800b686:	f000 fda9 	bl	800c1dc <__multadd>
 800b68a:	9b02      	ldr	r3, [sp, #8]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	4607      	mov	r7, r0
 800b690:	f300 808e 	bgt.w	800b7b0 <_dtoa_r+0x990>
 800b694:	9b06      	ldr	r3, [sp, #24]
 800b696:	2b02      	cmp	r3, #2
 800b698:	dc51      	bgt.n	800b73e <_dtoa_r+0x91e>
 800b69a:	e089      	b.n	800b7b0 <_dtoa_r+0x990>
 800b69c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b69e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b6a2:	e74b      	b.n	800b53c <_dtoa_r+0x71c>
 800b6a4:	9b03      	ldr	r3, [sp, #12]
 800b6a6:	1e5e      	subs	r6, r3, #1
 800b6a8:	9b07      	ldr	r3, [sp, #28]
 800b6aa:	42b3      	cmp	r3, r6
 800b6ac:	bfbf      	itttt	lt
 800b6ae:	9b07      	ldrlt	r3, [sp, #28]
 800b6b0:	9607      	strlt	r6, [sp, #28]
 800b6b2:	1af2      	sublt	r2, r6, r3
 800b6b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b6b6:	bfb6      	itet	lt
 800b6b8:	189b      	addlt	r3, r3, r2
 800b6ba:	1b9e      	subge	r6, r3, r6
 800b6bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b6be:	9b03      	ldr	r3, [sp, #12]
 800b6c0:	bfb8      	it	lt
 800b6c2:	2600      	movlt	r6, #0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	bfb7      	itett	lt
 800b6c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b6cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b6d0:	1a9d      	sublt	r5, r3, r2
 800b6d2:	2300      	movlt	r3, #0
 800b6d4:	e734      	b.n	800b540 <_dtoa_r+0x720>
 800b6d6:	9e07      	ldr	r6, [sp, #28]
 800b6d8:	9d04      	ldr	r5, [sp, #16]
 800b6da:	9f08      	ldr	r7, [sp, #32]
 800b6dc:	e73b      	b.n	800b556 <_dtoa_r+0x736>
 800b6de:	9a07      	ldr	r2, [sp, #28]
 800b6e0:	e767      	b.n	800b5b2 <_dtoa_r+0x792>
 800b6e2:	9b06      	ldr	r3, [sp, #24]
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	dc18      	bgt.n	800b71a <_dtoa_r+0x8fa>
 800b6e8:	f1ba 0f00 	cmp.w	sl, #0
 800b6ec:	d115      	bne.n	800b71a <_dtoa_r+0x8fa>
 800b6ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6f2:	b993      	cbnz	r3, 800b71a <_dtoa_r+0x8fa>
 800b6f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b6f8:	0d1b      	lsrs	r3, r3, #20
 800b6fa:	051b      	lsls	r3, r3, #20
 800b6fc:	b183      	cbz	r3, 800b720 <_dtoa_r+0x900>
 800b6fe:	9b04      	ldr	r3, [sp, #16]
 800b700:	3301      	adds	r3, #1
 800b702:	9304      	str	r3, [sp, #16]
 800b704:	9b05      	ldr	r3, [sp, #20]
 800b706:	3301      	adds	r3, #1
 800b708:	9305      	str	r3, [sp, #20]
 800b70a:	f04f 0801 	mov.w	r8, #1
 800b70e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b710:	2b00      	cmp	r3, #0
 800b712:	f47f af6a 	bne.w	800b5ea <_dtoa_r+0x7ca>
 800b716:	2001      	movs	r0, #1
 800b718:	e76f      	b.n	800b5fa <_dtoa_r+0x7da>
 800b71a:	f04f 0800 	mov.w	r8, #0
 800b71e:	e7f6      	b.n	800b70e <_dtoa_r+0x8ee>
 800b720:	4698      	mov	r8, r3
 800b722:	e7f4      	b.n	800b70e <_dtoa_r+0x8ee>
 800b724:	f43f af7d 	beq.w	800b622 <_dtoa_r+0x802>
 800b728:	4618      	mov	r0, r3
 800b72a:	301c      	adds	r0, #28
 800b72c:	e772      	b.n	800b614 <_dtoa_r+0x7f4>
 800b72e:	9b03      	ldr	r3, [sp, #12]
 800b730:	2b00      	cmp	r3, #0
 800b732:	dc37      	bgt.n	800b7a4 <_dtoa_r+0x984>
 800b734:	9b06      	ldr	r3, [sp, #24]
 800b736:	2b02      	cmp	r3, #2
 800b738:	dd34      	ble.n	800b7a4 <_dtoa_r+0x984>
 800b73a:	9b03      	ldr	r3, [sp, #12]
 800b73c:	9302      	str	r3, [sp, #8]
 800b73e:	9b02      	ldr	r3, [sp, #8]
 800b740:	b96b      	cbnz	r3, 800b75e <_dtoa_r+0x93e>
 800b742:	4631      	mov	r1, r6
 800b744:	2205      	movs	r2, #5
 800b746:	4620      	mov	r0, r4
 800b748:	f000 fd48 	bl	800c1dc <__multadd>
 800b74c:	4601      	mov	r1, r0
 800b74e:	4606      	mov	r6, r0
 800b750:	ee18 0a10 	vmov	r0, s16
 800b754:	f000 ffac 	bl	800c6b0 <__mcmp>
 800b758:	2800      	cmp	r0, #0
 800b75a:	f73f adbb 	bgt.w	800b2d4 <_dtoa_r+0x4b4>
 800b75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b760:	9d01      	ldr	r5, [sp, #4]
 800b762:	43db      	mvns	r3, r3
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	f04f 0800 	mov.w	r8, #0
 800b76a:	4631      	mov	r1, r6
 800b76c:	4620      	mov	r0, r4
 800b76e:	f000 fd13 	bl	800c198 <_Bfree>
 800b772:	2f00      	cmp	r7, #0
 800b774:	f43f aea4 	beq.w	800b4c0 <_dtoa_r+0x6a0>
 800b778:	f1b8 0f00 	cmp.w	r8, #0
 800b77c:	d005      	beq.n	800b78a <_dtoa_r+0x96a>
 800b77e:	45b8      	cmp	r8, r7
 800b780:	d003      	beq.n	800b78a <_dtoa_r+0x96a>
 800b782:	4641      	mov	r1, r8
 800b784:	4620      	mov	r0, r4
 800b786:	f000 fd07 	bl	800c198 <_Bfree>
 800b78a:	4639      	mov	r1, r7
 800b78c:	4620      	mov	r0, r4
 800b78e:	f000 fd03 	bl	800c198 <_Bfree>
 800b792:	e695      	b.n	800b4c0 <_dtoa_r+0x6a0>
 800b794:	2600      	movs	r6, #0
 800b796:	4637      	mov	r7, r6
 800b798:	e7e1      	b.n	800b75e <_dtoa_r+0x93e>
 800b79a:	9700      	str	r7, [sp, #0]
 800b79c:	4637      	mov	r7, r6
 800b79e:	e599      	b.n	800b2d4 <_dtoa_r+0x4b4>
 800b7a0:	40240000 	.word	0x40240000
 800b7a4:	9b08      	ldr	r3, [sp, #32]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f000 80ca 	beq.w	800b940 <_dtoa_r+0xb20>
 800b7ac:	9b03      	ldr	r3, [sp, #12]
 800b7ae:	9302      	str	r3, [sp, #8]
 800b7b0:	2d00      	cmp	r5, #0
 800b7b2:	dd05      	ble.n	800b7c0 <_dtoa_r+0x9a0>
 800b7b4:	4639      	mov	r1, r7
 800b7b6:	462a      	mov	r2, r5
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	f000 ff09 	bl	800c5d0 <__lshift>
 800b7be:	4607      	mov	r7, r0
 800b7c0:	f1b8 0f00 	cmp.w	r8, #0
 800b7c4:	d05b      	beq.n	800b87e <_dtoa_r+0xa5e>
 800b7c6:	6879      	ldr	r1, [r7, #4]
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f000 fca5 	bl	800c118 <_Balloc>
 800b7ce:	4605      	mov	r5, r0
 800b7d0:	b928      	cbnz	r0, 800b7de <_dtoa_r+0x9be>
 800b7d2:	4b87      	ldr	r3, [pc, #540]	; (800b9f0 <_dtoa_r+0xbd0>)
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b7da:	f7ff bb3b 	b.w	800ae54 <_dtoa_r+0x34>
 800b7de:	693a      	ldr	r2, [r7, #16]
 800b7e0:	3202      	adds	r2, #2
 800b7e2:	0092      	lsls	r2, r2, #2
 800b7e4:	f107 010c 	add.w	r1, r7, #12
 800b7e8:	300c      	adds	r0, #12
 800b7ea:	f7fd fcdf 	bl	80091ac <memcpy>
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	4629      	mov	r1, r5
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	f000 feec 	bl	800c5d0 <__lshift>
 800b7f8:	9b01      	ldr	r3, [sp, #4]
 800b7fa:	f103 0901 	add.w	r9, r3, #1
 800b7fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b802:	4413      	add	r3, r2
 800b804:	9305      	str	r3, [sp, #20]
 800b806:	f00a 0301 	and.w	r3, sl, #1
 800b80a:	46b8      	mov	r8, r7
 800b80c:	9304      	str	r3, [sp, #16]
 800b80e:	4607      	mov	r7, r0
 800b810:	4631      	mov	r1, r6
 800b812:	ee18 0a10 	vmov	r0, s16
 800b816:	f7ff fa77 	bl	800ad08 <quorem>
 800b81a:	4641      	mov	r1, r8
 800b81c:	9002      	str	r0, [sp, #8]
 800b81e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b822:	ee18 0a10 	vmov	r0, s16
 800b826:	f000 ff43 	bl	800c6b0 <__mcmp>
 800b82a:	463a      	mov	r2, r7
 800b82c:	9003      	str	r0, [sp, #12]
 800b82e:	4631      	mov	r1, r6
 800b830:	4620      	mov	r0, r4
 800b832:	f000 ff59 	bl	800c6e8 <__mdiff>
 800b836:	68c2      	ldr	r2, [r0, #12]
 800b838:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800b83c:	4605      	mov	r5, r0
 800b83e:	bb02      	cbnz	r2, 800b882 <_dtoa_r+0xa62>
 800b840:	4601      	mov	r1, r0
 800b842:	ee18 0a10 	vmov	r0, s16
 800b846:	f000 ff33 	bl	800c6b0 <__mcmp>
 800b84a:	4602      	mov	r2, r0
 800b84c:	4629      	mov	r1, r5
 800b84e:	4620      	mov	r0, r4
 800b850:	9207      	str	r2, [sp, #28]
 800b852:	f000 fca1 	bl	800c198 <_Bfree>
 800b856:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b85a:	ea43 0102 	orr.w	r1, r3, r2
 800b85e:	9b04      	ldr	r3, [sp, #16]
 800b860:	430b      	orrs	r3, r1
 800b862:	464d      	mov	r5, r9
 800b864:	d10f      	bne.n	800b886 <_dtoa_r+0xa66>
 800b866:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b86a:	d02a      	beq.n	800b8c2 <_dtoa_r+0xaa2>
 800b86c:	9b03      	ldr	r3, [sp, #12]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	dd02      	ble.n	800b878 <_dtoa_r+0xa58>
 800b872:	9b02      	ldr	r3, [sp, #8]
 800b874:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b878:	f88b a000 	strb.w	sl, [fp]
 800b87c:	e775      	b.n	800b76a <_dtoa_r+0x94a>
 800b87e:	4638      	mov	r0, r7
 800b880:	e7ba      	b.n	800b7f8 <_dtoa_r+0x9d8>
 800b882:	2201      	movs	r2, #1
 800b884:	e7e2      	b.n	800b84c <_dtoa_r+0xa2c>
 800b886:	9b03      	ldr	r3, [sp, #12]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	db04      	blt.n	800b896 <_dtoa_r+0xa76>
 800b88c:	9906      	ldr	r1, [sp, #24]
 800b88e:	430b      	orrs	r3, r1
 800b890:	9904      	ldr	r1, [sp, #16]
 800b892:	430b      	orrs	r3, r1
 800b894:	d122      	bne.n	800b8dc <_dtoa_r+0xabc>
 800b896:	2a00      	cmp	r2, #0
 800b898:	ddee      	ble.n	800b878 <_dtoa_r+0xa58>
 800b89a:	ee18 1a10 	vmov	r1, s16
 800b89e:	2201      	movs	r2, #1
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f000 fe95 	bl	800c5d0 <__lshift>
 800b8a6:	4631      	mov	r1, r6
 800b8a8:	ee08 0a10 	vmov	s16, r0
 800b8ac:	f000 ff00 	bl	800c6b0 <__mcmp>
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	dc03      	bgt.n	800b8bc <_dtoa_r+0xa9c>
 800b8b4:	d1e0      	bne.n	800b878 <_dtoa_r+0xa58>
 800b8b6:	f01a 0f01 	tst.w	sl, #1
 800b8ba:	d0dd      	beq.n	800b878 <_dtoa_r+0xa58>
 800b8bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b8c0:	d1d7      	bne.n	800b872 <_dtoa_r+0xa52>
 800b8c2:	2339      	movs	r3, #57	; 0x39
 800b8c4:	f88b 3000 	strb.w	r3, [fp]
 800b8c8:	462b      	mov	r3, r5
 800b8ca:	461d      	mov	r5, r3
 800b8cc:	3b01      	subs	r3, #1
 800b8ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b8d2:	2a39      	cmp	r2, #57	; 0x39
 800b8d4:	d071      	beq.n	800b9ba <_dtoa_r+0xb9a>
 800b8d6:	3201      	adds	r2, #1
 800b8d8:	701a      	strb	r2, [r3, #0]
 800b8da:	e746      	b.n	800b76a <_dtoa_r+0x94a>
 800b8dc:	2a00      	cmp	r2, #0
 800b8de:	dd07      	ble.n	800b8f0 <_dtoa_r+0xad0>
 800b8e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b8e4:	d0ed      	beq.n	800b8c2 <_dtoa_r+0xaa2>
 800b8e6:	f10a 0301 	add.w	r3, sl, #1
 800b8ea:	f88b 3000 	strb.w	r3, [fp]
 800b8ee:	e73c      	b.n	800b76a <_dtoa_r+0x94a>
 800b8f0:	9b05      	ldr	r3, [sp, #20]
 800b8f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b8f6:	4599      	cmp	r9, r3
 800b8f8:	d047      	beq.n	800b98a <_dtoa_r+0xb6a>
 800b8fa:	ee18 1a10 	vmov	r1, s16
 800b8fe:	2300      	movs	r3, #0
 800b900:	220a      	movs	r2, #10
 800b902:	4620      	mov	r0, r4
 800b904:	f000 fc6a 	bl	800c1dc <__multadd>
 800b908:	45b8      	cmp	r8, r7
 800b90a:	ee08 0a10 	vmov	s16, r0
 800b90e:	f04f 0300 	mov.w	r3, #0
 800b912:	f04f 020a 	mov.w	r2, #10
 800b916:	4641      	mov	r1, r8
 800b918:	4620      	mov	r0, r4
 800b91a:	d106      	bne.n	800b92a <_dtoa_r+0xb0a>
 800b91c:	f000 fc5e 	bl	800c1dc <__multadd>
 800b920:	4680      	mov	r8, r0
 800b922:	4607      	mov	r7, r0
 800b924:	f109 0901 	add.w	r9, r9, #1
 800b928:	e772      	b.n	800b810 <_dtoa_r+0x9f0>
 800b92a:	f000 fc57 	bl	800c1dc <__multadd>
 800b92e:	4639      	mov	r1, r7
 800b930:	4680      	mov	r8, r0
 800b932:	2300      	movs	r3, #0
 800b934:	220a      	movs	r2, #10
 800b936:	4620      	mov	r0, r4
 800b938:	f000 fc50 	bl	800c1dc <__multadd>
 800b93c:	4607      	mov	r7, r0
 800b93e:	e7f1      	b.n	800b924 <_dtoa_r+0xb04>
 800b940:	9b03      	ldr	r3, [sp, #12]
 800b942:	9302      	str	r3, [sp, #8]
 800b944:	9d01      	ldr	r5, [sp, #4]
 800b946:	ee18 0a10 	vmov	r0, s16
 800b94a:	4631      	mov	r1, r6
 800b94c:	f7ff f9dc 	bl	800ad08 <quorem>
 800b950:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b954:	9b01      	ldr	r3, [sp, #4]
 800b956:	f805 ab01 	strb.w	sl, [r5], #1
 800b95a:	1aea      	subs	r2, r5, r3
 800b95c:	9b02      	ldr	r3, [sp, #8]
 800b95e:	4293      	cmp	r3, r2
 800b960:	dd09      	ble.n	800b976 <_dtoa_r+0xb56>
 800b962:	ee18 1a10 	vmov	r1, s16
 800b966:	2300      	movs	r3, #0
 800b968:	220a      	movs	r2, #10
 800b96a:	4620      	mov	r0, r4
 800b96c:	f000 fc36 	bl	800c1dc <__multadd>
 800b970:	ee08 0a10 	vmov	s16, r0
 800b974:	e7e7      	b.n	800b946 <_dtoa_r+0xb26>
 800b976:	9b02      	ldr	r3, [sp, #8]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	bfc8      	it	gt
 800b97c:	461d      	movgt	r5, r3
 800b97e:	9b01      	ldr	r3, [sp, #4]
 800b980:	bfd8      	it	le
 800b982:	2501      	movle	r5, #1
 800b984:	441d      	add	r5, r3
 800b986:	f04f 0800 	mov.w	r8, #0
 800b98a:	ee18 1a10 	vmov	r1, s16
 800b98e:	2201      	movs	r2, #1
 800b990:	4620      	mov	r0, r4
 800b992:	f000 fe1d 	bl	800c5d0 <__lshift>
 800b996:	4631      	mov	r1, r6
 800b998:	ee08 0a10 	vmov	s16, r0
 800b99c:	f000 fe88 	bl	800c6b0 <__mcmp>
 800b9a0:	2800      	cmp	r0, #0
 800b9a2:	dc91      	bgt.n	800b8c8 <_dtoa_r+0xaa8>
 800b9a4:	d102      	bne.n	800b9ac <_dtoa_r+0xb8c>
 800b9a6:	f01a 0f01 	tst.w	sl, #1
 800b9aa:	d18d      	bne.n	800b8c8 <_dtoa_r+0xaa8>
 800b9ac:	462b      	mov	r3, r5
 800b9ae:	461d      	mov	r5, r3
 800b9b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9b4:	2a30      	cmp	r2, #48	; 0x30
 800b9b6:	d0fa      	beq.n	800b9ae <_dtoa_r+0xb8e>
 800b9b8:	e6d7      	b.n	800b76a <_dtoa_r+0x94a>
 800b9ba:	9a01      	ldr	r2, [sp, #4]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d184      	bne.n	800b8ca <_dtoa_r+0xaaa>
 800b9c0:	9b00      	ldr	r3, [sp, #0]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	9300      	str	r3, [sp, #0]
 800b9c6:	2331      	movs	r3, #49	; 0x31
 800b9c8:	7013      	strb	r3, [r2, #0]
 800b9ca:	e6ce      	b.n	800b76a <_dtoa_r+0x94a>
 800b9cc:	4b09      	ldr	r3, [pc, #36]	; (800b9f4 <_dtoa_r+0xbd4>)
 800b9ce:	f7ff ba95 	b.w	800aefc <_dtoa_r+0xdc>
 800b9d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f47f aa6e 	bne.w	800aeb6 <_dtoa_r+0x96>
 800b9da:	4b07      	ldr	r3, [pc, #28]	; (800b9f8 <_dtoa_r+0xbd8>)
 800b9dc:	f7ff ba8e 	b.w	800aefc <_dtoa_r+0xdc>
 800b9e0:	9b02      	ldr	r3, [sp, #8]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	dcae      	bgt.n	800b944 <_dtoa_r+0xb24>
 800b9e6:	9b06      	ldr	r3, [sp, #24]
 800b9e8:	2b02      	cmp	r3, #2
 800b9ea:	f73f aea8 	bgt.w	800b73e <_dtoa_r+0x91e>
 800b9ee:	e7a9      	b.n	800b944 <_dtoa_r+0xb24>
 800b9f0:	0800e080 	.word	0x0800e080
 800b9f4:	0800de80 	.word	0x0800de80
 800b9f8:	0800e001 	.word	0x0800e001

0800b9fc <rshift>:
 800b9fc:	6903      	ldr	r3, [r0, #16]
 800b9fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ba02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba06:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ba0a:	f100 0414 	add.w	r4, r0, #20
 800ba0e:	dd45      	ble.n	800ba9c <rshift+0xa0>
 800ba10:	f011 011f 	ands.w	r1, r1, #31
 800ba14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ba18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ba1c:	d10c      	bne.n	800ba38 <rshift+0x3c>
 800ba1e:	f100 0710 	add.w	r7, r0, #16
 800ba22:	4629      	mov	r1, r5
 800ba24:	42b1      	cmp	r1, r6
 800ba26:	d334      	bcc.n	800ba92 <rshift+0x96>
 800ba28:	1a9b      	subs	r3, r3, r2
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	1eea      	subs	r2, r5, #3
 800ba2e:	4296      	cmp	r6, r2
 800ba30:	bf38      	it	cc
 800ba32:	2300      	movcc	r3, #0
 800ba34:	4423      	add	r3, r4
 800ba36:	e015      	b.n	800ba64 <rshift+0x68>
 800ba38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ba3c:	f1c1 0820 	rsb	r8, r1, #32
 800ba40:	40cf      	lsrs	r7, r1
 800ba42:	f105 0e04 	add.w	lr, r5, #4
 800ba46:	46a1      	mov	r9, r4
 800ba48:	4576      	cmp	r6, lr
 800ba4a:	46f4      	mov	ip, lr
 800ba4c:	d815      	bhi.n	800ba7a <rshift+0x7e>
 800ba4e:	1a9a      	subs	r2, r3, r2
 800ba50:	0092      	lsls	r2, r2, #2
 800ba52:	3a04      	subs	r2, #4
 800ba54:	3501      	adds	r5, #1
 800ba56:	42ae      	cmp	r6, r5
 800ba58:	bf38      	it	cc
 800ba5a:	2200      	movcc	r2, #0
 800ba5c:	18a3      	adds	r3, r4, r2
 800ba5e:	50a7      	str	r7, [r4, r2]
 800ba60:	b107      	cbz	r7, 800ba64 <rshift+0x68>
 800ba62:	3304      	adds	r3, #4
 800ba64:	1b1a      	subs	r2, r3, r4
 800ba66:	42a3      	cmp	r3, r4
 800ba68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ba6c:	bf08      	it	eq
 800ba6e:	2300      	moveq	r3, #0
 800ba70:	6102      	str	r2, [r0, #16]
 800ba72:	bf08      	it	eq
 800ba74:	6143      	streq	r3, [r0, #20]
 800ba76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba7a:	f8dc c000 	ldr.w	ip, [ip]
 800ba7e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ba82:	ea4c 0707 	orr.w	r7, ip, r7
 800ba86:	f849 7b04 	str.w	r7, [r9], #4
 800ba8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba8e:	40cf      	lsrs	r7, r1
 800ba90:	e7da      	b.n	800ba48 <rshift+0x4c>
 800ba92:	f851 cb04 	ldr.w	ip, [r1], #4
 800ba96:	f847 cf04 	str.w	ip, [r7, #4]!
 800ba9a:	e7c3      	b.n	800ba24 <rshift+0x28>
 800ba9c:	4623      	mov	r3, r4
 800ba9e:	e7e1      	b.n	800ba64 <rshift+0x68>

0800baa0 <__hexdig_fun>:
 800baa0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800baa4:	2b09      	cmp	r3, #9
 800baa6:	d802      	bhi.n	800baae <__hexdig_fun+0xe>
 800baa8:	3820      	subs	r0, #32
 800baaa:	b2c0      	uxtb	r0, r0
 800baac:	4770      	bx	lr
 800baae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bab2:	2b05      	cmp	r3, #5
 800bab4:	d801      	bhi.n	800baba <__hexdig_fun+0x1a>
 800bab6:	3847      	subs	r0, #71	; 0x47
 800bab8:	e7f7      	b.n	800baaa <__hexdig_fun+0xa>
 800baba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800babe:	2b05      	cmp	r3, #5
 800bac0:	d801      	bhi.n	800bac6 <__hexdig_fun+0x26>
 800bac2:	3827      	subs	r0, #39	; 0x27
 800bac4:	e7f1      	b.n	800baaa <__hexdig_fun+0xa>
 800bac6:	2000      	movs	r0, #0
 800bac8:	4770      	bx	lr
	...

0800bacc <__gethex>:
 800bacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad0:	ed2d 8b02 	vpush	{d8}
 800bad4:	b089      	sub	sp, #36	; 0x24
 800bad6:	ee08 0a10 	vmov	s16, r0
 800bada:	9304      	str	r3, [sp, #16]
 800badc:	4bb4      	ldr	r3, [pc, #720]	; (800bdb0 <__gethex+0x2e4>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	9301      	str	r3, [sp, #4]
 800bae2:	4618      	mov	r0, r3
 800bae4:	468b      	mov	fp, r1
 800bae6:	4690      	mov	r8, r2
 800bae8:	f7f4 fb72 	bl	80001d0 <strlen>
 800baec:	9b01      	ldr	r3, [sp, #4]
 800baee:	f8db 2000 	ldr.w	r2, [fp]
 800baf2:	4403      	add	r3, r0
 800baf4:	4682      	mov	sl, r0
 800baf6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bafa:	9305      	str	r3, [sp, #20]
 800bafc:	1c93      	adds	r3, r2, #2
 800bafe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bb02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bb06:	32fe      	adds	r2, #254	; 0xfe
 800bb08:	18d1      	adds	r1, r2, r3
 800bb0a:	461f      	mov	r7, r3
 800bb0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bb10:	9100      	str	r1, [sp, #0]
 800bb12:	2830      	cmp	r0, #48	; 0x30
 800bb14:	d0f8      	beq.n	800bb08 <__gethex+0x3c>
 800bb16:	f7ff ffc3 	bl	800baa0 <__hexdig_fun>
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	d13a      	bne.n	800bb96 <__gethex+0xca>
 800bb20:	9901      	ldr	r1, [sp, #4]
 800bb22:	4652      	mov	r2, sl
 800bb24:	4638      	mov	r0, r7
 800bb26:	f001 fa53 	bl	800cfd0 <strncmp>
 800bb2a:	4605      	mov	r5, r0
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	d168      	bne.n	800bc02 <__gethex+0x136>
 800bb30:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bb34:	eb07 060a 	add.w	r6, r7, sl
 800bb38:	f7ff ffb2 	bl	800baa0 <__hexdig_fun>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d062      	beq.n	800bc06 <__gethex+0x13a>
 800bb40:	4633      	mov	r3, r6
 800bb42:	7818      	ldrb	r0, [r3, #0]
 800bb44:	2830      	cmp	r0, #48	; 0x30
 800bb46:	461f      	mov	r7, r3
 800bb48:	f103 0301 	add.w	r3, r3, #1
 800bb4c:	d0f9      	beq.n	800bb42 <__gethex+0x76>
 800bb4e:	f7ff ffa7 	bl	800baa0 <__hexdig_fun>
 800bb52:	2301      	movs	r3, #1
 800bb54:	fab0 f480 	clz	r4, r0
 800bb58:	0964      	lsrs	r4, r4, #5
 800bb5a:	4635      	mov	r5, r6
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	463a      	mov	r2, r7
 800bb60:	4616      	mov	r6, r2
 800bb62:	3201      	adds	r2, #1
 800bb64:	7830      	ldrb	r0, [r6, #0]
 800bb66:	f7ff ff9b 	bl	800baa0 <__hexdig_fun>
 800bb6a:	2800      	cmp	r0, #0
 800bb6c:	d1f8      	bne.n	800bb60 <__gethex+0x94>
 800bb6e:	9901      	ldr	r1, [sp, #4]
 800bb70:	4652      	mov	r2, sl
 800bb72:	4630      	mov	r0, r6
 800bb74:	f001 fa2c 	bl	800cfd0 <strncmp>
 800bb78:	b980      	cbnz	r0, 800bb9c <__gethex+0xd0>
 800bb7a:	b94d      	cbnz	r5, 800bb90 <__gethex+0xc4>
 800bb7c:	eb06 050a 	add.w	r5, r6, sl
 800bb80:	462a      	mov	r2, r5
 800bb82:	4616      	mov	r6, r2
 800bb84:	3201      	adds	r2, #1
 800bb86:	7830      	ldrb	r0, [r6, #0]
 800bb88:	f7ff ff8a 	bl	800baa0 <__hexdig_fun>
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	d1f8      	bne.n	800bb82 <__gethex+0xb6>
 800bb90:	1bad      	subs	r5, r5, r6
 800bb92:	00ad      	lsls	r5, r5, #2
 800bb94:	e004      	b.n	800bba0 <__gethex+0xd4>
 800bb96:	2400      	movs	r4, #0
 800bb98:	4625      	mov	r5, r4
 800bb9a:	e7e0      	b.n	800bb5e <__gethex+0x92>
 800bb9c:	2d00      	cmp	r5, #0
 800bb9e:	d1f7      	bne.n	800bb90 <__gethex+0xc4>
 800bba0:	7833      	ldrb	r3, [r6, #0]
 800bba2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bba6:	2b50      	cmp	r3, #80	; 0x50
 800bba8:	d13b      	bne.n	800bc22 <__gethex+0x156>
 800bbaa:	7873      	ldrb	r3, [r6, #1]
 800bbac:	2b2b      	cmp	r3, #43	; 0x2b
 800bbae:	d02c      	beq.n	800bc0a <__gethex+0x13e>
 800bbb0:	2b2d      	cmp	r3, #45	; 0x2d
 800bbb2:	d02e      	beq.n	800bc12 <__gethex+0x146>
 800bbb4:	1c71      	adds	r1, r6, #1
 800bbb6:	f04f 0900 	mov.w	r9, #0
 800bbba:	7808      	ldrb	r0, [r1, #0]
 800bbbc:	f7ff ff70 	bl	800baa0 <__hexdig_fun>
 800bbc0:	1e43      	subs	r3, r0, #1
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	2b18      	cmp	r3, #24
 800bbc6:	d82c      	bhi.n	800bc22 <__gethex+0x156>
 800bbc8:	f1a0 0210 	sub.w	r2, r0, #16
 800bbcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bbd0:	f7ff ff66 	bl	800baa0 <__hexdig_fun>
 800bbd4:	1e43      	subs	r3, r0, #1
 800bbd6:	b2db      	uxtb	r3, r3
 800bbd8:	2b18      	cmp	r3, #24
 800bbda:	d91d      	bls.n	800bc18 <__gethex+0x14c>
 800bbdc:	f1b9 0f00 	cmp.w	r9, #0
 800bbe0:	d000      	beq.n	800bbe4 <__gethex+0x118>
 800bbe2:	4252      	negs	r2, r2
 800bbe4:	4415      	add	r5, r2
 800bbe6:	f8cb 1000 	str.w	r1, [fp]
 800bbea:	b1e4      	cbz	r4, 800bc26 <__gethex+0x15a>
 800bbec:	9b00      	ldr	r3, [sp, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	bf14      	ite	ne
 800bbf2:	2700      	movne	r7, #0
 800bbf4:	2706      	moveq	r7, #6
 800bbf6:	4638      	mov	r0, r7
 800bbf8:	b009      	add	sp, #36	; 0x24
 800bbfa:	ecbd 8b02 	vpop	{d8}
 800bbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc02:	463e      	mov	r6, r7
 800bc04:	4625      	mov	r5, r4
 800bc06:	2401      	movs	r4, #1
 800bc08:	e7ca      	b.n	800bba0 <__gethex+0xd4>
 800bc0a:	f04f 0900 	mov.w	r9, #0
 800bc0e:	1cb1      	adds	r1, r6, #2
 800bc10:	e7d3      	b.n	800bbba <__gethex+0xee>
 800bc12:	f04f 0901 	mov.w	r9, #1
 800bc16:	e7fa      	b.n	800bc0e <__gethex+0x142>
 800bc18:	230a      	movs	r3, #10
 800bc1a:	fb03 0202 	mla	r2, r3, r2, r0
 800bc1e:	3a10      	subs	r2, #16
 800bc20:	e7d4      	b.n	800bbcc <__gethex+0x100>
 800bc22:	4631      	mov	r1, r6
 800bc24:	e7df      	b.n	800bbe6 <__gethex+0x11a>
 800bc26:	1bf3      	subs	r3, r6, r7
 800bc28:	3b01      	subs	r3, #1
 800bc2a:	4621      	mov	r1, r4
 800bc2c:	2b07      	cmp	r3, #7
 800bc2e:	dc0b      	bgt.n	800bc48 <__gethex+0x17c>
 800bc30:	ee18 0a10 	vmov	r0, s16
 800bc34:	f000 fa70 	bl	800c118 <_Balloc>
 800bc38:	4604      	mov	r4, r0
 800bc3a:	b940      	cbnz	r0, 800bc4e <__gethex+0x182>
 800bc3c:	4b5d      	ldr	r3, [pc, #372]	; (800bdb4 <__gethex+0x2e8>)
 800bc3e:	4602      	mov	r2, r0
 800bc40:	21de      	movs	r1, #222	; 0xde
 800bc42:	485d      	ldr	r0, [pc, #372]	; (800bdb8 <__gethex+0x2ec>)
 800bc44:	f001 f9e6 	bl	800d014 <__assert_func>
 800bc48:	3101      	adds	r1, #1
 800bc4a:	105b      	asrs	r3, r3, #1
 800bc4c:	e7ee      	b.n	800bc2c <__gethex+0x160>
 800bc4e:	f100 0914 	add.w	r9, r0, #20
 800bc52:	f04f 0b00 	mov.w	fp, #0
 800bc56:	f1ca 0301 	rsb	r3, sl, #1
 800bc5a:	f8cd 9008 	str.w	r9, [sp, #8]
 800bc5e:	f8cd b000 	str.w	fp, [sp]
 800bc62:	9306      	str	r3, [sp, #24]
 800bc64:	42b7      	cmp	r7, r6
 800bc66:	d340      	bcc.n	800bcea <__gethex+0x21e>
 800bc68:	9802      	ldr	r0, [sp, #8]
 800bc6a:	9b00      	ldr	r3, [sp, #0]
 800bc6c:	f840 3b04 	str.w	r3, [r0], #4
 800bc70:	eba0 0009 	sub.w	r0, r0, r9
 800bc74:	1080      	asrs	r0, r0, #2
 800bc76:	0146      	lsls	r6, r0, #5
 800bc78:	6120      	str	r0, [r4, #16]
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f000 fb3e 	bl	800c2fc <__hi0bits>
 800bc80:	1a30      	subs	r0, r6, r0
 800bc82:	f8d8 6000 	ldr.w	r6, [r8]
 800bc86:	42b0      	cmp	r0, r6
 800bc88:	dd63      	ble.n	800bd52 <__gethex+0x286>
 800bc8a:	1b87      	subs	r7, r0, r6
 800bc8c:	4639      	mov	r1, r7
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f000 fee2 	bl	800ca58 <__any_on>
 800bc94:	4682      	mov	sl, r0
 800bc96:	b1a8      	cbz	r0, 800bcc4 <__gethex+0x1f8>
 800bc98:	1e7b      	subs	r3, r7, #1
 800bc9a:	1159      	asrs	r1, r3, #5
 800bc9c:	f003 021f 	and.w	r2, r3, #31
 800bca0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bca4:	f04f 0a01 	mov.w	sl, #1
 800bca8:	fa0a f202 	lsl.w	r2, sl, r2
 800bcac:	420a      	tst	r2, r1
 800bcae:	d009      	beq.n	800bcc4 <__gethex+0x1f8>
 800bcb0:	4553      	cmp	r3, sl
 800bcb2:	dd05      	ble.n	800bcc0 <__gethex+0x1f4>
 800bcb4:	1eb9      	subs	r1, r7, #2
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	f000 fece 	bl	800ca58 <__any_on>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	d145      	bne.n	800bd4c <__gethex+0x280>
 800bcc0:	f04f 0a02 	mov.w	sl, #2
 800bcc4:	4639      	mov	r1, r7
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f7ff fe98 	bl	800b9fc <rshift>
 800bccc:	443d      	add	r5, r7
 800bcce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bcd2:	42ab      	cmp	r3, r5
 800bcd4:	da4c      	bge.n	800bd70 <__gethex+0x2a4>
 800bcd6:	ee18 0a10 	vmov	r0, s16
 800bcda:	4621      	mov	r1, r4
 800bcdc:	f000 fa5c 	bl	800c198 <_Bfree>
 800bce0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bce2:	2300      	movs	r3, #0
 800bce4:	6013      	str	r3, [r2, #0]
 800bce6:	27a3      	movs	r7, #163	; 0xa3
 800bce8:	e785      	b.n	800bbf6 <__gethex+0x12a>
 800bcea:	1e73      	subs	r3, r6, #1
 800bcec:	9a05      	ldr	r2, [sp, #20]
 800bcee:	9303      	str	r3, [sp, #12]
 800bcf0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d019      	beq.n	800bd2c <__gethex+0x260>
 800bcf8:	f1bb 0f20 	cmp.w	fp, #32
 800bcfc:	d107      	bne.n	800bd0e <__gethex+0x242>
 800bcfe:	9b02      	ldr	r3, [sp, #8]
 800bd00:	9a00      	ldr	r2, [sp, #0]
 800bd02:	f843 2b04 	str.w	r2, [r3], #4
 800bd06:	9302      	str	r3, [sp, #8]
 800bd08:	2300      	movs	r3, #0
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	469b      	mov	fp, r3
 800bd0e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bd12:	f7ff fec5 	bl	800baa0 <__hexdig_fun>
 800bd16:	9b00      	ldr	r3, [sp, #0]
 800bd18:	f000 000f 	and.w	r0, r0, #15
 800bd1c:	fa00 f00b 	lsl.w	r0, r0, fp
 800bd20:	4303      	orrs	r3, r0
 800bd22:	9300      	str	r3, [sp, #0]
 800bd24:	f10b 0b04 	add.w	fp, fp, #4
 800bd28:	9b03      	ldr	r3, [sp, #12]
 800bd2a:	e00d      	b.n	800bd48 <__gethex+0x27c>
 800bd2c:	9b03      	ldr	r3, [sp, #12]
 800bd2e:	9a06      	ldr	r2, [sp, #24]
 800bd30:	4413      	add	r3, r2
 800bd32:	42bb      	cmp	r3, r7
 800bd34:	d3e0      	bcc.n	800bcf8 <__gethex+0x22c>
 800bd36:	4618      	mov	r0, r3
 800bd38:	9901      	ldr	r1, [sp, #4]
 800bd3a:	9307      	str	r3, [sp, #28]
 800bd3c:	4652      	mov	r2, sl
 800bd3e:	f001 f947 	bl	800cfd0 <strncmp>
 800bd42:	9b07      	ldr	r3, [sp, #28]
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d1d7      	bne.n	800bcf8 <__gethex+0x22c>
 800bd48:	461e      	mov	r6, r3
 800bd4a:	e78b      	b.n	800bc64 <__gethex+0x198>
 800bd4c:	f04f 0a03 	mov.w	sl, #3
 800bd50:	e7b8      	b.n	800bcc4 <__gethex+0x1f8>
 800bd52:	da0a      	bge.n	800bd6a <__gethex+0x29e>
 800bd54:	1a37      	subs	r7, r6, r0
 800bd56:	4621      	mov	r1, r4
 800bd58:	ee18 0a10 	vmov	r0, s16
 800bd5c:	463a      	mov	r2, r7
 800bd5e:	f000 fc37 	bl	800c5d0 <__lshift>
 800bd62:	1bed      	subs	r5, r5, r7
 800bd64:	4604      	mov	r4, r0
 800bd66:	f100 0914 	add.w	r9, r0, #20
 800bd6a:	f04f 0a00 	mov.w	sl, #0
 800bd6e:	e7ae      	b.n	800bcce <__gethex+0x202>
 800bd70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bd74:	42a8      	cmp	r0, r5
 800bd76:	dd72      	ble.n	800be5e <__gethex+0x392>
 800bd78:	1b45      	subs	r5, r0, r5
 800bd7a:	42ae      	cmp	r6, r5
 800bd7c:	dc36      	bgt.n	800bdec <__gethex+0x320>
 800bd7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d02a      	beq.n	800bddc <__gethex+0x310>
 800bd86:	2b03      	cmp	r3, #3
 800bd88:	d02c      	beq.n	800bde4 <__gethex+0x318>
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d11c      	bne.n	800bdc8 <__gethex+0x2fc>
 800bd8e:	42ae      	cmp	r6, r5
 800bd90:	d11a      	bne.n	800bdc8 <__gethex+0x2fc>
 800bd92:	2e01      	cmp	r6, #1
 800bd94:	d112      	bne.n	800bdbc <__gethex+0x2f0>
 800bd96:	9a04      	ldr	r2, [sp, #16]
 800bd98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd9c:	6013      	str	r3, [r2, #0]
 800bd9e:	2301      	movs	r3, #1
 800bda0:	6123      	str	r3, [r4, #16]
 800bda2:	f8c9 3000 	str.w	r3, [r9]
 800bda6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bda8:	2762      	movs	r7, #98	; 0x62
 800bdaa:	601c      	str	r4, [r3, #0]
 800bdac:	e723      	b.n	800bbf6 <__gethex+0x12a>
 800bdae:	bf00      	nop
 800bdb0:	0800e0f8 	.word	0x0800e0f8
 800bdb4:	0800e080 	.word	0x0800e080
 800bdb8:	0800e091 	.word	0x0800e091
 800bdbc:	1e71      	subs	r1, r6, #1
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f000 fe4a 	bl	800ca58 <__any_on>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d1e6      	bne.n	800bd96 <__gethex+0x2ca>
 800bdc8:	ee18 0a10 	vmov	r0, s16
 800bdcc:	4621      	mov	r1, r4
 800bdce:	f000 f9e3 	bl	800c198 <_Bfree>
 800bdd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	6013      	str	r3, [r2, #0]
 800bdd8:	2750      	movs	r7, #80	; 0x50
 800bdda:	e70c      	b.n	800bbf6 <__gethex+0x12a>
 800bddc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d1f2      	bne.n	800bdc8 <__gethex+0x2fc>
 800bde2:	e7d8      	b.n	800bd96 <__gethex+0x2ca>
 800bde4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d1d5      	bne.n	800bd96 <__gethex+0x2ca>
 800bdea:	e7ed      	b.n	800bdc8 <__gethex+0x2fc>
 800bdec:	1e6f      	subs	r7, r5, #1
 800bdee:	f1ba 0f00 	cmp.w	sl, #0
 800bdf2:	d131      	bne.n	800be58 <__gethex+0x38c>
 800bdf4:	b127      	cbz	r7, 800be00 <__gethex+0x334>
 800bdf6:	4639      	mov	r1, r7
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	f000 fe2d 	bl	800ca58 <__any_on>
 800bdfe:	4682      	mov	sl, r0
 800be00:	117b      	asrs	r3, r7, #5
 800be02:	2101      	movs	r1, #1
 800be04:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800be08:	f007 071f 	and.w	r7, r7, #31
 800be0c:	fa01 f707 	lsl.w	r7, r1, r7
 800be10:	421f      	tst	r7, r3
 800be12:	4629      	mov	r1, r5
 800be14:	4620      	mov	r0, r4
 800be16:	bf18      	it	ne
 800be18:	f04a 0a02 	orrne.w	sl, sl, #2
 800be1c:	1b76      	subs	r6, r6, r5
 800be1e:	f7ff fded 	bl	800b9fc <rshift>
 800be22:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800be26:	2702      	movs	r7, #2
 800be28:	f1ba 0f00 	cmp.w	sl, #0
 800be2c:	d048      	beq.n	800bec0 <__gethex+0x3f4>
 800be2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be32:	2b02      	cmp	r3, #2
 800be34:	d015      	beq.n	800be62 <__gethex+0x396>
 800be36:	2b03      	cmp	r3, #3
 800be38:	d017      	beq.n	800be6a <__gethex+0x39e>
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d109      	bne.n	800be52 <__gethex+0x386>
 800be3e:	f01a 0f02 	tst.w	sl, #2
 800be42:	d006      	beq.n	800be52 <__gethex+0x386>
 800be44:	f8d9 0000 	ldr.w	r0, [r9]
 800be48:	ea4a 0a00 	orr.w	sl, sl, r0
 800be4c:	f01a 0f01 	tst.w	sl, #1
 800be50:	d10e      	bne.n	800be70 <__gethex+0x3a4>
 800be52:	f047 0710 	orr.w	r7, r7, #16
 800be56:	e033      	b.n	800bec0 <__gethex+0x3f4>
 800be58:	f04f 0a01 	mov.w	sl, #1
 800be5c:	e7d0      	b.n	800be00 <__gethex+0x334>
 800be5e:	2701      	movs	r7, #1
 800be60:	e7e2      	b.n	800be28 <__gethex+0x35c>
 800be62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be64:	f1c3 0301 	rsb	r3, r3, #1
 800be68:	9315      	str	r3, [sp, #84]	; 0x54
 800be6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d0f0      	beq.n	800be52 <__gethex+0x386>
 800be70:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800be74:	f104 0314 	add.w	r3, r4, #20
 800be78:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800be7c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800be80:	f04f 0c00 	mov.w	ip, #0
 800be84:	4618      	mov	r0, r3
 800be86:	f853 2b04 	ldr.w	r2, [r3], #4
 800be8a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800be8e:	d01c      	beq.n	800beca <__gethex+0x3fe>
 800be90:	3201      	adds	r2, #1
 800be92:	6002      	str	r2, [r0, #0]
 800be94:	2f02      	cmp	r7, #2
 800be96:	f104 0314 	add.w	r3, r4, #20
 800be9a:	d13f      	bne.n	800bf1c <__gethex+0x450>
 800be9c:	f8d8 2000 	ldr.w	r2, [r8]
 800bea0:	3a01      	subs	r2, #1
 800bea2:	42b2      	cmp	r2, r6
 800bea4:	d10a      	bne.n	800bebc <__gethex+0x3f0>
 800bea6:	1171      	asrs	r1, r6, #5
 800bea8:	2201      	movs	r2, #1
 800beaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800beae:	f006 061f 	and.w	r6, r6, #31
 800beb2:	fa02 f606 	lsl.w	r6, r2, r6
 800beb6:	421e      	tst	r6, r3
 800beb8:	bf18      	it	ne
 800beba:	4617      	movne	r7, r2
 800bebc:	f047 0720 	orr.w	r7, r7, #32
 800bec0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bec2:	601c      	str	r4, [r3, #0]
 800bec4:	9b04      	ldr	r3, [sp, #16]
 800bec6:	601d      	str	r5, [r3, #0]
 800bec8:	e695      	b.n	800bbf6 <__gethex+0x12a>
 800beca:	4299      	cmp	r1, r3
 800becc:	f843 cc04 	str.w	ip, [r3, #-4]
 800bed0:	d8d8      	bhi.n	800be84 <__gethex+0x3b8>
 800bed2:	68a3      	ldr	r3, [r4, #8]
 800bed4:	459b      	cmp	fp, r3
 800bed6:	db19      	blt.n	800bf0c <__gethex+0x440>
 800bed8:	6861      	ldr	r1, [r4, #4]
 800beda:	ee18 0a10 	vmov	r0, s16
 800bede:	3101      	adds	r1, #1
 800bee0:	f000 f91a 	bl	800c118 <_Balloc>
 800bee4:	4681      	mov	r9, r0
 800bee6:	b918      	cbnz	r0, 800bef0 <__gethex+0x424>
 800bee8:	4b1a      	ldr	r3, [pc, #104]	; (800bf54 <__gethex+0x488>)
 800beea:	4602      	mov	r2, r0
 800beec:	2184      	movs	r1, #132	; 0x84
 800beee:	e6a8      	b.n	800bc42 <__gethex+0x176>
 800bef0:	6922      	ldr	r2, [r4, #16]
 800bef2:	3202      	adds	r2, #2
 800bef4:	f104 010c 	add.w	r1, r4, #12
 800bef8:	0092      	lsls	r2, r2, #2
 800befa:	300c      	adds	r0, #12
 800befc:	f7fd f956 	bl	80091ac <memcpy>
 800bf00:	4621      	mov	r1, r4
 800bf02:	ee18 0a10 	vmov	r0, s16
 800bf06:	f000 f947 	bl	800c198 <_Bfree>
 800bf0a:	464c      	mov	r4, r9
 800bf0c:	6923      	ldr	r3, [r4, #16]
 800bf0e:	1c5a      	adds	r2, r3, #1
 800bf10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf14:	6122      	str	r2, [r4, #16]
 800bf16:	2201      	movs	r2, #1
 800bf18:	615a      	str	r2, [r3, #20]
 800bf1a:	e7bb      	b.n	800be94 <__gethex+0x3c8>
 800bf1c:	6922      	ldr	r2, [r4, #16]
 800bf1e:	455a      	cmp	r2, fp
 800bf20:	dd0b      	ble.n	800bf3a <__gethex+0x46e>
 800bf22:	2101      	movs	r1, #1
 800bf24:	4620      	mov	r0, r4
 800bf26:	f7ff fd69 	bl	800b9fc <rshift>
 800bf2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf2e:	3501      	adds	r5, #1
 800bf30:	42ab      	cmp	r3, r5
 800bf32:	f6ff aed0 	blt.w	800bcd6 <__gethex+0x20a>
 800bf36:	2701      	movs	r7, #1
 800bf38:	e7c0      	b.n	800bebc <__gethex+0x3f0>
 800bf3a:	f016 061f 	ands.w	r6, r6, #31
 800bf3e:	d0fa      	beq.n	800bf36 <__gethex+0x46a>
 800bf40:	4453      	add	r3, sl
 800bf42:	f1c6 0620 	rsb	r6, r6, #32
 800bf46:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bf4a:	f000 f9d7 	bl	800c2fc <__hi0bits>
 800bf4e:	42b0      	cmp	r0, r6
 800bf50:	dbe7      	blt.n	800bf22 <__gethex+0x456>
 800bf52:	e7f0      	b.n	800bf36 <__gethex+0x46a>
 800bf54:	0800e080 	.word	0x0800e080

0800bf58 <L_shift>:
 800bf58:	f1c2 0208 	rsb	r2, r2, #8
 800bf5c:	0092      	lsls	r2, r2, #2
 800bf5e:	b570      	push	{r4, r5, r6, lr}
 800bf60:	f1c2 0620 	rsb	r6, r2, #32
 800bf64:	6843      	ldr	r3, [r0, #4]
 800bf66:	6804      	ldr	r4, [r0, #0]
 800bf68:	fa03 f506 	lsl.w	r5, r3, r6
 800bf6c:	432c      	orrs	r4, r5
 800bf6e:	40d3      	lsrs	r3, r2
 800bf70:	6004      	str	r4, [r0, #0]
 800bf72:	f840 3f04 	str.w	r3, [r0, #4]!
 800bf76:	4288      	cmp	r0, r1
 800bf78:	d3f4      	bcc.n	800bf64 <L_shift+0xc>
 800bf7a:	bd70      	pop	{r4, r5, r6, pc}

0800bf7c <__match>:
 800bf7c:	b530      	push	{r4, r5, lr}
 800bf7e:	6803      	ldr	r3, [r0, #0]
 800bf80:	3301      	adds	r3, #1
 800bf82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf86:	b914      	cbnz	r4, 800bf8e <__match+0x12>
 800bf88:	6003      	str	r3, [r0, #0]
 800bf8a:	2001      	movs	r0, #1
 800bf8c:	bd30      	pop	{r4, r5, pc}
 800bf8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bf96:	2d19      	cmp	r5, #25
 800bf98:	bf98      	it	ls
 800bf9a:	3220      	addls	r2, #32
 800bf9c:	42a2      	cmp	r2, r4
 800bf9e:	d0f0      	beq.n	800bf82 <__match+0x6>
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	e7f3      	b.n	800bf8c <__match+0x10>

0800bfa4 <__hexnan>:
 800bfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa8:	680b      	ldr	r3, [r1, #0]
 800bfaa:	115e      	asrs	r6, r3, #5
 800bfac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bfb0:	f013 031f 	ands.w	r3, r3, #31
 800bfb4:	b087      	sub	sp, #28
 800bfb6:	bf18      	it	ne
 800bfb8:	3604      	addne	r6, #4
 800bfba:	2500      	movs	r5, #0
 800bfbc:	1f37      	subs	r7, r6, #4
 800bfbe:	4690      	mov	r8, r2
 800bfc0:	6802      	ldr	r2, [r0, #0]
 800bfc2:	9301      	str	r3, [sp, #4]
 800bfc4:	4682      	mov	sl, r0
 800bfc6:	f846 5c04 	str.w	r5, [r6, #-4]
 800bfca:	46b9      	mov	r9, r7
 800bfcc:	463c      	mov	r4, r7
 800bfce:	9502      	str	r5, [sp, #8]
 800bfd0:	46ab      	mov	fp, r5
 800bfd2:	7851      	ldrb	r1, [r2, #1]
 800bfd4:	1c53      	adds	r3, r2, #1
 800bfd6:	9303      	str	r3, [sp, #12]
 800bfd8:	b341      	cbz	r1, 800c02c <__hexnan+0x88>
 800bfda:	4608      	mov	r0, r1
 800bfdc:	9205      	str	r2, [sp, #20]
 800bfde:	9104      	str	r1, [sp, #16]
 800bfe0:	f7ff fd5e 	bl	800baa0 <__hexdig_fun>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d14f      	bne.n	800c088 <__hexnan+0xe4>
 800bfe8:	9904      	ldr	r1, [sp, #16]
 800bfea:	9a05      	ldr	r2, [sp, #20]
 800bfec:	2920      	cmp	r1, #32
 800bfee:	d818      	bhi.n	800c022 <__hexnan+0x7e>
 800bff0:	9b02      	ldr	r3, [sp, #8]
 800bff2:	459b      	cmp	fp, r3
 800bff4:	dd13      	ble.n	800c01e <__hexnan+0x7a>
 800bff6:	454c      	cmp	r4, r9
 800bff8:	d206      	bcs.n	800c008 <__hexnan+0x64>
 800bffa:	2d07      	cmp	r5, #7
 800bffc:	dc04      	bgt.n	800c008 <__hexnan+0x64>
 800bffe:	462a      	mov	r2, r5
 800c000:	4649      	mov	r1, r9
 800c002:	4620      	mov	r0, r4
 800c004:	f7ff ffa8 	bl	800bf58 <L_shift>
 800c008:	4544      	cmp	r4, r8
 800c00a:	d950      	bls.n	800c0ae <__hexnan+0x10a>
 800c00c:	2300      	movs	r3, #0
 800c00e:	f1a4 0904 	sub.w	r9, r4, #4
 800c012:	f844 3c04 	str.w	r3, [r4, #-4]
 800c016:	f8cd b008 	str.w	fp, [sp, #8]
 800c01a:	464c      	mov	r4, r9
 800c01c:	461d      	mov	r5, r3
 800c01e:	9a03      	ldr	r2, [sp, #12]
 800c020:	e7d7      	b.n	800bfd2 <__hexnan+0x2e>
 800c022:	2929      	cmp	r1, #41	; 0x29
 800c024:	d156      	bne.n	800c0d4 <__hexnan+0x130>
 800c026:	3202      	adds	r2, #2
 800c028:	f8ca 2000 	str.w	r2, [sl]
 800c02c:	f1bb 0f00 	cmp.w	fp, #0
 800c030:	d050      	beq.n	800c0d4 <__hexnan+0x130>
 800c032:	454c      	cmp	r4, r9
 800c034:	d206      	bcs.n	800c044 <__hexnan+0xa0>
 800c036:	2d07      	cmp	r5, #7
 800c038:	dc04      	bgt.n	800c044 <__hexnan+0xa0>
 800c03a:	462a      	mov	r2, r5
 800c03c:	4649      	mov	r1, r9
 800c03e:	4620      	mov	r0, r4
 800c040:	f7ff ff8a 	bl	800bf58 <L_shift>
 800c044:	4544      	cmp	r4, r8
 800c046:	d934      	bls.n	800c0b2 <__hexnan+0x10e>
 800c048:	f1a8 0204 	sub.w	r2, r8, #4
 800c04c:	4623      	mov	r3, r4
 800c04e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c052:	f842 1f04 	str.w	r1, [r2, #4]!
 800c056:	429f      	cmp	r7, r3
 800c058:	d2f9      	bcs.n	800c04e <__hexnan+0xaa>
 800c05a:	1b3b      	subs	r3, r7, r4
 800c05c:	f023 0303 	bic.w	r3, r3, #3
 800c060:	3304      	adds	r3, #4
 800c062:	3401      	adds	r4, #1
 800c064:	3e03      	subs	r6, #3
 800c066:	42b4      	cmp	r4, r6
 800c068:	bf88      	it	hi
 800c06a:	2304      	movhi	r3, #4
 800c06c:	4443      	add	r3, r8
 800c06e:	2200      	movs	r2, #0
 800c070:	f843 2b04 	str.w	r2, [r3], #4
 800c074:	429f      	cmp	r7, r3
 800c076:	d2fb      	bcs.n	800c070 <__hexnan+0xcc>
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	b91b      	cbnz	r3, 800c084 <__hexnan+0xe0>
 800c07c:	4547      	cmp	r7, r8
 800c07e:	d127      	bne.n	800c0d0 <__hexnan+0x12c>
 800c080:	2301      	movs	r3, #1
 800c082:	603b      	str	r3, [r7, #0]
 800c084:	2005      	movs	r0, #5
 800c086:	e026      	b.n	800c0d6 <__hexnan+0x132>
 800c088:	3501      	adds	r5, #1
 800c08a:	2d08      	cmp	r5, #8
 800c08c:	f10b 0b01 	add.w	fp, fp, #1
 800c090:	dd06      	ble.n	800c0a0 <__hexnan+0xfc>
 800c092:	4544      	cmp	r4, r8
 800c094:	d9c3      	bls.n	800c01e <__hexnan+0x7a>
 800c096:	2300      	movs	r3, #0
 800c098:	f844 3c04 	str.w	r3, [r4, #-4]
 800c09c:	2501      	movs	r5, #1
 800c09e:	3c04      	subs	r4, #4
 800c0a0:	6822      	ldr	r2, [r4, #0]
 800c0a2:	f000 000f 	and.w	r0, r0, #15
 800c0a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c0aa:	6022      	str	r2, [r4, #0]
 800c0ac:	e7b7      	b.n	800c01e <__hexnan+0x7a>
 800c0ae:	2508      	movs	r5, #8
 800c0b0:	e7b5      	b.n	800c01e <__hexnan+0x7a>
 800c0b2:	9b01      	ldr	r3, [sp, #4]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d0df      	beq.n	800c078 <__hexnan+0xd4>
 800c0b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c0bc:	f1c3 0320 	rsb	r3, r3, #32
 800c0c0:	fa22 f303 	lsr.w	r3, r2, r3
 800c0c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c0c8:	401a      	ands	r2, r3
 800c0ca:	f846 2c04 	str.w	r2, [r6, #-4]
 800c0ce:	e7d3      	b.n	800c078 <__hexnan+0xd4>
 800c0d0:	3f04      	subs	r7, #4
 800c0d2:	e7d1      	b.n	800c078 <__hexnan+0xd4>
 800c0d4:	2004      	movs	r0, #4
 800c0d6:	b007      	add	sp, #28
 800c0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c0dc <_localeconv_r>:
 800c0dc:	4800      	ldr	r0, [pc, #0]	; (800c0e0 <_localeconv_r+0x4>)
 800c0de:	4770      	bx	lr
 800c0e0:	2000017c 	.word	0x2000017c

0800c0e4 <malloc>:
 800c0e4:	4b02      	ldr	r3, [pc, #8]	; (800c0f0 <malloc+0xc>)
 800c0e6:	4601      	mov	r1, r0
 800c0e8:	6818      	ldr	r0, [r3, #0]
 800c0ea:	f000 bd59 	b.w	800cba0 <_malloc_r>
 800c0ee:	bf00      	nop
 800c0f0:	20000024 	.word	0x20000024

0800c0f4 <__ascii_mbtowc>:
 800c0f4:	b082      	sub	sp, #8
 800c0f6:	b901      	cbnz	r1, 800c0fa <__ascii_mbtowc+0x6>
 800c0f8:	a901      	add	r1, sp, #4
 800c0fa:	b142      	cbz	r2, 800c10e <__ascii_mbtowc+0x1a>
 800c0fc:	b14b      	cbz	r3, 800c112 <__ascii_mbtowc+0x1e>
 800c0fe:	7813      	ldrb	r3, [r2, #0]
 800c100:	600b      	str	r3, [r1, #0]
 800c102:	7812      	ldrb	r2, [r2, #0]
 800c104:	1e10      	subs	r0, r2, #0
 800c106:	bf18      	it	ne
 800c108:	2001      	movne	r0, #1
 800c10a:	b002      	add	sp, #8
 800c10c:	4770      	bx	lr
 800c10e:	4610      	mov	r0, r2
 800c110:	e7fb      	b.n	800c10a <__ascii_mbtowc+0x16>
 800c112:	f06f 0001 	mvn.w	r0, #1
 800c116:	e7f8      	b.n	800c10a <__ascii_mbtowc+0x16>

0800c118 <_Balloc>:
 800c118:	b570      	push	{r4, r5, r6, lr}
 800c11a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c11c:	4604      	mov	r4, r0
 800c11e:	460d      	mov	r5, r1
 800c120:	b976      	cbnz	r6, 800c140 <_Balloc+0x28>
 800c122:	2010      	movs	r0, #16
 800c124:	f7ff ffde 	bl	800c0e4 <malloc>
 800c128:	4602      	mov	r2, r0
 800c12a:	6260      	str	r0, [r4, #36]	; 0x24
 800c12c:	b920      	cbnz	r0, 800c138 <_Balloc+0x20>
 800c12e:	4b18      	ldr	r3, [pc, #96]	; (800c190 <_Balloc+0x78>)
 800c130:	4818      	ldr	r0, [pc, #96]	; (800c194 <_Balloc+0x7c>)
 800c132:	2166      	movs	r1, #102	; 0x66
 800c134:	f000 ff6e 	bl	800d014 <__assert_func>
 800c138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c13c:	6006      	str	r6, [r0, #0]
 800c13e:	60c6      	str	r6, [r0, #12]
 800c140:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c142:	68f3      	ldr	r3, [r6, #12]
 800c144:	b183      	cbz	r3, 800c168 <_Balloc+0x50>
 800c146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c14e:	b9b8      	cbnz	r0, 800c180 <_Balloc+0x68>
 800c150:	2101      	movs	r1, #1
 800c152:	fa01 f605 	lsl.w	r6, r1, r5
 800c156:	1d72      	adds	r2, r6, #5
 800c158:	0092      	lsls	r2, r2, #2
 800c15a:	4620      	mov	r0, r4
 800c15c:	f000 fc9d 	bl	800ca9a <_calloc_r>
 800c160:	b160      	cbz	r0, 800c17c <_Balloc+0x64>
 800c162:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c166:	e00e      	b.n	800c186 <_Balloc+0x6e>
 800c168:	2221      	movs	r2, #33	; 0x21
 800c16a:	2104      	movs	r1, #4
 800c16c:	4620      	mov	r0, r4
 800c16e:	f000 fc94 	bl	800ca9a <_calloc_r>
 800c172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c174:	60f0      	str	r0, [r6, #12]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d1e4      	bne.n	800c146 <_Balloc+0x2e>
 800c17c:	2000      	movs	r0, #0
 800c17e:	bd70      	pop	{r4, r5, r6, pc}
 800c180:	6802      	ldr	r2, [r0, #0]
 800c182:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c186:	2300      	movs	r3, #0
 800c188:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c18c:	e7f7      	b.n	800c17e <_Balloc+0x66>
 800c18e:	bf00      	nop
 800c190:	0800e00e 	.word	0x0800e00e
 800c194:	0800e10c 	.word	0x0800e10c

0800c198 <_Bfree>:
 800c198:	b570      	push	{r4, r5, r6, lr}
 800c19a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c19c:	4605      	mov	r5, r0
 800c19e:	460c      	mov	r4, r1
 800c1a0:	b976      	cbnz	r6, 800c1c0 <_Bfree+0x28>
 800c1a2:	2010      	movs	r0, #16
 800c1a4:	f7ff ff9e 	bl	800c0e4 <malloc>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	6268      	str	r0, [r5, #36]	; 0x24
 800c1ac:	b920      	cbnz	r0, 800c1b8 <_Bfree+0x20>
 800c1ae:	4b09      	ldr	r3, [pc, #36]	; (800c1d4 <_Bfree+0x3c>)
 800c1b0:	4809      	ldr	r0, [pc, #36]	; (800c1d8 <_Bfree+0x40>)
 800c1b2:	218a      	movs	r1, #138	; 0x8a
 800c1b4:	f000 ff2e 	bl	800d014 <__assert_func>
 800c1b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1bc:	6006      	str	r6, [r0, #0]
 800c1be:	60c6      	str	r6, [r0, #12]
 800c1c0:	b13c      	cbz	r4, 800c1d2 <_Bfree+0x3a>
 800c1c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c1c4:	6862      	ldr	r2, [r4, #4]
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c1cc:	6021      	str	r1, [r4, #0]
 800c1ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c1d2:	bd70      	pop	{r4, r5, r6, pc}
 800c1d4:	0800e00e 	.word	0x0800e00e
 800c1d8:	0800e10c 	.word	0x0800e10c

0800c1dc <__multadd>:
 800c1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e0:	690d      	ldr	r5, [r1, #16]
 800c1e2:	4607      	mov	r7, r0
 800c1e4:	460c      	mov	r4, r1
 800c1e6:	461e      	mov	r6, r3
 800c1e8:	f101 0c14 	add.w	ip, r1, #20
 800c1ec:	2000      	movs	r0, #0
 800c1ee:	f8dc 3000 	ldr.w	r3, [ip]
 800c1f2:	b299      	uxth	r1, r3
 800c1f4:	fb02 6101 	mla	r1, r2, r1, r6
 800c1f8:	0c1e      	lsrs	r6, r3, #16
 800c1fa:	0c0b      	lsrs	r3, r1, #16
 800c1fc:	fb02 3306 	mla	r3, r2, r6, r3
 800c200:	b289      	uxth	r1, r1
 800c202:	3001      	adds	r0, #1
 800c204:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c208:	4285      	cmp	r5, r0
 800c20a:	f84c 1b04 	str.w	r1, [ip], #4
 800c20e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c212:	dcec      	bgt.n	800c1ee <__multadd+0x12>
 800c214:	b30e      	cbz	r6, 800c25a <__multadd+0x7e>
 800c216:	68a3      	ldr	r3, [r4, #8]
 800c218:	42ab      	cmp	r3, r5
 800c21a:	dc19      	bgt.n	800c250 <__multadd+0x74>
 800c21c:	6861      	ldr	r1, [r4, #4]
 800c21e:	4638      	mov	r0, r7
 800c220:	3101      	adds	r1, #1
 800c222:	f7ff ff79 	bl	800c118 <_Balloc>
 800c226:	4680      	mov	r8, r0
 800c228:	b928      	cbnz	r0, 800c236 <__multadd+0x5a>
 800c22a:	4602      	mov	r2, r0
 800c22c:	4b0c      	ldr	r3, [pc, #48]	; (800c260 <__multadd+0x84>)
 800c22e:	480d      	ldr	r0, [pc, #52]	; (800c264 <__multadd+0x88>)
 800c230:	21b5      	movs	r1, #181	; 0xb5
 800c232:	f000 feef 	bl	800d014 <__assert_func>
 800c236:	6922      	ldr	r2, [r4, #16]
 800c238:	3202      	adds	r2, #2
 800c23a:	f104 010c 	add.w	r1, r4, #12
 800c23e:	0092      	lsls	r2, r2, #2
 800c240:	300c      	adds	r0, #12
 800c242:	f7fc ffb3 	bl	80091ac <memcpy>
 800c246:	4621      	mov	r1, r4
 800c248:	4638      	mov	r0, r7
 800c24a:	f7ff ffa5 	bl	800c198 <_Bfree>
 800c24e:	4644      	mov	r4, r8
 800c250:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c254:	3501      	adds	r5, #1
 800c256:	615e      	str	r6, [r3, #20]
 800c258:	6125      	str	r5, [r4, #16]
 800c25a:	4620      	mov	r0, r4
 800c25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c260:	0800e080 	.word	0x0800e080
 800c264:	0800e10c 	.word	0x0800e10c

0800c268 <__s2b>:
 800c268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c26c:	460c      	mov	r4, r1
 800c26e:	4615      	mov	r5, r2
 800c270:	461f      	mov	r7, r3
 800c272:	2209      	movs	r2, #9
 800c274:	3308      	adds	r3, #8
 800c276:	4606      	mov	r6, r0
 800c278:	fb93 f3f2 	sdiv	r3, r3, r2
 800c27c:	2100      	movs	r1, #0
 800c27e:	2201      	movs	r2, #1
 800c280:	429a      	cmp	r2, r3
 800c282:	db09      	blt.n	800c298 <__s2b+0x30>
 800c284:	4630      	mov	r0, r6
 800c286:	f7ff ff47 	bl	800c118 <_Balloc>
 800c28a:	b940      	cbnz	r0, 800c29e <__s2b+0x36>
 800c28c:	4602      	mov	r2, r0
 800c28e:	4b19      	ldr	r3, [pc, #100]	; (800c2f4 <__s2b+0x8c>)
 800c290:	4819      	ldr	r0, [pc, #100]	; (800c2f8 <__s2b+0x90>)
 800c292:	21ce      	movs	r1, #206	; 0xce
 800c294:	f000 febe 	bl	800d014 <__assert_func>
 800c298:	0052      	lsls	r2, r2, #1
 800c29a:	3101      	adds	r1, #1
 800c29c:	e7f0      	b.n	800c280 <__s2b+0x18>
 800c29e:	9b08      	ldr	r3, [sp, #32]
 800c2a0:	6143      	str	r3, [r0, #20]
 800c2a2:	2d09      	cmp	r5, #9
 800c2a4:	f04f 0301 	mov.w	r3, #1
 800c2a8:	6103      	str	r3, [r0, #16]
 800c2aa:	dd16      	ble.n	800c2da <__s2b+0x72>
 800c2ac:	f104 0909 	add.w	r9, r4, #9
 800c2b0:	46c8      	mov	r8, r9
 800c2b2:	442c      	add	r4, r5
 800c2b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c2b8:	4601      	mov	r1, r0
 800c2ba:	3b30      	subs	r3, #48	; 0x30
 800c2bc:	220a      	movs	r2, #10
 800c2be:	4630      	mov	r0, r6
 800c2c0:	f7ff ff8c 	bl	800c1dc <__multadd>
 800c2c4:	45a0      	cmp	r8, r4
 800c2c6:	d1f5      	bne.n	800c2b4 <__s2b+0x4c>
 800c2c8:	f1a5 0408 	sub.w	r4, r5, #8
 800c2cc:	444c      	add	r4, r9
 800c2ce:	1b2d      	subs	r5, r5, r4
 800c2d0:	1963      	adds	r3, r4, r5
 800c2d2:	42bb      	cmp	r3, r7
 800c2d4:	db04      	blt.n	800c2e0 <__s2b+0x78>
 800c2d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2da:	340a      	adds	r4, #10
 800c2dc:	2509      	movs	r5, #9
 800c2de:	e7f6      	b.n	800c2ce <__s2b+0x66>
 800c2e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c2e4:	4601      	mov	r1, r0
 800c2e6:	3b30      	subs	r3, #48	; 0x30
 800c2e8:	220a      	movs	r2, #10
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f7ff ff76 	bl	800c1dc <__multadd>
 800c2f0:	e7ee      	b.n	800c2d0 <__s2b+0x68>
 800c2f2:	bf00      	nop
 800c2f4:	0800e080 	.word	0x0800e080
 800c2f8:	0800e10c 	.word	0x0800e10c

0800c2fc <__hi0bits>:
 800c2fc:	0c03      	lsrs	r3, r0, #16
 800c2fe:	041b      	lsls	r3, r3, #16
 800c300:	b9d3      	cbnz	r3, 800c338 <__hi0bits+0x3c>
 800c302:	0400      	lsls	r0, r0, #16
 800c304:	2310      	movs	r3, #16
 800c306:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c30a:	bf04      	itt	eq
 800c30c:	0200      	lsleq	r0, r0, #8
 800c30e:	3308      	addeq	r3, #8
 800c310:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c314:	bf04      	itt	eq
 800c316:	0100      	lsleq	r0, r0, #4
 800c318:	3304      	addeq	r3, #4
 800c31a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c31e:	bf04      	itt	eq
 800c320:	0080      	lsleq	r0, r0, #2
 800c322:	3302      	addeq	r3, #2
 800c324:	2800      	cmp	r0, #0
 800c326:	db05      	blt.n	800c334 <__hi0bits+0x38>
 800c328:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c32c:	f103 0301 	add.w	r3, r3, #1
 800c330:	bf08      	it	eq
 800c332:	2320      	moveq	r3, #32
 800c334:	4618      	mov	r0, r3
 800c336:	4770      	bx	lr
 800c338:	2300      	movs	r3, #0
 800c33a:	e7e4      	b.n	800c306 <__hi0bits+0xa>

0800c33c <__lo0bits>:
 800c33c:	6803      	ldr	r3, [r0, #0]
 800c33e:	f013 0207 	ands.w	r2, r3, #7
 800c342:	4601      	mov	r1, r0
 800c344:	d00b      	beq.n	800c35e <__lo0bits+0x22>
 800c346:	07da      	lsls	r2, r3, #31
 800c348:	d423      	bmi.n	800c392 <__lo0bits+0x56>
 800c34a:	0798      	lsls	r0, r3, #30
 800c34c:	bf49      	itett	mi
 800c34e:	085b      	lsrmi	r3, r3, #1
 800c350:	089b      	lsrpl	r3, r3, #2
 800c352:	2001      	movmi	r0, #1
 800c354:	600b      	strmi	r3, [r1, #0]
 800c356:	bf5c      	itt	pl
 800c358:	600b      	strpl	r3, [r1, #0]
 800c35a:	2002      	movpl	r0, #2
 800c35c:	4770      	bx	lr
 800c35e:	b298      	uxth	r0, r3
 800c360:	b9a8      	cbnz	r0, 800c38e <__lo0bits+0x52>
 800c362:	0c1b      	lsrs	r3, r3, #16
 800c364:	2010      	movs	r0, #16
 800c366:	b2da      	uxtb	r2, r3
 800c368:	b90a      	cbnz	r2, 800c36e <__lo0bits+0x32>
 800c36a:	3008      	adds	r0, #8
 800c36c:	0a1b      	lsrs	r3, r3, #8
 800c36e:	071a      	lsls	r2, r3, #28
 800c370:	bf04      	itt	eq
 800c372:	091b      	lsreq	r3, r3, #4
 800c374:	3004      	addeq	r0, #4
 800c376:	079a      	lsls	r2, r3, #30
 800c378:	bf04      	itt	eq
 800c37a:	089b      	lsreq	r3, r3, #2
 800c37c:	3002      	addeq	r0, #2
 800c37e:	07da      	lsls	r2, r3, #31
 800c380:	d403      	bmi.n	800c38a <__lo0bits+0x4e>
 800c382:	085b      	lsrs	r3, r3, #1
 800c384:	f100 0001 	add.w	r0, r0, #1
 800c388:	d005      	beq.n	800c396 <__lo0bits+0x5a>
 800c38a:	600b      	str	r3, [r1, #0]
 800c38c:	4770      	bx	lr
 800c38e:	4610      	mov	r0, r2
 800c390:	e7e9      	b.n	800c366 <__lo0bits+0x2a>
 800c392:	2000      	movs	r0, #0
 800c394:	4770      	bx	lr
 800c396:	2020      	movs	r0, #32
 800c398:	4770      	bx	lr
	...

0800c39c <__i2b>:
 800c39c:	b510      	push	{r4, lr}
 800c39e:	460c      	mov	r4, r1
 800c3a0:	2101      	movs	r1, #1
 800c3a2:	f7ff feb9 	bl	800c118 <_Balloc>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	b928      	cbnz	r0, 800c3b6 <__i2b+0x1a>
 800c3aa:	4b05      	ldr	r3, [pc, #20]	; (800c3c0 <__i2b+0x24>)
 800c3ac:	4805      	ldr	r0, [pc, #20]	; (800c3c4 <__i2b+0x28>)
 800c3ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c3b2:	f000 fe2f 	bl	800d014 <__assert_func>
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	6144      	str	r4, [r0, #20]
 800c3ba:	6103      	str	r3, [r0, #16]
 800c3bc:	bd10      	pop	{r4, pc}
 800c3be:	bf00      	nop
 800c3c0:	0800e080 	.word	0x0800e080
 800c3c4:	0800e10c 	.word	0x0800e10c

0800c3c8 <__multiply>:
 800c3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3cc:	4691      	mov	r9, r2
 800c3ce:	690a      	ldr	r2, [r1, #16]
 800c3d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	bfb8      	it	lt
 800c3d8:	460b      	movlt	r3, r1
 800c3da:	460c      	mov	r4, r1
 800c3dc:	bfbc      	itt	lt
 800c3de:	464c      	movlt	r4, r9
 800c3e0:	4699      	movlt	r9, r3
 800c3e2:	6927      	ldr	r7, [r4, #16]
 800c3e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c3e8:	68a3      	ldr	r3, [r4, #8]
 800c3ea:	6861      	ldr	r1, [r4, #4]
 800c3ec:	eb07 060a 	add.w	r6, r7, sl
 800c3f0:	42b3      	cmp	r3, r6
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	bfb8      	it	lt
 800c3f6:	3101      	addlt	r1, #1
 800c3f8:	f7ff fe8e 	bl	800c118 <_Balloc>
 800c3fc:	b930      	cbnz	r0, 800c40c <__multiply+0x44>
 800c3fe:	4602      	mov	r2, r0
 800c400:	4b44      	ldr	r3, [pc, #272]	; (800c514 <__multiply+0x14c>)
 800c402:	4845      	ldr	r0, [pc, #276]	; (800c518 <__multiply+0x150>)
 800c404:	f240 115d 	movw	r1, #349	; 0x15d
 800c408:	f000 fe04 	bl	800d014 <__assert_func>
 800c40c:	f100 0514 	add.w	r5, r0, #20
 800c410:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c414:	462b      	mov	r3, r5
 800c416:	2200      	movs	r2, #0
 800c418:	4543      	cmp	r3, r8
 800c41a:	d321      	bcc.n	800c460 <__multiply+0x98>
 800c41c:	f104 0314 	add.w	r3, r4, #20
 800c420:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c424:	f109 0314 	add.w	r3, r9, #20
 800c428:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c42c:	9202      	str	r2, [sp, #8]
 800c42e:	1b3a      	subs	r2, r7, r4
 800c430:	3a15      	subs	r2, #21
 800c432:	f022 0203 	bic.w	r2, r2, #3
 800c436:	3204      	adds	r2, #4
 800c438:	f104 0115 	add.w	r1, r4, #21
 800c43c:	428f      	cmp	r7, r1
 800c43e:	bf38      	it	cc
 800c440:	2204      	movcc	r2, #4
 800c442:	9201      	str	r2, [sp, #4]
 800c444:	9a02      	ldr	r2, [sp, #8]
 800c446:	9303      	str	r3, [sp, #12]
 800c448:	429a      	cmp	r2, r3
 800c44a:	d80c      	bhi.n	800c466 <__multiply+0x9e>
 800c44c:	2e00      	cmp	r6, #0
 800c44e:	dd03      	ble.n	800c458 <__multiply+0x90>
 800c450:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c454:	2b00      	cmp	r3, #0
 800c456:	d05a      	beq.n	800c50e <__multiply+0x146>
 800c458:	6106      	str	r6, [r0, #16]
 800c45a:	b005      	add	sp, #20
 800c45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c460:	f843 2b04 	str.w	r2, [r3], #4
 800c464:	e7d8      	b.n	800c418 <__multiply+0x50>
 800c466:	f8b3 a000 	ldrh.w	sl, [r3]
 800c46a:	f1ba 0f00 	cmp.w	sl, #0
 800c46e:	d024      	beq.n	800c4ba <__multiply+0xf2>
 800c470:	f104 0e14 	add.w	lr, r4, #20
 800c474:	46a9      	mov	r9, r5
 800c476:	f04f 0c00 	mov.w	ip, #0
 800c47a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c47e:	f8d9 1000 	ldr.w	r1, [r9]
 800c482:	fa1f fb82 	uxth.w	fp, r2
 800c486:	b289      	uxth	r1, r1
 800c488:	fb0a 110b 	mla	r1, sl, fp, r1
 800c48c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c490:	f8d9 2000 	ldr.w	r2, [r9]
 800c494:	4461      	add	r1, ip
 800c496:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c49a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c49e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c4a2:	b289      	uxth	r1, r1
 800c4a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c4a8:	4577      	cmp	r7, lr
 800c4aa:	f849 1b04 	str.w	r1, [r9], #4
 800c4ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c4b2:	d8e2      	bhi.n	800c47a <__multiply+0xb2>
 800c4b4:	9a01      	ldr	r2, [sp, #4]
 800c4b6:	f845 c002 	str.w	ip, [r5, r2]
 800c4ba:	9a03      	ldr	r2, [sp, #12]
 800c4bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c4c0:	3304      	adds	r3, #4
 800c4c2:	f1b9 0f00 	cmp.w	r9, #0
 800c4c6:	d020      	beq.n	800c50a <__multiply+0x142>
 800c4c8:	6829      	ldr	r1, [r5, #0]
 800c4ca:	f104 0c14 	add.w	ip, r4, #20
 800c4ce:	46ae      	mov	lr, r5
 800c4d0:	f04f 0a00 	mov.w	sl, #0
 800c4d4:	f8bc b000 	ldrh.w	fp, [ip]
 800c4d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c4dc:	fb09 220b 	mla	r2, r9, fp, r2
 800c4e0:	4492      	add	sl, r2
 800c4e2:	b289      	uxth	r1, r1
 800c4e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c4e8:	f84e 1b04 	str.w	r1, [lr], #4
 800c4ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c4f0:	f8be 1000 	ldrh.w	r1, [lr]
 800c4f4:	0c12      	lsrs	r2, r2, #16
 800c4f6:	fb09 1102 	mla	r1, r9, r2, r1
 800c4fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c4fe:	4567      	cmp	r7, ip
 800c500:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c504:	d8e6      	bhi.n	800c4d4 <__multiply+0x10c>
 800c506:	9a01      	ldr	r2, [sp, #4]
 800c508:	50a9      	str	r1, [r5, r2]
 800c50a:	3504      	adds	r5, #4
 800c50c:	e79a      	b.n	800c444 <__multiply+0x7c>
 800c50e:	3e01      	subs	r6, #1
 800c510:	e79c      	b.n	800c44c <__multiply+0x84>
 800c512:	bf00      	nop
 800c514:	0800e080 	.word	0x0800e080
 800c518:	0800e10c 	.word	0x0800e10c

0800c51c <__pow5mult>:
 800c51c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c520:	4615      	mov	r5, r2
 800c522:	f012 0203 	ands.w	r2, r2, #3
 800c526:	4606      	mov	r6, r0
 800c528:	460f      	mov	r7, r1
 800c52a:	d007      	beq.n	800c53c <__pow5mult+0x20>
 800c52c:	4c25      	ldr	r4, [pc, #148]	; (800c5c4 <__pow5mult+0xa8>)
 800c52e:	3a01      	subs	r2, #1
 800c530:	2300      	movs	r3, #0
 800c532:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c536:	f7ff fe51 	bl	800c1dc <__multadd>
 800c53a:	4607      	mov	r7, r0
 800c53c:	10ad      	asrs	r5, r5, #2
 800c53e:	d03d      	beq.n	800c5bc <__pow5mult+0xa0>
 800c540:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c542:	b97c      	cbnz	r4, 800c564 <__pow5mult+0x48>
 800c544:	2010      	movs	r0, #16
 800c546:	f7ff fdcd 	bl	800c0e4 <malloc>
 800c54a:	4602      	mov	r2, r0
 800c54c:	6270      	str	r0, [r6, #36]	; 0x24
 800c54e:	b928      	cbnz	r0, 800c55c <__pow5mult+0x40>
 800c550:	4b1d      	ldr	r3, [pc, #116]	; (800c5c8 <__pow5mult+0xac>)
 800c552:	481e      	ldr	r0, [pc, #120]	; (800c5cc <__pow5mult+0xb0>)
 800c554:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c558:	f000 fd5c 	bl	800d014 <__assert_func>
 800c55c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c560:	6004      	str	r4, [r0, #0]
 800c562:	60c4      	str	r4, [r0, #12]
 800c564:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c568:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c56c:	b94c      	cbnz	r4, 800c582 <__pow5mult+0x66>
 800c56e:	f240 2171 	movw	r1, #625	; 0x271
 800c572:	4630      	mov	r0, r6
 800c574:	f7ff ff12 	bl	800c39c <__i2b>
 800c578:	2300      	movs	r3, #0
 800c57a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c57e:	4604      	mov	r4, r0
 800c580:	6003      	str	r3, [r0, #0]
 800c582:	f04f 0900 	mov.w	r9, #0
 800c586:	07eb      	lsls	r3, r5, #31
 800c588:	d50a      	bpl.n	800c5a0 <__pow5mult+0x84>
 800c58a:	4639      	mov	r1, r7
 800c58c:	4622      	mov	r2, r4
 800c58e:	4630      	mov	r0, r6
 800c590:	f7ff ff1a 	bl	800c3c8 <__multiply>
 800c594:	4639      	mov	r1, r7
 800c596:	4680      	mov	r8, r0
 800c598:	4630      	mov	r0, r6
 800c59a:	f7ff fdfd 	bl	800c198 <_Bfree>
 800c59e:	4647      	mov	r7, r8
 800c5a0:	106d      	asrs	r5, r5, #1
 800c5a2:	d00b      	beq.n	800c5bc <__pow5mult+0xa0>
 800c5a4:	6820      	ldr	r0, [r4, #0]
 800c5a6:	b938      	cbnz	r0, 800c5b8 <__pow5mult+0x9c>
 800c5a8:	4622      	mov	r2, r4
 800c5aa:	4621      	mov	r1, r4
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	f7ff ff0b 	bl	800c3c8 <__multiply>
 800c5b2:	6020      	str	r0, [r4, #0]
 800c5b4:	f8c0 9000 	str.w	r9, [r0]
 800c5b8:	4604      	mov	r4, r0
 800c5ba:	e7e4      	b.n	800c586 <__pow5mult+0x6a>
 800c5bc:	4638      	mov	r0, r7
 800c5be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5c2:	bf00      	nop
 800c5c4:	0800e258 	.word	0x0800e258
 800c5c8:	0800e00e 	.word	0x0800e00e
 800c5cc:	0800e10c 	.word	0x0800e10c

0800c5d0 <__lshift>:
 800c5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5d4:	460c      	mov	r4, r1
 800c5d6:	6849      	ldr	r1, [r1, #4]
 800c5d8:	6923      	ldr	r3, [r4, #16]
 800c5da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c5de:	68a3      	ldr	r3, [r4, #8]
 800c5e0:	4607      	mov	r7, r0
 800c5e2:	4691      	mov	r9, r2
 800c5e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c5e8:	f108 0601 	add.w	r6, r8, #1
 800c5ec:	42b3      	cmp	r3, r6
 800c5ee:	db0b      	blt.n	800c608 <__lshift+0x38>
 800c5f0:	4638      	mov	r0, r7
 800c5f2:	f7ff fd91 	bl	800c118 <_Balloc>
 800c5f6:	4605      	mov	r5, r0
 800c5f8:	b948      	cbnz	r0, 800c60e <__lshift+0x3e>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	4b2a      	ldr	r3, [pc, #168]	; (800c6a8 <__lshift+0xd8>)
 800c5fe:	482b      	ldr	r0, [pc, #172]	; (800c6ac <__lshift+0xdc>)
 800c600:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c604:	f000 fd06 	bl	800d014 <__assert_func>
 800c608:	3101      	adds	r1, #1
 800c60a:	005b      	lsls	r3, r3, #1
 800c60c:	e7ee      	b.n	800c5ec <__lshift+0x1c>
 800c60e:	2300      	movs	r3, #0
 800c610:	f100 0114 	add.w	r1, r0, #20
 800c614:	f100 0210 	add.w	r2, r0, #16
 800c618:	4618      	mov	r0, r3
 800c61a:	4553      	cmp	r3, sl
 800c61c:	db37      	blt.n	800c68e <__lshift+0xbe>
 800c61e:	6920      	ldr	r0, [r4, #16]
 800c620:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c624:	f104 0314 	add.w	r3, r4, #20
 800c628:	f019 091f 	ands.w	r9, r9, #31
 800c62c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c630:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c634:	d02f      	beq.n	800c696 <__lshift+0xc6>
 800c636:	f1c9 0e20 	rsb	lr, r9, #32
 800c63a:	468a      	mov	sl, r1
 800c63c:	f04f 0c00 	mov.w	ip, #0
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	fa02 f209 	lsl.w	r2, r2, r9
 800c646:	ea42 020c 	orr.w	r2, r2, ip
 800c64a:	f84a 2b04 	str.w	r2, [sl], #4
 800c64e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c652:	4298      	cmp	r0, r3
 800c654:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c658:	d8f2      	bhi.n	800c640 <__lshift+0x70>
 800c65a:	1b03      	subs	r3, r0, r4
 800c65c:	3b15      	subs	r3, #21
 800c65e:	f023 0303 	bic.w	r3, r3, #3
 800c662:	3304      	adds	r3, #4
 800c664:	f104 0215 	add.w	r2, r4, #21
 800c668:	4290      	cmp	r0, r2
 800c66a:	bf38      	it	cc
 800c66c:	2304      	movcc	r3, #4
 800c66e:	f841 c003 	str.w	ip, [r1, r3]
 800c672:	f1bc 0f00 	cmp.w	ip, #0
 800c676:	d001      	beq.n	800c67c <__lshift+0xac>
 800c678:	f108 0602 	add.w	r6, r8, #2
 800c67c:	3e01      	subs	r6, #1
 800c67e:	4638      	mov	r0, r7
 800c680:	612e      	str	r6, [r5, #16]
 800c682:	4621      	mov	r1, r4
 800c684:	f7ff fd88 	bl	800c198 <_Bfree>
 800c688:	4628      	mov	r0, r5
 800c68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c68e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c692:	3301      	adds	r3, #1
 800c694:	e7c1      	b.n	800c61a <__lshift+0x4a>
 800c696:	3904      	subs	r1, #4
 800c698:	f853 2b04 	ldr.w	r2, [r3], #4
 800c69c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c6a0:	4298      	cmp	r0, r3
 800c6a2:	d8f9      	bhi.n	800c698 <__lshift+0xc8>
 800c6a4:	e7ea      	b.n	800c67c <__lshift+0xac>
 800c6a6:	bf00      	nop
 800c6a8:	0800e080 	.word	0x0800e080
 800c6ac:	0800e10c 	.word	0x0800e10c

0800c6b0 <__mcmp>:
 800c6b0:	b530      	push	{r4, r5, lr}
 800c6b2:	6902      	ldr	r2, [r0, #16]
 800c6b4:	690c      	ldr	r4, [r1, #16]
 800c6b6:	1b12      	subs	r2, r2, r4
 800c6b8:	d10e      	bne.n	800c6d8 <__mcmp+0x28>
 800c6ba:	f100 0314 	add.w	r3, r0, #20
 800c6be:	3114      	adds	r1, #20
 800c6c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c6c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c6c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c6cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c6d0:	42a5      	cmp	r5, r4
 800c6d2:	d003      	beq.n	800c6dc <__mcmp+0x2c>
 800c6d4:	d305      	bcc.n	800c6e2 <__mcmp+0x32>
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	4610      	mov	r0, r2
 800c6da:	bd30      	pop	{r4, r5, pc}
 800c6dc:	4283      	cmp	r3, r0
 800c6de:	d3f3      	bcc.n	800c6c8 <__mcmp+0x18>
 800c6e0:	e7fa      	b.n	800c6d8 <__mcmp+0x28>
 800c6e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6e6:	e7f7      	b.n	800c6d8 <__mcmp+0x28>

0800c6e8 <__mdiff>:
 800c6e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ec:	460c      	mov	r4, r1
 800c6ee:	4606      	mov	r6, r0
 800c6f0:	4611      	mov	r1, r2
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	4690      	mov	r8, r2
 800c6f6:	f7ff ffdb 	bl	800c6b0 <__mcmp>
 800c6fa:	1e05      	subs	r5, r0, #0
 800c6fc:	d110      	bne.n	800c720 <__mdiff+0x38>
 800c6fe:	4629      	mov	r1, r5
 800c700:	4630      	mov	r0, r6
 800c702:	f7ff fd09 	bl	800c118 <_Balloc>
 800c706:	b930      	cbnz	r0, 800c716 <__mdiff+0x2e>
 800c708:	4b3a      	ldr	r3, [pc, #232]	; (800c7f4 <__mdiff+0x10c>)
 800c70a:	4602      	mov	r2, r0
 800c70c:	f240 2132 	movw	r1, #562	; 0x232
 800c710:	4839      	ldr	r0, [pc, #228]	; (800c7f8 <__mdiff+0x110>)
 800c712:	f000 fc7f 	bl	800d014 <__assert_func>
 800c716:	2301      	movs	r3, #1
 800c718:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c71c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c720:	bfa4      	itt	ge
 800c722:	4643      	movge	r3, r8
 800c724:	46a0      	movge	r8, r4
 800c726:	4630      	mov	r0, r6
 800c728:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c72c:	bfa6      	itte	ge
 800c72e:	461c      	movge	r4, r3
 800c730:	2500      	movge	r5, #0
 800c732:	2501      	movlt	r5, #1
 800c734:	f7ff fcf0 	bl	800c118 <_Balloc>
 800c738:	b920      	cbnz	r0, 800c744 <__mdiff+0x5c>
 800c73a:	4b2e      	ldr	r3, [pc, #184]	; (800c7f4 <__mdiff+0x10c>)
 800c73c:	4602      	mov	r2, r0
 800c73e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c742:	e7e5      	b.n	800c710 <__mdiff+0x28>
 800c744:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c748:	6926      	ldr	r6, [r4, #16]
 800c74a:	60c5      	str	r5, [r0, #12]
 800c74c:	f104 0914 	add.w	r9, r4, #20
 800c750:	f108 0514 	add.w	r5, r8, #20
 800c754:	f100 0e14 	add.w	lr, r0, #20
 800c758:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c75c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c760:	f108 0210 	add.w	r2, r8, #16
 800c764:	46f2      	mov	sl, lr
 800c766:	2100      	movs	r1, #0
 800c768:	f859 3b04 	ldr.w	r3, [r9], #4
 800c76c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c770:	fa1f f883 	uxth.w	r8, r3
 800c774:	fa11 f18b 	uxtah	r1, r1, fp
 800c778:	0c1b      	lsrs	r3, r3, #16
 800c77a:	eba1 0808 	sub.w	r8, r1, r8
 800c77e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c782:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c786:	fa1f f888 	uxth.w	r8, r8
 800c78a:	1419      	asrs	r1, r3, #16
 800c78c:	454e      	cmp	r6, r9
 800c78e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c792:	f84a 3b04 	str.w	r3, [sl], #4
 800c796:	d8e7      	bhi.n	800c768 <__mdiff+0x80>
 800c798:	1b33      	subs	r3, r6, r4
 800c79a:	3b15      	subs	r3, #21
 800c79c:	f023 0303 	bic.w	r3, r3, #3
 800c7a0:	3304      	adds	r3, #4
 800c7a2:	3415      	adds	r4, #21
 800c7a4:	42a6      	cmp	r6, r4
 800c7a6:	bf38      	it	cc
 800c7a8:	2304      	movcc	r3, #4
 800c7aa:	441d      	add	r5, r3
 800c7ac:	4473      	add	r3, lr
 800c7ae:	469e      	mov	lr, r3
 800c7b0:	462e      	mov	r6, r5
 800c7b2:	4566      	cmp	r6, ip
 800c7b4:	d30e      	bcc.n	800c7d4 <__mdiff+0xec>
 800c7b6:	f10c 0203 	add.w	r2, ip, #3
 800c7ba:	1b52      	subs	r2, r2, r5
 800c7bc:	f022 0203 	bic.w	r2, r2, #3
 800c7c0:	3d03      	subs	r5, #3
 800c7c2:	45ac      	cmp	ip, r5
 800c7c4:	bf38      	it	cc
 800c7c6:	2200      	movcc	r2, #0
 800c7c8:	441a      	add	r2, r3
 800c7ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c7ce:	b17b      	cbz	r3, 800c7f0 <__mdiff+0x108>
 800c7d0:	6107      	str	r7, [r0, #16]
 800c7d2:	e7a3      	b.n	800c71c <__mdiff+0x34>
 800c7d4:	f856 8b04 	ldr.w	r8, [r6], #4
 800c7d8:	fa11 f288 	uxtah	r2, r1, r8
 800c7dc:	1414      	asrs	r4, r2, #16
 800c7de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c7e2:	b292      	uxth	r2, r2
 800c7e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c7e8:	f84e 2b04 	str.w	r2, [lr], #4
 800c7ec:	1421      	asrs	r1, r4, #16
 800c7ee:	e7e0      	b.n	800c7b2 <__mdiff+0xca>
 800c7f0:	3f01      	subs	r7, #1
 800c7f2:	e7ea      	b.n	800c7ca <__mdiff+0xe2>
 800c7f4:	0800e080 	.word	0x0800e080
 800c7f8:	0800e10c 	.word	0x0800e10c

0800c7fc <__ulp>:
 800c7fc:	b082      	sub	sp, #8
 800c7fe:	ed8d 0b00 	vstr	d0, [sp]
 800c802:	9b01      	ldr	r3, [sp, #4]
 800c804:	4912      	ldr	r1, [pc, #72]	; (800c850 <__ulp+0x54>)
 800c806:	4019      	ands	r1, r3
 800c808:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c80c:	2900      	cmp	r1, #0
 800c80e:	dd05      	ble.n	800c81c <__ulp+0x20>
 800c810:	2200      	movs	r2, #0
 800c812:	460b      	mov	r3, r1
 800c814:	ec43 2b10 	vmov	d0, r2, r3
 800c818:	b002      	add	sp, #8
 800c81a:	4770      	bx	lr
 800c81c:	4249      	negs	r1, r1
 800c81e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c822:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c826:	f04f 0200 	mov.w	r2, #0
 800c82a:	f04f 0300 	mov.w	r3, #0
 800c82e:	da04      	bge.n	800c83a <__ulp+0x3e>
 800c830:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c834:	fa41 f300 	asr.w	r3, r1, r0
 800c838:	e7ec      	b.n	800c814 <__ulp+0x18>
 800c83a:	f1a0 0114 	sub.w	r1, r0, #20
 800c83e:	291e      	cmp	r1, #30
 800c840:	bfda      	itte	le
 800c842:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c846:	fa20 f101 	lsrle.w	r1, r0, r1
 800c84a:	2101      	movgt	r1, #1
 800c84c:	460a      	mov	r2, r1
 800c84e:	e7e1      	b.n	800c814 <__ulp+0x18>
 800c850:	7ff00000 	.word	0x7ff00000

0800c854 <__b2d>:
 800c854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c856:	6905      	ldr	r5, [r0, #16]
 800c858:	f100 0714 	add.w	r7, r0, #20
 800c85c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c860:	1f2e      	subs	r6, r5, #4
 800c862:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c866:	4620      	mov	r0, r4
 800c868:	f7ff fd48 	bl	800c2fc <__hi0bits>
 800c86c:	f1c0 0320 	rsb	r3, r0, #32
 800c870:	280a      	cmp	r0, #10
 800c872:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c8f0 <__b2d+0x9c>
 800c876:	600b      	str	r3, [r1, #0]
 800c878:	dc14      	bgt.n	800c8a4 <__b2d+0x50>
 800c87a:	f1c0 0e0b 	rsb	lr, r0, #11
 800c87e:	fa24 f10e 	lsr.w	r1, r4, lr
 800c882:	42b7      	cmp	r7, r6
 800c884:	ea41 030c 	orr.w	r3, r1, ip
 800c888:	bf34      	ite	cc
 800c88a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c88e:	2100      	movcs	r1, #0
 800c890:	3015      	adds	r0, #21
 800c892:	fa04 f000 	lsl.w	r0, r4, r0
 800c896:	fa21 f10e 	lsr.w	r1, r1, lr
 800c89a:	ea40 0201 	orr.w	r2, r0, r1
 800c89e:	ec43 2b10 	vmov	d0, r2, r3
 800c8a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8a4:	42b7      	cmp	r7, r6
 800c8a6:	bf3a      	itte	cc
 800c8a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c8ac:	f1a5 0608 	subcc.w	r6, r5, #8
 800c8b0:	2100      	movcs	r1, #0
 800c8b2:	380b      	subs	r0, #11
 800c8b4:	d017      	beq.n	800c8e6 <__b2d+0x92>
 800c8b6:	f1c0 0c20 	rsb	ip, r0, #32
 800c8ba:	fa04 f500 	lsl.w	r5, r4, r0
 800c8be:	42be      	cmp	r6, r7
 800c8c0:	fa21 f40c 	lsr.w	r4, r1, ip
 800c8c4:	ea45 0504 	orr.w	r5, r5, r4
 800c8c8:	bf8c      	ite	hi
 800c8ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c8ce:	2400      	movls	r4, #0
 800c8d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c8d4:	fa01 f000 	lsl.w	r0, r1, r0
 800c8d8:	fa24 f40c 	lsr.w	r4, r4, ip
 800c8dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c8e0:	ea40 0204 	orr.w	r2, r0, r4
 800c8e4:	e7db      	b.n	800c89e <__b2d+0x4a>
 800c8e6:	ea44 030c 	orr.w	r3, r4, ip
 800c8ea:	460a      	mov	r2, r1
 800c8ec:	e7d7      	b.n	800c89e <__b2d+0x4a>
 800c8ee:	bf00      	nop
 800c8f0:	3ff00000 	.word	0x3ff00000

0800c8f4 <__d2b>:
 800c8f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8f8:	4689      	mov	r9, r1
 800c8fa:	2101      	movs	r1, #1
 800c8fc:	ec57 6b10 	vmov	r6, r7, d0
 800c900:	4690      	mov	r8, r2
 800c902:	f7ff fc09 	bl	800c118 <_Balloc>
 800c906:	4604      	mov	r4, r0
 800c908:	b930      	cbnz	r0, 800c918 <__d2b+0x24>
 800c90a:	4602      	mov	r2, r0
 800c90c:	4b25      	ldr	r3, [pc, #148]	; (800c9a4 <__d2b+0xb0>)
 800c90e:	4826      	ldr	r0, [pc, #152]	; (800c9a8 <__d2b+0xb4>)
 800c910:	f240 310a 	movw	r1, #778	; 0x30a
 800c914:	f000 fb7e 	bl	800d014 <__assert_func>
 800c918:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c91c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c920:	bb35      	cbnz	r5, 800c970 <__d2b+0x7c>
 800c922:	2e00      	cmp	r6, #0
 800c924:	9301      	str	r3, [sp, #4]
 800c926:	d028      	beq.n	800c97a <__d2b+0x86>
 800c928:	4668      	mov	r0, sp
 800c92a:	9600      	str	r6, [sp, #0]
 800c92c:	f7ff fd06 	bl	800c33c <__lo0bits>
 800c930:	9900      	ldr	r1, [sp, #0]
 800c932:	b300      	cbz	r0, 800c976 <__d2b+0x82>
 800c934:	9a01      	ldr	r2, [sp, #4]
 800c936:	f1c0 0320 	rsb	r3, r0, #32
 800c93a:	fa02 f303 	lsl.w	r3, r2, r3
 800c93e:	430b      	orrs	r3, r1
 800c940:	40c2      	lsrs	r2, r0
 800c942:	6163      	str	r3, [r4, #20]
 800c944:	9201      	str	r2, [sp, #4]
 800c946:	9b01      	ldr	r3, [sp, #4]
 800c948:	61a3      	str	r3, [r4, #24]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	bf14      	ite	ne
 800c94e:	2202      	movne	r2, #2
 800c950:	2201      	moveq	r2, #1
 800c952:	6122      	str	r2, [r4, #16]
 800c954:	b1d5      	cbz	r5, 800c98c <__d2b+0x98>
 800c956:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c95a:	4405      	add	r5, r0
 800c95c:	f8c9 5000 	str.w	r5, [r9]
 800c960:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c964:	f8c8 0000 	str.w	r0, [r8]
 800c968:	4620      	mov	r0, r4
 800c96a:	b003      	add	sp, #12
 800c96c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c970:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c974:	e7d5      	b.n	800c922 <__d2b+0x2e>
 800c976:	6161      	str	r1, [r4, #20]
 800c978:	e7e5      	b.n	800c946 <__d2b+0x52>
 800c97a:	a801      	add	r0, sp, #4
 800c97c:	f7ff fcde 	bl	800c33c <__lo0bits>
 800c980:	9b01      	ldr	r3, [sp, #4]
 800c982:	6163      	str	r3, [r4, #20]
 800c984:	2201      	movs	r2, #1
 800c986:	6122      	str	r2, [r4, #16]
 800c988:	3020      	adds	r0, #32
 800c98a:	e7e3      	b.n	800c954 <__d2b+0x60>
 800c98c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c990:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c994:	f8c9 0000 	str.w	r0, [r9]
 800c998:	6918      	ldr	r0, [r3, #16]
 800c99a:	f7ff fcaf 	bl	800c2fc <__hi0bits>
 800c99e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c9a2:	e7df      	b.n	800c964 <__d2b+0x70>
 800c9a4:	0800e080 	.word	0x0800e080
 800c9a8:	0800e10c 	.word	0x0800e10c

0800c9ac <__ratio>:
 800c9ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b0:	4688      	mov	r8, r1
 800c9b2:	4669      	mov	r1, sp
 800c9b4:	4681      	mov	r9, r0
 800c9b6:	f7ff ff4d 	bl	800c854 <__b2d>
 800c9ba:	a901      	add	r1, sp, #4
 800c9bc:	4640      	mov	r0, r8
 800c9be:	ec55 4b10 	vmov	r4, r5, d0
 800c9c2:	f7ff ff47 	bl	800c854 <__b2d>
 800c9c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c9ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c9ce:	eba3 0c02 	sub.w	ip, r3, r2
 800c9d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c9d6:	1a9b      	subs	r3, r3, r2
 800c9d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c9dc:	ec51 0b10 	vmov	r0, r1, d0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	bfd6      	itet	le
 800c9e4:	460a      	movle	r2, r1
 800c9e6:	462a      	movgt	r2, r5
 800c9e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c9ec:	468b      	mov	fp, r1
 800c9ee:	462f      	mov	r7, r5
 800c9f0:	bfd4      	ite	le
 800c9f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c9f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	ee10 2a10 	vmov	r2, s0
 800ca00:	465b      	mov	r3, fp
 800ca02:	4639      	mov	r1, r7
 800ca04:	f7f3 ff22 	bl	800084c <__aeabi_ddiv>
 800ca08:	ec41 0b10 	vmov	d0, r0, r1
 800ca0c:	b003      	add	sp, #12
 800ca0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca12 <__copybits>:
 800ca12:	3901      	subs	r1, #1
 800ca14:	b570      	push	{r4, r5, r6, lr}
 800ca16:	1149      	asrs	r1, r1, #5
 800ca18:	6914      	ldr	r4, [r2, #16]
 800ca1a:	3101      	adds	r1, #1
 800ca1c:	f102 0314 	add.w	r3, r2, #20
 800ca20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ca24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ca28:	1f05      	subs	r5, r0, #4
 800ca2a:	42a3      	cmp	r3, r4
 800ca2c:	d30c      	bcc.n	800ca48 <__copybits+0x36>
 800ca2e:	1aa3      	subs	r3, r4, r2
 800ca30:	3b11      	subs	r3, #17
 800ca32:	f023 0303 	bic.w	r3, r3, #3
 800ca36:	3211      	adds	r2, #17
 800ca38:	42a2      	cmp	r2, r4
 800ca3a:	bf88      	it	hi
 800ca3c:	2300      	movhi	r3, #0
 800ca3e:	4418      	add	r0, r3
 800ca40:	2300      	movs	r3, #0
 800ca42:	4288      	cmp	r0, r1
 800ca44:	d305      	bcc.n	800ca52 <__copybits+0x40>
 800ca46:	bd70      	pop	{r4, r5, r6, pc}
 800ca48:	f853 6b04 	ldr.w	r6, [r3], #4
 800ca4c:	f845 6f04 	str.w	r6, [r5, #4]!
 800ca50:	e7eb      	b.n	800ca2a <__copybits+0x18>
 800ca52:	f840 3b04 	str.w	r3, [r0], #4
 800ca56:	e7f4      	b.n	800ca42 <__copybits+0x30>

0800ca58 <__any_on>:
 800ca58:	f100 0214 	add.w	r2, r0, #20
 800ca5c:	6900      	ldr	r0, [r0, #16]
 800ca5e:	114b      	asrs	r3, r1, #5
 800ca60:	4298      	cmp	r0, r3
 800ca62:	b510      	push	{r4, lr}
 800ca64:	db11      	blt.n	800ca8a <__any_on+0x32>
 800ca66:	dd0a      	ble.n	800ca7e <__any_on+0x26>
 800ca68:	f011 011f 	ands.w	r1, r1, #31
 800ca6c:	d007      	beq.n	800ca7e <__any_on+0x26>
 800ca6e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ca72:	fa24 f001 	lsr.w	r0, r4, r1
 800ca76:	fa00 f101 	lsl.w	r1, r0, r1
 800ca7a:	428c      	cmp	r4, r1
 800ca7c:	d10b      	bne.n	800ca96 <__any_on+0x3e>
 800ca7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d803      	bhi.n	800ca8e <__any_on+0x36>
 800ca86:	2000      	movs	r0, #0
 800ca88:	bd10      	pop	{r4, pc}
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	e7f7      	b.n	800ca7e <__any_on+0x26>
 800ca8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca92:	2900      	cmp	r1, #0
 800ca94:	d0f5      	beq.n	800ca82 <__any_on+0x2a>
 800ca96:	2001      	movs	r0, #1
 800ca98:	e7f6      	b.n	800ca88 <__any_on+0x30>

0800ca9a <_calloc_r>:
 800ca9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca9c:	fba1 2402 	umull	r2, r4, r1, r2
 800caa0:	b94c      	cbnz	r4, 800cab6 <_calloc_r+0x1c>
 800caa2:	4611      	mov	r1, r2
 800caa4:	9201      	str	r2, [sp, #4]
 800caa6:	f000 f87b 	bl	800cba0 <_malloc_r>
 800caaa:	9a01      	ldr	r2, [sp, #4]
 800caac:	4605      	mov	r5, r0
 800caae:	b930      	cbnz	r0, 800cabe <_calloc_r+0x24>
 800cab0:	4628      	mov	r0, r5
 800cab2:	b003      	add	sp, #12
 800cab4:	bd30      	pop	{r4, r5, pc}
 800cab6:	220c      	movs	r2, #12
 800cab8:	6002      	str	r2, [r0, #0]
 800caba:	2500      	movs	r5, #0
 800cabc:	e7f8      	b.n	800cab0 <_calloc_r+0x16>
 800cabe:	4621      	mov	r1, r4
 800cac0:	f7fc fb82 	bl	80091c8 <memset>
 800cac4:	e7f4      	b.n	800cab0 <_calloc_r+0x16>
	...

0800cac8 <_free_r>:
 800cac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800caca:	2900      	cmp	r1, #0
 800cacc:	d044      	beq.n	800cb58 <_free_r+0x90>
 800cace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cad2:	9001      	str	r0, [sp, #4]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f1a1 0404 	sub.w	r4, r1, #4
 800cada:	bfb8      	it	lt
 800cadc:	18e4      	addlt	r4, r4, r3
 800cade:	f000 fae3 	bl	800d0a8 <__malloc_lock>
 800cae2:	4a1e      	ldr	r2, [pc, #120]	; (800cb5c <_free_r+0x94>)
 800cae4:	9801      	ldr	r0, [sp, #4]
 800cae6:	6813      	ldr	r3, [r2, #0]
 800cae8:	b933      	cbnz	r3, 800caf8 <_free_r+0x30>
 800caea:	6063      	str	r3, [r4, #4]
 800caec:	6014      	str	r4, [r2, #0]
 800caee:	b003      	add	sp, #12
 800caf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800caf4:	f000 bade 	b.w	800d0b4 <__malloc_unlock>
 800caf8:	42a3      	cmp	r3, r4
 800cafa:	d908      	bls.n	800cb0e <_free_r+0x46>
 800cafc:	6825      	ldr	r5, [r4, #0]
 800cafe:	1961      	adds	r1, r4, r5
 800cb00:	428b      	cmp	r3, r1
 800cb02:	bf01      	itttt	eq
 800cb04:	6819      	ldreq	r1, [r3, #0]
 800cb06:	685b      	ldreq	r3, [r3, #4]
 800cb08:	1949      	addeq	r1, r1, r5
 800cb0a:	6021      	streq	r1, [r4, #0]
 800cb0c:	e7ed      	b.n	800caea <_free_r+0x22>
 800cb0e:	461a      	mov	r2, r3
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	b10b      	cbz	r3, 800cb18 <_free_r+0x50>
 800cb14:	42a3      	cmp	r3, r4
 800cb16:	d9fa      	bls.n	800cb0e <_free_r+0x46>
 800cb18:	6811      	ldr	r1, [r2, #0]
 800cb1a:	1855      	adds	r5, r2, r1
 800cb1c:	42a5      	cmp	r5, r4
 800cb1e:	d10b      	bne.n	800cb38 <_free_r+0x70>
 800cb20:	6824      	ldr	r4, [r4, #0]
 800cb22:	4421      	add	r1, r4
 800cb24:	1854      	adds	r4, r2, r1
 800cb26:	42a3      	cmp	r3, r4
 800cb28:	6011      	str	r1, [r2, #0]
 800cb2a:	d1e0      	bne.n	800caee <_free_r+0x26>
 800cb2c:	681c      	ldr	r4, [r3, #0]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	6053      	str	r3, [r2, #4]
 800cb32:	4421      	add	r1, r4
 800cb34:	6011      	str	r1, [r2, #0]
 800cb36:	e7da      	b.n	800caee <_free_r+0x26>
 800cb38:	d902      	bls.n	800cb40 <_free_r+0x78>
 800cb3a:	230c      	movs	r3, #12
 800cb3c:	6003      	str	r3, [r0, #0]
 800cb3e:	e7d6      	b.n	800caee <_free_r+0x26>
 800cb40:	6825      	ldr	r5, [r4, #0]
 800cb42:	1961      	adds	r1, r4, r5
 800cb44:	428b      	cmp	r3, r1
 800cb46:	bf04      	itt	eq
 800cb48:	6819      	ldreq	r1, [r3, #0]
 800cb4a:	685b      	ldreq	r3, [r3, #4]
 800cb4c:	6063      	str	r3, [r4, #4]
 800cb4e:	bf04      	itt	eq
 800cb50:	1949      	addeq	r1, r1, r5
 800cb52:	6021      	streq	r1, [r4, #0]
 800cb54:	6054      	str	r4, [r2, #4]
 800cb56:	e7ca      	b.n	800caee <_free_r+0x26>
 800cb58:	b003      	add	sp, #12
 800cb5a:	bd30      	pop	{r4, r5, pc}
 800cb5c:	20001b54 	.word	0x20001b54

0800cb60 <sbrk_aligned>:
 800cb60:	b570      	push	{r4, r5, r6, lr}
 800cb62:	4e0e      	ldr	r6, [pc, #56]	; (800cb9c <sbrk_aligned+0x3c>)
 800cb64:	460c      	mov	r4, r1
 800cb66:	6831      	ldr	r1, [r6, #0]
 800cb68:	4605      	mov	r5, r0
 800cb6a:	b911      	cbnz	r1, 800cb72 <sbrk_aligned+0x12>
 800cb6c:	f000 fa20 	bl	800cfb0 <_sbrk_r>
 800cb70:	6030      	str	r0, [r6, #0]
 800cb72:	4621      	mov	r1, r4
 800cb74:	4628      	mov	r0, r5
 800cb76:	f000 fa1b 	bl	800cfb0 <_sbrk_r>
 800cb7a:	1c43      	adds	r3, r0, #1
 800cb7c:	d00a      	beq.n	800cb94 <sbrk_aligned+0x34>
 800cb7e:	1cc4      	adds	r4, r0, #3
 800cb80:	f024 0403 	bic.w	r4, r4, #3
 800cb84:	42a0      	cmp	r0, r4
 800cb86:	d007      	beq.n	800cb98 <sbrk_aligned+0x38>
 800cb88:	1a21      	subs	r1, r4, r0
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	f000 fa10 	bl	800cfb0 <_sbrk_r>
 800cb90:	3001      	adds	r0, #1
 800cb92:	d101      	bne.n	800cb98 <sbrk_aligned+0x38>
 800cb94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cb98:	4620      	mov	r0, r4
 800cb9a:	bd70      	pop	{r4, r5, r6, pc}
 800cb9c:	20001b58 	.word	0x20001b58

0800cba0 <_malloc_r>:
 800cba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cba4:	1ccd      	adds	r5, r1, #3
 800cba6:	f025 0503 	bic.w	r5, r5, #3
 800cbaa:	3508      	adds	r5, #8
 800cbac:	2d0c      	cmp	r5, #12
 800cbae:	bf38      	it	cc
 800cbb0:	250c      	movcc	r5, #12
 800cbb2:	2d00      	cmp	r5, #0
 800cbb4:	4607      	mov	r7, r0
 800cbb6:	db01      	blt.n	800cbbc <_malloc_r+0x1c>
 800cbb8:	42a9      	cmp	r1, r5
 800cbba:	d905      	bls.n	800cbc8 <_malloc_r+0x28>
 800cbbc:	230c      	movs	r3, #12
 800cbbe:	603b      	str	r3, [r7, #0]
 800cbc0:	2600      	movs	r6, #0
 800cbc2:	4630      	mov	r0, r6
 800cbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbc8:	4e2e      	ldr	r6, [pc, #184]	; (800cc84 <_malloc_r+0xe4>)
 800cbca:	f000 fa6d 	bl	800d0a8 <__malloc_lock>
 800cbce:	6833      	ldr	r3, [r6, #0]
 800cbd0:	461c      	mov	r4, r3
 800cbd2:	bb34      	cbnz	r4, 800cc22 <_malloc_r+0x82>
 800cbd4:	4629      	mov	r1, r5
 800cbd6:	4638      	mov	r0, r7
 800cbd8:	f7ff ffc2 	bl	800cb60 <sbrk_aligned>
 800cbdc:	1c43      	adds	r3, r0, #1
 800cbde:	4604      	mov	r4, r0
 800cbe0:	d14d      	bne.n	800cc7e <_malloc_r+0xde>
 800cbe2:	6834      	ldr	r4, [r6, #0]
 800cbe4:	4626      	mov	r6, r4
 800cbe6:	2e00      	cmp	r6, #0
 800cbe8:	d140      	bne.n	800cc6c <_malloc_r+0xcc>
 800cbea:	6823      	ldr	r3, [r4, #0]
 800cbec:	4631      	mov	r1, r6
 800cbee:	4638      	mov	r0, r7
 800cbf0:	eb04 0803 	add.w	r8, r4, r3
 800cbf4:	f000 f9dc 	bl	800cfb0 <_sbrk_r>
 800cbf8:	4580      	cmp	r8, r0
 800cbfa:	d13a      	bne.n	800cc72 <_malloc_r+0xd2>
 800cbfc:	6821      	ldr	r1, [r4, #0]
 800cbfe:	3503      	adds	r5, #3
 800cc00:	1a6d      	subs	r5, r5, r1
 800cc02:	f025 0503 	bic.w	r5, r5, #3
 800cc06:	3508      	adds	r5, #8
 800cc08:	2d0c      	cmp	r5, #12
 800cc0a:	bf38      	it	cc
 800cc0c:	250c      	movcc	r5, #12
 800cc0e:	4629      	mov	r1, r5
 800cc10:	4638      	mov	r0, r7
 800cc12:	f7ff ffa5 	bl	800cb60 <sbrk_aligned>
 800cc16:	3001      	adds	r0, #1
 800cc18:	d02b      	beq.n	800cc72 <_malloc_r+0xd2>
 800cc1a:	6823      	ldr	r3, [r4, #0]
 800cc1c:	442b      	add	r3, r5
 800cc1e:	6023      	str	r3, [r4, #0]
 800cc20:	e00e      	b.n	800cc40 <_malloc_r+0xa0>
 800cc22:	6822      	ldr	r2, [r4, #0]
 800cc24:	1b52      	subs	r2, r2, r5
 800cc26:	d41e      	bmi.n	800cc66 <_malloc_r+0xc6>
 800cc28:	2a0b      	cmp	r2, #11
 800cc2a:	d916      	bls.n	800cc5a <_malloc_r+0xba>
 800cc2c:	1961      	adds	r1, r4, r5
 800cc2e:	42a3      	cmp	r3, r4
 800cc30:	6025      	str	r5, [r4, #0]
 800cc32:	bf18      	it	ne
 800cc34:	6059      	strne	r1, [r3, #4]
 800cc36:	6863      	ldr	r3, [r4, #4]
 800cc38:	bf08      	it	eq
 800cc3a:	6031      	streq	r1, [r6, #0]
 800cc3c:	5162      	str	r2, [r4, r5]
 800cc3e:	604b      	str	r3, [r1, #4]
 800cc40:	4638      	mov	r0, r7
 800cc42:	f104 060b 	add.w	r6, r4, #11
 800cc46:	f000 fa35 	bl	800d0b4 <__malloc_unlock>
 800cc4a:	f026 0607 	bic.w	r6, r6, #7
 800cc4e:	1d23      	adds	r3, r4, #4
 800cc50:	1af2      	subs	r2, r6, r3
 800cc52:	d0b6      	beq.n	800cbc2 <_malloc_r+0x22>
 800cc54:	1b9b      	subs	r3, r3, r6
 800cc56:	50a3      	str	r3, [r4, r2]
 800cc58:	e7b3      	b.n	800cbc2 <_malloc_r+0x22>
 800cc5a:	6862      	ldr	r2, [r4, #4]
 800cc5c:	42a3      	cmp	r3, r4
 800cc5e:	bf0c      	ite	eq
 800cc60:	6032      	streq	r2, [r6, #0]
 800cc62:	605a      	strne	r2, [r3, #4]
 800cc64:	e7ec      	b.n	800cc40 <_malloc_r+0xa0>
 800cc66:	4623      	mov	r3, r4
 800cc68:	6864      	ldr	r4, [r4, #4]
 800cc6a:	e7b2      	b.n	800cbd2 <_malloc_r+0x32>
 800cc6c:	4634      	mov	r4, r6
 800cc6e:	6876      	ldr	r6, [r6, #4]
 800cc70:	e7b9      	b.n	800cbe6 <_malloc_r+0x46>
 800cc72:	230c      	movs	r3, #12
 800cc74:	603b      	str	r3, [r7, #0]
 800cc76:	4638      	mov	r0, r7
 800cc78:	f000 fa1c 	bl	800d0b4 <__malloc_unlock>
 800cc7c:	e7a1      	b.n	800cbc2 <_malloc_r+0x22>
 800cc7e:	6025      	str	r5, [r4, #0]
 800cc80:	e7de      	b.n	800cc40 <_malloc_r+0xa0>
 800cc82:	bf00      	nop
 800cc84:	20001b54 	.word	0x20001b54

0800cc88 <_realloc_r>:
 800cc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc8c:	4680      	mov	r8, r0
 800cc8e:	4614      	mov	r4, r2
 800cc90:	460e      	mov	r6, r1
 800cc92:	b921      	cbnz	r1, 800cc9e <_realloc_r+0x16>
 800cc94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc98:	4611      	mov	r1, r2
 800cc9a:	f7ff bf81 	b.w	800cba0 <_malloc_r>
 800cc9e:	b92a      	cbnz	r2, 800ccac <_realloc_r+0x24>
 800cca0:	f7ff ff12 	bl	800cac8 <_free_r>
 800cca4:	4625      	mov	r5, r4
 800cca6:	4628      	mov	r0, r5
 800cca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccac:	f000 fa08 	bl	800d0c0 <_malloc_usable_size_r>
 800ccb0:	4284      	cmp	r4, r0
 800ccb2:	4607      	mov	r7, r0
 800ccb4:	d802      	bhi.n	800ccbc <_realloc_r+0x34>
 800ccb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ccba:	d812      	bhi.n	800cce2 <_realloc_r+0x5a>
 800ccbc:	4621      	mov	r1, r4
 800ccbe:	4640      	mov	r0, r8
 800ccc0:	f7ff ff6e 	bl	800cba0 <_malloc_r>
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	d0ed      	beq.n	800cca6 <_realloc_r+0x1e>
 800ccca:	42bc      	cmp	r4, r7
 800cccc:	4622      	mov	r2, r4
 800ccce:	4631      	mov	r1, r6
 800ccd0:	bf28      	it	cs
 800ccd2:	463a      	movcs	r2, r7
 800ccd4:	f7fc fa6a 	bl	80091ac <memcpy>
 800ccd8:	4631      	mov	r1, r6
 800ccda:	4640      	mov	r0, r8
 800ccdc:	f7ff fef4 	bl	800cac8 <_free_r>
 800cce0:	e7e1      	b.n	800cca6 <_realloc_r+0x1e>
 800cce2:	4635      	mov	r5, r6
 800cce4:	e7df      	b.n	800cca6 <_realloc_r+0x1e>

0800cce6 <__ssputs_r>:
 800cce6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccea:	688e      	ldr	r6, [r1, #8]
 800ccec:	429e      	cmp	r6, r3
 800ccee:	4682      	mov	sl, r0
 800ccf0:	460c      	mov	r4, r1
 800ccf2:	4690      	mov	r8, r2
 800ccf4:	461f      	mov	r7, r3
 800ccf6:	d838      	bhi.n	800cd6a <__ssputs_r+0x84>
 800ccf8:	898a      	ldrh	r2, [r1, #12]
 800ccfa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ccfe:	d032      	beq.n	800cd66 <__ssputs_r+0x80>
 800cd00:	6825      	ldr	r5, [r4, #0]
 800cd02:	6909      	ldr	r1, [r1, #16]
 800cd04:	eba5 0901 	sub.w	r9, r5, r1
 800cd08:	6965      	ldr	r5, [r4, #20]
 800cd0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd12:	3301      	adds	r3, #1
 800cd14:	444b      	add	r3, r9
 800cd16:	106d      	asrs	r5, r5, #1
 800cd18:	429d      	cmp	r5, r3
 800cd1a:	bf38      	it	cc
 800cd1c:	461d      	movcc	r5, r3
 800cd1e:	0553      	lsls	r3, r2, #21
 800cd20:	d531      	bpl.n	800cd86 <__ssputs_r+0xa0>
 800cd22:	4629      	mov	r1, r5
 800cd24:	f7ff ff3c 	bl	800cba0 <_malloc_r>
 800cd28:	4606      	mov	r6, r0
 800cd2a:	b950      	cbnz	r0, 800cd42 <__ssputs_r+0x5c>
 800cd2c:	230c      	movs	r3, #12
 800cd2e:	f8ca 3000 	str.w	r3, [sl]
 800cd32:	89a3      	ldrh	r3, [r4, #12]
 800cd34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd38:	81a3      	strh	r3, [r4, #12]
 800cd3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd42:	6921      	ldr	r1, [r4, #16]
 800cd44:	464a      	mov	r2, r9
 800cd46:	f7fc fa31 	bl	80091ac <memcpy>
 800cd4a:	89a3      	ldrh	r3, [r4, #12]
 800cd4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd54:	81a3      	strh	r3, [r4, #12]
 800cd56:	6126      	str	r6, [r4, #16]
 800cd58:	6165      	str	r5, [r4, #20]
 800cd5a:	444e      	add	r6, r9
 800cd5c:	eba5 0509 	sub.w	r5, r5, r9
 800cd60:	6026      	str	r6, [r4, #0]
 800cd62:	60a5      	str	r5, [r4, #8]
 800cd64:	463e      	mov	r6, r7
 800cd66:	42be      	cmp	r6, r7
 800cd68:	d900      	bls.n	800cd6c <__ssputs_r+0x86>
 800cd6a:	463e      	mov	r6, r7
 800cd6c:	6820      	ldr	r0, [r4, #0]
 800cd6e:	4632      	mov	r2, r6
 800cd70:	4641      	mov	r1, r8
 800cd72:	f000 f97f 	bl	800d074 <memmove>
 800cd76:	68a3      	ldr	r3, [r4, #8]
 800cd78:	1b9b      	subs	r3, r3, r6
 800cd7a:	60a3      	str	r3, [r4, #8]
 800cd7c:	6823      	ldr	r3, [r4, #0]
 800cd7e:	4433      	add	r3, r6
 800cd80:	6023      	str	r3, [r4, #0]
 800cd82:	2000      	movs	r0, #0
 800cd84:	e7db      	b.n	800cd3e <__ssputs_r+0x58>
 800cd86:	462a      	mov	r2, r5
 800cd88:	f7ff ff7e 	bl	800cc88 <_realloc_r>
 800cd8c:	4606      	mov	r6, r0
 800cd8e:	2800      	cmp	r0, #0
 800cd90:	d1e1      	bne.n	800cd56 <__ssputs_r+0x70>
 800cd92:	6921      	ldr	r1, [r4, #16]
 800cd94:	4650      	mov	r0, sl
 800cd96:	f7ff fe97 	bl	800cac8 <_free_r>
 800cd9a:	e7c7      	b.n	800cd2c <__ssputs_r+0x46>

0800cd9c <_svfiprintf_r>:
 800cd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda0:	4698      	mov	r8, r3
 800cda2:	898b      	ldrh	r3, [r1, #12]
 800cda4:	061b      	lsls	r3, r3, #24
 800cda6:	b09d      	sub	sp, #116	; 0x74
 800cda8:	4607      	mov	r7, r0
 800cdaa:	460d      	mov	r5, r1
 800cdac:	4614      	mov	r4, r2
 800cdae:	d50e      	bpl.n	800cdce <_svfiprintf_r+0x32>
 800cdb0:	690b      	ldr	r3, [r1, #16]
 800cdb2:	b963      	cbnz	r3, 800cdce <_svfiprintf_r+0x32>
 800cdb4:	2140      	movs	r1, #64	; 0x40
 800cdb6:	f7ff fef3 	bl	800cba0 <_malloc_r>
 800cdba:	6028      	str	r0, [r5, #0]
 800cdbc:	6128      	str	r0, [r5, #16]
 800cdbe:	b920      	cbnz	r0, 800cdca <_svfiprintf_r+0x2e>
 800cdc0:	230c      	movs	r3, #12
 800cdc2:	603b      	str	r3, [r7, #0]
 800cdc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdc8:	e0d1      	b.n	800cf6e <_svfiprintf_r+0x1d2>
 800cdca:	2340      	movs	r3, #64	; 0x40
 800cdcc:	616b      	str	r3, [r5, #20]
 800cdce:	2300      	movs	r3, #0
 800cdd0:	9309      	str	r3, [sp, #36]	; 0x24
 800cdd2:	2320      	movs	r3, #32
 800cdd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cdd8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cddc:	2330      	movs	r3, #48	; 0x30
 800cdde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cf88 <_svfiprintf_r+0x1ec>
 800cde2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cde6:	f04f 0901 	mov.w	r9, #1
 800cdea:	4623      	mov	r3, r4
 800cdec:	469a      	mov	sl, r3
 800cdee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdf2:	b10a      	cbz	r2, 800cdf8 <_svfiprintf_r+0x5c>
 800cdf4:	2a25      	cmp	r2, #37	; 0x25
 800cdf6:	d1f9      	bne.n	800cdec <_svfiprintf_r+0x50>
 800cdf8:	ebba 0b04 	subs.w	fp, sl, r4
 800cdfc:	d00b      	beq.n	800ce16 <_svfiprintf_r+0x7a>
 800cdfe:	465b      	mov	r3, fp
 800ce00:	4622      	mov	r2, r4
 800ce02:	4629      	mov	r1, r5
 800ce04:	4638      	mov	r0, r7
 800ce06:	f7ff ff6e 	bl	800cce6 <__ssputs_r>
 800ce0a:	3001      	adds	r0, #1
 800ce0c:	f000 80aa 	beq.w	800cf64 <_svfiprintf_r+0x1c8>
 800ce10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce12:	445a      	add	r2, fp
 800ce14:	9209      	str	r2, [sp, #36]	; 0x24
 800ce16:	f89a 3000 	ldrb.w	r3, [sl]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	f000 80a2 	beq.w	800cf64 <_svfiprintf_r+0x1c8>
 800ce20:	2300      	movs	r3, #0
 800ce22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce2a:	f10a 0a01 	add.w	sl, sl, #1
 800ce2e:	9304      	str	r3, [sp, #16]
 800ce30:	9307      	str	r3, [sp, #28]
 800ce32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce36:	931a      	str	r3, [sp, #104]	; 0x68
 800ce38:	4654      	mov	r4, sl
 800ce3a:	2205      	movs	r2, #5
 800ce3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce40:	4851      	ldr	r0, [pc, #324]	; (800cf88 <_svfiprintf_r+0x1ec>)
 800ce42:	f7f3 f9cd 	bl	80001e0 <memchr>
 800ce46:	9a04      	ldr	r2, [sp, #16]
 800ce48:	b9d8      	cbnz	r0, 800ce82 <_svfiprintf_r+0xe6>
 800ce4a:	06d0      	lsls	r0, r2, #27
 800ce4c:	bf44      	itt	mi
 800ce4e:	2320      	movmi	r3, #32
 800ce50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce54:	0711      	lsls	r1, r2, #28
 800ce56:	bf44      	itt	mi
 800ce58:	232b      	movmi	r3, #43	; 0x2b
 800ce5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce5e:	f89a 3000 	ldrb.w	r3, [sl]
 800ce62:	2b2a      	cmp	r3, #42	; 0x2a
 800ce64:	d015      	beq.n	800ce92 <_svfiprintf_r+0xf6>
 800ce66:	9a07      	ldr	r2, [sp, #28]
 800ce68:	4654      	mov	r4, sl
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	f04f 0c0a 	mov.w	ip, #10
 800ce70:	4621      	mov	r1, r4
 800ce72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce76:	3b30      	subs	r3, #48	; 0x30
 800ce78:	2b09      	cmp	r3, #9
 800ce7a:	d94e      	bls.n	800cf1a <_svfiprintf_r+0x17e>
 800ce7c:	b1b0      	cbz	r0, 800ceac <_svfiprintf_r+0x110>
 800ce7e:	9207      	str	r2, [sp, #28]
 800ce80:	e014      	b.n	800ceac <_svfiprintf_r+0x110>
 800ce82:	eba0 0308 	sub.w	r3, r0, r8
 800ce86:	fa09 f303 	lsl.w	r3, r9, r3
 800ce8a:	4313      	orrs	r3, r2
 800ce8c:	9304      	str	r3, [sp, #16]
 800ce8e:	46a2      	mov	sl, r4
 800ce90:	e7d2      	b.n	800ce38 <_svfiprintf_r+0x9c>
 800ce92:	9b03      	ldr	r3, [sp, #12]
 800ce94:	1d19      	adds	r1, r3, #4
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	9103      	str	r1, [sp, #12]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	bfbb      	ittet	lt
 800ce9e:	425b      	neglt	r3, r3
 800cea0:	f042 0202 	orrlt.w	r2, r2, #2
 800cea4:	9307      	strge	r3, [sp, #28]
 800cea6:	9307      	strlt	r3, [sp, #28]
 800cea8:	bfb8      	it	lt
 800ceaa:	9204      	strlt	r2, [sp, #16]
 800ceac:	7823      	ldrb	r3, [r4, #0]
 800ceae:	2b2e      	cmp	r3, #46	; 0x2e
 800ceb0:	d10c      	bne.n	800cecc <_svfiprintf_r+0x130>
 800ceb2:	7863      	ldrb	r3, [r4, #1]
 800ceb4:	2b2a      	cmp	r3, #42	; 0x2a
 800ceb6:	d135      	bne.n	800cf24 <_svfiprintf_r+0x188>
 800ceb8:	9b03      	ldr	r3, [sp, #12]
 800ceba:	1d1a      	adds	r2, r3, #4
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	9203      	str	r2, [sp, #12]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	bfb8      	it	lt
 800cec4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cec8:	3402      	adds	r4, #2
 800ceca:	9305      	str	r3, [sp, #20]
 800cecc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cf98 <_svfiprintf_r+0x1fc>
 800ced0:	7821      	ldrb	r1, [r4, #0]
 800ced2:	2203      	movs	r2, #3
 800ced4:	4650      	mov	r0, sl
 800ced6:	f7f3 f983 	bl	80001e0 <memchr>
 800ceda:	b140      	cbz	r0, 800ceee <_svfiprintf_r+0x152>
 800cedc:	2340      	movs	r3, #64	; 0x40
 800cede:	eba0 000a 	sub.w	r0, r0, sl
 800cee2:	fa03 f000 	lsl.w	r0, r3, r0
 800cee6:	9b04      	ldr	r3, [sp, #16]
 800cee8:	4303      	orrs	r3, r0
 800ceea:	3401      	adds	r4, #1
 800ceec:	9304      	str	r3, [sp, #16]
 800ceee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cef2:	4826      	ldr	r0, [pc, #152]	; (800cf8c <_svfiprintf_r+0x1f0>)
 800cef4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cef8:	2206      	movs	r2, #6
 800cefa:	f7f3 f971 	bl	80001e0 <memchr>
 800cefe:	2800      	cmp	r0, #0
 800cf00:	d038      	beq.n	800cf74 <_svfiprintf_r+0x1d8>
 800cf02:	4b23      	ldr	r3, [pc, #140]	; (800cf90 <_svfiprintf_r+0x1f4>)
 800cf04:	bb1b      	cbnz	r3, 800cf4e <_svfiprintf_r+0x1b2>
 800cf06:	9b03      	ldr	r3, [sp, #12]
 800cf08:	3307      	adds	r3, #7
 800cf0a:	f023 0307 	bic.w	r3, r3, #7
 800cf0e:	3308      	adds	r3, #8
 800cf10:	9303      	str	r3, [sp, #12]
 800cf12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf14:	4433      	add	r3, r6
 800cf16:	9309      	str	r3, [sp, #36]	; 0x24
 800cf18:	e767      	b.n	800cdea <_svfiprintf_r+0x4e>
 800cf1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf1e:	460c      	mov	r4, r1
 800cf20:	2001      	movs	r0, #1
 800cf22:	e7a5      	b.n	800ce70 <_svfiprintf_r+0xd4>
 800cf24:	2300      	movs	r3, #0
 800cf26:	3401      	adds	r4, #1
 800cf28:	9305      	str	r3, [sp, #20]
 800cf2a:	4619      	mov	r1, r3
 800cf2c:	f04f 0c0a 	mov.w	ip, #10
 800cf30:	4620      	mov	r0, r4
 800cf32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf36:	3a30      	subs	r2, #48	; 0x30
 800cf38:	2a09      	cmp	r2, #9
 800cf3a:	d903      	bls.n	800cf44 <_svfiprintf_r+0x1a8>
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d0c5      	beq.n	800cecc <_svfiprintf_r+0x130>
 800cf40:	9105      	str	r1, [sp, #20]
 800cf42:	e7c3      	b.n	800cecc <_svfiprintf_r+0x130>
 800cf44:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf48:	4604      	mov	r4, r0
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	e7f0      	b.n	800cf30 <_svfiprintf_r+0x194>
 800cf4e:	ab03      	add	r3, sp, #12
 800cf50:	9300      	str	r3, [sp, #0]
 800cf52:	462a      	mov	r2, r5
 800cf54:	4b0f      	ldr	r3, [pc, #60]	; (800cf94 <_svfiprintf_r+0x1f8>)
 800cf56:	a904      	add	r1, sp, #16
 800cf58:	4638      	mov	r0, r7
 800cf5a:	f7fc f9dd 	bl	8009318 <_printf_float>
 800cf5e:	1c42      	adds	r2, r0, #1
 800cf60:	4606      	mov	r6, r0
 800cf62:	d1d6      	bne.n	800cf12 <_svfiprintf_r+0x176>
 800cf64:	89ab      	ldrh	r3, [r5, #12]
 800cf66:	065b      	lsls	r3, r3, #25
 800cf68:	f53f af2c 	bmi.w	800cdc4 <_svfiprintf_r+0x28>
 800cf6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf6e:	b01d      	add	sp, #116	; 0x74
 800cf70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf74:	ab03      	add	r3, sp, #12
 800cf76:	9300      	str	r3, [sp, #0]
 800cf78:	462a      	mov	r2, r5
 800cf7a:	4b06      	ldr	r3, [pc, #24]	; (800cf94 <_svfiprintf_r+0x1f8>)
 800cf7c:	a904      	add	r1, sp, #16
 800cf7e:	4638      	mov	r0, r7
 800cf80:	f7fc fc6e 	bl	8009860 <_printf_i>
 800cf84:	e7eb      	b.n	800cf5e <_svfiprintf_r+0x1c2>
 800cf86:	bf00      	nop
 800cf88:	0800e264 	.word	0x0800e264
 800cf8c:	0800e26e 	.word	0x0800e26e
 800cf90:	08009319 	.word	0x08009319
 800cf94:	0800cce7 	.word	0x0800cce7
 800cf98:	0800e26a 	.word	0x0800e26a
 800cf9c:	00000000 	.word	0x00000000

0800cfa0 <nan>:
 800cfa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cfa8 <nan+0x8>
 800cfa4:	4770      	bx	lr
 800cfa6:	bf00      	nop
 800cfa8:	00000000 	.word	0x00000000
 800cfac:	7ff80000 	.word	0x7ff80000

0800cfb0 <_sbrk_r>:
 800cfb0:	b538      	push	{r3, r4, r5, lr}
 800cfb2:	4d06      	ldr	r5, [pc, #24]	; (800cfcc <_sbrk_r+0x1c>)
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	4604      	mov	r4, r0
 800cfb8:	4608      	mov	r0, r1
 800cfba:	602b      	str	r3, [r5, #0]
 800cfbc:	f7f8 f918 	bl	80051f0 <_sbrk>
 800cfc0:	1c43      	adds	r3, r0, #1
 800cfc2:	d102      	bne.n	800cfca <_sbrk_r+0x1a>
 800cfc4:	682b      	ldr	r3, [r5, #0]
 800cfc6:	b103      	cbz	r3, 800cfca <_sbrk_r+0x1a>
 800cfc8:	6023      	str	r3, [r4, #0]
 800cfca:	bd38      	pop	{r3, r4, r5, pc}
 800cfcc:	20001b5c 	.word	0x20001b5c

0800cfd0 <strncmp>:
 800cfd0:	b510      	push	{r4, lr}
 800cfd2:	b17a      	cbz	r2, 800cff4 <strncmp+0x24>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	3901      	subs	r1, #1
 800cfd8:	1884      	adds	r4, r0, r2
 800cfda:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cfde:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cfe2:	4290      	cmp	r0, r2
 800cfe4:	d101      	bne.n	800cfea <strncmp+0x1a>
 800cfe6:	42a3      	cmp	r3, r4
 800cfe8:	d101      	bne.n	800cfee <strncmp+0x1e>
 800cfea:	1a80      	subs	r0, r0, r2
 800cfec:	bd10      	pop	{r4, pc}
 800cfee:	2800      	cmp	r0, #0
 800cff0:	d1f3      	bne.n	800cfda <strncmp+0xa>
 800cff2:	e7fa      	b.n	800cfea <strncmp+0x1a>
 800cff4:	4610      	mov	r0, r2
 800cff6:	e7f9      	b.n	800cfec <strncmp+0x1c>

0800cff8 <__ascii_wctomb>:
 800cff8:	b149      	cbz	r1, 800d00e <__ascii_wctomb+0x16>
 800cffa:	2aff      	cmp	r2, #255	; 0xff
 800cffc:	bf85      	ittet	hi
 800cffe:	238a      	movhi	r3, #138	; 0x8a
 800d000:	6003      	strhi	r3, [r0, #0]
 800d002:	700a      	strbls	r2, [r1, #0]
 800d004:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d008:	bf98      	it	ls
 800d00a:	2001      	movls	r0, #1
 800d00c:	4770      	bx	lr
 800d00e:	4608      	mov	r0, r1
 800d010:	4770      	bx	lr
	...

0800d014 <__assert_func>:
 800d014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d016:	4614      	mov	r4, r2
 800d018:	461a      	mov	r2, r3
 800d01a:	4b09      	ldr	r3, [pc, #36]	; (800d040 <__assert_func+0x2c>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4605      	mov	r5, r0
 800d020:	68d8      	ldr	r0, [r3, #12]
 800d022:	b14c      	cbz	r4, 800d038 <__assert_func+0x24>
 800d024:	4b07      	ldr	r3, [pc, #28]	; (800d044 <__assert_func+0x30>)
 800d026:	9100      	str	r1, [sp, #0]
 800d028:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d02c:	4906      	ldr	r1, [pc, #24]	; (800d048 <__assert_func+0x34>)
 800d02e:	462b      	mov	r3, r5
 800d030:	f000 f80e 	bl	800d050 <fiprintf>
 800d034:	f7fc f889 	bl	800914a <abort>
 800d038:	4b04      	ldr	r3, [pc, #16]	; (800d04c <__assert_func+0x38>)
 800d03a:	461c      	mov	r4, r3
 800d03c:	e7f3      	b.n	800d026 <__assert_func+0x12>
 800d03e:	bf00      	nop
 800d040:	20000024 	.word	0x20000024
 800d044:	0800e275 	.word	0x0800e275
 800d048:	0800e282 	.word	0x0800e282
 800d04c:	0800e2b0 	.word	0x0800e2b0

0800d050 <fiprintf>:
 800d050:	b40e      	push	{r1, r2, r3}
 800d052:	b503      	push	{r0, r1, lr}
 800d054:	4601      	mov	r1, r0
 800d056:	ab03      	add	r3, sp, #12
 800d058:	4805      	ldr	r0, [pc, #20]	; (800d070 <fiprintf+0x20>)
 800d05a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d05e:	6800      	ldr	r0, [r0, #0]
 800d060:	9301      	str	r3, [sp, #4]
 800d062:	f000 f85f 	bl	800d124 <_vfiprintf_r>
 800d066:	b002      	add	sp, #8
 800d068:	f85d eb04 	ldr.w	lr, [sp], #4
 800d06c:	b003      	add	sp, #12
 800d06e:	4770      	bx	lr
 800d070:	20000024 	.word	0x20000024

0800d074 <memmove>:
 800d074:	4288      	cmp	r0, r1
 800d076:	b510      	push	{r4, lr}
 800d078:	eb01 0402 	add.w	r4, r1, r2
 800d07c:	d902      	bls.n	800d084 <memmove+0x10>
 800d07e:	4284      	cmp	r4, r0
 800d080:	4623      	mov	r3, r4
 800d082:	d807      	bhi.n	800d094 <memmove+0x20>
 800d084:	1e43      	subs	r3, r0, #1
 800d086:	42a1      	cmp	r1, r4
 800d088:	d008      	beq.n	800d09c <memmove+0x28>
 800d08a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d08e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d092:	e7f8      	b.n	800d086 <memmove+0x12>
 800d094:	4402      	add	r2, r0
 800d096:	4601      	mov	r1, r0
 800d098:	428a      	cmp	r2, r1
 800d09a:	d100      	bne.n	800d09e <memmove+0x2a>
 800d09c:	bd10      	pop	{r4, pc}
 800d09e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0a6:	e7f7      	b.n	800d098 <memmove+0x24>

0800d0a8 <__malloc_lock>:
 800d0a8:	4801      	ldr	r0, [pc, #4]	; (800d0b0 <__malloc_lock+0x8>)
 800d0aa:	f000 bbe3 	b.w	800d874 <__retarget_lock_acquire_recursive>
 800d0ae:	bf00      	nop
 800d0b0:	20001b60 	.word	0x20001b60

0800d0b4 <__malloc_unlock>:
 800d0b4:	4801      	ldr	r0, [pc, #4]	; (800d0bc <__malloc_unlock+0x8>)
 800d0b6:	f000 bbde 	b.w	800d876 <__retarget_lock_release_recursive>
 800d0ba:	bf00      	nop
 800d0bc:	20001b60 	.word	0x20001b60

0800d0c0 <_malloc_usable_size_r>:
 800d0c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0c4:	1f18      	subs	r0, r3, #4
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	bfbc      	itt	lt
 800d0ca:	580b      	ldrlt	r3, [r1, r0]
 800d0cc:	18c0      	addlt	r0, r0, r3
 800d0ce:	4770      	bx	lr

0800d0d0 <__sfputc_r>:
 800d0d0:	6893      	ldr	r3, [r2, #8]
 800d0d2:	3b01      	subs	r3, #1
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	b410      	push	{r4}
 800d0d8:	6093      	str	r3, [r2, #8]
 800d0da:	da08      	bge.n	800d0ee <__sfputc_r+0x1e>
 800d0dc:	6994      	ldr	r4, [r2, #24]
 800d0de:	42a3      	cmp	r3, r4
 800d0e0:	db01      	blt.n	800d0e6 <__sfputc_r+0x16>
 800d0e2:	290a      	cmp	r1, #10
 800d0e4:	d103      	bne.n	800d0ee <__sfputc_r+0x1e>
 800d0e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0ea:	f000 b94b 	b.w	800d384 <__swbuf_r>
 800d0ee:	6813      	ldr	r3, [r2, #0]
 800d0f0:	1c58      	adds	r0, r3, #1
 800d0f2:	6010      	str	r0, [r2, #0]
 800d0f4:	7019      	strb	r1, [r3, #0]
 800d0f6:	4608      	mov	r0, r1
 800d0f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0fc:	4770      	bx	lr

0800d0fe <__sfputs_r>:
 800d0fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d100:	4606      	mov	r6, r0
 800d102:	460f      	mov	r7, r1
 800d104:	4614      	mov	r4, r2
 800d106:	18d5      	adds	r5, r2, r3
 800d108:	42ac      	cmp	r4, r5
 800d10a:	d101      	bne.n	800d110 <__sfputs_r+0x12>
 800d10c:	2000      	movs	r0, #0
 800d10e:	e007      	b.n	800d120 <__sfputs_r+0x22>
 800d110:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d114:	463a      	mov	r2, r7
 800d116:	4630      	mov	r0, r6
 800d118:	f7ff ffda 	bl	800d0d0 <__sfputc_r>
 800d11c:	1c43      	adds	r3, r0, #1
 800d11e:	d1f3      	bne.n	800d108 <__sfputs_r+0xa>
 800d120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d124 <_vfiprintf_r>:
 800d124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d128:	460d      	mov	r5, r1
 800d12a:	b09d      	sub	sp, #116	; 0x74
 800d12c:	4614      	mov	r4, r2
 800d12e:	4698      	mov	r8, r3
 800d130:	4606      	mov	r6, r0
 800d132:	b118      	cbz	r0, 800d13c <_vfiprintf_r+0x18>
 800d134:	6983      	ldr	r3, [r0, #24]
 800d136:	b90b      	cbnz	r3, 800d13c <_vfiprintf_r+0x18>
 800d138:	f000 fafe 	bl	800d738 <__sinit>
 800d13c:	4b89      	ldr	r3, [pc, #548]	; (800d364 <_vfiprintf_r+0x240>)
 800d13e:	429d      	cmp	r5, r3
 800d140:	d11b      	bne.n	800d17a <_vfiprintf_r+0x56>
 800d142:	6875      	ldr	r5, [r6, #4]
 800d144:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d146:	07d9      	lsls	r1, r3, #31
 800d148:	d405      	bmi.n	800d156 <_vfiprintf_r+0x32>
 800d14a:	89ab      	ldrh	r3, [r5, #12]
 800d14c:	059a      	lsls	r2, r3, #22
 800d14e:	d402      	bmi.n	800d156 <_vfiprintf_r+0x32>
 800d150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d152:	f000 fb8f 	bl	800d874 <__retarget_lock_acquire_recursive>
 800d156:	89ab      	ldrh	r3, [r5, #12]
 800d158:	071b      	lsls	r3, r3, #28
 800d15a:	d501      	bpl.n	800d160 <_vfiprintf_r+0x3c>
 800d15c:	692b      	ldr	r3, [r5, #16]
 800d15e:	b9eb      	cbnz	r3, 800d19c <_vfiprintf_r+0x78>
 800d160:	4629      	mov	r1, r5
 800d162:	4630      	mov	r0, r6
 800d164:	f000 f960 	bl	800d428 <__swsetup_r>
 800d168:	b1c0      	cbz	r0, 800d19c <_vfiprintf_r+0x78>
 800d16a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d16c:	07dc      	lsls	r4, r3, #31
 800d16e:	d50e      	bpl.n	800d18e <_vfiprintf_r+0x6a>
 800d170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d174:	b01d      	add	sp, #116	; 0x74
 800d176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d17a:	4b7b      	ldr	r3, [pc, #492]	; (800d368 <_vfiprintf_r+0x244>)
 800d17c:	429d      	cmp	r5, r3
 800d17e:	d101      	bne.n	800d184 <_vfiprintf_r+0x60>
 800d180:	68b5      	ldr	r5, [r6, #8]
 800d182:	e7df      	b.n	800d144 <_vfiprintf_r+0x20>
 800d184:	4b79      	ldr	r3, [pc, #484]	; (800d36c <_vfiprintf_r+0x248>)
 800d186:	429d      	cmp	r5, r3
 800d188:	bf08      	it	eq
 800d18a:	68f5      	ldreq	r5, [r6, #12]
 800d18c:	e7da      	b.n	800d144 <_vfiprintf_r+0x20>
 800d18e:	89ab      	ldrh	r3, [r5, #12]
 800d190:	0598      	lsls	r0, r3, #22
 800d192:	d4ed      	bmi.n	800d170 <_vfiprintf_r+0x4c>
 800d194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d196:	f000 fb6e 	bl	800d876 <__retarget_lock_release_recursive>
 800d19a:	e7e9      	b.n	800d170 <_vfiprintf_r+0x4c>
 800d19c:	2300      	movs	r3, #0
 800d19e:	9309      	str	r3, [sp, #36]	; 0x24
 800d1a0:	2320      	movs	r3, #32
 800d1a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1aa:	2330      	movs	r3, #48	; 0x30
 800d1ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d370 <_vfiprintf_r+0x24c>
 800d1b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1b4:	f04f 0901 	mov.w	r9, #1
 800d1b8:	4623      	mov	r3, r4
 800d1ba:	469a      	mov	sl, r3
 800d1bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1c0:	b10a      	cbz	r2, 800d1c6 <_vfiprintf_r+0xa2>
 800d1c2:	2a25      	cmp	r2, #37	; 0x25
 800d1c4:	d1f9      	bne.n	800d1ba <_vfiprintf_r+0x96>
 800d1c6:	ebba 0b04 	subs.w	fp, sl, r4
 800d1ca:	d00b      	beq.n	800d1e4 <_vfiprintf_r+0xc0>
 800d1cc:	465b      	mov	r3, fp
 800d1ce:	4622      	mov	r2, r4
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	4630      	mov	r0, r6
 800d1d4:	f7ff ff93 	bl	800d0fe <__sfputs_r>
 800d1d8:	3001      	adds	r0, #1
 800d1da:	f000 80aa 	beq.w	800d332 <_vfiprintf_r+0x20e>
 800d1de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1e0:	445a      	add	r2, fp
 800d1e2:	9209      	str	r2, [sp, #36]	; 0x24
 800d1e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	f000 80a2 	beq.w	800d332 <_vfiprintf_r+0x20e>
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d1f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1f8:	f10a 0a01 	add.w	sl, sl, #1
 800d1fc:	9304      	str	r3, [sp, #16]
 800d1fe:	9307      	str	r3, [sp, #28]
 800d200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d204:	931a      	str	r3, [sp, #104]	; 0x68
 800d206:	4654      	mov	r4, sl
 800d208:	2205      	movs	r2, #5
 800d20a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d20e:	4858      	ldr	r0, [pc, #352]	; (800d370 <_vfiprintf_r+0x24c>)
 800d210:	f7f2 ffe6 	bl	80001e0 <memchr>
 800d214:	9a04      	ldr	r2, [sp, #16]
 800d216:	b9d8      	cbnz	r0, 800d250 <_vfiprintf_r+0x12c>
 800d218:	06d1      	lsls	r1, r2, #27
 800d21a:	bf44      	itt	mi
 800d21c:	2320      	movmi	r3, #32
 800d21e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d222:	0713      	lsls	r3, r2, #28
 800d224:	bf44      	itt	mi
 800d226:	232b      	movmi	r3, #43	; 0x2b
 800d228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d22c:	f89a 3000 	ldrb.w	r3, [sl]
 800d230:	2b2a      	cmp	r3, #42	; 0x2a
 800d232:	d015      	beq.n	800d260 <_vfiprintf_r+0x13c>
 800d234:	9a07      	ldr	r2, [sp, #28]
 800d236:	4654      	mov	r4, sl
 800d238:	2000      	movs	r0, #0
 800d23a:	f04f 0c0a 	mov.w	ip, #10
 800d23e:	4621      	mov	r1, r4
 800d240:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d244:	3b30      	subs	r3, #48	; 0x30
 800d246:	2b09      	cmp	r3, #9
 800d248:	d94e      	bls.n	800d2e8 <_vfiprintf_r+0x1c4>
 800d24a:	b1b0      	cbz	r0, 800d27a <_vfiprintf_r+0x156>
 800d24c:	9207      	str	r2, [sp, #28]
 800d24e:	e014      	b.n	800d27a <_vfiprintf_r+0x156>
 800d250:	eba0 0308 	sub.w	r3, r0, r8
 800d254:	fa09 f303 	lsl.w	r3, r9, r3
 800d258:	4313      	orrs	r3, r2
 800d25a:	9304      	str	r3, [sp, #16]
 800d25c:	46a2      	mov	sl, r4
 800d25e:	e7d2      	b.n	800d206 <_vfiprintf_r+0xe2>
 800d260:	9b03      	ldr	r3, [sp, #12]
 800d262:	1d19      	adds	r1, r3, #4
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	9103      	str	r1, [sp, #12]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	bfbb      	ittet	lt
 800d26c:	425b      	neglt	r3, r3
 800d26e:	f042 0202 	orrlt.w	r2, r2, #2
 800d272:	9307      	strge	r3, [sp, #28]
 800d274:	9307      	strlt	r3, [sp, #28]
 800d276:	bfb8      	it	lt
 800d278:	9204      	strlt	r2, [sp, #16]
 800d27a:	7823      	ldrb	r3, [r4, #0]
 800d27c:	2b2e      	cmp	r3, #46	; 0x2e
 800d27e:	d10c      	bne.n	800d29a <_vfiprintf_r+0x176>
 800d280:	7863      	ldrb	r3, [r4, #1]
 800d282:	2b2a      	cmp	r3, #42	; 0x2a
 800d284:	d135      	bne.n	800d2f2 <_vfiprintf_r+0x1ce>
 800d286:	9b03      	ldr	r3, [sp, #12]
 800d288:	1d1a      	adds	r2, r3, #4
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	9203      	str	r2, [sp, #12]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	bfb8      	it	lt
 800d292:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d296:	3402      	adds	r4, #2
 800d298:	9305      	str	r3, [sp, #20]
 800d29a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d380 <_vfiprintf_r+0x25c>
 800d29e:	7821      	ldrb	r1, [r4, #0]
 800d2a0:	2203      	movs	r2, #3
 800d2a2:	4650      	mov	r0, sl
 800d2a4:	f7f2 ff9c 	bl	80001e0 <memchr>
 800d2a8:	b140      	cbz	r0, 800d2bc <_vfiprintf_r+0x198>
 800d2aa:	2340      	movs	r3, #64	; 0x40
 800d2ac:	eba0 000a 	sub.w	r0, r0, sl
 800d2b0:	fa03 f000 	lsl.w	r0, r3, r0
 800d2b4:	9b04      	ldr	r3, [sp, #16]
 800d2b6:	4303      	orrs	r3, r0
 800d2b8:	3401      	adds	r4, #1
 800d2ba:	9304      	str	r3, [sp, #16]
 800d2bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2c0:	482c      	ldr	r0, [pc, #176]	; (800d374 <_vfiprintf_r+0x250>)
 800d2c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2c6:	2206      	movs	r2, #6
 800d2c8:	f7f2 ff8a 	bl	80001e0 <memchr>
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	d03f      	beq.n	800d350 <_vfiprintf_r+0x22c>
 800d2d0:	4b29      	ldr	r3, [pc, #164]	; (800d378 <_vfiprintf_r+0x254>)
 800d2d2:	bb1b      	cbnz	r3, 800d31c <_vfiprintf_r+0x1f8>
 800d2d4:	9b03      	ldr	r3, [sp, #12]
 800d2d6:	3307      	adds	r3, #7
 800d2d8:	f023 0307 	bic.w	r3, r3, #7
 800d2dc:	3308      	adds	r3, #8
 800d2de:	9303      	str	r3, [sp, #12]
 800d2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2e2:	443b      	add	r3, r7
 800d2e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d2e6:	e767      	b.n	800d1b8 <_vfiprintf_r+0x94>
 800d2e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2ec:	460c      	mov	r4, r1
 800d2ee:	2001      	movs	r0, #1
 800d2f0:	e7a5      	b.n	800d23e <_vfiprintf_r+0x11a>
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	3401      	adds	r4, #1
 800d2f6:	9305      	str	r3, [sp, #20]
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	f04f 0c0a 	mov.w	ip, #10
 800d2fe:	4620      	mov	r0, r4
 800d300:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d304:	3a30      	subs	r2, #48	; 0x30
 800d306:	2a09      	cmp	r2, #9
 800d308:	d903      	bls.n	800d312 <_vfiprintf_r+0x1ee>
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d0c5      	beq.n	800d29a <_vfiprintf_r+0x176>
 800d30e:	9105      	str	r1, [sp, #20]
 800d310:	e7c3      	b.n	800d29a <_vfiprintf_r+0x176>
 800d312:	fb0c 2101 	mla	r1, ip, r1, r2
 800d316:	4604      	mov	r4, r0
 800d318:	2301      	movs	r3, #1
 800d31a:	e7f0      	b.n	800d2fe <_vfiprintf_r+0x1da>
 800d31c:	ab03      	add	r3, sp, #12
 800d31e:	9300      	str	r3, [sp, #0]
 800d320:	462a      	mov	r2, r5
 800d322:	4b16      	ldr	r3, [pc, #88]	; (800d37c <_vfiprintf_r+0x258>)
 800d324:	a904      	add	r1, sp, #16
 800d326:	4630      	mov	r0, r6
 800d328:	f7fb fff6 	bl	8009318 <_printf_float>
 800d32c:	4607      	mov	r7, r0
 800d32e:	1c78      	adds	r0, r7, #1
 800d330:	d1d6      	bne.n	800d2e0 <_vfiprintf_r+0x1bc>
 800d332:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d334:	07d9      	lsls	r1, r3, #31
 800d336:	d405      	bmi.n	800d344 <_vfiprintf_r+0x220>
 800d338:	89ab      	ldrh	r3, [r5, #12]
 800d33a:	059a      	lsls	r2, r3, #22
 800d33c:	d402      	bmi.n	800d344 <_vfiprintf_r+0x220>
 800d33e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d340:	f000 fa99 	bl	800d876 <__retarget_lock_release_recursive>
 800d344:	89ab      	ldrh	r3, [r5, #12]
 800d346:	065b      	lsls	r3, r3, #25
 800d348:	f53f af12 	bmi.w	800d170 <_vfiprintf_r+0x4c>
 800d34c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d34e:	e711      	b.n	800d174 <_vfiprintf_r+0x50>
 800d350:	ab03      	add	r3, sp, #12
 800d352:	9300      	str	r3, [sp, #0]
 800d354:	462a      	mov	r2, r5
 800d356:	4b09      	ldr	r3, [pc, #36]	; (800d37c <_vfiprintf_r+0x258>)
 800d358:	a904      	add	r1, sp, #16
 800d35a:	4630      	mov	r0, r6
 800d35c:	f7fc fa80 	bl	8009860 <_printf_i>
 800d360:	e7e4      	b.n	800d32c <_vfiprintf_r+0x208>
 800d362:	bf00      	nop
 800d364:	0800e2d4 	.word	0x0800e2d4
 800d368:	0800e2f4 	.word	0x0800e2f4
 800d36c:	0800e2b4 	.word	0x0800e2b4
 800d370:	0800e264 	.word	0x0800e264
 800d374:	0800e26e 	.word	0x0800e26e
 800d378:	08009319 	.word	0x08009319
 800d37c:	0800d0ff 	.word	0x0800d0ff
 800d380:	0800e26a 	.word	0x0800e26a

0800d384 <__swbuf_r>:
 800d384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d386:	460e      	mov	r6, r1
 800d388:	4614      	mov	r4, r2
 800d38a:	4605      	mov	r5, r0
 800d38c:	b118      	cbz	r0, 800d396 <__swbuf_r+0x12>
 800d38e:	6983      	ldr	r3, [r0, #24]
 800d390:	b90b      	cbnz	r3, 800d396 <__swbuf_r+0x12>
 800d392:	f000 f9d1 	bl	800d738 <__sinit>
 800d396:	4b21      	ldr	r3, [pc, #132]	; (800d41c <__swbuf_r+0x98>)
 800d398:	429c      	cmp	r4, r3
 800d39a:	d12b      	bne.n	800d3f4 <__swbuf_r+0x70>
 800d39c:	686c      	ldr	r4, [r5, #4]
 800d39e:	69a3      	ldr	r3, [r4, #24]
 800d3a0:	60a3      	str	r3, [r4, #8]
 800d3a2:	89a3      	ldrh	r3, [r4, #12]
 800d3a4:	071a      	lsls	r2, r3, #28
 800d3a6:	d52f      	bpl.n	800d408 <__swbuf_r+0x84>
 800d3a8:	6923      	ldr	r3, [r4, #16]
 800d3aa:	b36b      	cbz	r3, 800d408 <__swbuf_r+0x84>
 800d3ac:	6923      	ldr	r3, [r4, #16]
 800d3ae:	6820      	ldr	r0, [r4, #0]
 800d3b0:	1ac0      	subs	r0, r0, r3
 800d3b2:	6963      	ldr	r3, [r4, #20]
 800d3b4:	b2f6      	uxtb	r6, r6
 800d3b6:	4283      	cmp	r3, r0
 800d3b8:	4637      	mov	r7, r6
 800d3ba:	dc04      	bgt.n	800d3c6 <__swbuf_r+0x42>
 800d3bc:	4621      	mov	r1, r4
 800d3be:	4628      	mov	r0, r5
 800d3c0:	f000 f926 	bl	800d610 <_fflush_r>
 800d3c4:	bb30      	cbnz	r0, 800d414 <__swbuf_r+0x90>
 800d3c6:	68a3      	ldr	r3, [r4, #8]
 800d3c8:	3b01      	subs	r3, #1
 800d3ca:	60a3      	str	r3, [r4, #8]
 800d3cc:	6823      	ldr	r3, [r4, #0]
 800d3ce:	1c5a      	adds	r2, r3, #1
 800d3d0:	6022      	str	r2, [r4, #0]
 800d3d2:	701e      	strb	r6, [r3, #0]
 800d3d4:	6963      	ldr	r3, [r4, #20]
 800d3d6:	3001      	adds	r0, #1
 800d3d8:	4283      	cmp	r3, r0
 800d3da:	d004      	beq.n	800d3e6 <__swbuf_r+0x62>
 800d3dc:	89a3      	ldrh	r3, [r4, #12]
 800d3de:	07db      	lsls	r3, r3, #31
 800d3e0:	d506      	bpl.n	800d3f0 <__swbuf_r+0x6c>
 800d3e2:	2e0a      	cmp	r6, #10
 800d3e4:	d104      	bne.n	800d3f0 <__swbuf_r+0x6c>
 800d3e6:	4621      	mov	r1, r4
 800d3e8:	4628      	mov	r0, r5
 800d3ea:	f000 f911 	bl	800d610 <_fflush_r>
 800d3ee:	b988      	cbnz	r0, 800d414 <__swbuf_r+0x90>
 800d3f0:	4638      	mov	r0, r7
 800d3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3f4:	4b0a      	ldr	r3, [pc, #40]	; (800d420 <__swbuf_r+0x9c>)
 800d3f6:	429c      	cmp	r4, r3
 800d3f8:	d101      	bne.n	800d3fe <__swbuf_r+0x7a>
 800d3fa:	68ac      	ldr	r4, [r5, #8]
 800d3fc:	e7cf      	b.n	800d39e <__swbuf_r+0x1a>
 800d3fe:	4b09      	ldr	r3, [pc, #36]	; (800d424 <__swbuf_r+0xa0>)
 800d400:	429c      	cmp	r4, r3
 800d402:	bf08      	it	eq
 800d404:	68ec      	ldreq	r4, [r5, #12]
 800d406:	e7ca      	b.n	800d39e <__swbuf_r+0x1a>
 800d408:	4621      	mov	r1, r4
 800d40a:	4628      	mov	r0, r5
 800d40c:	f000 f80c 	bl	800d428 <__swsetup_r>
 800d410:	2800      	cmp	r0, #0
 800d412:	d0cb      	beq.n	800d3ac <__swbuf_r+0x28>
 800d414:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d418:	e7ea      	b.n	800d3f0 <__swbuf_r+0x6c>
 800d41a:	bf00      	nop
 800d41c:	0800e2d4 	.word	0x0800e2d4
 800d420:	0800e2f4 	.word	0x0800e2f4
 800d424:	0800e2b4 	.word	0x0800e2b4

0800d428 <__swsetup_r>:
 800d428:	4b32      	ldr	r3, [pc, #200]	; (800d4f4 <__swsetup_r+0xcc>)
 800d42a:	b570      	push	{r4, r5, r6, lr}
 800d42c:	681d      	ldr	r5, [r3, #0]
 800d42e:	4606      	mov	r6, r0
 800d430:	460c      	mov	r4, r1
 800d432:	b125      	cbz	r5, 800d43e <__swsetup_r+0x16>
 800d434:	69ab      	ldr	r3, [r5, #24]
 800d436:	b913      	cbnz	r3, 800d43e <__swsetup_r+0x16>
 800d438:	4628      	mov	r0, r5
 800d43a:	f000 f97d 	bl	800d738 <__sinit>
 800d43e:	4b2e      	ldr	r3, [pc, #184]	; (800d4f8 <__swsetup_r+0xd0>)
 800d440:	429c      	cmp	r4, r3
 800d442:	d10f      	bne.n	800d464 <__swsetup_r+0x3c>
 800d444:	686c      	ldr	r4, [r5, #4]
 800d446:	89a3      	ldrh	r3, [r4, #12]
 800d448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d44c:	0719      	lsls	r1, r3, #28
 800d44e:	d42c      	bmi.n	800d4aa <__swsetup_r+0x82>
 800d450:	06dd      	lsls	r5, r3, #27
 800d452:	d411      	bmi.n	800d478 <__swsetup_r+0x50>
 800d454:	2309      	movs	r3, #9
 800d456:	6033      	str	r3, [r6, #0]
 800d458:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d45c:	81a3      	strh	r3, [r4, #12]
 800d45e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d462:	e03e      	b.n	800d4e2 <__swsetup_r+0xba>
 800d464:	4b25      	ldr	r3, [pc, #148]	; (800d4fc <__swsetup_r+0xd4>)
 800d466:	429c      	cmp	r4, r3
 800d468:	d101      	bne.n	800d46e <__swsetup_r+0x46>
 800d46a:	68ac      	ldr	r4, [r5, #8]
 800d46c:	e7eb      	b.n	800d446 <__swsetup_r+0x1e>
 800d46e:	4b24      	ldr	r3, [pc, #144]	; (800d500 <__swsetup_r+0xd8>)
 800d470:	429c      	cmp	r4, r3
 800d472:	bf08      	it	eq
 800d474:	68ec      	ldreq	r4, [r5, #12]
 800d476:	e7e6      	b.n	800d446 <__swsetup_r+0x1e>
 800d478:	0758      	lsls	r0, r3, #29
 800d47a:	d512      	bpl.n	800d4a2 <__swsetup_r+0x7a>
 800d47c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d47e:	b141      	cbz	r1, 800d492 <__swsetup_r+0x6a>
 800d480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d484:	4299      	cmp	r1, r3
 800d486:	d002      	beq.n	800d48e <__swsetup_r+0x66>
 800d488:	4630      	mov	r0, r6
 800d48a:	f7ff fb1d 	bl	800cac8 <_free_r>
 800d48e:	2300      	movs	r3, #0
 800d490:	6363      	str	r3, [r4, #52]	; 0x34
 800d492:	89a3      	ldrh	r3, [r4, #12]
 800d494:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d498:	81a3      	strh	r3, [r4, #12]
 800d49a:	2300      	movs	r3, #0
 800d49c:	6063      	str	r3, [r4, #4]
 800d49e:	6923      	ldr	r3, [r4, #16]
 800d4a0:	6023      	str	r3, [r4, #0]
 800d4a2:	89a3      	ldrh	r3, [r4, #12]
 800d4a4:	f043 0308 	orr.w	r3, r3, #8
 800d4a8:	81a3      	strh	r3, [r4, #12]
 800d4aa:	6923      	ldr	r3, [r4, #16]
 800d4ac:	b94b      	cbnz	r3, 800d4c2 <__swsetup_r+0x9a>
 800d4ae:	89a3      	ldrh	r3, [r4, #12]
 800d4b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d4b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4b8:	d003      	beq.n	800d4c2 <__swsetup_r+0x9a>
 800d4ba:	4621      	mov	r1, r4
 800d4bc:	4630      	mov	r0, r6
 800d4be:	f000 fa01 	bl	800d8c4 <__smakebuf_r>
 800d4c2:	89a0      	ldrh	r0, [r4, #12]
 800d4c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4c8:	f010 0301 	ands.w	r3, r0, #1
 800d4cc:	d00a      	beq.n	800d4e4 <__swsetup_r+0xbc>
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	60a3      	str	r3, [r4, #8]
 800d4d2:	6963      	ldr	r3, [r4, #20]
 800d4d4:	425b      	negs	r3, r3
 800d4d6:	61a3      	str	r3, [r4, #24]
 800d4d8:	6923      	ldr	r3, [r4, #16]
 800d4da:	b943      	cbnz	r3, 800d4ee <__swsetup_r+0xc6>
 800d4dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4e0:	d1ba      	bne.n	800d458 <__swsetup_r+0x30>
 800d4e2:	bd70      	pop	{r4, r5, r6, pc}
 800d4e4:	0781      	lsls	r1, r0, #30
 800d4e6:	bf58      	it	pl
 800d4e8:	6963      	ldrpl	r3, [r4, #20]
 800d4ea:	60a3      	str	r3, [r4, #8]
 800d4ec:	e7f4      	b.n	800d4d8 <__swsetup_r+0xb0>
 800d4ee:	2000      	movs	r0, #0
 800d4f0:	e7f7      	b.n	800d4e2 <__swsetup_r+0xba>
 800d4f2:	bf00      	nop
 800d4f4:	20000024 	.word	0x20000024
 800d4f8:	0800e2d4 	.word	0x0800e2d4
 800d4fc:	0800e2f4 	.word	0x0800e2f4
 800d500:	0800e2b4 	.word	0x0800e2b4

0800d504 <__sflush_r>:
 800d504:	898a      	ldrh	r2, [r1, #12]
 800d506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d50a:	4605      	mov	r5, r0
 800d50c:	0710      	lsls	r0, r2, #28
 800d50e:	460c      	mov	r4, r1
 800d510:	d458      	bmi.n	800d5c4 <__sflush_r+0xc0>
 800d512:	684b      	ldr	r3, [r1, #4]
 800d514:	2b00      	cmp	r3, #0
 800d516:	dc05      	bgt.n	800d524 <__sflush_r+0x20>
 800d518:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	dc02      	bgt.n	800d524 <__sflush_r+0x20>
 800d51e:	2000      	movs	r0, #0
 800d520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d524:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d526:	2e00      	cmp	r6, #0
 800d528:	d0f9      	beq.n	800d51e <__sflush_r+0x1a>
 800d52a:	2300      	movs	r3, #0
 800d52c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d530:	682f      	ldr	r7, [r5, #0]
 800d532:	602b      	str	r3, [r5, #0]
 800d534:	d032      	beq.n	800d59c <__sflush_r+0x98>
 800d536:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d538:	89a3      	ldrh	r3, [r4, #12]
 800d53a:	075a      	lsls	r2, r3, #29
 800d53c:	d505      	bpl.n	800d54a <__sflush_r+0x46>
 800d53e:	6863      	ldr	r3, [r4, #4]
 800d540:	1ac0      	subs	r0, r0, r3
 800d542:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d544:	b10b      	cbz	r3, 800d54a <__sflush_r+0x46>
 800d546:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d548:	1ac0      	subs	r0, r0, r3
 800d54a:	2300      	movs	r3, #0
 800d54c:	4602      	mov	r2, r0
 800d54e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d550:	6a21      	ldr	r1, [r4, #32]
 800d552:	4628      	mov	r0, r5
 800d554:	47b0      	blx	r6
 800d556:	1c43      	adds	r3, r0, #1
 800d558:	89a3      	ldrh	r3, [r4, #12]
 800d55a:	d106      	bne.n	800d56a <__sflush_r+0x66>
 800d55c:	6829      	ldr	r1, [r5, #0]
 800d55e:	291d      	cmp	r1, #29
 800d560:	d82c      	bhi.n	800d5bc <__sflush_r+0xb8>
 800d562:	4a2a      	ldr	r2, [pc, #168]	; (800d60c <__sflush_r+0x108>)
 800d564:	40ca      	lsrs	r2, r1
 800d566:	07d6      	lsls	r6, r2, #31
 800d568:	d528      	bpl.n	800d5bc <__sflush_r+0xb8>
 800d56a:	2200      	movs	r2, #0
 800d56c:	6062      	str	r2, [r4, #4]
 800d56e:	04d9      	lsls	r1, r3, #19
 800d570:	6922      	ldr	r2, [r4, #16]
 800d572:	6022      	str	r2, [r4, #0]
 800d574:	d504      	bpl.n	800d580 <__sflush_r+0x7c>
 800d576:	1c42      	adds	r2, r0, #1
 800d578:	d101      	bne.n	800d57e <__sflush_r+0x7a>
 800d57a:	682b      	ldr	r3, [r5, #0]
 800d57c:	b903      	cbnz	r3, 800d580 <__sflush_r+0x7c>
 800d57e:	6560      	str	r0, [r4, #84]	; 0x54
 800d580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d582:	602f      	str	r7, [r5, #0]
 800d584:	2900      	cmp	r1, #0
 800d586:	d0ca      	beq.n	800d51e <__sflush_r+0x1a>
 800d588:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d58c:	4299      	cmp	r1, r3
 800d58e:	d002      	beq.n	800d596 <__sflush_r+0x92>
 800d590:	4628      	mov	r0, r5
 800d592:	f7ff fa99 	bl	800cac8 <_free_r>
 800d596:	2000      	movs	r0, #0
 800d598:	6360      	str	r0, [r4, #52]	; 0x34
 800d59a:	e7c1      	b.n	800d520 <__sflush_r+0x1c>
 800d59c:	6a21      	ldr	r1, [r4, #32]
 800d59e:	2301      	movs	r3, #1
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	47b0      	blx	r6
 800d5a4:	1c41      	adds	r1, r0, #1
 800d5a6:	d1c7      	bne.n	800d538 <__sflush_r+0x34>
 800d5a8:	682b      	ldr	r3, [r5, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d0c4      	beq.n	800d538 <__sflush_r+0x34>
 800d5ae:	2b1d      	cmp	r3, #29
 800d5b0:	d001      	beq.n	800d5b6 <__sflush_r+0xb2>
 800d5b2:	2b16      	cmp	r3, #22
 800d5b4:	d101      	bne.n	800d5ba <__sflush_r+0xb6>
 800d5b6:	602f      	str	r7, [r5, #0]
 800d5b8:	e7b1      	b.n	800d51e <__sflush_r+0x1a>
 800d5ba:	89a3      	ldrh	r3, [r4, #12]
 800d5bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5c0:	81a3      	strh	r3, [r4, #12]
 800d5c2:	e7ad      	b.n	800d520 <__sflush_r+0x1c>
 800d5c4:	690f      	ldr	r7, [r1, #16]
 800d5c6:	2f00      	cmp	r7, #0
 800d5c8:	d0a9      	beq.n	800d51e <__sflush_r+0x1a>
 800d5ca:	0793      	lsls	r3, r2, #30
 800d5cc:	680e      	ldr	r6, [r1, #0]
 800d5ce:	bf08      	it	eq
 800d5d0:	694b      	ldreq	r3, [r1, #20]
 800d5d2:	600f      	str	r7, [r1, #0]
 800d5d4:	bf18      	it	ne
 800d5d6:	2300      	movne	r3, #0
 800d5d8:	eba6 0807 	sub.w	r8, r6, r7
 800d5dc:	608b      	str	r3, [r1, #8]
 800d5de:	f1b8 0f00 	cmp.w	r8, #0
 800d5e2:	dd9c      	ble.n	800d51e <__sflush_r+0x1a>
 800d5e4:	6a21      	ldr	r1, [r4, #32]
 800d5e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d5e8:	4643      	mov	r3, r8
 800d5ea:	463a      	mov	r2, r7
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	47b0      	blx	r6
 800d5f0:	2800      	cmp	r0, #0
 800d5f2:	dc06      	bgt.n	800d602 <__sflush_r+0xfe>
 800d5f4:	89a3      	ldrh	r3, [r4, #12]
 800d5f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5fa:	81a3      	strh	r3, [r4, #12]
 800d5fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d600:	e78e      	b.n	800d520 <__sflush_r+0x1c>
 800d602:	4407      	add	r7, r0
 800d604:	eba8 0800 	sub.w	r8, r8, r0
 800d608:	e7e9      	b.n	800d5de <__sflush_r+0xda>
 800d60a:	bf00      	nop
 800d60c:	20400001 	.word	0x20400001

0800d610 <_fflush_r>:
 800d610:	b538      	push	{r3, r4, r5, lr}
 800d612:	690b      	ldr	r3, [r1, #16]
 800d614:	4605      	mov	r5, r0
 800d616:	460c      	mov	r4, r1
 800d618:	b913      	cbnz	r3, 800d620 <_fflush_r+0x10>
 800d61a:	2500      	movs	r5, #0
 800d61c:	4628      	mov	r0, r5
 800d61e:	bd38      	pop	{r3, r4, r5, pc}
 800d620:	b118      	cbz	r0, 800d62a <_fflush_r+0x1a>
 800d622:	6983      	ldr	r3, [r0, #24]
 800d624:	b90b      	cbnz	r3, 800d62a <_fflush_r+0x1a>
 800d626:	f000 f887 	bl	800d738 <__sinit>
 800d62a:	4b14      	ldr	r3, [pc, #80]	; (800d67c <_fflush_r+0x6c>)
 800d62c:	429c      	cmp	r4, r3
 800d62e:	d11b      	bne.n	800d668 <_fflush_r+0x58>
 800d630:	686c      	ldr	r4, [r5, #4]
 800d632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d0ef      	beq.n	800d61a <_fflush_r+0xa>
 800d63a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d63c:	07d0      	lsls	r0, r2, #31
 800d63e:	d404      	bmi.n	800d64a <_fflush_r+0x3a>
 800d640:	0599      	lsls	r1, r3, #22
 800d642:	d402      	bmi.n	800d64a <_fflush_r+0x3a>
 800d644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d646:	f000 f915 	bl	800d874 <__retarget_lock_acquire_recursive>
 800d64a:	4628      	mov	r0, r5
 800d64c:	4621      	mov	r1, r4
 800d64e:	f7ff ff59 	bl	800d504 <__sflush_r>
 800d652:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d654:	07da      	lsls	r2, r3, #31
 800d656:	4605      	mov	r5, r0
 800d658:	d4e0      	bmi.n	800d61c <_fflush_r+0xc>
 800d65a:	89a3      	ldrh	r3, [r4, #12]
 800d65c:	059b      	lsls	r3, r3, #22
 800d65e:	d4dd      	bmi.n	800d61c <_fflush_r+0xc>
 800d660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d662:	f000 f908 	bl	800d876 <__retarget_lock_release_recursive>
 800d666:	e7d9      	b.n	800d61c <_fflush_r+0xc>
 800d668:	4b05      	ldr	r3, [pc, #20]	; (800d680 <_fflush_r+0x70>)
 800d66a:	429c      	cmp	r4, r3
 800d66c:	d101      	bne.n	800d672 <_fflush_r+0x62>
 800d66e:	68ac      	ldr	r4, [r5, #8]
 800d670:	e7df      	b.n	800d632 <_fflush_r+0x22>
 800d672:	4b04      	ldr	r3, [pc, #16]	; (800d684 <_fflush_r+0x74>)
 800d674:	429c      	cmp	r4, r3
 800d676:	bf08      	it	eq
 800d678:	68ec      	ldreq	r4, [r5, #12]
 800d67a:	e7da      	b.n	800d632 <_fflush_r+0x22>
 800d67c:	0800e2d4 	.word	0x0800e2d4
 800d680:	0800e2f4 	.word	0x0800e2f4
 800d684:	0800e2b4 	.word	0x0800e2b4

0800d688 <std>:
 800d688:	2300      	movs	r3, #0
 800d68a:	b510      	push	{r4, lr}
 800d68c:	4604      	mov	r4, r0
 800d68e:	e9c0 3300 	strd	r3, r3, [r0]
 800d692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d696:	6083      	str	r3, [r0, #8]
 800d698:	8181      	strh	r1, [r0, #12]
 800d69a:	6643      	str	r3, [r0, #100]	; 0x64
 800d69c:	81c2      	strh	r2, [r0, #14]
 800d69e:	6183      	str	r3, [r0, #24]
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	2208      	movs	r2, #8
 800d6a4:	305c      	adds	r0, #92	; 0x5c
 800d6a6:	f7fb fd8f 	bl	80091c8 <memset>
 800d6aa:	4b05      	ldr	r3, [pc, #20]	; (800d6c0 <std+0x38>)
 800d6ac:	6263      	str	r3, [r4, #36]	; 0x24
 800d6ae:	4b05      	ldr	r3, [pc, #20]	; (800d6c4 <std+0x3c>)
 800d6b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d6b2:	4b05      	ldr	r3, [pc, #20]	; (800d6c8 <std+0x40>)
 800d6b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d6b6:	4b05      	ldr	r3, [pc, #20]	; (800d6cc <std+0x44>)
 800d6b8:	6224      	str	r4, [r4, #32]
 800d6ba:	6323      	str	r3, [r4, #48]	; 0x30
 800d6bc:	bd10      	pop	{r4, pc}
 800d6be:	bf00      	nop
 800d6c0:	0800d945 	.word	0x0800d945
 800d6c4:	0800d967 	.word	0x0800d967
 800d6c8:	0800d99f 	.word	0x0800d99f
 800d6cc:	0800d9c3 	.word	0x0800d9c3

0800d6d0 <_cleanup_r>:
 800d6d0:	4901      	ldr	r1, [pc, #4]	; (800d6d8 <_cleanup_r+0x8>)
 800d6d2:	f000 b8af 	b.w	800d834 <_fwalk_reent>
 800d6d6:	bf00      	nop
 800d6d8:	0800d611 	.word	0x0800d611

0800d6dc <__sfmoreglue>:
 800d6dc:	b570      	push	{r4, r5, r6, lr}
 800d6de:	2268      	movs	r2, #104	; 0x68
 800d6e0:	1e4d      	subs	r5, r1, #1
 800d6e2:	4355      	muls	r5, r2
 800d6e4:	460e      	mov	r6, r1
 800d6e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d6ea:	f7ff fa59 	bl	800cba0 <_malloc_r>
 800d6ee:	4604      	mov	r4, r0
 800d6f0:	b140      	cbz	r0, 800d704 <__sfmoreglue+0x28>
 800d6f2:	2100      	movs	r1, #0
 800d6f4:	e9c0 1600 	strd	r1, r6, [r0]
 800d6f8:	300c      	adds	r0, #12
 800d6fa:	60a0      	str	r0, [r4, #8]
 800d6fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d700:	f7fb fd62 	bl	80091c8 <memset>
 800d704:	4620      	mov	r0, r4
 800d706:	bd70      	pop	{r4, r5, r6, pc}

0800d708 <__sfp_lock_acquire>:
 800d708:	4801      	ldr	r0, [pc, #4]	; (800d710 <__sfp_lock_acquire+0x8>)
 800d70a:	f000 b8b3 	b.w	800d874 <__retarget_lock_acquire_recursive>
 800d70e:	bf00      	nop
 800d710:	20001b61 	.word	0x20001b61

0800d714 <__sfp_lock_release>:
 800d714:	4801      	ldr	r0, [pc, #4]	; (800d71c <__sfp_lock_release+0x8>)
 800d716:	f000 b8ae 	b.w	800d876 <__retarget_lock_release_recursive>
 800d71a:	bf00      	nop
 800d71c:	20001b61 	.word	0x20001b61

0800d720 <__sinit_lock_acquire>:
 800d720:	4801      	ldr	r0, [pc, #4]	; (800d728 <__sinit_lock_acquire+0x8>)
 800d722:	f000 b8a7 	b.w	800d874 <__retarget_lock_acquire_recursive>
 800d726:	bf00      	nop
 800d728:	20001b62 	.word	0x20001b62

0800d72c <__sinit_lock_release>:
 800d72c:	4801      	ldr	r0, [pc, #4]	; (800d734 <__sinit_lock_release+0x8>)
 800d72e:	f000 b8a2 	b.w	800d876 <__retarget_lock_release_recursive>
 800d732:	bf00      	nop
 800d734:	20001b62 	.word	0x20001b62

0800d738 <__sinit>:
 800d738:	b510      	push	{r4, lr}
 800d73a:	4604      	mov	r4, r0
 800d73c:	f7ff fff0 	bl	800d720 <__sinit_lock_acquire>
 800d740:	69a3      	ldr	r3, [r4, #24]
 800d742:	b11b      	cbz	r3, 800d74c <__sinit+0x14>
 800d744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d748:	f7ff bff0 	b.w	800d72c <__sinit_lock_release>
 800d74c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d750:	6523      	str	r3, [r4, #80]	; 0x50
 800d752:	4b13      	ldr	r3, [pc, #76]	; (800d7a0 <__sinit+0x68>)
 800d754:	4a13      	ldr	r2, [pc, #76]	; (800d7a4 <__sinit+0x6c>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	62a2      	str	r2, [r4, #40]	; 0x28
 800d75a:	42a3      	cmp	r3, r4
 800d75c:	bf04      	itt	eq
 800d75e:	2301      	moveq	r3, #1
 800d760:	61a3      	streq	r3, [r4, #24]
 800d762:	4620      	mov	r0, r4
 800d764:	f000 f820 	bl	800d7a8 <__sfp>
 800d768:	6060      	str	r0, [r4, #4]
 800d76a:	4620      	mov	r0, r4
 800d76c:	f000 f81c 	bl	800d7a8 <__sfp>
 800d770:	60a0      	str	r0, [r4, #8]
 800d772:	4620      	mov	r0, r4
 800d774:	f000 f818 	bl	800d7a8 <__sfp>
 800d778:	2200      	movs	r2, #0
 800d77a:	60e0      	str	r0, [r4, #12]
 800d77c:	2104      	movs	r1, #4
 800d77e:	6860      	ldr	r0, [r4, #4]
 800d780:	f7ff ff82 	bl	800d688 <std>
 800d784:	68a0      	ldr	r0, [r4, #8]
 800d786:	2201      	movs	r2, #1
 800d788:	2109      	movs	r1, #9
 800d78a:	f7ff ff7d 	bl	800d688 <std>
 800d78e:	68e0      	ldr	r0, [r4, #12]
 800d790:	2202      	movs	r2, #2
 800d792:	2112      	movs	r1, #18
 800d794:	f7ff ff78 	bl	800d688 <std>
 800d798:	2301      	movs	r3, #1
 800d79a:	61a3      	str	r3, [r4, #24]
 800d79c:	e7d2      	b.n	800d744 <__sinit+0xc>
 800d79e:	bf00      	nop
 800d7a0:	0800de6c 	.word	0x0800de6c
 800d7a4:	0800d6d1 	.word	0x0800d6d1

0800d7a8 <__sfp>:
 800d7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7aa:	4607      	mov	r7, r0
 800d7ac:	f7ff ffac 	bl	800d708 <__sfp_lock_acquire>
 800d7b0:	4b1e      	ldr	r3, [pc, #120]	; (800d82c <__sfp+0x84>)
 800d7b2:	681e      	ldr	r6, [r3, #0]
 800d7b4:	69b3      	ldr	r3, [r6, #24]
 800d7b6:	b913      	cbnz	r3, 800d7be <__sfp+0x16>
 800d7b8:	4630      	mov	r0, r6
 800d7ba:	f7ff ffbd 	bl	800d738 <__sinit>
 800d7be:	3648      	adds	r6, #72	; 0x48
 800d7c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d7c4:	3b01      	subs	r3, #1
 800d7c6:	d503      	bpl.n	800d7d0 <__sfp+0x28>
 800d7c8:	6833      	ldr	r3, [r6, #0]
 800d7ca:	b30b      	cbz	r3, 800d810 <__sfp+0x68>
 800d7cc:	6836      	ldr	r6, [r6, #0]
 800d7ce:	e7f7      	b.n	800d7c0 <__sfp+0x18>
 800d7d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d7d4:	b9d5      	cbnz	r5, 800d80c <__sfp+0x64>
 800d7d6:	4b16      	ldr	r3, [pc, #88]	; (800d830 <__sfp+0x88>)
 800d7d8:	60e3      	str	r3, [r4, #12]
 800d7da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d7de:	6665      	str	r5, [r4, #100]	; 0x64
 800d7e0:	f000 f847 	bl	800d872 <__retarget_lock_init_recursive>
 800d7e4:	f7ff ff96 	bl	800d714 <__sfp_lock_release>
 800d7e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d7ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d7f0:	6025      	str	r5, [r4, #0]
 800d7f2:	61a5      	str	r5, [r4, #24]
 800d7f4:	2208      	movs	r2, #8
 800d7f6:	4629      	mov	r1, r5
 800d7f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d7fc:	f7fb fce4 	bl	80091c8 <memset>
 800d800:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d804:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d808:	4620      	mov	r0, r4
 800d80a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d80c:	3468      	adds	r4, #104	; 0x68
 800d80e:	e7d9      	b.n	800d7c4 <__sfp+0x1c>
 800d810:	2104      	movs	r1, #4
 800d812:	4638      	mov	r0, r7
 800d814:	f7ff ff62 	bl	800d6dc <__sfmoreglue>
 800d818:	4604      	mov	r4, r0
 800d81a:	6030      	str	r0, [r6, #0]
 800d81c:	2800      	cmp	r0, #0
 800d81e:	d1d5      	bne.n	800d7cc <__sfp+0x24>
 800d820:	f7ff ff78 	bl	800d714 <__sfp_lock_release>
 800d824:	230c      	movs	r3, #12
 800d826:	603b      	str	r3, [r7, #0]
 800d828:	e7ee      	b.n	800d808 <__sfp+0x60>
 800d82a:	bf00      	nop
 800d82c:	0800de6c 	.word	0x0800de6c
 800d830:	ffff0001 	.word	0xffff0001

0800d834 <_fwalk_reent>:
 800d834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d838:	4606      	mov	r6, r0
 800d83a:	4688      	mov	r8, r1
 800d83c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d840:	2700      	movs	r7, #0
 800d842:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d846:	f1b9 0901 	subs.w	r9, r9, #1
 800d84a:	d505      	bpl.n	800d858 <_fwalk_reent+0x24>
 800d84c:	6824      	ldr	r4, [r4, #0]
 800d84e:	2c00      	cmp	r4, #0
 800d850:	d1f7      	bne.n	800d842 <_fwalk_reent+0xe>
 800d852:	4638      	mov	r0, r7
 800d854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d858:	89ab      	ldrh	r3, [r5, #12]
 800d85a:	2b01      	cmp	r3, #1
 800d85c:	d907      	bls.n	800d86e <_fwalk_reent+0x3a>
 800d85e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d862:	3301      	adds	r3, #1
 800d864:	d003      	beq.n	800d86e <_fwalk_reent+0x3a>
 800d866:	4629      	mov	r1, r5
 800d868:	4630      	mov	r0, r6
 800d86a:	47c0      	blx	r8
 800d86c:	4307      	orrs	r7, r0
 800d86e:	3568      	adds	r5, #104	; 0x68
 800d870:	e7e9      	b.n	800d846 <_fwalk_reent+0x12>

0800d872 <__retarget_lock_init_recursive>:
 800d872:	4770      	bx	lr

0800d874 <__retarget_lock_acquire_recursive>:
 800d874:	4770      	bx	lr

0800d876 <__retarget_lock_release_recursive>:
 800d876:	4770      	bx	lr

0800d878 <__swhatbuf_r>:
 800d878:	b570      	push	{r4, r5, r6, lr}
 800d87a:	460e      	mov	r6, r1
 800d87c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d880:	2900      	cmp	r1, #0
 800d882:	b096      	sub	sp, #88	; 0x58
 800d884:	4614      	mov	r4, r2
 800d886:	461d      	mov	r5, r3
 800d888:	da08      	bge.n	800d89c <__swhatbuf_r+0x24>
 800d88a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d88e:	2200      	movs	r2, #0
 800d890:	602a      	str	r2, [r5, #0]
 800d892:	061a      	lsls	r2, r3, #24
 800d894:	d410      	bmi.n	800d8b8 <__swhatbuf_r+0x40>
 800d896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d89a:	e00e      	b.n	800d8ba <__swhatbuf_r+0x42>
 800d89c:	466a      	mov	r2, sp
 800d89e:	f000 f8b7 	bl	800da10 <_fstat_r>
 800d8a2:	2800      	cmp	r0, #0
 800d8a4:	dbf1      	blt.n	800d88a <__swhatbuf_r+0x12>
 800d8a6:	9a01      	ldr	r2, [sp, #4]
 800d8a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d8ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d8b0:	425a      	negs	r2, r3
 800d8b2:	415a      	adcs	r2, r3
 800d8b4:	602a      	str	r2, [r5, #0]
 800d8b6:	e7ee      	b.n	800d896 <__swhatbuf_r+0x1e>
 800d8b8:	2340      	movs	r3, #64	; 0x40
 800d8ba:	2000      	movs	r0, #0
 800d8bc:	6023      	str	r3, [r4, #0]
 800d8be:	b016      	add	sp, #88	; 0x58
 800d8c0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d8c4 <__smakebuf_r>:
 800d8c4:	898b      	ldrh	r3, [r1, #12]
 800d8c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d8c8:	079d      	lsls	r5, r3, #30
 800d8ca:	4606      	mov	r6, r0
 800d8cc:	460c      	mov	r4, r1
 800d8ce:	d507      	bpl.n	800d8e0 <__smakebuf_r+0x1c>
 800d8d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d8d4:	6023      	str	r3, [r4, #0]
 800d8d6:	6123      	str	r3, [r4, #16]
 800d8d8:	2301      	movs	r3, #1
 800d8da:	6163      	str	r3, [r4, #20]
 800d8dc:	b002      	add	sp, #8
 800d8de:	bd70      	pop	{r4, r5, r6, pc}
 800d8e0:	ab01      	add	r3, sp, #4
 800d8e2:	466a      	mov	r2, sp
 800d8e4:	f7ff ffc8 	bl	800d878 <__swhatbuf_r>
 800d8e8:	9900      	ldr	r1, [sp, #0]
 800d8ea:	4605      	mov	r5, r0
 800d8ec:	4630      	mov	r0, r6
 800d8ee:	f7ff f957 	bl	800cba0 <_malloc_r>
 800d8f2:	b948      	cbnz	r0, 800d908 <__smakebuf_r+0x44>
 800d8f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8f8:	059a      	lsls	r2, r3, #22
 800d8fa:	d4ef      	bmi.n	800d8dc <__smakebuf_r+0x18>
 800d8fc:	f023 0303 	bic.w	r3, r3, #3
 800d900:	f043 0302 	orr.w	r3, r3, #2
 800d904:	81a3      	strh	r3, [r4, #12]
 800d906:	e7e3      	b.n	800d8d0 <__smakebuf_r+0xc>
 800d908:	4b0d      	ldr	r3, [pc, #52]	; (800d940 <__smakebuf_r+0x7c>)
 800d90a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d90c:	89a3      	ldrh	r3, [r4, #12]
 800d90e:	6020      	str	r0, [r4, #0]
 800d910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d914:	81a3      	strh	r3, [r4, #12]
 800d916:	9b00      	ldr	r3, [sp, #0]
 800d918:	6163      	str	r3, [r4, #20]
 800d91a:	9b01      	ldr	r3, [sp, #4]
 800d91c:	6120      	str	r0, [r4, #16]
 800d91e:	b15b      	cbz	r3, 800d938 <__smakebuf_r+0x74>
 800d920:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d924:	4630      	mov	r0, r6
 800d926:	f000 f885 	bl	800da34 <_isatty_r>
 800d92a:	b128      	cbz	r0, 800d938 <__smakebuf_r+0x74>
 800d92c:	89a3      	ldrh	r3, [r4, #12]
 800d92e:	f023 0303 	bic.w	r3, r3, #3
 800d932:	f043 0301 	orr.w	r3, r3, #1
 800d936:	81a3      	strh	r3, [r4, #12]
 800d938:	89a0      	ldrh	r0, [r4, #12]
 800d93a:	4305      	orrs	r5, r0
 800d93c:	81a5      	strh	r5, [r4, #12]
 800d93e:	e7cd      	b.n	800d8dc <__smakebuf_r+0x18>
 800d940:	0800d6d1 	.word	0x0800d6d1

0800d944 <__sread>:
 800d944:	b510      	push	{r4, lr}
 800d946:	460c      	mov	r4, r1
 800d948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d94c:	f000 f894 	bl	800da78 <_read_r>
 800d950:	2800      	cmp	r0, #0
 800d952:	bfab      	itete	ge
 800d954:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d956:	89a3      	ldrhlt	r3, [r4, #12]
 800d958:	181b      	addge	r3, r3, r0
 800d95a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d95e:	bfac      	ite	ge
 800d960:	6563      	strge	r3, [r4, #84]	; 0x54
 800d962:	81a3      	strhlt	r3, [r4, #12]
 800d964:	bd10      	pop	{r4, pc}

0800d966 <__swrite>:
 800d966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d96a:	461f      	mov	r7, r3
 800d96c:	898b      	ldrh	r3, [r1, #12]
 800d96e:	05db      	lsls	r3, r3, #23
 800d970:	4605      	mov	r5, r0
 800d972:	460c      	mov	r4, r1
 800d974:	4616      	mov	r6, r2
 800d976:	d505      	bpl.n	800d984 <__swrite+0x1e>
 800d978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d97c:	2302      	movs	r3, #2
 800d97e:	2200      	movs	r2, #0
 800d980:	f000 f868 	bl	800da54 <_lseek_r>
 800d984:	89a3      	ldrh	r3, [r4, #12]
 800d986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d98a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d98e:	81a3      	strh	r3, [r4, #12]
 800d990:	4632      	mov	r2, r6
 800d992:	463b      	mov	r3, r7
 800d994:	4628      	mov	r0, r5
 800d996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d99a:	f000 b817 	b.w	800d9cc <_write_r>

0800d99e <__sseek>:
 800d99e:	b510      	push	{r4, lr}
 800d9a0:	460c      	mov	r4, r1
 800d9a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9a6:	f000 f855 	bl	800da54 <_lseek_r>
 800d9aa:	1c43      	adds	r3, r0, #1
 800d9ac:	89a3      	ldrh	r3, [r4, #12]
 800d9ae:	bf15      	itete	ne
 800d9b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800d9b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d9b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d9ba:	81a3      	strheq	r3, [r4, #12]
 800d9bc:	bf18      	it	ne
 800d9be:	81a3      	strhne	r3, [r4, #12]
 800d9c0:	bd10      	pop	{r4, pc}

0800d9c2 <__sclose>:
 800d9c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9c6:	f000 b813 	b.w	800d9f0 <_close_r>
	...

0800d9cc <_write_r>:
 800d9cc:	b538      	push	{r3, r4, r5, lr}
 800d9ce:	4d07      	ldr	r5, [pc, #28]	; (800d9ec <_write_r+0x20>)
 800d9d0:	4604      	mov	r4, r0
 800d9d2:	4608      	mov	r0, r1
 800d9d4:	4611      	mov	r1, r2
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	602a      	str	r2, [r5, #0]
 800d9da:	461a      	mov	r2, r3
 800d9dc:	f7f7 fbb7 	bl	800514e <_write>
 800d9e0:	1c43      	adds	r3, r0, #1
 800d9e2:	d102      	bne.n	800d9ea <_write_r+0x1e>
 800d9e4:	682b      	ldr	r3, [r5, #0]
 800d9e6:	b103      	cbz	r3, 800d9ea <_write_r+0x1e>
 800d9e8:	6023      	str	r3, [r4, #0]
 800d9ea:	bd38      	pop	{r3, r4, r5, pc}
 800d9ec:	20001b5c 	.word	0x20001b5c

0800d9f0 <_close_r>:
 800d9f0:	b538      	push	{r3, r4, r5, lr}
 800d9f2:	4d06      	ldr	r5, [pc, #24]	; (800da0c <_close_r+0x1c>)
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	4604      	mov	r4, r0
 800d9f8:	4608      	mov	r0, r1
 800d9fa:	602b      	str	r3, [r5, #0]
 800d9fc:	f7f7 fbc3 	bl	8005186 <_close>
 800da00:	1c43      	adds	r3, r0, #1
 800da02:	d102      	bne.n	800da0a <_close_r+0x1a>
 800da04:	682b      	ldr	r3, [r5, #0]
 800da06:	b103      	cbz	r3, 800da0a <_close_r+0x1a>
 800da08:	6023      	str	r3, [r4, #0]
 800da0a:	bd38      	pop	{r3, r4, r5, pc}
 800da0c:	20001b5c 	.word	0x20001b5c

0800da10 <_fstat_r>:
 800da10:	b538      	push	{r3, r4, r5, lr}
 800da12:	4d07      	ldr	r5, [pc, #28]	; (800da30 <_fstat_r+0x20>)
 800da14:	2300      	movs	r3, #0
 800da16:	4604      	mov	r4, r0
 800da18:	4608      	mov	r0, r1
 800da1a:	4611      	mov	r1, r2
 800da1c:	602b      	str	r3, [r5, #0]
 800da1e:	f7f7 fbbe 	bl	800519e <_fstat>
 800da22:	1c43      	adds	r3, r0, #1
 800da24:	d102      	bne.n	800da2c <_fstat_r+0x1c>
 800da26:	682b      	ldr	r3, [r5, #0]
 800da28:	b103      	cbz	r3, 800da2c <_fstat_r+0x1c>
 800da2a:	6023      	str	r3, [r4, #0]
 800da2c:	bd38      	pop	{r3, r4, r5, pc}
 800da2e:	bf00      	nop
 800da30:	20001b5c 	.word	0x20001b5c

0800da34 <_isatty_r>:
 800da34:	b538      	push	{r3, r4, r5, lr}
 800da36:	4d06      	ldr	r5, [pc, #24]	; (800da50 <_isatty_r+0x1c>)
 800da38:	2300      	movs	r3, #0
 800da3a:	4604      	mov	r4, r0
 800da3c:	4608      	mov	r0, r1
 800da3e:	602b      	str	r3, [r5, #0]
 800da40:	f7f7 fbbd 	bl	80051be <_isatty>
 800da44:	1c43      	adds	r3, r0, #1
 800da46:	d102      	bne.n	800da4e <_isatty_r+0x1a>
 800da48:	682b      	ldr	r3, [r5, #0]
 800da4a:	b103      	cbz	r3, 800da4e <_isatty_r+0x1a>
 800da4c:	6023      	str	r3, [r4, #0]
 800da4e:	bd38      	pop	{r3, r4, r5, pc}
 800da50:	20001b5c 	.word	0x20001b5c

0800da54 <_lseek_r>:
 800da54:	b538      	push	{r3, r4, r5, lr}
 800da56:	4d07      	ldr	r5, [pc, #28]	; (800da74 <_lseek_r+0x20>)
 800da58:	4604      	mov	r4, r0
 800da5a:	4608      	mov	r0, r1
 800da5c:	4611      	mov	r1, r2
 800da5e:	2200      	movs	r2, #0
 800da60:	602a      	str	r2, [r5, #0]
 800da62:	461a      	mov	r2, r3
 800da64:	f7f7 fbb6 	bl	80051d4 <_lseek>
 800da68:	1c43      	adds	r3, r0, #1
 800da6a:	d102      	bne.n	800da72 <_lseek_r+0x1e>
 800da6c:	682b      	ldr	r3, [r5, #0]
 800da6e:	b103      	cbz	r3, 800da72 <_lseek_r+0x1e>
 800da70:	6023      	str	r3, [r4, #0]
 800da72:	bd38      	pop	{r3, r4, r5, pc}
 800da74:	20001b5c 	.word	0x20001b5c

0800da78 <_read_r>:
 800da78:	b538      	push	{r3, r4, r5, lr}
 800da7a:	4d07      	ldr	r5, [pc, #28]	; (800da98 <_read_r+0x20>)
 800da7c:	4604      	mov	r4, r0
 800da7e:	4608      	mov	r0, r1
 800da80:	4611      	mov	r1, r2
 800da82:	2200      	movs	r2, #0
 800da84:	602a      	str	r2, [r5, #0]
 800da86:	461a      	mov	r2, r3
 800da88:	f7f7 fb44 	bl	8005114 <_read>
 800da8c:	1c43      	adds	r3, r0, #1
 800da8e:	d102      	bne.n	800da96 <_read_r+0x1e>
 800da90:	682b      	ldr	r3, [r5, #0]
 800da92:	b103      	cbz	r3, 800da96 <_read_r+0x1e>
 800da94:	6023      	str	r3, [r4, #0]
 800da96:	bd38      	pop	{r3, r4, r5, pc}
 800da98:	20001b5c 	.word	0x20001b5c

0800da9c <_init>:
 800da9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da9e:	bf00      	nop
 800daa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daa2:	bc08      	pop	{r3}
 800daa4:	469e      	mov	lr, r3
 800daa6:	4770      	bx	lr

0800daa8 <_fini>:
 800daa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daaa:	bf00      	nop
 800daac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daae:	bc08      	pop	{r3}
 800dab0:	469e      	mov	lr, r3
 800dab2:	4770      	bx	lr
