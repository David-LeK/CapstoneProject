
Capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000087c  0800efe8  0800efe8  0001efe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f864  0800f864  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f864  0800f864  0001f864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f86c  0800f86c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800f86c  0800f86c  0001f86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f87c  0800f87c  0001f87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800f880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          00000d38  200001f4  200001f4  000201f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000f2c  20000f2c  000201f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f169  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034e2  00000000  00000000  0003f38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  00042870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012c8  00000000  00000000  00043c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e2e  00000000  00000000  00044ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000178d2  00000000  00000000  0006ad06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d72eb  00000000  00000000  000825d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001598c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006bb8  00000000  00000000  00159914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800efcc 	.word	0x0800efcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800efcc 	.word	0x0800efcc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>:

// Create Serial Buffer with UART2:
BufferedSerial buff_serial(huart2);

// Constructor:
BufferedSerial::BufferedSerial(UART_HandleTypeDef &huart_)
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  : huart(huart_) {}
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001026:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <_ZN14BufferedSerial4initEv>:

// Init:
void BufferedSerial::init(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  reset_rx_buffer();
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 f91f 	bl	8001284 <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <_ZN14BufferedSerial4readEv>:

// Read new char in RX buffer:
int BufferedSerial::read(void) {
 800104e:	b480      	push	{r7}
 8001050:	b085      	sub	sp, #20
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  // Get DMA head:
  uint16_t dma_head = (RX_BUF_SIZE - huart.hdmarx->Instance->NDTR) & rx_buf_mask;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	b29b      	uxth	r3, r3
 8001062:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001066:	b29b      	uxth	r3, r3
 8001068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800106c:	81fb      	strh	r3, [r7, #14]

  // Quit if no new character:
  if (dma_head == rx_tail) return -1;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001074:	89fa      	ldrh	r2, [r7, #14]
 8001076:	429a      	cmp	r2, r3
 8001078:	d102      	bne.n	8001080 <_ZN14BufferedSerial4readEv+0x32>
 800107a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800107e:	e016      	b.n	80010ae <_ZN14BufferedSerial4readEv+0x60>

  // Get next char in buffer:
  int c = (int) rx_buf[rx_tail++];
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	b291      	uxth	r1, r2
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8001090:	461a      	mov	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	791b      	ldrb	r3, [r3, #4]
 8001098:	60bb      	str	r3, [r7, #8]

  // Wrap around if rx_tail > RX_BUF_SIZE:
  rx_tail &= rx_buf_mask;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80010a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404

  return c;
 80010ac:	68bb      	ldr	r3, [r7, #8]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <_ZN14BufferedSerial5writeEPKhi>:

// Prepare data and send it:
void BufferedSerial::write(const uint8_t *data, const int length) {
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b084      	sub	sp, #16
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
  // If data can fit at the end of the buffer:
  if (tx_head + length < TX_BUF_SIZE) {
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80010cc:	461a      	mov	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010d6:	da25      	bge.n	8001124 <_ZN14BufferedSerial5writeEPKhi+0x6a>
    memcpy(&(tx_buf[tx_head]), data, length);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80010de:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	4413      	add	r3, r2
 80010e6:	3304      	adds	r3, #4
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	68b9      	ldr	r1, [r7, #8]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f009 faf5 	bl	800a6dc <memcpy>
    tx_head += length; // ) & tx_buf_mask
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	4413      	add	r3, r2
 80010fe:	b29a      	uxth	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    if (tx_head > tx_end) tx_end = tx_head; // Avoids "wrong checksum for topic id and msg" in rosserial logs
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8001112:	429a      	cmp	r2, r3
 8001114:	d921      	bls.n	800115a <_ZN14BufferedSerial5writeEPKhi+0xa0>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
 8001122:	e01a      	b.n	800115a <_ZN14BufferedSerial5writeEPKhi+0xa0>
  }
  // Else data is copied at the beginning of TX buffer:
  else {
    memcpy(tx_buf, data, length);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	4618      	mov	r0, r3
 8001130:	f009 fad4 	bl	800a6dc <memcpy>
    if (tx_head > tx_tail) tx_end = tx_head; // Avoids tx_end > tx_tail
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8001140:	429a      	cmp	r2, r3
 8001142:	d905      	bls.n	8001150 <_ZN14BufferedSerial5writeEPKhi+0x96>
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
    tx_head = length;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	b29a      	uxth	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
  }

  // Send data:
  flush_tx_buffer();
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f000 f804 	bl	8001168 <_ZN14BufferedSerial15flush_tx_bufferEv>
}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <_ZN14BufferedSerial15flush_tx_bufferEv>:

// Send data:
void BufferedSerial::flush_tx_buffer(void) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  static bool mutex = false;

  // Reset indexes if they are at the same position:
  if (tx_head != 0 && tx_head == tx_tail) {   // Can be removed (just for better memory management)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00f      	beq.n	800119a <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8001186:	429a      	cmp	r2, r3
 8001188:	d107      	bne.n	800119a <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
     tx_head = 0;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
     tx_tail = 0;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
   }

  // Quit if UART not ready to transmit data or no data to send:
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b20      	cmp	r3, #32
 80011a6:	d10b      	bne.n	80011c0 <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d003      	beq.n	80011c0 <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 80011b8:	4b31      	ldr	r3, [pc, #196]	; (8001280 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <_ZN14BufferedSerial15flush_tx_bufferEv+0x5c>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <_ZN14BufferedSerial15flush_tx_bufferEv+0x5e>
 80011c4:	2300      	movs	r3, #0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d156      	bne.n	8001278 <_ZN14BufferedSerial15flush_tx_bufferEv+0x110>
  mutex = true;
 80011ca:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]

  // Reset flush index if already sent complete TX buffer:
  if (tx_tail == tx_end) tx_tail = 0;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	; 0x408
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80011dc:	429a      	cmp	r2, r3
 80011de:	d103      	bne.n	80011e8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x80>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408

  // Send data behind head:
  if (tx_tail < tx_head) {
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	; 0x408
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d21c      	bcs.n	8001232 <_ZN14BufferedSerial15flush_tx_bufferEv+0xca>
    uint16_t length = tx_head - tx_tail;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8001212:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	3304      	adds	r3, #4
 800121c:	89ba      	ldrh	r2, [r7, #12]
 800121e:	4619      	mov	r1, r3
 8001220:	f007 ff0a 	bl	8009038 <HAL_UART_Transmit_DMA>
    tx_tail = tx_head;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
 8001230:	e01e      	b.n	8001270 <_ZN14BufferedSerial15flush_tx_bufferEv+0x108>
  }
  // Else end the buffer before resetting tail index:
  else {
    uint16_t length = tx_end - tx_tail;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f8b3 240a 	ldrh.w	r2, [r3, #1034]	; 0x40a
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800124c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	4413      	add	r3, r2
 8001254:	3304      	adds	r3, #4
 8001256:	89fa      	ldrh	r2, [r7, #14]
 8001258:	4619      	mov	r1, r3
 800125a:	f007 feed 	bl	8009038 <HAL_UART_Transmit_DMA>

    // Reset indexes:
    tx_end = TX_BUF_SIZE;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001264:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
    tx_tail = 0;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
  }

  mutex = false;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	e000      	b.n	800127a <_ZN14BufferedSerial15flush_tx_bufferEv+0x112>
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8001278:	bf00      	nop
}
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2000061c 	.word	0x2000061c

08001284 <_ZN14BufferedSerial15reset_rx_bufferEv>:


// Reset DMA to the beginning of the RX buffer:
inline void BufferedSerial::reset_rx_buffer(void) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart, rx_buf, RX_BUF_SIZE);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3304      	adds	r3, #4
 8001294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001298:	4619      	mov	r1, r3
 800129a:	f007 ff4b 	bl	8009134 <HAL_UART_Receive_DMA>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_ZN14BufferedSerial10get_handleEv>:

// Get UART Handle:
UART_HandleTypeDef* const BufferedSerial::get_handle(void) { return &huart; }
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <HAL_UART_TxCpltCallback>:


// DMA callbacks:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  // Comparing pointers: (remove equality if only one UART is used)
  if (huart->Instance == buff_serial.get_handle()->Instance) {
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681c      	ldr	r4, [r3, #0]
 80012cc:	4809      	ldr	r0, [pc, #36]	; (80012f4 <HAL_UART_TxCpltCallback+0x34>)
 80012ce:	f7ff ffea 	bl	80012a6 <_ZN14BufferedSerial10get_handleEv>
 80012d2:	4603      	mov	r3, r0
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	429c      	cmp	r4, r3
 80012d8:	bf0c      	ite	eq
 80012da:	2301      	moveq	r3, #1
 80012dc:	2300      	movne	r3, #0
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <HAL_UART_TxCpltCallback+0x2a>
    buff_serial.flush_tx_buffer();
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <HAL_UART_TxCpltCallback+0x34>)
 80012e6:	f7ff ff3f 	bl	8001168 <_ZN14BufferedSerial15flush_tx_bufferEv>
  }
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd90      	pop	{r4, r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000210 	.word	0x20000210

080012f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  buff_serial.reset_rx_buffer();  // Can be commented if DMA mode for RX is Circular
 8001300:	4803      	ldr	r0, [pc, #12]	; (8001310 <HAL_UART_RxCpltCallback+0x18>)
 8001302:	f7ff ffbf 	bl	8001284 <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000210 	.word	0x20000210

08001314 <_Z41__static_initialization_and_destruction_0ii>:
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d108      	bne.n	8001336 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132a:	4293      	cmp	r3, r2
 800132c:	d103      	bne.n	8001336 <_Z41__static_initialization_and_destruction_0ii+0x22>
BufferedSerial buff_serial(huart2);
 800132e:	4904      	ldr	r1, [pc, #16]	; (8001340 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001332:	f7ff fe61 	bl	8000ff8 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000794 	.word	0x20000794
 8001344:	20000210 	.word	0x20000210

08001348 <_GLOBAL__sub_I_buff_serial>:
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
 800134c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001350:	2001      	movs	r0, #1
 8001352:	f7ff ffdf 	bl	8001314 <_Z41__static_initialization_and_destruction_0ii>
 8001356:	bd80      	pop	{r7, pc}

08001358 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001362:	edc7 0a00 	vstr	s1, [r7]
 8001366:	edd7 0a00 	vldr	s1, [r7]
 800136a:	ed97 0a01 	vldr	s0, [r7, #4]
 800136e:	f009 f806 	bl	800a37e <atan2f>
 8001372:	eef0 7a40 	vmov.f32	s15, s0
 8001376:	eeb0 0a67 	vmov.f32	s0, s15
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_ZN7MPUXX50C1EP17I2C_HandleTypeDefh>:

#include "MPUXX50.h"

/// @brief MPUXX50 I2C constructor
/// @param pI2Cx Pointer to I2C structure config
MPUXX50::MPUXX50(I2C_HandleTypeDef *pI2Cx, uint8_t addr)
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	4613      	mov	r3, r2
 800138c:	71fb      	strb	r3, [r7, #7]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2201      	movs	r2, #1
 8001392:	735a      	strb	r2, [r3, #13]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2201      	movs	r2, #1
 8001398:	739a      	strb	r2, [r3, #14]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <_ZN7MPUXX50C1EP17I2C_HandleTypeDefh+0x44>)
 800139e:	611a      	str	r2, [r3, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <_ZN7MPUXX50C1EP17I2C_HandleTypeDefh+0x48>)
 80013a4:	615a      	str	r2, [r3, #20]
{
    _pI2Cx = pI2Cx;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	609a      	str	r2, [r3, #8]
    _addr = addr << 1;
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	731a      	strb	r2, [r3, #12]
}
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4618      	mov	r0, r3
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	3f7ae148 	.word	0x3f7ae148
 80013c8:	3b83126f 	.word	0x3b83126f

080013cc <_ZN7MPUXX505beginEv>:

/// @brief Boot up the IMU and ensure we have a valid connection
/// @return Success [1] or fail [0]
uint8_t MPUXX50::begin()
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af04      	add	r7, sp, #16
 80013d2:	6078      	str	r0, [r7, #4]
    // Initialize variables
    uint8_t check, select;

    // Set attitude to zero conditions
    attitude.r = 0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	625a      	str	r2, [r3, #36]	; 0x24
    attitude.p = 0;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	629a      	str	r2, [r3, #40]	; 0x28
    attitude.y = 0;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c

    // Confirm device
    HAL_I2C_Mem_Read(_pI2Cx, _addr, WHO_AM_I, 1, &check, 1, I2C_TIMOUT_MS);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6898      	ldr	r0, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7b1b      	ldrb	r3, [r3, #12]
 80013f4:	b299      	uxth	r1, r3
 80013f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	2301      	movs	r3, #1
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	f107 030f 	add.w	r3, r7, #15
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2301      	movs	r3, #1
 8001408:	2275      	movs	r2, #117	; 0x75
 800140a:	f005 fa87 	bl	800691c <HAL_I2C_Mem_Read>

    // TODO: If 9250 or 6050 fails could it trigger the opposite check???
    if ((check == WHO_AM_I_9250_ANS) || (check == WHO_AM_I_6050_ANS))
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	2b70      	cmp	r3, #112	; 0x70
 8001412:	d002      	beq.n	800141a <_ZN7MPUXX505beginEv+0x4e>
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	2b68      	cmp	r3, #104	; 0x68
 8001418:	d120      	bne.n	800145c <_ZN7MPUXX505beginEv+0x90>
    //if (1)
    {
        // Startup / reset the sensor
        select = 0x00;
 800141a:	2300      	movs	r3, #0
 800141c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, PWR_MGMT_1, 1, &select, 1, I2C_TIMOUT_MS);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6898      	ldr	r0, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7b1b      	ldrb	r3, [r3, #12]
 8001426:	b299      	uxth	r1, r3
 8001428:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142c:	9302      	str	r3, [sp, #8]
 800142e:	2301      	movs	r3, #1
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	f107 030e 	add.w	r3, r7, #14
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2301      	movs	r3, #1
 800143a:	226b      	movs	r2, #107	; 0x6b
 800143c:	f005 f974 	bl	8006728 <HAL_I2C_Mem_Write>

        // Set the full scale ranges
        writeAccFullScaleRange(_aFSR);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	7b9b      	ldrb	r3, [r3, #14]
 8001444:	4619      	mov	r1, r3
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f80e 	bl	8001468 <_ZN7MPUXX5022writeAccFullScaleRangeEh>
        writeGyroFullScaleRange(_gFSR);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7b5b      	ldrb	r3, [r3, #13]
 8001450:	4619      	mov	r1, r3
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f898 	bl	8001588 <_ZN7MPUXX5023writeGyroFullScaleRangeEh>

        return 1;
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <_ZN7MPUXX505beginEv+0x92>
    }
    else
    {
        return 0;
 800145c:	2300      	movs	r3, #0
    }
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <_ZN7MPUXX5022writeAccFullScaleRangeEh>:

/// @brief Set the accelerometer full scale range.
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
void MPUXX50::writeAccFullScaleRange(uint8_t aFSR)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af04      	add	r7, sp, #16
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;

    // Set the value
    switch (aFSR)
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d86a      	bhi.n	8001550 <_ZN7MPUXX5022writeAccFullScaleRangeEh+0xe8>
 800147a:	a201      	add	r2, pc, #4	; (adr r2, 8001480 <_ZN7MPUXX5022writeAccFullScaleRangeEh+0x18>)
 800147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001480:	08001491 	.word	0x08001491
 8001484:	080014c1 	.word	0x080014c1
 8001488:	080014f1 	.word	0x080014f1
 800148c:	08001521 	.word	0x08001521
    {
    case AFSR_2G:
        aScaleFactor = 16384.0;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001496:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6898      	ldr	r0, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7b1b      	ldrb	r3, [r3, #12]
 80014a4:	b299      	uxth	r1, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	9302      	str	r3, [sp, #8]
 80014ac:	2301      	movs	r3, #1
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	f107 030f 	add.w	r3, r7, #15
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2301      	movs	r3, #1
 80014b8:	221c      	movs	r2, #28
 80014ba:	f005 f935 	bl	8006728 <HAL_I2C_Mem_Write>
        break;
 80014be:	e05f      	b.n	8001580 <_ZN7MPUXX5022writeAccFullScaleRangeEh+0x118>
    case AFSR_4G:
        aScaleFactor = 8192.0;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80014c6:	601a      	str	r2, [r3, #0]
        select = 0x08;
 80014c8:	2308      	movs	r3, #8
 80014ca:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6898      	ldr	r0, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7b1b      	ldrb	r3, [r3, #12]
 80014d4:	b299      	uxth	r1, r3
 80014d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014da:	9302      	str	r3, [sp, #8]
 80014dc:	2301      	movs	r3, #1
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	f107 030f 	add.w	r3, r7, #15
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2301      	movs	r3, #1
 80014e8:	221c      	movs	r2, #28
 80014ea:	f005 f91d 	bl	8006728 <HAL_I2C_Mem_Write>
        break;
 80014ee:	e047      	b.n	8001580 <_ZN7MPUXX5022writeAccFullScaleRangeEh+0x118>
    case AFSR_8G:
        aScaleFactor = 4096.0;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80014f6:	601a      	str	r2, [r3, #0]
        select = 0x10;
 80014f8:	2310      	movs	r3, #16
 80014fa:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6898      	ldr	r0, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7b1b      	ldrb	r3, [r3, #12]
 8001504:	b299      	uxth	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	2301      	movs	r3, #1
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	f107 030f 	add.w	r3, r7, #15
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2301      	movs	r3, #1
 8001518:	221c      	movs	r2, #28
 800151a:	f005 f905 	bl	8006728 <HAL_I2C_Mem_Write>
        break;
 800151e:	e02f      	b.n	8001580 <_ZN7MPUXX5022writeAccFullScaleRangeEh+0x118>
    case AFSR_16G:
        aScaleFactor = 2048.0;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001526:	601a      	str	r2, [r3, #0]
        select = 0x18;
 8001528:	2318      	movs	r3, #24
 800152a:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6898      	ldr	r0, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7b1b      	ldrb	r3, [r3, #12]
 8001534:	b299      	uxth	r1, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	9302      	str	r3, [sp, #8]
 800153c:	2301      	movs	r3, #1
 800153e:	9301      	str	r3, [sp, #4]
 8001540:	f107 030f 	add.w	r3, r7, #15
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2301      	movs	r3, #1
 8001548:	221c      	movs	r2, #28
 800154a:	f005 f8ed 	bl	8006728 <HAL_I2C_Mem_Write>
        break;
 800154e:	e017      	b.n	8001580 <_ZN7MPUXX5022writeAccFullScaleRangeEh+0x118>
    default:
        aScaleFactor = 8192.0;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001556:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8001558:	2308      	movs	r3, #8
 800155a:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6898      	ldr	r0, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7b1b      	ldrb	r3, [r3, #12]
 8001564:	b299      	uxth	r1, r3
 8001566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156a:	9302      	str	r3, [sp, #8]
 800156c:	2301      	movs	r3, #1
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	f107 030f 	add.w	r3, r7, #15
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2301      	movs	r3, #1
 8001578:	221c      	movs	r2, #28
 800157a:	f005 f8d5 	bl	8006728 <HAL_I2C_Mem_Write>
        break;
 800157e:	bf00      	nop
    }
}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <_ZN7MPUXX5023writeGyroFullScaleRangeEh>:

/// @brief Set the gyroscope full scale range.
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void MPUXX50::writeGyroFullScaleRange(uint8_t gFSR)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af04      	add	r7, sp, #16
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;

    // Set the value
    switch (gFSR)
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	2b03      	cmp	r3, #3
 8001598:	d866      	bhi.n	8001668 <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0xe0>
 800159a:	a201      	add	r2, pc, #4	; (adr r2, 80015a0 <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0x18>)
 800159c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a0:	080015b1 	.word	0x080015b1
 80015a4:	080015df 	.word	0x080015df
 80015a8:	0800160d 	.word	0x0800160d
 80015ac:	0800163b 	.word	0x0800163b
    {
    case GFSR_250DPS:
        gScaleFactor = 131.0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a3b      	ldr	r2, [pc, #236]	; (80016a0 <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0x118>)
 80015b4:	605a      	str	r2, [r3, #4]
        select = 0x00;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6898      	ldr	r0, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	7b1b      	ldrb	r3, [r3, #12]
 80015c2:	b299      	uxth	r1, r3
 80015c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c8:	9302      	str	r3, [sp, #8]
 80015ca:	2301      	movs	r3, #1
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	f107 030f 	add.w	r3, r7, #15
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2301      	movs	r3, #1
 80015d6:	221b      	movs	r2, #27
 80015d8:	f005 f8a6 	bl	8006728 <HAL_I2C_Mem_Write>
        break;
 80015dc:	e05b      	b.n	8001696 <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0x10e>
    case GFSR_500DPS:
        gScaleFactor = 65.5;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a30      	ldr	r2, [pc, #192]	; (80016a4 <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0x11c>)
 80015e2:	605a      	str	r2, [r3, #4]
        select = 0x08;
 80015e4:	2308      	movs	r3, #8
 80015e6:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6898      	ldr	r0, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7b1b      	ldrb	r3, [r3, #12]
 80015f0:	b299      	uxth	r1, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	9302      	str	r3, [sp, #8]
 80015f8:	2301      	movs	r3, #1
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	f107 030f 	add.w	r3, r7, #15
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2301      	movs	r3, #1
 8001604:	221b      	movs	r2, #27
 8001606:	f005 f88f 	bl	8006728 <HAL_I2C_Mem_Write>
        break;
 800160a:	e044      	b.n	8001696 <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0x10e>
    case GFSR_1000DPS:
        gScaleFactor = 32.8;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a26      	ldr	r2, [pc, #152]	; (80016a8 <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0x120>)
 8001610:	605a      	str	r2, [r3, #4]
        select = 0x10;
 8001612:	2310      	movs	r3, #16
 8001614:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6898      	ldr	r0, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7b1b      	ldrb	r3, [r3, #12]
 800161e:	b299      	uxth	r1, r3
 8001620:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001624:	9302      	str	r3, [sp, #8]
 8001626:	2301      	movs	r3, #1
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	f107 030f 	add.w	r3, r7, #15
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2301      	movs	r3, #1
 8001632:	221b      	movs	r2, #27
 8001634:	f005 f878 	bl	8006728 <HAL_I2C_Mem_Write>
        break;
 8001638:	e02d      	b.n	8001696 <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0x10e>
    case GFSR_2000DPS:
        gScaleFactor = 16.4;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0x124>)
 800163e:	605a      	str	r2, [r3, #4]
        select = 0x18;
 8001640:	2318      	movs	r3, #24
 8001642:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6898      	ldr	r0, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7b1b      	ldrb	r3, [r3, #12]
 800164c:	b299      	uxth	r1, r3
 800164e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001652:	9302      	str	r3, [sp, #8]
 8001654:	2301      	movs	r3, #1
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	f107 030f 	add.w	r3, r7, #15
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2301      	movs	r3, #1
 8001660:	221b      	movs	r2, #27
 8001662:	f005 f861 	bl	8006728 <HAL_I2C_Mem_Write>
        break;
 8001666:	e016      	b.n	8001696 <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0x10e>
    default:
        gScaleFactor = 65.5;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0x11c>)
 800166c:	605a      	str	r2, [r3, #4]
        select = 0x08;
 800166e:	2308      	movs	r3, #8
 8001670:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6898      	ldr	r0, [r3, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	7b1b      	ldrb	r3, [r3, #12]
 800167a:	b299      	uxth	r1, r3
 800167c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001680:	9302      	str	r3, [sp, #8]
 8001682:	2301      	movs	r3, #1
 8001684:	9301      	str	r3, [sp, #4]
 8001686:	f107 030f 	add.w	r3, r7, #15
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	221b      	movs	r2, #27
 8001690:	f005 f84a 	bl	8006728 <HAL_I2C_Mem_Write>
        break;
 8001694:	bf00      	nop
    }
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	43030000 	.word	0x43030000
 80016a4:	42830000 	.word	0x42830000
 80016a8:	42033333 	.word	0x42033333
 80016ac:	41833333 	.word	0x41833333

080016b0 <_ZN7MPUXX5021setGyroFullScaleRangeEh>:

/// @brief Set the gyroscope full scale range
/// @param gFSR Desired yroscope full scale range
void MPUXX50::setGyroFullScaleRange(uint8_t gFSR)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	70fb      	strb	r3, [r7, #3]
    _gFSR = gFSR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	78fa      	ldrb	r2, [r7, #3]
 80016c0:	735a      	strb	r2, [r3, #13]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <_ZN7MPUXX5020setAccFullScaleRangeEh>:

/// @brief Set the accelerometer full scale range
/// @param aFSR Desired accelerometer full scale range
void MPUXX50::setAccFullScaleRange(uint8_t aFSR)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	460b      	mov	r3, r1
 80016d8:	70fb      	strb	r3, [r7, #3]
    _aFSR = aFSR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	78fa      	ldrb	r2, [r7, #3]
 80016de:	739a      	strb	r2, [r3, #14]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <_ZN7MPUXX5012setDeltaTimeEf>:

/// @brief Set the sampling duration (delta time) in seconds
/// @param dt Sampling time delta in seconds
void MPUXX50::setDeltaTime(float dt)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	ed87 0a00 	vstr	s0, [r7]
    _dt = dt;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	615a      	str	r2, [r3, #20]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <_ZN7MPUXX506setTauEf>:

/// @brief Time constant of the complementary filter
/// @param tau Time constant
void MPUXX50::setTau(float tau)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	ed87 0a00 	vstr	s0, [r7]
    _tau = tau;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	611a      	str	r2, [r3, #16]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_ZN7MPUXX5013calibrateGyroEt>:

/// @brief Find offsets for each axis of gyroscope
void MPUXX50::calibrateGyro(uint16_t numCalPoints)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08e      	sub	sp, #56	; 0x38
 800172c:	af00      	add	r7, sp, #0
 800172e:	6178      	str	r0, [r7, #20]
 8001730:	460b      	mov	r3, r1
 8001732:	827b      	strh	r3, [r7, #18]
    // Init
    RawData rawData;
    int32_t x = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t y = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t z = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Zero guard
    if (numCalPoints == 0)
 8001740:	8a7b      	ldrh	r3, [r7, #18]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <_ZN7MPUXX5013calibrateGyroEt+0x22>
    {
        numCalPoints = 1;
 8001746:	2301      	movs	r3, #1
 8001748:	827b      	strh	r3, [r7, #18]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800174a:	2300      	movs	r3, #0
 800174c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800174e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001750:	8a7b      	ldrh	r3, [r7, #18]
 8001752:	429a      	cmp	r2, r3
 8001754:	d224      	bcs.n	80017a0 <_ZN7MPUXX5013calibrateGyroEt+0x78>
    {
        rawData = readRawData();
 8001756:	463b      	mov	r3, r7
 8001758:	6979      	ldr	r1, [r7, #20]
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f851 	bl	8001802 <_ZN7MPUXX5011readRawDataEv>
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	463a      	mov	r2, r7
 8001766:	6810      	ldr	r0, [r2, #0]
 8001768:	6851      	ldr	r1, [r2, #4]
 800176a:	6892      	ldr	r2, [r2, #8]
 800176c:	c307      	stmia	r3!, {r0, r1, r2}
        x += rawData.gx;
 800176e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001772:	461a      	mov	r2, r3
 8001774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001776:	4413      	add	r3, r2
 8001778:	637b      	str	r3, [r7, #52]	; 0x34
        y += rawData.gy;
 800177a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800177e:	461a      	mov	r2, r3
 8001780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001782:	4413      	add	r3, r2
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
        z += rawData.gz;
 8001786:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800178a:	461a      	mov	r2, r3
 800178c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178e:	4413      	add	r3, r2
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_Delay(3);
 8001792:	2003      	movs	r0, #3
 8001794:	f003 ff96 	bl	80056c4 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001798:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800179a:	3301      	adds	r3, #1
 800179c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800179e:	e7d6      	b.n	800174e <_ZN7MPUXX5013calibrateGyroEt+0x26>
    }

    // Average the saved data points to find the gyroscope offset
    gyroCal.x = (float)x / (float)numCalPoints;
 80017a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a2:	ee07 3a90 	vmov	s15, r3
 80017a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017aa:	8a7b      	ldrh	r3, [r7, #18]
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	edc3 7a06 	vstr	s15, [r3, #24]
    gyroCal.y = (float)y / (float)numCalPoints;
 80017be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c0:	ee07 3a90 	vmov	s15, r3
 80017c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017c8:	8a7b      	ldrh	r3, [r7, #18]
 80017ca:	ee07 3a90 	vmov	s15, r3
 80017ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	edc3 7a07 	vstr	s15, [r3, #28]
    gyroCal.z = (float)z / (float)numCalPoints;
 80017dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017e6:	8a7b      	ldrh	r3, [r7, #18]
 80017e8:	ee07 3a90 	vmov	s15, r3
 80017ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80017fa:	bf00      	nop
 80017fc:	3738      	adds	r7, #56	; 0x38
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_ZN7MPUXX5011readRawDataEv>:

/// @brief Read raw data from IMU
/// @return Structure containing raw accelerometer and gyroscope data
RawData MPUXX50::readRawData()
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b08a      	sub	sp, #40	; 0x28
 8001806:	af04      	add	r7, sp, #16
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
    // Data out and buffer init
    RawData rawData;
    uint8_t buf[14];

    // Subroutine for reading the raw data
    HAL_I2C_Mem_Read(_pI2Cx, _addr, ACCEL_XOUT_H, 1, buf, 14, I2C_TIMOUT_MS);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6898      	ldr	r0, [r3, #8]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	7b1b      	ldrb	r3, [r3, #12]
 8001814:	b299      	uxth	r1, r3
 8001816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181a:	9302      	str	r3, [sp, #8]
 800181c:	230e      	movs	r3, #14
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	f107 0308 	add.w	r3, r7, #8
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2301      	movs	r3, #1
 8001828:	223b      	movs	r2, #59	; 0x3b
 800182a:	f005 f877 	bl	800691c <HAL_I2C_Mem_Read>

    // Bit shift the data
    rawData.ax = buf[0] << 8 | buf[1];
 800182e:	7a3b      	ldrb	r3, [r7, #8]
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	b21a      	sxth	r2, r3
 8001834:	7a7b      	ldrb	r3, [r7, #9]
 8001836:	b21b      	sxth	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	b21a      	sxth	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	801a      	strh	r2, [r3, #0]
    rawData.ay = buf[2] << 8 | buf[3];
 8001840:	7abb      	ldrb	r3, [r7, #10]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	b21a      	sxth	r2, r3
 8001846:	7afb      	ldrb	r3, [r7, #11]
 8001848:	b21b      	sxth	r3, r3
 800184a:	4313      	orrs	r3, r2
 800184c:	b21a      	sxth	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	805a      	strh	r2, [r3, #2]
    rawData.az = buf[4] << 8 | buf[5];
 8001852:	7b3b      	ldrb	r3, [r7, #12]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b21a      	sxth	r2, r3
 8001858:	7b7b      	ldrb	r3, [r7, #13]
 800185a:	b21b      	sxth	r3, r3
 800185c:	4313      	orrs	r3, r2
 800185e:	b21a      	sxth	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	809a      	strh	r2, [r3, #4]
    // temperature = buf[6] << 8 | buf[7];
    rawData.gx = buf[8] << 8 | buf[9];
 8001864:	7c3b      	ldrb	r3, [r7, #16]
 8001866:	021b      	lsls	r3, r3, #8
 8001868:	b21a      	sxth	r2, r3
 800186a:	7c7b      	ldrb	r3, [r7, #17]
 800186c:	b21b      	sxth	r3, r3
 800186e:	4313      	orrs	r3, r2
 8001870:	b21a      	sxth	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	80da      	strh	r2, [r3, #6]
    rawData.gy = buf[10] << 8 | buf[11];
 8001876:	7cbb      	ldrb	r3, [r7, #18]
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	b21a      	sxth	r2, r3
 800187c:	7cfb      	ldrb	r3, [r7, #19]
 800187e:	b21b      	sxth	r3, r3
 8001880:	4313      	orrs	r3, r2
 8001882:	b21a      	sxth	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	811a      	strh	r2, [r3, #8]
    rawData.gz = buf[12] << 8 | buf[13];
 8001888:	7d3b      	ldrb	r3, [r7, #20]
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	b21a      	sxth	r2, r3
 800188e:	7d7b      	ldrb	r3, [r7, #21]
 8001890:	b21b      	sxth	r3, r3
 8001892:	4313      	orrs	r3, r2
 8001894:	b21a      	sxth	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	815a      	strh	r2, [r3, #10]

    // Result
    return rawData;
 800189a:	bf00      	nop
}
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_ZN7MPUXX5011processDataEv>:

/// @brief Process the raw data into real world sensor values
/// @return Structure containing processed accelerometer and gyroscope data
ProcessedData MPUXX50::processData()
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
    // Data out structure
    ProcessedData processedData;

    // Get raw values from the IMU
    RawData rawData = readRawData();
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	6839      	ldr	r1, [r7, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ffa4 	bl	8001802 <_ZN7MPUXX5011readRawDataEv>

    // Convert accelerometer values to g's
    processedData.ax = rawData.ax / aScaleFactor;
 80018ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018be:	ee07 3a90 	vmov	s15, r3
 80018c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	ed93 7a00 	vldr	s14, [r3]
 80018cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	edc3 7a00 	vstr	s15, [r3]
    processedData.ay = rawData.ay / aScaleFactor;
 80018d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018da:	ee07 3a90 	vmov	s15, r3
 80018de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	ed93 7a00 	vldr	s14, [r3]
 80018e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	edc3 7a01 	vstr	s15, [r3, #4]
    processedData.az = rawData.az / aScaleFactor;
 80018f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	ed93 7a00 	vldr	s14, [r3]
 8001904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	edc3 7a02 	vstr	s15, [r3, #8]

    // Compensate for gyro offset
    processedData.gx = rawData.gx - gyroCal.x;
 800190e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	edc3 7a03 	vstr	s15, [r3, #12]
    processedData.gy = rawData.gy - gyroCal.y;
 800192a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	edd3 7a07 	vldr	s15, [r3, #28]
 800193c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	edc3 7a04 	vstr	s15, [r3, #16]
    processedData.gz = rawData.gz - gyroCal.z;
 8001946:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800194a:	ee07 3a90 	vmov	s15, r3
 800194e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	edd3 7a08 	vldr	s15, [r3, #32]
 8001958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	edc3 7a05 	vstr	s15, [r3, #20]

    // Convert gyro values to deg/s
    processedData.gx /= gScaleFactor;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	edd3 6a03 	vldr	s13, [r3, #12]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	ed93 7a01 	vldr	s14, [r3, #4]
 800196e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	edc3 7a03 	vstr	s15, [r3, #12]
    processedData.gy /= gScaleFactor;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	edd3 6a04 	vldr	s13, [r3, #16]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	ed93 7a01 	vldr	s14, [r3, #4]
 8001984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	edc3 7a04 	vstr	s15, [r3, #16]
    processedData.gz /= gScaleFactor;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	edd3 6a05 	vldr	s13, [r3, #20]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	ed93 7a01 	vldr	s14, [r3, #4]
 800199a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	edc3 7a05 	vstr	s15, [r3, #20]

    // Return structure
    return processedData;
 80019a4:	bf00      	nop
}
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <_ZN7MPUXX5012calcAttitudeEv>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter
/// @return Structure containing sensor attitude data
Attitude MPUXX50::calcAttitude()
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b092      	sub	sp, #72	; 0x48
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6178      	str	r0, [r7, #20]
    // Read processed data
    ProcessedData sensorData = processData();
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	6979      	ldr	r1, [r7, #20]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ff70 	bl	80018a4 <_ZN7MPUXX5011processDataEv>

    // Complementary filter
    float accelPitch = atan2(sensorData.ay, sensorData.az) * RAD2DEG;
 80019c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80019c8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019cc:	eef0 0a47 	vmov.f32	s1, s14
 80019d0:	eeb0 0a67 	vmov.f32	s0, s15
 80019d4:	f7ff fcc0 	bl	8001358 <_ZSt5atan2ff>
 80019d8:	ee10 3a10 	vmov	r3, s0
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fdb3 	bl	8000548 <__aeabi_f2d>
 80019e2:	a349      	add	r3, pc, #292	; (adr r3, 8001b08 <_ZN7MPUXX5012calcAttitudeEv+0x158>)
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	f7fe fe06 	bl	80005f8 <__aeabi_dmul>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	f7ff f8f8 	bl	8000be8 <__aeabi_d2f>
 80019f8:	4603      	mov	r3, r0
 80019fa:	647b      	str	r3, [r7, #68]	; 0x44
    float accelRoll = atan2(sensorData.ax, sensorData.az) * RAD2DEG;
 80019fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a00:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001a04:	eef0 0a47 	vmov.f32	s1, s14
 8001a08:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0c:	f7ff fca4 	bl	8001358 <_ZSt5atan2ff>
 8001a10:	ee10 3a10 	vmov	r3, s0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd97 	bl	8000548 <__aeabi_f2d>
 8001a1a:	a33b      	add	r3, pc, #236	; (adr r3, 8001b08 <_ZN7MPUXX5012calcAttitudeEv+0x158>)
 8001a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a20:	f7fe fdea 	bl	80005f8 <__aeabi_dmul>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f7ff f8dc 	bl	8000be8 <__aeabi_d2f>
 8001a30:	4603      	mov	r3, r0
 8001a32:	643b      	str	r3, [r7, #64]	; 0x40

    attitude.r = _tau * (attitude.r - sensorData.gy * _dt) + (1 - _tau) * accelRoll;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001a40:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a4e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a60:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a64:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001a68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    attitude.p = _tau * (attitude.p - sensorData.gx * _dt) + (1 - _tau) * accelPitch;
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001a82:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a8c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a90:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001aa2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001aa6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    attitude.y += (sensorData.gz * _dt);
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001abe:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ac8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001acc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // Return
    return attitude;
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001adc:	3224      	adds	r2, #36	; 0x24
 8001ade:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ae0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ae4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aea:	ee06 1a90 	vmov	s13, r1
 8001aee:	ee07 2a10 	vmov	s14, r2
 8001af2:	ee07 3a90 	vmov	s15, r3
}
 8001af6:	eeb0 0a66 	vmov.f32	s0, s13
 8001afa:	eef0 0a47 	vmov.f32	s1, s14
 8001afe:	eeb0 1a67 	vmov.f32	s2, s15
 8001b02:	3748      	adds	r7, #72	; 0x48
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	1a63cbb0 	.word	0x1a63cbb0
 8001b0c:	404ca5dc 	.word	0x404ca5dc

08001b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b14:	f003 fd64 	bl	80055e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b18:	f000 f85e 	bl	8001bd8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b1c:	f000 faec 	bl	80020f8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001b20:	f000 fac2 	bl	80020a8 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8001b24:	f000 fa92 	bl	800204c <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8001b28:	f000 f8fe 	bl	8001d28 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8001b2c:	f000 f974 	bl	8001e18 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8001b30:	f000 f9d0 	bl	8001ed4 <_ZL12MX_TIM4_Initv>
  MX_I2C2_Init();
 8001b34:	f000 f8c4 	bl	8001cc0 <_ZL12MX_I2C2_Initv>
  MX_TIM5_Init();
 8001b38:	f000 fa2a 	bl	8001f90 <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */
  // Configure IMU
   imu.setGyroFullScaleRange(GFSR_500DPS);
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	481f      	ldr	r0, [pc, #124]	; (8001bbc <main+0xac>)
 8001b40:	f7ff fdb6 	bl	80016b0 <_ZN7MPUXX5021setGyroFullScaleRangeEh>
   imu.setAccFullScaleRange(AFSR_4G);
 8001b44:	2101      	movs	r1, #1
 8001b46:	481d      	ldr	r0, [pc, #116]	; (8001bbc <main+0xac>)
 8001b48:	f7ff fdc1 	bl	80016ce <_ZN7MPUXX5020setAccFullScaleRangeEh>
   imu.setDeltaTime(0.004);
 8001b4c:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8001bc0 <main+0xb0>
 8001b50:	481a      	ldr	r0, [pc, #104]	; (8001bbc <main+0xac>)
 8001b52:	f7ff fdcb 	bl	80016ec <_ZN7MPUXX5012setDeltaTimeEf>
   imu.setTau(0.98);
 8001b56:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8001bc4 <main+0xb4>
 8001b5a:	4818      	ldr	r0, [pc, #96]	; (8001bbc <main+0xac>)
 8001b5c:	f7ff fdd5 	bl	800170a <_ZN7MPUXX506setTauEf>

   // Check if IMU configured properly and block if it didn't
   while (imu.begin() != TRUE){HAL_Delay(500);}
 8001b60:	4816      	ldr	r0, [pc, #88]	; (8001bbc <main+0xac>)
 8001b62:	f7ff fc33 	bl	80013cc <_ZN7MPUXX505beginEv>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	bf14      	ite	ne
 8001b6c:	2301      	movne	r3, #1
 8001b6e:	2300      	moveq	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d004      	beq.n	8001b80 <main+0x70>
 8001b76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b7a:	f003 fda3 	bl	80056c4 <HAL_Delay>
 8001b7e:	e7ef      	b.n	8001b60 <main+0x50>

   // Calibrate the IMU
   imu.calibrateGyro(1500);
 8001b80:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001b84:	480d      	ldr	r0, [pc, #52]	; (8001bbc <main+0xac>)
 8001b86:	f7ff fdcf 	bl	8001728 <_ZN7MPUXX5013calibrateGyroEt>


	//Start timer
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	480e      	ldr	r0, [pc, #56]	; (8001bc8 <main+0xb8>)
 8001b8e:	f006 f9af 	bl	8007ef0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001b92:	2104      	movs	r1, #4
 8001b94:	480c      	ldr	r0, [pc, #48]	; (8001bc8 <main+0xb8>)
 8001b96:	f006 f9ab 	bl	8007ef0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001b9a:	2104      	movs	r1, #4
 8001b9c:	480b      	ldr	r0, [pc, #44]	; (8001bcc <main+0xbc>)
 8001b9e:	f006 fb15 	bl	80081cc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001ba2:	2104      	movs	r1, #4
 8001ba4:	480a      	ldr	r0, [pc, #40]	; (8001bd0 <main+0xc0>)
 8001ba6:	f006 fb11 	bl	80081cc <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8001baa:	480a      	ldr	r0, [pc, #40]	; (8001bd4 <main+0xc4>)
 8001bac:	f006 f8e0 	bl	8007d70 <HAL_TIM_Base_Start_IT>

	// Init setup for rosserial
	setup();
 8001bb0:	f002 fb1e 	bl	80041f0 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8001bb4:	f002 fb3e 	bl	8004234 <loop>
 8001bb8:	e7fc      	b.n	8001bb4 <main+0xa4>
 8001bba:	bf00      	nop
 8001bbc:	20000914 	.word	0x20000914
 8001bc0:	3b83126f 	.word	0x3b83126f
 8001bc4:	3f7ae148 	.word	0x3f7ae148
 8001bc8:	20000674 	.word	0x20000674
 8001bcc:	200006bc 	.word	0x200006bc
 8001bd0:	20000704 	.word	0x20000704
 8001bd4:	2000074c 	.word	0x2000074c

08001bd8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b094      	sub	sp, #80	; 0x50
 8001bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bde:	f107 0320 	add.w	r3, r7, #32
 8001be2:	2230      	movs	r2, #48	; 0x30
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f008 fd86 	bl	800a6f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <_Z18SystemClock_Configv+0xe0>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	4a2c      	ldr	r2, [pc, #176]	; (8001cb8 <_Z18SystemClock_Configv+0xe0>)
 8001c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0c:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <_Z18SystemClock_Configv+0xe0>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c18:	2300      	movs	r3, #0
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <_Z18SystemClock_Configv+0xe4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a26      	ldr	r2, [pc, #152]	; (8001cbc <_Z18SystemClock_Configv+0xe4>)
 8001c22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <_Z18SystemClock_Configv+0xe4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c34:	2302      	movs	r3, #2
 8001c36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c3c:	2310      	movs	r3, #16
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c40:	2302      	movs	r3, #2
 8001c42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c44:	2300      	movs	r3, #0
 8001c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c48:	2308      	movs	r3, #8
 8001c4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001c4c:	2360      	movs	r3, #96	; 0x60
 8001c4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c50:	2302      	movs	r3, #2
 8001c52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c54:	2304      	movs	r3, #4
 8001c56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c58:	f107 0320 	add.w	r3, r7, #32
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f005 fbdf 	bl	8007420 <HAL_RCC_OscConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf14      	ite	ne
 8001c68:	2301      	movne	r3, #1
 8001c6a:	2300      	moveq	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001c72:	f000 fcfb 	bl	800266c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c76:	230f      	movs	r3, #15
 8001c78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c8e:	f107 030c 	add.w	r3, r7, #12
 8001c92:	2103      	movs	r1, #3
 8001c94:	4618      	mov	r0, r3
 8001c96:	f005 fe3b 	bl	8007910 <HAL_RCC_ClockConfig>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	bf14      	ite	ne
 8001ca0:	2301      	movne	r3, #1
 8001ca2:	2300      	moveq	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8001caa:	f000 fcdf 	bl	800266c <Error_Handler>
  }
}
 8001cae:	bf00      	nop
 8001cb0:	3750      	adds	r7, #80	; 0x50
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40007000 	.word	0x40007000

08001cc0 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cc4:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <_ZL12MX_I2C2_Initv+0x5c>)
 8001cc6:	4a16      	ldr	r2, [pc, #88]	; (8001d20 <_ZL12MX_I2C2_Initv+0x60>)
 8001cc8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <_ZL12MX_I2C2_Initv+0x5c>)
 8001ccc:	4a15      	ldr	r2, [pc, #84]	; (8001d24 <_ZL12MX_I2C2_Initv+0x64>)
 8001cce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <_ZL12MX_I2C2_Initv+0x5c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <_ZL12MX_I2C2_Initv+0x5c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <_ZL12MX_I2C2_Initv+0x5c>)
 8001cde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ce2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <_ZL12MX_I2C2_Initv+0x5c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <_ZL12MX_I2C2_Initv+0x5c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <_ZL12MX_I2C2_Initv+0x5c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <_ZL12MX_I2C2_Initv+0x5c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cfc:	4807      	ldr	r0, [pc, #28]	; (8001d1c <_ZL12MX_I2C2_Initv+0x5c>)
 8001cfe:	f004 fbcf 	bl	80064a0 <HAL_I2C_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf14      	ite	ne
 8001d08:	2301      	movne	r3, #1
 8001d0a:	2300      	moveq	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8001d12:	f000 fcab 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000620 	.word	0x20000620
 8001d20:	40005800 	.word	0x40005800
 8001d24:	000186a0 	.word	0x000186a0

08001d28 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	; 0x28
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2e:	f107 0320 	add.w	r3, r7, #32
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]
 8001d46:	615a      	str	r2, [r3, #20]
 8001d48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d4a:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <_ZL12MX_TIM2_Initv+0xec>)
 8001d4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 8001d52:	4b30      	ldr	r3, [pc, #192]	; (8001e14 <_ZL12MX_TIM2_Initv+0xec>)
 8001d54:	220e      	movs	r2, #14
 8001d56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d58:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <_ZL12MX_TIM2_Initv+0xec>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 600;
 8001d5e:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <_ZL12MX_TIM2_Initv+0xec>)
 8001d60:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001d64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d66:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <_ZL12MX_TIM2_Initv+0xec>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6c:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <_ZL12MX_TIM2_Initv+0xec>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d72:	4828      	ldr	r0, [pc, #160]	; (8001e14 <_ZL12MX_TIM2_Initv+0xec>)
 8001d74:	f006 f86c 	bl	8007e50 <HAL_TIM_PWM_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	bf14      	ite	ne
 8001d7e:	2301      	movne	r3, #1
 8001d80:	2300      	moveq	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 8001d88:	f000 fc70 	bl	800266c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d94:	f107 0320 	add.w	r3, r7, #32
 8001d98:	4619      	mov	r1, r3
 8001d9a:	481e      	ldr	r0, [pc, #120]	; (8001e14 <_ZL12MX_TIM2_Initv+0xec>)
 8001d9c:	f007 f86e 	bl	8008e7c <HAL_TIMEx_MasterConfigSynchronization>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	bf14      	ite	ne
 8001da6:	2301      	movne	r3, #1
 8001da8:	2300      	moveq	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 8001db0:	f000 fc5c 	bl	800266c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db4:	2360      	movs	r3, #96	; 0x60
 8001db6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4812      	ldr	r0, [pc, #72]	; (8001e14 <_ZL12MX_TIM2_Initv+0xec>)
 8001dcc:	f006 fb94 	bl	80084f8 <HAL_TIM_PWM_ConfigChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf14      	ite	ne
 8001dd6:	2301      	movne	r3, #1
 8001dd8:	2300      	moveq	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 8001de0:	f000 fc44 	bl	800266c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	2204      	movs	r2, #4
 8001de8:	4619      	mov	r1, r3
 8001dea:	480a      	ldr	r0, [pc, #40]	; (8001e14 <_ZL12MX_TIM2_Initv+0xec>)
 8001dec:	f006 fb84 	bl	80084f8 <HAL_TIM_PWM_ConfigChannel>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	bf14      	ite	ne
 8001df6:	2301      	movne	r3, #1
 8001df8:	2300      	moveq	r3, #0
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8001e00:	f000 fc34 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e04:	4803      	ldr	r0, [pc, #12]	; (8001e14 <_ZL12MX_TIM2_Initv+0xec>)
 8001e06:	f003 f97d 	bl	8005104 <HAL_TIM_MspPostInit>

}
 8001e0a:	bf00      	nop
 8001e0c:	3728      	adds	r7, #40	; 0x28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000674 	.word	0x20000674

08001e18 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08c      	sub	sp, #48	; 0x30
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e1e:	f107 030c 	add.w	r3, r7, #12
 8001e22:	2224      	movs	r2, #36	; 0x24
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f008 fc66 	bl	800a6f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e34:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <_ZL12MX_TIM3_Initv+0xb4>)
 8001e36:	4a26      	ldr	r2, [pc, #152]	; (8001ed0 <_ZL12MX_TIM3_Initv+0xb8>)
 8001e38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e3a:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <_ZL12MX_TIM3_Initv+0xb4>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e40:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <_ZL12MX_TIM3_Initv+0xb4>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e46:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <_ZL12MX_TIM3_Initv+0xb4>)
 8001e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <_ZL12MX_TIM3_Initv+0xb4>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <_ZL12MX_TIM3_Initv+0xb4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e62:	2301      	movs	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e72:	2301      	movs	r3, #1
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e7e:	f107 030c 	add.w	r3, r7, #12
 8001e82:	4619      	mov	r1, r3
 8001e84:	4811      	ldr	r0, [pc, #68]	; (8001ecc <_ZL12MX_TIM3_Initv+0xb4>)
 8001e86:	f006 f8fb 	bl	8008080 <HAL_TIM_Encoder_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bf14      	ite	ne
 8001e90:	2301      	movne	r3, #1
 8001e92:	2300      	moveq	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8001e9a:	f000 fbe7 	bl	800266c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4808      	ldr	r0, [pc, #32]	; (8001ecc <_ZL12MX_TIM3_Initv+0xb4>)
 8001eac:	f006 ffe6 	bl	8008e7c <HAL_TIMEx_MasterConfigSynchronization>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	bf14      	ite	ne
 8001eb6:	2301      	movne	r3, #1
 8001eb8:	2300      	moveq	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8001ec0:	f000 fbd4 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ec4:	bf00      	nop
 8001ec6:	3730      	adds	r7, #48	; 0x30
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200006bc 	.word	0x200006bc
 8001ed0:	40000400 	.word	0x40000400

08001ed4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08c      	sub	sp, #48	; 0x30
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	2224      	movs	r2, #36	; 0x24
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f008 fc08 	bl	800a6f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ef0:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <_ZL12MX_TIM4_Initv+0xb4>)
 8001ef2:	4a26      	ldr	r2, [pc, #152]	; (8001f8c <_ZL12MX_TIM4_Initv+0xb8>)
 8001ef4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ef6:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <_ZL12MX_TIM4_Initv+0xb4>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efc:	4b22      	ldr	r3, [pc, #136]	; (8001f88 <_ZL12MX_TIM4_Initv+0xb4>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001f02:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <_ZL12MX_TIM4_Initv+0xb4>)
 8001f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0a:	4b1f      	ldr	r3, [pc, #124]	; (8001f88 <_ZL12MX_TIM4_Initv+0xb4>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f10:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <_ZL12MX_TIM4_Initv+0xb4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f16:	2301      	movs	r3, #1
 8001f18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f32:	2300      	movs	r3, #0
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001f3a:	f107 030c 	add.w	r3, r7, #12
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4811      	ldr	r0, [pc, #68]	; (8001f88 <_ZL12MX_TIM4_Initv+0xb4>)
 8001f42:	f006 f89d 	bl	8008080 <HAL_TIM_Encoder_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf14      	ite	ne
 8001f4c:	2301      	movne	r3, #1
 8001f4e:	2300      	moveq	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8001f56:	f000 fb89 	bl	800266c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	4619      	mov	r1, r3
 8001f66:	4808      	ldr	r0, [pc, #32]	; (8001f88 <_ZL12MX_TIM4_Initv+0xb4>)
 8001f68:	f006 ff88 	bl	8008e7c <HAL_TIMEx_MasterConfigSynchronization>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bf14      	ite	ne
 8001f72:	2301      	movne	r3, #1
 8001f74:	2300      	moveq	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8001f7c:	f000 fb76 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	3730      	adds	r7, #48	; 0x30
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000704 	.word	0x20000704
 8001f8c:	40000800 	.word	0x40000800

08001f90 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f96:	f107 0308 	add.w	r3, r7, #8
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa4:	463b      	mov	r3, r7
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001fac:	4b25      	ldr	r3, [pc, #148]	; (8002044 <_ZL12MX_TIM5_Initv+0xb4>)
 8001fae:	4a26      	ldr	r2, [pc, #152]	; (8002048 <_ZL12MX_TIM5_Initv+0xb8>)
 8001fb0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9600;
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <_ZL12MX_TIM5_Initv+0xb4>)
 8001fb4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fb8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fba:	4b22      	ldr	r3, [pc, #136]	; (8002044 <_ZL12MX_TIM5_Initv+0xb4>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500;
 8001fc0:	4b20      	ldr	r3, [pc, #128]	; (8002044 <_ZL12MX_TIM5_Initv+0xb4>)
 8001fc2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001fc6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc8:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <_ZL12MX_TIM5_Initv+0xb4>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fce:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <_ZL12MX_TIM5_Initv+0xb4>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001fd4:	481b      	ldr	r0, [pc, #108]	; (8002044 <_ZL12MX_TIM5_Initv+0xb4>)
 8001fd6:	f005 fe7b 	bl	8007cd0 <HAL_TIM_Base_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bf14      	ite	ne
 8001fe0:	2301      	movne	r3, #1
 8001fe2:	2300      	moveq	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <_ZL12MX_TIM5_Initv+0x5e>
  {
    Error_Handler();
 8001fea:	f000 fb3f 	bl	800266c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ff4:	f107 0308 	add.w	r3, r7, #8
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4812      	ldr	r0, [pc, #72]	; (8002044 <_ZL12MX_TIM5_Initv+0xb4>)
 8001ffc:	f006 fb3e 	bl	800867c <HAL_TIM_ConfigClockSource>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf14      	ite	ne
 8002006:	2301      	movne	r3, #1
 8002008:	2300      	moveq	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <_ZL12MX_TIM5_Initv+0x84>
  {
    Error_Handler();
 8002010:	f000 fb2c 	bl	800266c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002014:	2300      	movs	r3, #0
 8002016:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800201c:	463b      	mov	r3, r7
 800201e:	4619      	mov	r1, r3
 8002020:	4808      	ldr	r0, [pc, #32]	; (8002044 <_ZL12MX_TIM5_Initv+0xb4>)
 8002022:	f006 ff2b 	bl	8008e7c <HAL_TIMEx_MasterConfigSynchronization>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf14      	ite	ne
 800202c:	2301      	movne	r3, #1
 800202e:	2300      	moveq	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <_ZL12MX_TIM5_Initv+0xaa>
  {
    Error_Handler();
 8002036:	f000 fb19 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	2000074c 	.word	0x2000074c
 8002048:	40000c00 	.word	0x40000c00

0800204c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002052:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002054:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800205c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002064:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002072:	220c      	movs	r2, #12
 8002074:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800207e:	2200      	movs	r2, #0
 8002080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002082:	4807      	ldr	r0, [pc, #28]	; (80020a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002084:	f006 ff8a 	bl	8008f9c <HAL_UART_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf14      	ite	ne
 800208e:	2301      	movne	r3, #1
 8002090:	2300      	moveq	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002098:	f000 fae8 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000794 	.word	0x20000794
 80020a4:	40004400 	.word	0x40004400

080020a8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <_ZL11MX_DMA_Initv+0x4c>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a0f      	ldr	r2, [pc, #60]	; (80020f4 <_ZL11MX_DMA_Initv+0x4c>)
 80020b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <_ZL11MX_DMA_Initv+0x4c>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c6:	607b      	str	r3, [r7, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	2010      	movs	r0, #16
 80020d0:	f003 fbf7 	bl	80058c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80020d4:	2010      	movs	r0, #16
 80020d6:	f003 fc10 	bl	80058fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	2011      	movs	r0, #17
 80020e0:	f003 fbef 	bl	80058c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80020e4:	2011      	movs	r0, #17
 80020e6:	f003 fc08 	bl	80058fa <HAL_NVIC_EnableIRQ>

}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800

080020f8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fe:	f107 030c 	add.w	r3, r7, #12
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <_ZL12MX_GPIO_Initv+0x9c>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a1f      	ldr	r2, [pc, #124]	; (8002194 <_ZL12MX_GPIO_Initv+0x9c>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <_ZL12MX_GPIO_Initv+0x9c>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	4b19      	ldr	r3, [pc, #100]	; (8002194 <_ZL12MX_GPIO_Initv+0x9c>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a18      	ldr	r2, [pc, #96]	; (8002194 <_ZL12MX_GPIO_Initv+0x9c>)
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b16      	ldr	r3, [pc, #88]	; (8002194 <_ZL12MX_GPIO_Initv+0x9c>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	4b12      	ldr	r3, [pc, #72]	; (8002194 <_ZL12MX_GPIO_Initv+0x9c>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a11      	ldr	r2, [pc, #68]	; (8002194 <_ZL12MX_GPIO_Initv+0x9c>)
 8002150:	f043 0308 	orr.w	r3, r3, #8
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <_ZL12MX_GPIO_Initv+0x9c>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002162:	2200      	movs	r2, #0
 8002164:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002168:	480b      	ldr	r0, [pc, #44]	; (8002198 <_ZL12MX_GPIO_Initv+0xa0>)
 800216a:	f004 f97f 	bl	800646c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800216e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002172:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002174:	2301      	movs	r3, #1
 8002176:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800217c:	2302      	movs	r3, #2
 800217e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	4619      	mov	r1, r3
 8002186:	4804      	ldr	r0, [pc, #16]	; (8002198 <_ZL12MX_GPIO_Initv+0xa0>)
 8002188:	f003 ffd4 	bl	8006134 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800218c:	bf00      	nop
 800218e:	3720      	adds	r7, #32
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40023800 	.word	0x40023800
 8002198:	40020400 	.word	0x40020400
 800219c:	00000000 	.word	0x00000000

080021a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021a0:	b5b0      	push	{r4, r5, r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  // Callback, timer has rolled over
  if (htim == &htim5)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a7f      	ldr	r2, [pc, #508]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	f040 8231 	bne.w	8002614 <HAL_TIM_PeriodElapsedCallback+0x474>
  {
  attitude = imu.calcAttitude();
 80021b2:	487e      	ldr	r0, [pc, #504]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80021b4:	f7ff fbfc 	bl	80019b0 <_ZN7MPUXX5012calcAttitudeEv>
 80021b8:	eef0 6a40 	vmov.f32	s13, s0
 80021bc:	eeb0 7a60 	vmov.f32	s14, s1
 80021c0:	eef0 7a41 	vmov.f32	s15, s2
 80021c4:	4b7a      	ldr	r3, [pc, #488]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80021c6:	edc3 6a00 	vstr	s13, [r3]
 80021ca:	ed83 7a01 	vstr	s14, [r3, #4]
 80021ce:	edc3 7a02 	vstr	s15, [r3, #8]

	//Wheel 1
	Encoder_cnt_m1 = __HAL_TIM_GET_COUNTER(&htim3);
 80021d2:	4b78      	ldr	r3, [pc, #480]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	b21a      	sxth	r2, r3
 80021da:	4b77      	ldr	r3, [pc, #476]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80021dc:	801a      	strh	r2, [r3, #0]
	m1.v = (Encoder_cnt_m1 * 3000) / 960;
 80021de:	4b76      	ldr	r3, [pc, #472]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	b21b      	sxth	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80021ea:	fb02 f303 	mul.w	r3, r2, r3
 80021ee:	4a73      	ldr	r2, [pc, #460]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80021f0:	fb82 1203 	smull	r1, r2, r2, r3
 80021f4:	441a      	add	r2, r3
 80021f6:	1252      	asrs	r2, r2, #9
 80021f8:	17db      	asrs	r3, r3, #31
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	ee07 3a90 	vmov	s15, r3
 8002200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002204:	4b6e      	ldr	r3, [pc, #440]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002206:	edc3 7a07 	vstr	s15, [r3, #28]
	m1.e = Setpoint_value_m1 - m1.v;					// e(t)=r(t) - v(t)
 800220a:	4b6e      	ldr	r3, [pc, #440]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800220c:	ed93 7a00 	vldr	s14, [r3]
 8002210:	4b6b      	ldr	r3, [pc, #428]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002212:	edd3 7a07 	vldr	s15, [r3, #28]
 8002216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800221a:	4b69      	ldr	r3, [pc, #420]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800221c:	edc3 7a01 	vstr	s15, [r3, #4]
	m1.P_control = Kp_m1 * (m1.e - m1.e_prev);			// Kp*(e(k) - e(k-1)
 8002220:	4b67      	ldr	r3, [pc, #412]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002222:	ed93 7a01 	vldr	s14, [r3, #4]
 8002226:	4b66      	ldr	r3, [pc, #408]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002228:	edd3 7a02 	vldr	s15, [r3, #8]
 800222c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002230:	4b65      	ldr	r3, [pc, #404]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002232:	edd3 7a00 	vldr	s15, [r3]
 8002236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223a:	4b61      	ldr	r3, [pc, #388]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800223c:	edc3 7a04 	vstr	s15, [r3, #16]
	m1.I_control = Ki_m1 * 0.01 * (m1.e + m1.e_prev);// Ki*T/2*(e(k) + e(k-1))
 8002240:	4b62      	ldr	r3, [pc, #392]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe f97f 	bl	8000548 <__aeabi_f2d>
 800224a:	a355      	add	r3, pc, #340	; (adr r3, 80023a0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002250:	f7fe f9d2 	bl	80005f8 <__aeabi_dmul>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4614      	mov	r4, r2
 800225a:	461d      	mov	r5, r3
 800225c:	4b58      	ldr	r3, [pc, #352]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800225e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002262:	4b57      	ldr	r3, [pc, #348]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002264:	edd3 7a02 	vldr	s15, [r3, #8]
 8002268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800226c:	ee17 0a90 	vmov	r0, s15
 8002270:	f7fe f96a 	bl	8000548 <__aeabi_f2d>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4620      	mov	r0, r4
 800227a:	4629      	mov	r1, r5
 800227c:	f7fe f9bc 	bl	80005f8 <__aeabi_dmul>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	f7fe fcae 	bl	8000be8 <__aeabi_d2f>
 800228c:	4603      	mov	r3, r0
 800228e:	4a4c      	ldr	r2, [pc, #304]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002290:	6153      	str	r3, [r2, #20]
	m1.D_control = Kd_m1 * 50 * (m1.e - 2 * m1.e_prev + m1.e_prev_prev);
 8002292:	4b4f      	ldr	r3, [pc, #316]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002294:	edd3 7a00 	vldr	s15, [r3]
 8002298:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80023d4 <HAL_TIM_PeriodElapsedCallback+0x234>
 800229c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022a0:	4b47      	ldr	r3, [pc, #284]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80022a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80022a6:	4b46      	ldr	r3, [pc, #280]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80022a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80022ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022b0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80022b4:	4b42      	ldr	r3, [pc, #264]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80022b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80022ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c2:	4b3f      	ldr	r3, [pc, #252]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80022c4:	edc3 7a06 	vstr	s15, [r3, #24]
	m1.u = m1.u_prev + m1.P_control + m1.I_control + m1.D_control;// next signal to motor
 80022c8:	4b3d      	ldr	r3, [pc, #244]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80022ca:	ed93 7a00 	vldr	s14, [r3]
 80022ce:	4b3c      	ldr	r3, [pc, #240]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80022d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80022d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022d8:	4b39      	ldr	r3, [pc, #228]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80022da:	edd3 7a05 	vldr	s15, [r3, #20]
 80022de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e2:	4b37      	ldr	r3, [pc, #220]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80022e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80022e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ec:	4b34      	ldr	r3, [pc, #208]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80022ee:	edc3 7a08 	vstr	s15, [r3, #32]

	//Convert signal in RPM to duty cycle
	duty_m1 = (int) (m1.u * 600 / 208);	// u/176 = x/600 => x = u*600/176
 80022f2:	4b33      	ldr	r3, [pc, #204]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80022f4:	edd3 7a08 	vldr	s15, [r3, #32]
 80022f8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80023d8 <HAL_TIM_PeriodElapsedCallback+0x238>
 80022fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002300:	eddf 6a36 	vldr	s13, [pc, #216]	; 80023dc <HAL_TIM_PeriodElapsedCallback+0x23c>
 8002304:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800230c:	ee17 3a90 	vmov	r3, s15
 8002310:	b21a      	sxth	r2, r3
 8002312:	4b33      	ldr	r3, [pc, #204]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002314:	801a      	strh	r2, [r3, #0]

	//Turn of DIR Pin if control signal is negative
	if (m1.u < 0) {
 8002316:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002318:	edd3 7a08 	vldr	s15, [r3, #32]
 800231c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002324:	d50f      	bpl.n	8002346 <HAL_TIM_PeriodElapsedCallback+0x1a6>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);// DIR PIN = 1
 8002326:	2201      	movs	r2, #1
 8002328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800232c:	482d      	ldr	r0, [pc, #180]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800232e:	f004 f89d 	bl	800646c <HAL_GPIO_WritePin>
	duty_m1 = -duty_m1;
 8002332:	4b2b      	ldr	r3, [pc, #172]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	b21b      	sxth	r3, r3
 8002338:	b29b      	uxth	r3, r3
 800233a:	425b      	negs	r3, r3
 800233c:	b29b      	uxth	r3, r3
 800233e:	b21a      	sxth	r2, r3
 8002340:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002342:	801a      	strh	r2, [r3, #0]
 8002344:	e005      	b.n	8002352 <HAL_TIM_PeriodElapsedCallback+0x1b2>
	} else
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);// DIR PIN = 0;
 8002346:	2200      	movs	r2, #0
 8002348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800234c:	4825      	ldr	r0, [pc, #148]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800234e:	f004 f88d 	bl	800646c <HAL_GPIO_WritePin>
	// New PWM width for motor

	if (m1.u < 0 && m1.v > 0) {
 8002352:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002354:	edd3 7a08 	vldr	s15, [r3, #32]
 8002358:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800235c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002360:	d545      	bpl.n	80023ee <HAL_TIM_PeriodElapsedCallback+0x24e>
 8002362:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002364:	edd3 7a07 	vldr	s15, [r3, #28]
 8002368:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	dd3d      	ble.n	80023ee <HAL_TIM_PeriodElapsedCallback+0x24e>
	if (duty_m1 > 50)
 8002372:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	b21b      	sxth	r3, r3
 8002378:	2b32      	cmp	r3, #50	; 0x32
 800237a:	bfcc      	ite	gt
 800237c:	2301      	movgt	r3, #1
 800237e:	2300      	movle	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d030      	beq.n	80023e8 <HAL_TIM_PeriodElapsedCallback+0x248>
	duty_m1 = duty_m1 - 50;
 8002386:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	b21b      	sxth	r3, r3
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b32      	subs	r3, #50	; 0x32
 8002390:	b29b      	uxth	r3, r3
 8002392:	b21a      	sxth	r2, r3
 8002394:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002396:	801a      	strh	r2, [r3, #0]
 8002398:	e029      	b.n	80023ee <HAL_TIM_PeriodElapsedCallback+0x24e>
 800239a:	bf00      	nop
 800239c:	f3af 8000 	nop.w
 80023a0:	47ae147b 	.word	0x47ae147b
 80023a4:	3f847ae1 	.word	0x3f847ae1
 80023a8:	2000074c 	.word	0x2000074c
 80023ac:	20000914 	.word	0x20000914
 80023b0:	20000898 	.word	0x20000898
 80023b4:	200006bc 	.word	0x200006bc
 80023b8:	200008c4 	.word	0x200008c4
 80023bc:	88888889 	.word	0x88888889
 80023c0:	200008cc 	.word	0x200008cc
 80023c4:	200008a4 	.word	0x200008a4
 80023c8:	200008ac 	.word	0x200008ac
 80023cc:	200008b4 	.word	0x200008b4
 80023d0:	200008bc 	.word	0x200008bc
 80023d4:	42480000 	.word	0x42480000
 80023d8:	44160000 	.word	0x44160000
 80023dc:	43500000 	.word	0x43500000
 80023e0:	200008c8 	.word	0x200008c8
 80023e4:	40020400 	.word	0x40020400
	else
	duty_m1 = 0;
 80023e8:	4b8f      	ldr	r3, [pc, #572]	; (8002628 <HAL_TIM_PeriodElapsedCallback+0x488>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	801a      	strh	r2, [r3, #0]
	}

	htim2.Instance->CCR1 = duty_m1;
 80023ee:	4b8e      	ldr	r3, [pc, #568]	; (8002628 <HAL_TIM_PeriodElapsedCallback+0x488>)
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	b21a      	sxth	r2, r3
 80023f4:	4b8d      	ldr	r3, [pc, #564]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x48c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	635a      	str	r2, [r3, #52]	; 0x34
	m1.e_prev_prev = m1.e_prev;
 80023fa:	4b8d      	ldr	r3, [pc, #564]	; (8002630 <HAL_TIM_PeriodElapsedCallback+0x490>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	4a8c      	ldr	r2, [pc, #560]	; (8002630 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8002400:	60d3      	str	r3, [r2, #12]
	m1.e_prev = m1.e;
 8002402:	4b8b      	ldr	r3, [pc, #556]	; (8002630 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4a8a      	ldr	r2, [pc, #552]	; (8002630 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8002408:	6093      	str	r3, [r2, #8]
	m1.u_prev = m1.u;
 800240a:	4b89      	ldr	r3, [pc, #548]	; (8002630 <HAL_TIM_PeriodElapsedCallback+0x490>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4a88      	ldr	r2, [pc, #544]	; (8002630 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8002410:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0);			// Reset value of encoder
 8002412:	4b88      	ldr	r3, [pc, #544]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0x494>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2200      	movs	r2, #0
 8002418:	625a      	str	r2, [r3, #36]	; 0x24

	//Wheel 2
	Encoder_cnt_m2 = __HAL_TIM_GET_COUNTER(&htim4);
 800241a:	4b87      	ldr	r3, [pc, #540]	; (8002638 <HAL_TIM_PeriodElapsedCallback+0x498>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	b21a      	sxth	r2, r3
 8002422:	4b86      	ldr	r3, [pc, #536]	; (800263c <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8002424:	801a      	strh	r2, [r3, #0]
	m2.v = (Encoder_cnt_m2 * 3000) / 960;
 8002426:	4b85      	ldr	r3, [pc, #532]	; (800263c <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	b21b      	sxth	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002432:	fb02 f303 	mul.w	r3, r2, r3
 8002436:	4a82      	ldr	r2, [pc, #520]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8002438:	fb82 1203 	smull	r1, r2, r2, r3
 800243c:	441a      	add	r2, r3
 800243e:	1252      	asrs	r2, r2, #9
 8002440:	17db      	asrs	r3, r3, #31
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	ee07 3a90 	vmov	s15, r3
 8002448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800244c:	4b7d      	ldr	r3, [pc, #500]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 800244e:	edc3 7a07 	vstr	s15, [r3, #28]
	m2.e = Setpoint_value_m2 - m2.v;					// e(t)=r(t) - v(t)
 8002452:	4b7d      	ldr	r3, [pc, #500]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8002454:	ed93 7a00 	vldr	s14, [r3]
 8002458:	4b7a      	ldr	r3, [pc, #488]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 800245a:	edd3 7a07 	vldr	s15, [r3, #28]
 800245e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002462:	4b78      	ldr	r3, [pc, #480]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8002464:	edc3 7a01 	vstr	s15, [r3, #4]
	m2.P_control = Kp_m2 * (m2.e - m2.e_prev);			// Kp*(e(k) - e(k-1)
 8002468:	4b76      	ldr	r3, [pc, #472]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 800246a:	ed93 7a01 	vldr	s14, [r3, #4]
 800246e:	4b75      	ldr	r3, [pc, #468]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8002470:	edd3 7a02 	vldr	s15, [r3, #8]
 8002474:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002478:	4b74      	ldr	r3, [pc, #464]	; (800264c <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002482:	4b70      	ldr	r3, [pc, #448]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8002484:	edc3 7a04 	vstr	s15, [r3, #16]
	m2.I_control = Ki_m2 * 0.01 * (m2.e + m2.e_prev);// Ki*T/2*(e(k) + e(k-1))
 8002488:	4b71      	ldr	r3, [pc, #452]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe f85b 	bl	8000548 <__aeabi_f2d>
 8002492:	a363      	add	r3, pc, #396	; (adr r3, 8002620 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	f7fe f8ae 	bl	80005f8 <__aeabi_dmul>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4614      	mov	r4, r2
 80024a2:	461d      	mov	r5, r3
 80024a4:	4b67      	ldr	r3, [pc, #412]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80024a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80024aa:	4b66      	ldr	r3, [pc, #408]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80024ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80024b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b4:	ee17 0a90 	vmov	r0, s15
 80024b8:	f7fe f846 	bl	8000548 <__aeabi_f2d>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4620      	mov	r0, r4
 80024c2:	4629      	mov	r1, r5
 80024c4:	f7fe f898 	bl	80005f8 <__aeabi_dmul>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7fe fb8a 	bl	8000be8 <__aeabi_d2f>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4a5b      	ldr	r2, [pc, #364]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80024d8:	6153      	str	r3, [r2, #20]
	m2.D_control = Kd_m2 * 50 * (m2.e - 2 * m2.e_prev + m2.e_prev_prev);
 80024da:	4b5e      	ldr	r3, [pc, #376]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8002658 <HAL_TIM_PeriodElapsedCallback+0x4b8>
 80024e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024e8:	4b56      	ldr	r3, [pc, #344]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80024ea:	edd3 6a01 	vldr	s13, [r3, #4]
 80024ee:	4b55      	ldr	r3, [pc, #340]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80024f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80024f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024fc:	4b51      	ldr	r3, [pc, #324]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80024fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8002502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250a:	4b4e      	ldr	r3, [pc, #312]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 800250c:	edc3 7a06 	vstr	s15, [r3, #24]
	m2.u = m2.u_prev + m2.P_control + m2.I_control + m2.D_control;// next signal to motor
 8002510:	4b4c      	ldr	r3, [pc, #304]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8002512:	ed93 7a00 	vldr	s14, [r3]
 8002516:	4b4b      	ldr	r3, [pc, #300]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8002518:	edd3 7a04 	vldr	s15, [r3, #16]
 800251c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002520:	4b48      	ldr	r3, [pc, #288]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8002522:	edd3 7a05 	vldr	s15, [r3, #20]
 8002526:	ee37 7a27 	vadd.f32	s14, s14, s15
 800252a:	4b46      	ldr	r3, [pc, #280]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 800252c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002534:	4b43      	ldr	r3, [pc, #268]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8002536:	edc3 7a08 	vstr	s15, [r3, #32]

	//Convert signal in RPM to duty cycle
	duty_m2 = (int) (m2.u * 600 / 208);	// u/176 = x/600 => x = u*600/176
 800253a:	4b42      	ldr	r3, [pc, #264]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 800253c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002540:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800265c <HAL_TIM_PeriodElapsedCallback+0x4bc>
 8002544:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002548:	eddf 6a45 	vldr	s13, [pc, #276]	; 8002660 <HAL_TIM_PeriodElapsedCallback+0x4c0>
 800254c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002554:	ee17 3a90 	vmov	r3, s15
 8002558:	b21a      	sxth	r2, r3
 800255a:	4b42      	ldr	r3, [pc, #264]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 800255c:	801a      	strh	r2, [r3, #0]

	//Turn of DIR Pin if control signal is negative
	if (m2.u < 0) {
 800255e:	4b39      	ldr	r3, [pc, #228]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8002560:	edd3 7a08 	vldr	s15, [r3, #32]
 8002564:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256c:	d50f      	bpl.n	800258e <HAL_TIM_PeriodElapsedCallback+0x3ee>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);// DIR PIN = 1
 800256e:	2201      	movs	r2, #1
 8002570:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002574:	483c      	ldr	r0, [pc, #240]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8002576:	f003 ff79 	bl	800646c <HAL_GPIO_WritePin>
	duty_m2 = -duty_m2;
 800257a:	4b3a      	ldr	r3, [pc, #232]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	b21b      	sxth	r3, r3
 8002580:	b29b      	uxth	r3, r3
 8002582:	425b      	negs	r3, r3
 8002584:	b29b      	uxth	r3, r3
 8002586:	b21a      	sxth	r2, r3
 8002588:	4b36      	ldr	r3, [pc, #216]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 800258a:	801a      	strh	r2, [r3, #0]
 800258c:	e005      	b.n	800259a <HAL_TIM_PeriodElapsedCallback+0x3fa>
	} else
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);// DIR PIN = 0;
 800258e:	2200      	movs	r2, #0
 8002590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002594:	4834      	ldr	r0, [pc, #208]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8002596:	f003 ff69 	bl	800646c <HAL_GPIO_WritePin>
	// New PWM width for motor

	if (m2.u < 0 && m2.v > 0) {
 800259a:	4b2a      	ldr	r3, [pc, #168]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 800259c:	edd3 7a08 	vldr	s15, [r3, #32]
 80025a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a8:	d51e      	bpl.n	80025e8 <HAL_TIM_PeriodElapsedCallback+0x448>
 80025aa:	4b26      	ldr	r3, [pc, #152]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80025ac:	edd3 7a07 	vldr	s15, [r3, #28]
 80025b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b8:	dd16      	ble.n	80025e8 <HAL_TIM_PeriodElapsedCallback+0x448>
	if (duty_m2 > 50)
 80025ba:	4b2a      	ldr	r3, [pc, #168]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	b21b      	sxth	r3, r3
 80025c0:	2b32      	cmp	r3, #50	; 0x32
 80025c2:	bfcc      	ite	gt
 80025c4:	2301      	movgt	r3, #1
 80025c6:	2300      	movle	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <HAL_TIM_PeriodElapsedCallback+0x442>
	duty_m2 = duty_m2 - 50;
 80025ce:	4b25      	ldr	r3, [pc, #148]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b21b      	sxth	r3, r3
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b32      	subs	r3, #50	; 0x32
 80025d8:	b29b      	uxth	r3, r3
 80025da:	b21a      	sxth	r2, r3
 80025dc:	4b21      	ldr	r3, [pc, #132]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 80025de:	801a      	strh	r2, [r3, #0]
 80025e0:	e002      	b.n	80025e8 <HAL_TIM_PeriodElapsedCallback+0x448>
	else
	duty_m2 = 0;
 80025e2:	4b20      	ldr	r3, [pc, #128]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	801a      	strh	r2, [r3, #0]
	}

	htim2.Instance->CCR2 = duty_m2;
 80025e8:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	b21a      	sxth	r2, r3
 80025ee:	4b0f      	ldr	r3, [pc, #60]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x48c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	639a      	str	r2, [r3, #56]	; 0x38
	m2.e_prev_prev = m2.e_prev;
 80025f4:	4b13      	ldr	r3, [pc, #76]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	4a12      	ldr	r2, [pc, #72]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80025fa:	60d3      	str	r3, [r2, #12]
	m2.e_prev = m2.e;
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4a10      	ldr	r2, [pc, #64]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8002602:	6093      	str	r3, [r2, #8]
	m2.u_prev = m2.u;
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	4a0e      	ldr	r2, [pc, #56]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 800260a:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim4, 0);			// Reset value of encoder
 800260c:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <HAL_TIM_PeriodElapsedCallback+0x498>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2200      	movs	r2, #0
 8002612:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bdb0      	pop	{r4, r5, r7, pc}
 800261c:	f3af 8000 	nop.w
 8002620:	47ae147b 	.word	0x47ae147b
 8002624:	3f847ae1 	.word	0x3f847ae1
 8002628:	200008c8 	.word	0x200008c8
 800262c:	20000674 	.word	0x20000674
 8002630:	200008cc 	.word	0x200008cc
 8002634:	200006bc 	.word	0x200006bc
 8002638:	20000704 	.word	0x20000704
 800263c:	200008c6 	.word	0x200008c6
 8002640:	88888889 	.word	0x88888889
 8002644:	200008f0 	.word	0x200008f0
 8002648:	200008a8 	.word	0x200008a8
 800264c:	200008b0 	.word	0x200008b0
 8002650:	200008b8 	.word	0x200008b8
 8002654:	200008c0 	.word	0x200008c0
 8002658:	42480000 	.word	0x42480000
 800265c:	44160000 	.word	0x44160000
 8002660:	43500000 	.word	0x43500000
 8002664:	200008ca 	.word	0x200008ca
 8002668:	40020400 	.word	0x40020400

0800266c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002670:	b672      	cpsid	i
}
 8002672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002674:	e7fe      	b.n	8002674 <Error_Handler+0x8>
	...

08002678 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d109      	bne.n	800269c <_Z41__static_initialization_and_destruction_0ii+0x24>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800268e:	4293      	cmp	r3, r2
 8002690:	d104      	bne.n	800269c <_Z41__static_initialization_and_destruction_0ii+0x24>
MPUXX50 imu(&hi2c2, AD0_LOW);
 8002692:	2268      	movs	r2, #104	; 0x68
 8002694:	4903      	ldr	r1, [pc, #12]	; (80026a4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8002696:	4804      	ldr	r0, [pc, #16]	; (80026a8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8002698:	f7fe fe72 	bl	8001380 <_ZN7MPUXX50C1EP17I2C_HandleTypeDefh>
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000620 	.word	0x20000620
 80026a8:	20000914 	.word	0x20000914

080026ac <_GLOBAL__sub_I_hi2c2>:
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026b4:	2001      	movs	r0, #1
 80026b6:	f7ff ffdf 	bl	8002678 <_Z41__static_initialization_and_destruction_0ii>
 80026ba:	bd80      	pop	{r7, pc}

080026bc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <_ZN3ros3MsgC1Ev+0x1c>)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	0800f354 	.word	0x0800f354

080026dc <_ZN10custom_msg17encoder_input_msgC1Ev>:
      typedef float _input_Ki_m2_type;
      _input_Ki_m2_type input_Ki_m2;
      typedef float _input_Kd_m2_type;
      _input_Kd_m2_type input_Kd_m2;

    encoder_input_msg():
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
      input_Ki_m1(0),
      input_Kd_m1(0),
      input_setpoint_m2(0),
      input_Kp_m2(0),
      input_Ki_m2(0),
      input_Kd_m2(0)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff ffe8 	bl	80026bc <_ZN3ros3MsgC1Ev>
 80026ec:	4a13      	ldr	r2, [pc, #76]	; (800273c <_ZN10custom_msg17encoder_input_msgC1Ev+0x60>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	611a      	str	r2, [r3, #16]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	615a      	str	r2, [r3, #20]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	619a      	str	r2, [r3, #24]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	61da      	str	r2, [r3, #28]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	621a      	str	r2, [r3, #32]
    {
    }
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	0800f33c 	.word	0x0800f33c

08002740 <_ZNK10custom_msg17encoder_input_msg9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002740:	b480      	push	{r7}
 8002742:	b08d      	sub	sp, #52	; 0x34
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_setpoint_m1;
      u_input_setpoint_m1.real = this->input_setpoint_m1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
      *(outbuffer + offset + 0) = (u_input_setpoint_m1.base >> (8 * 0)) & 0xFF;
 8002754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	4413      	add	r3, r2
 800275c:	b2ca      	uxtb	r2, r1
 800275e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_setpoint_m1.base >> (8 * 1)) & 0xFF;
 8002760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002762:	0a19      	lsrs	r1, r3, #8
 8002764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002766:	3301      	adds	r3, #1
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	4413      	add	r3, r2
 800276c:	b2ca      	uxtb	r2, r1
 800276e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_setpoint_m1.base >> (8 * 2)) & 0xFF;
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002772:	0c19      	lsrs	r1, r3, #16
 8002774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002776:	3302      	adds	r3, #2
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	4413      	add	r3, r2
 800277c:	b2ca      	uxtb	r2, r1
 800277e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_setpoint_m1.base >> (8 * 3)) & 0xFF;
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002782:	0e19      	lsrs	r1, r3, #24
 8002784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002786:	3303      	adds	r3, #3
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	4413      	add	r3, r2
 800278c:	b2ca      	uxtb	r2, r1
 800278e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_setpoint_m1);
 8002790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002792:	3304      	adds	r3, #4
 8002794:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kp_m1;
      u_input_Kp_m1.real = this->input_Kp_m1;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (u_input_Kp_m1.base >> (8 * 0)) & 0xFF;
 800279c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	b2ca      	uxtb	r2, r1
 80027a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_Kp_m1.base >> (8 * 1)) & 0xFF;
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	0a19      	lsrs	r1, r3, #8
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	3301      	adds	r3, #1
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	b2ca      	uxtb	r2, r1
 80027b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_Kp_m1.base >> (8 * 2)) & 0xFF;
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	0c19      	lsrs	r1, r3, #16
 80027bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027be:	3302      	adds	r3, #2
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	4413      	add	r3, r2
 80027c4:	b2ca      	uxtb	r2, r1
 80027c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_Kp_m1.base >> (8 * 3)) & 0xFF;
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	0e19      	lsrs	r1, r3, #24
 80027cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ce:	3303      	adds	r3, #3
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	b2ca      	uxtb	r2, r1
 80027d6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_Kp_m1);
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	3304      	adds	r3, #4
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Ki_m1;
      u_input_Ki_m1.real = this->input_Ki_m1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	623b      	str	r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_input_Ki_m1.base >> (8 * 0)) & 0xFF;
 80027e4:	6a39      	ldr	r1, [r7, #32]
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	b2ca      	uxtb	r2, r1
 80027ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_Ki_m1.base >> (8 * 1)) & 0xFF;
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	0a19      	lsrs	r1, r3, #8
 80027f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f6:	3301      	adds	r3, #1
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	4413      	add	r3, r2
 80027fc:	b2ca      	uxtb	r2, r1
 80027fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_Ki_m1.base >> (8 * 2)) & 0xFF;
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	0c19      	lsrs	r1, r3, #16
 8002804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002806:	3302      	adds	r3, #2
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	4413      	add	r3, r2
 800280c:	b2ca      	uxtb	r2, r1
 800280e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_Ki_m1.base >> (8 * 3)) & 0xFF;
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	0e19      	lsrs	r1, r3, #24
 8002814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002816:	3303      	adds	r3, #3
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	4413      	add	r3, r2
 800281c:	b2ca      	uxtb	r2, r1
 800281e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_Ki_m1);
 8002820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002822:	3304      	adds	r3, #4
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kd_m1;
      u_input_Kd_m1.real = this->input_Kd_m1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (u_input_Kd_m1.base >> (8 * 0)) & 0xFF;
 800282c:	69f9      	ldr	r1, [r7, #28]
 800282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	4413      	add	r3, r2
 8002834:	b2ca      	uxtb	r2, r1
 8002836:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_Kd_m1.base >> (8 * 1)) & 0xFF;
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	0a19      	lsrs	r1, r3, #8
 800283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283e:	3301      	adds	r3, #1
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	4413      	add	r3, r2
 8002844:	b2ca      	uxtb	r2, r1
 8002846:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_Kd_m1.base >> (8 * 2)) & 0xFF;
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	0c19      	lsrs	r1, r3, #16
 800284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284e:	3302      	adds	r3, #2
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	4413      	add	r3, r2
 8002854:	b2ca      	uxtb	r2, r1
 8002856:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_Kd_m1.base >> (8 * 3)) & 0xFF;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	0e19      	lsrs	r1, r3, #24
 800285c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285e:	3303      	adds	r3, #3
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	4413      	add	r3, r2
 8002864:	b2ca      	uxtb	r2, r1
 8002866:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_Kd_m1);
 8002868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286a:	3304      	adds	r3, #4
 800286c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_setpoint_m2;
      u_input_setpoint_m2.real = this->input_setpoint_m2;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	61bb      	str	r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_input_setpoint_m2.base >> (8 * 0)) & 0xFF;
 8002874:	69b9      	ldr	r1, [r7, #24]
 8002876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	4413      	add	r3, r2
 800287c:	b2ca      	uxtb	r2, r1
 800287e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_setpoint_m2.base >> (8 * 1)) & 0xFF;
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	0a19      	lsrs	r1, r3, #8
 8002884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002886:	3301      	adds	r3, #1
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	4413      	add	r3, r2
 800288c:	b2ca      	uxtb	r2, r1
 800288e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_setpoint_m2.base >> (8 * 2)) & 0xFF;
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	0c19      	lsrs	r1, r3, #16
 8002894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002896:	3302      	adds	r3, #2
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	4413      	add	r3, r2
 800289c:	b2ca      	uxtb	r2, r1
 800289e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_setpoint_m2.base >> (8 * 3)) & 0xFF;
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	0e19      	lsrs	r1, r3, #24
 80028a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a6:	3303      	adds	r3, #3
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	4413      	add	r3, r2
 80028ac:	b2ca      	uxtb	r2, r1
 80028ae:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_setpoint_m2);
 80028b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b2:	3304      	adds	r3, #4
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kp_m2;
      u_input_Kp_m2.real = this->input_Kp_m2;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_input_Kp_m2.base >> (8 * 0)) & 0xFF;
 80028bc:	6979      	ldr	r1, [r7, #20]
 80028be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	4413      	add	r3, r2
 80028c4:	b2ca      	uxtb	r2, r1
 80028c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_Kp_m2.base >> (8 * 1)) & 0xFF;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	0a19      	lsrs	r1, r3, #8
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ce:	3301      	adds	r3, #1
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	b2ca      	uxtb	r2, r1
 80028d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_Kp_m2.base >> (8 * 2)) & 0xFF;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	0c19      	lsrs	r1, r3, #16
 80028dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028de:	3302      	adds	r3, #2
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	4413      	add	r3, r2
 80028e4:	b2ca      	uxtb	r2, r1
 80028e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_Kp_m2.base >> (8 * 3)) & 0xFF;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	0e19      	lsrs	r1, r3, #24
 80028ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ee:	3303      	adds	r3, #3
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	4413      	add	r3, r2
 80028f4:	b2ca      	uxtb	r2, r1
 80028f6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_Kp_m2);
 80028f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fa:	3304      	adds	r3, #4
 80028fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Ki_m2;
      u_input_Ki_m2.real = this->input_Ki_m2;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_input_Ki_m2.base >> (8 * 0)) & 0xFF;
 8002904:	6939      	ldr	r1, [r7, #16]
 8002906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	4413      	add	r3, r2
 800290c:	b2ca      	uxtb	r2, r1
 800290e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_Ki_m2.base >> (8 * 1)) & 0xFF;
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	0a19      	lsrs	r1, r3, #8
 8002914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002916:	3301      	adds	r3, #1
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	4413      	add	r3, r2
 800291c:	b2ca      	uxtb	r2, r1
 800291e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_Ki_m2.base >> (8 * 2)) & 0xFF;
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	0c19      	lsrs	r1, r3, #16
 8002924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002926:	3302      	adds	r3, #2
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	4413      	add	r3, r2
 800292c:	b2ca      	uxtb	r2, r1
 800292e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_Ki_m2.base >> (8 * 3)) & 0xFF;
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	0e19      	lsrs	r1, r3, #24
 8002934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002936:	3303      	adds	r3, #3
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	4413      	add	r3, r2
 800293c:	b2ca      	uxtb	r2, r1
 800293e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_Ki_m2);
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002942:	3304      	adds	r3, #4
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kd_m2;
      u_input_Kd_m2.real = this->input_Kd_m2;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_input_Kd_m2.base >> (8 * 0)) & 0xFF;
 800294c:	68f9      	ldr	r1, [r7, #12]
 800294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	4413      	add	r3, r2
 8002954:	b2ca      	uxtb	r2, r1
 8002956:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_Kd_m2.base >> (8 * 1)) & 0xFF;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	0a19      	lsrs	r1, r3, #8
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	3301      	adds	r3, #1
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	4413      	add	r3, r2
 8002964:	b2ca      	uxtb	r2, r1
 8002966:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_Kd_m2.base >> (8 * 2)) & 0xFF;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	0c19      	lsrs	r1, r3, #16
 800296c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296e:	3302      	adds	r3, #2
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	4413      	add	r3, r2
 8002974:	b2ca      	uxtb	r2, r1
 8002976:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_Kd_m2.base >> (8 * 3)) & 0xFF;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	0e19      	lsrs	r1, r3, #24
 800297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297e:	3303      	adds	r3, #3
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	4413      	add	r3, r2
 8002984:	b2ca      	uxtb	r2, r1
 8002986:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_Kd_m2);
 8002988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298a:	3304      	adds	r3, #4
 800298c:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 800298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002990:	4618      	mov	r0, r3
 8002992:	3734      	adds	r7, #52	; 0x34
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <_ZN10custom_msg17encoder_input_msg11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800299c:	b480      	push	{r7}
 800299e:	b08d      	sub	sp, #52	; 0x34
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_setpoint_m1;
      u_input_setpoint_m1.base = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	62bb      	str	r3, [r7, #40]	; 0x28
      u_input_setpoint_m1.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029b2:	6839      	ldr	r1, [r7, #0]
 80029b4:	440a      	add	r2, r1
 80029b6:	7812      	ldrb	r2, [r2, #0]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
      u_input_setpoint_m1.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c0:	3301      	adds	r3, #1
 80029c2:	6839      	ldr	r1, [r7, #0]
 80029c4:	440b      	add	r3, r1
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	4313      	orrs	r3, r2
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
      u_input_setpoint_m1.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d2:	3302      	adds	r3, #2
 80029d4:	6839      	ldr	r1, [r7, #0]
 80029d6:	440b      	add	r3, r1
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	041b      	lsls	r3, r3, #16
 80029dc:	4313      	orrs	r3, r2
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
      u_input_setpoint_m1.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e4:	3303      	adds	r3, #3
 80029e6:	6839      	ldr	r1, [r7, #0]
 80029e8:	440b      	add	r3, r1
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	4313      	orrs	r3, r2
 80029f0:	62bb      	str	r3, [r7, #40]	; 0x28
      this->input_setpoint_m1 = u_input_setpoint_m1.real;
 80029f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->input_setpoint_m1);
 80029f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fa:	3304      	adds	r3, #4
 80029fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kp_m1;
      u_input_Kp_m1.base = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
      u_input_Kp_m1.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a06:	6839      	ldr	r1, [r7, #0]
 8002a08:	440a      	add	r2, r1
 8002a0a:	7812      	ldrb	r2, [r2, #0]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
      u_input_Kp_m1.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	3301      	adds	r3, #1
 8002a16:	6839      	ldr	r1, [r7, #0]
 8002a18:	440b      	add	r3, r1
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	021b      	lsls	r3, r3, #8
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
      u_input_Kp_m1.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a26:	3302      	adds	r3, #2
 8002a28:	6839      	ldr	r1, [r7, #0]
 8002a2a:	440b      	add	r3, r1
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	041b      	lsls	r3, r3, #16
 8002a30:	4313      	orrs	r3, r2
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
      u_input_Kp_m1.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a38:	3303      	adds	r3, #3
 8002a3a:	6839      	ldr	r1, [r7, #0]
 8002a3c:	440b      	add	r3, r1
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	061b      	lsls	r3, r3, #24
 8002a42:	4313      	orrs	r3, r2
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
      this->input_Kp_m1 = u_input_Kp_m1.real;
 8002a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->input_Kp_m1);
 8002a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4e:	3304      	adds	r3, #4
 8002a50:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Ki_m1;
      u_input_Ki_m1.base = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	623b      	str	r3, [r7, #32]
      u_input_Ki_m1.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a5a:	6839      	ldr	r1, [r7, #0]
 8002a5c:	440a      	add	r2, r1
 8002a5e:	7812      	ldrb	r2, [r2, #0]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	623b      	str	r3, [r7, #32]
      u_input_Ki_m1.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a64:	6a3a      	ldr	r2, [r7, #32]
 8002a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a68:	3301      	adds	r3, #1
 8002a6a:	6839      	ldr	r1, [r7, #0]
 8002a6c:	440b      	add	r3, r1
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	021b      	lsls	r3, r3, #8
 8002a72:	4313      	orrs	r3, r2
 8002a74:	623b      	str	r3, [r7, #32]
      u_input_Ki_m1.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a76:	6a3a      	ldr	r2, [r7, #32]
 8002a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	6839      	ldr	r1, [r7, #0]
 8002a7e:	440b      	add	r3, r1
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	041b      	lsls	r3, r3, #16
 8002a84:	4313      	orrs	r3, r2
 8002a86:	623b      	str	r3, [r7, #32]
      u_input_Ki_m1.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a88:	6a3a      	ldr	r2, [r7, #32]
 8002a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8c:	3303      	adds	r3, #3
 8002a8e:	6839      	ldr	r1, [r7, #0]
 8002a90:	440b      	add	r3, r1
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	061b      	lsls	r3, r3, #24
 8002a96:	4313      	orrs	r3, r2
 8002a98:	623b      	str	r3, [r7, #32]
      this->input_Ki_m1 = u_input_Ki_m1.real;
 8002a9a:	6a3a      	ldr	r2, [r7, #32]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->input_Ki_m1);
 8002aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kd_m1;
      u_input_Kd_m1.base = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
      u_input_Kd_m1.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aae:	6839      	ldr	r1, [r7, #0]
 8002ab0:	440a      	add	r2, r1
 8002ab2:	7812      	ldrb	r2, [r2, #0]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61fb      	str	r3, [r7, #28]
      u_input_Kd_m1.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abc:	3301      	adds	r3, #1
 8002abe:	6839      	ldr	r1, [r7, #0]
 8002ac0:	440b      	add	r3, r1
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61fb      	str	r3, [r7, #28]
      u_input_Kd_m1.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ace:	3302      	adds	r3, #2
 8002ad0:	6839      	ldr	r1, [r7, #0]
 8002ad2:	440b      	add	r3, r1
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	041b      	lsls	r3, r3, #16
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61fb      	str	r3, [r7, #28]
      u_input_Kd_m1.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae0:	3303      	adds	r3, #3
 8002ae2:	6839      	ldr	r1, [r7, #0]
 8002ae4:	440b      	add	r3, r1
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	061b      	lsls	r3, r3, #24
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61fb      	str	r3, [r7, #28]
      this->input_Kd_m1 = u_input_Kd_m1.real;
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	611a      	str	r2, [r3, #16]
      offset += sizeof(this->input_Kd_m1);
 8002af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af6:	3304      	adds	r3, #4
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_setpoint_m2;
      u_input_setpoint_m2.base = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
      u_input_setpoint_m2.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b02:	6839      	ldr	r1, [r7, #0]
 8002b04:	440a      	add	r2, r1
 8002b06:	7812      	ldrb	r2, [r2, #0]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
      u_input_setpoint_m2.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b10:	3301      	adds	r3, #1
 8002b12:	6839      	ldr	r1, [r7, #0]
 8002b14:	440b      	add	r3, r1
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	021b      	lsls	r3, r3, #8
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
      u_input_setpoint_m2.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b22:	3302      	adds	r3, #2
 8002b24:	6839      	ldr	r1, [r7, #0]
 8002b26:	440b      	add	r3, r1
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	041b      	lsls	r3, r3, #16
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
      u_input_setpoint_m2.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b34:	3303      	adds	r3, #3
 8002b36:	6839      	ldr	r1, [r7, #0]
 8002b38:	440b      	add	r3, r1
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	061b      	lsls	r3, r3, #24
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
      this->input_setpoint_m2 = u_input_setpoint_m2.real;
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->input_setpoint_m2);
 8002b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kp_m2;
      u_input_Kp_m2.base = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
      u_input_Kp_m2.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b56:	6839      	ldr	r1, [r7, #0]
 8002b58:	440a      	add	r2, r1
 8002b5a:	7812      	ldrb	r2, [r2, #0]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
      u_input_Kp_m2.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b64:	3301      	adds	r3, #1
 8002b66:	6839      	ldr	r1, [r7, #0]
 8002b68:	440b      	add	r3, r1
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]
      u_input_Kp_m2.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b76:	3302      	adds	r3, #2
 8002b78:	6839      	ldr	r1, [r7, #0]
 8002b7a:	440b      	add	r3, r1
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	041b      	lsls	r3, r3, #16
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
      u_input_Kp_m2.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	3303      	adds	r3, #3
 8002b8a:	6839      	ldr	r1, [r7, #0]
 8002b8c:	440b      	add	r3, r1
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	061b      	lsls	r3, r3, #24
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]
      this->input_Kp_m2 = u_input_Kp_m2.real;
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	619a      	str	r2, [r3, #24]
      offset += sizeof(this->input_Kp_m2);
 8002b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Ki_m2;
      u_input_Ki_m2.base = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
      u_input_Ki_m2.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002baa:	6839      	ldr	r1, [r7, #0]
 8002bac:	440a      	add	r2, r1
 8002bae:	7812      	ldrb	r2, [r2, #0]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
      u_input_Ki_m2.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb8:	3301      	adds	r3, #1
 8002bba:	6839      	ldr	r1, [r7, #0]
 8002bbc:	440b      	add	r3, r1
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
      u_input_Ki_m2.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bca:	3302      	adds	r3, #2
 8002bcc:	6839      	ldr	r1, [r7, #0]
 8002bce:	440b      	add	r3, r1
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	041b      	lsls	r3, r3, #16
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
      u_input_Ki_m2.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	3303      	adds	r3, #3
 8002bde:	6839      	ldr	r1, [r7, #0]
 8002be0:	440b      	add	r3, r1
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
      this->input_Ki_m2 = u_input_Ki_m2.real;
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->input_Ki_m2);
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kd_m2;
      u_input_Kd_m2.base = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
      u_input_Kd_m2.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bfe:	6839      	ldr	r1, [r7, #0]
 8002c00:	440a      	add	r2, r1
 8002c02:	7812      	ldrb	r2, [r2, #0]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
      u_input_Kd_m2.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	6839      	ldr	r1, [r7, #0]
 8002c10:	440b      	add	r3, r1
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
      u_input_Kd_m2.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1e:	3302      	adds	r3, #2
 8002c20:	6839      	ldr	r1, [r7, #0]
 8002c22:	440b      	add	r3, r1
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	041b      	lsls	r3, r3, #16
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
      u_input_Kd_m2.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	3303      	adds	r3, #3
 8002c32:	6839      	ldr	r1, [r7, #0]
 8002c34:	440b      	add	r3, r1
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	061b      	lsls	r3, r3, #24
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
      this->input_Kd_m2 = u_input_Kd_m2.real;
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	621a      	str	r2, [r3, #32]
      offset += sizeof(this->input_Kd_m2);
 8002c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c46:	3304      	adds	r3, #4
 8002c48:	62fb      	str	r3, [r7, #44]	; 0x2c
     return offset;
 8002c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3734      	adds	r7, #52	; 0x34
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <_ZN10custom_msg17encoder_input_msg7getTypeEv>:

    virtual const char * getType() override { return "custom_msg/encoder_input_msg"; };
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <_ZN10custom_msg17encoder_input_msg7getTypeEv+0x18>)
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	0800efe8 	.word	0x0800efe8

08002c74 <_ZN10custom_msg17encoder_input_msg6getMD5Ev>:
    virtual const char * getMD5() override { return "db9ba92c90b9ba885220db60c812fbcf"; };
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <_ZN10custom_msg17encoder_input_msg6getMD5Ev+0x18>)
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	0800f008 	.word	0x0800f008

08002c90 <_ZN10custom_msg18encoder_output_msgC1Ev>:
      typedef float _output_rpm_m2_type;
      _output_rpm_m2_type output_rpm_m2;
      typedef float _output_controller_m2_type;
      _output_controller_m2_type output_controller_m2;

    encoder_output_msg():
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
      output_rpm_m1(0),
      output_controller_m1(0),
      output_rpm_m2(0),
      output_controller_m2(0)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff fd0e 	bl	80026bc <_ZN3ros3MsgC1Ev>
 8002ca0:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <_ZN10custom_msg18encoder_output_msgC1Ev+0x40>)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	611a      	str	r2, [r3, #16]
    {
    }
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	0800f324 	.word	0x0800f324

08002cd4 <_ZNK10custom_msg18encoder_output_msg9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002cd4:	b480      	push	{r7}
 8002cd6:	b089      	sub	sp, #36	; 0x24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_output_rpm_m1;
      u_output_rpm_m1.real = this->output_rpm_m1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	61bb      	str	r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_output_rpm_m1.base >> (8 * 0)) & 0xFF;
 8002ce8:	69b9      	ldr	r1, [r7, #24]
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	4413      	add	r3, r2
 8002cf0:	b2ca      	uxtb	r2, r1
 8002cf2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_output_rpm_m1.base >> (8 * 1)) & 0xFF;
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	0a19      	lsrs	r1, r3, #8
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	4413      	add	r3, r2
 8002d00:	b2ca      	uxtb	r2, r1
 8002d02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_output_rpm_m1.base >> (8 * 2)) & 0xFF;
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	0c19      	lsrs	r1, r3, #16
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	4413      	add	r3, r2
 8002d10:	b2ca      	uxtb	r2, r1
 8002d12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_output_rpm_m1.base >> (8 * 3)) & 0xFF;
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	0e19      	lsrs	r1, r3, #24
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	3303      	adds	r3, #3
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	4413      	add	r3, r2
 8002d20:	b2ca      	uxtb	r2, r1
 8002d22:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->output_rpm_m1);
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	3304      	adds	r3, #4
 8002d28:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_output_controller_m1;
      u_output_controller_m1.real = this->output_controller_m1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_output_controller_m1.base >> (8 * 0)) & 0xFF;
 8002d30:	6979      	ldr	r1, [r7, #20]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	b2ca      	uxtb	r2, r1
 8002d3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_output_controller_m1.base >> (8 * 1)) & 0xFF;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	0a19      	lsrs	r1, r3, #8
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	3301      	adds	r3, #1
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	4413      	add	r3, r2
 8002d48:	b2ca      	uxtb	r2, r1
 8002d4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_output_controller_m1.base >> (8 * 2)) & 0xFF;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	0c19      	lsrs	r1, r3, #16
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	3302      	adds	r3, #2
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4413      	add	r3, r2
 8002d58:	b2ca      	uxtb	r2, r1
 8002d5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_output_controller_m1.base >> (8 * 3)) & 0xFF;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	0e19      	lsrs	r1, r3, #24
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	3303      	adds	r3, #3
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	b2ca      	uxtb	r2, r1
 8002d6a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->output_controller_m1);
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_output_rpm_m2;
      u_output_rpm_m2.real = this->output_rpm_m2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_output_rpm_m2.base >> (8 * 0)) & 0xFF;
 8002d78:	6939      	ldr	r1, [r7, #16]
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	b2ca      	uxtb	r2, r1
 8002d82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_output_rpm_m2.base >> (8 * 1)) & 0xFF;
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	0a19      	lsrs	r1, r3, #8
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	4413      	add	r3, r2
 8002d90:	b2ca      	uxtb	r2, r1
 8002d92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_output_rpm_m2.base >> (8 * 2)) & 0xFF;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	0c19      	lsrs	r1, r3, #16
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	4413      	add	r3, r2
 8002da0:	b2ca      	uxtb	r2, r1
 8002da2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_output_rpm_m2.base >> (8 * 3)) & 0xFF;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	0e19      	lsrs	r1, r3, #24
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	3303      	adds	r3, #3
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	b2ca      	uxtb	r2, r1
 8002db2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->output_rpm_m2);
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	3304      	adds	r3, #4
 8002db8:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_output_controller_m2;
      u_output_controller_m2.real = this->output_controller_m2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_output_controller_m2.base >> (8 * 0)) & 0xFF;
 8002dc0:	68f9      	ldr	r1, [r7, #12]
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	b2ca      	uxtb	r2, r1
 8002dca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_output_controller_m2.base >> (8 * 1)) & 0xFF;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	0a19      	lsrs	r1, r3, #8
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	b2ca      	uxtb	r2, r1
 8002dda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_output_controller_m2.base >> (8 * 2)) & 0xFF;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	0c19      	lsrs	r1, r3, #16
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	3302      	adds	r3, #2
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	4413      	add	r3, r2
 8002de8:	b2ca      	uxtb	r2, r1
 8002dea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_output_controller_m2.base >> (8 * 3)) & 0xFF;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	0e19      	lsrs	r1, r3, #24
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	3303      	adds	r3, #3
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	4413      	add	r3, r2
 8002df8:	b2ca      	uxtb	r2, r1
 8002dfa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->output_controller_m2);
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	61fb      	str	r3, [r7, #28]
      return offset;
 8002e02:	69fb      	ldr	r3, [r7, #28]
    }
 8002e04:	4618      	mov	r0, r3
 8002e06:	3724      	adds	r7, #36	; 0x24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <_ZN10custom_msg18encoder_output_msg11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002e10:	b480      	push	{r7}
 8002e12:	b089      	sub	sp, #36	; 0x24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_output_rpm_m1;
      u_output_rpm_m1.base = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61bb      	str	r3, [r7, #24]
      u_output_rpm_m1.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	6839      	ldr	r1, [r7, #0]
 8002e28:	440a      	add	r2, r1
 8002e2a:	7812      	ldrb	r2, [r2, #0]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
      u_output_rpm_m1.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3301      	adds	r3, #1
 8002e36:	6839      	ldr	r1, [r7, #0]
 8002e38:	440b      	add	r3, r1
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	021b      	lsls	r3, r3, #8
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
      u_output_rpm_m1.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	3302      	adds	r3, #2
 8002e48:	6839      	ldr	r1, [r7, #0]
 8002e4a:	440b      	add	r3, r1
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	041b      	lsls	r3, r3, #16
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
      u_output_rpm_m1.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3303      	adds	r3, #3
 8002e5a:	6839      	ldr	r1, [r7, #0]
 8002e5c:	440b      	add	r3, r1
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	061b      	lsls	r3, r3, #24
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
      this->output_rpm_m1 = u_output_rpm_m1.real;
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->output_rpm_m1);
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_output_controller_m1;
      u_output_controller_m1.base = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
      u_output_controller_m1.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	6839      	ldr	r1, [r7, #0]
 8002e7c:	440a      	add	r2, r1
 8002e7e:	7812      	ldrb	r2, [r2, #0]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
      u_output_controller_m1.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	6839      	ldr	r1, [r7, #0]
 8002e8c:	440b      	add	r3, r1
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]
      u_output_controller_m1.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	6839      	ldr	r1, [r7, #0]
 8002e9e:	440b      	add	r3, r1
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	041b      	lsls	r3, r3, #16
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
      u_output_controller_m1.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3303      	adds	r3, #3
 8002eae:	6839      	ldr	r1, [r7, #0]
 8002eb0:	440b      	add	r3, r1
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	061b      	lsls	r3, r3, #24
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]
      this->output_controller_m1 = u_output_controller_m1.real;
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->output_controller_m1);
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_output_rpm_m2;
      u_output_rpm_m2.base = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]
      u_output_rpm_m2.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	6839      	ldr	r1, [r7, #0]
 8002ed0:	440a      	add	r2, r1
 8002ed2:	7812      	ldrb	r2, [r2, #0]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
      u_output_rpm_m2.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3301      	adds	r3, #1
 8002ede:	6839      	ldr	r1, [r7, #0]
 8002ee0:	440b      	add	r3, r1
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
      u_output_rpm_m2.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	3302      	adds	r3, #2
 8002ef0:	6839      	ldr	r1, [r7, #0]
 8002ef2:	440b      	add	r3, r1
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	041b      	lsls	r3, r3, #16
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
      u_output_rpm_m2.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3303      	adds	r3, #3
 8002f02:	6839      	ldr	r1, [r7, #0]
 8002f04:	440b      	add	r3, r1
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	061b      	lsls	r3, r3, #24
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
      this->output_rpm_m2 = u_output_rpm_m2.real;
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->output_rpm_m2);
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	3304      	adds	r3, #4
 8002f18:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_output_controller_m2;
      u_output_controller_m2.base = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
      u_output_controller_m2.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	6839      	ldr	r1, [r7, #0]
 8002f24:	440a      	add	r2, r1
 8002f26:	7812      	ldrb	r2, [r2, #0]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
      u_output_controller_m2.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3301      	adds	r3, #1
 8002f32:	6839      	ldr	r1, [r7, #0]
 8002f34:	440b      	add	r3, r1
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	021b      	lsls	r3, r3, #8
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
      u_output_controller_m2.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	3302      	adds	r3, #2
 8002f44:	6839      	ldr	r1, [r7, #0]
 8002f46:	440b      	add	r3, r1
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	041b      	lsls	r3, r3, #16
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
      u_output_controller_m2.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3303      	adds	r3, #3
 8002f56:	6839      	ldr	r1, [r7, #0]
 8002f58:	440b      	add	r3, r1
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	061b      	lsls	r3, r3, #24
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
      this->output_controller_m2 = u_output_controller_m2.real;
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	611a      	str	r2, [r3, #16]
      offset += sizeof(this->output_controller_m2);
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	61fb      	str	r3, [r7, #28]
     return offset;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
    }
 8002f70:	4618      	mov	r0, r3
 8002f72:	3724      	adds	r7, #36	; 0x24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <_ZN10custom_msg18encoder_output_msg7getTypeEv>:

    virtual const char * getType() override { return "custom_msg/encoder_output_msg"; };
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <_ZN10custom_msg18encoder_output_msg7getTypeEv+0x18>)
 8002f86:	4618      	mov	r0, r3
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	0800f02c 	.word	0x0800f02c

08002f98 <_ZN10custom_msg18encoder_output_msg6getMD5Ev>:
    virtual const char * getMD5() override { return "1245866a2cb06bf0708dba963cb3a6ee"; };
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <_ZN10custom_msg18encoder_output_msg6getMD5Ev+0x18>)
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	0800f04c 	.word	0x0800f04c

08002fb4 <_ZN10custom_msg7mpu_msgC1Ev>:
      typedef float _pitch_type;
      _pitch_type pitch;
      typedef float _yaw_type;
      _yaw_type yaw;

    mpu_msg():
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
      roll(0),
      pitch(0),
      yaw(0)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fb7c 	bl	80026bc <_ZN3ros3MsgC1Ev>
 8002fc4:	4a09      	ldr	r2, [pc, #36]	; (8002fec <_ZN10custom_msg7mpu_msgC1Ev+0x38>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	60da      	str	r2, [r3, #12]
    {
    }
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	0800f30c 	.word	0x0800f30c

08002ff0 <_ZNK10custom_msg7mpu_msg9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_roll;
      u_roll.real = this->roll;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_roll.base >> (8 * 0)) & 0xFF;
 8003004:	6939      	ldr	r1, [r7, #16]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	4413      	add	r3, r2
 800300c:	b2ca      	uxtb	r2, r1
 800300e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_roll.base >> (8 * 1)) & 0xFF;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	0a19      	lsrs	r1, r3, #8
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	3301      	adds	r3, #1
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	4413      	add	r3, r2
 800301c:	b2ca      	uxtb	r2, r1
 800301e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_roll.base >> (8 * 2)) & 0xFF;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	0c19      	lsrs	r1, r3, #16
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	3302      	adds	r3, #2
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	4413      	add	r3, r2
 800302c:	b2ca      	uxtb	r2, r1
 800302e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_roll.base >> (8 * 3)) & 0xFF;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	0e19      	lsrs	r1, r3, #24
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	3303      	adds	r3, #3
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	4413      	add	r3, r2
 800303c:	b2ca      	uxtb	r2, r1
 800303e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->roll);
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	3304      	adds	r3, #4
 8003044:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_pitch;
      u_pitch.real = this->pitch;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_pitch.base >> (8 * 0)) & 0xFF;
 800304c:	68f9      	ldr	r1, [r7, #12]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	4413      	add	r3, r2
 8003054:	b2ca      	uxtb	r2, r1
 8003056:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_pitch.base >> (8 * 1)) & 0xFF;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	0a19      	lsrs	r1, r3, #8
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	3301      	adds	r3, #1
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	4413      	add	r3, r2
 8003064:	b2ca      	uxtb	r2, r1
 8003066:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_pitch.base >> (8 * 2)) & 0xFF;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	0c19      	lsrs	r1, r3, #16
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	3302      	adds	r3, #2
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	4413      	add	r3, r2
 8003074:	b2ca      	uxtb	r2, r1
 8003076:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_pitch.base >> (8 * 3)) & 0xFF;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	0e19      	lsrs	r1, r3, #24
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	3303      	adds	r3, #3
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	4413      	add	r3, r2
 8003084:	b2ca      	uxtb	r2, r1
 8003086:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->pitch);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	3304      	adds	r3, #4
 800308c:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_yaw;
      u_yaw.real = this->yaw;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_yaw.base >> (8 * 0)) & 0xFF;
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	4413      	add	r3, r2
 800309c:	b2ca      	uxtb	r2, r1
 800309e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_yaw.base >> (8 * 1)) & 0xFF;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	0a19      	lsrs	r1, r3, #8
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	3301      	adds	r3, #1
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	4413      	add	r3, r2
 80030ac:	b2ca      	uxtb	r2, r1
 80030ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_yaw.base >> (8 * 2)) & 0xFF;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	0c19      	lsrs	r1, r3, #16
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	3302      	adds	r3, #2
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	4413      	add	r3, r2
 80030bc:	b2ca      	uxtb	r2, r1
 80030be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_yaw.base >> (8 * 3)) & 0xFF;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	0e19      	lsrs	r1, r3, #24
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	3303      	adds	r3, #3
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	b2ca      	uxtb	r2, r1
 80030ce:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->yaw);
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	3304      	adds	r3, #4
 80030d4:	617b      	str	r3, [r7, #20]
      return offset;
 80030d6:	697b      	ldr	r3, [r7, #20]
    }
 80030d8:	4618      	mov	r0, r3
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <_ZN10custom_msg7mpu_msg11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_roll;
      u_roll.base = 0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	6839      	ldr	r1, [r7, #0]
 80030fc:	440a      	add	r2, r1
 80030fe:	7812      	ldrb	r2, [r2, #0]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	3301      	adds	r3, #1
 800310a:	6839      	ldr	r1, [r7, #0]
 800310c:	440b      	add	r3, r1
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	3302      	adds	r3, #2
 800311c:	6839      	ldr	r1, [r7, #0]
 800311e:	440b      	add	r3, r1
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	041b      	lsls	r3, r3, #16
 8003124:	4313      	orrs	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	3303      	adds	r3, #3
 800312e:	6839      	ldr	r1, [r7, #0]
 8003130:	440b      	add	r3, r1
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	061b      	lsls	r3, r3, #24
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
      this->roll = u_roll.real;
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->roll);
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	3304      	adds	r3, #4
 8003144:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_pitch;
      u_pitch.base = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	6839      	ldr	r1, [r7, #0]
 8003150:	440a      	add	r2, r1
 8003152:	7812      	ldrb	r2, [r2, #0]
 8003154:	4313      	orrs	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	3301      	adds	r3, #1
 800315e:	6839      	ldr	r1, [r7, #0]
 8003160:	440b      	add	r3, r1
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	021b      	lsls	r3, r3, #8
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	3302      	adds	r3, #2
 8003170:	6839      	ldr	r1, [r7, #0]
 8003172:	440b      	add	r3, r1
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	041b      	lsls	r3, r3, #16
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	3303      	adds	r3, #3
 8003182:	6839      	ldr	r1, [r7, #0]
 8003184:	440b      	add	r3, r1
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	061b      	lsls	r3, r3, #24
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
      this->pitch = u_pitch.real;
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->pitch);
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3304      	adds	r3, #4
 8003198:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_yaw;
      u_yaw.base = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	60bb      	str	r3, [r7, #8]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	6839      	ldr	r1, [r7, #0]
 80031a4:	440a      	add	r2, r1
 80031a6:	7812      	ldrb	r2, [r2, #0]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	3301      	adds	r3, #1
 80031b2:	6839      	ldr	r1, [r7, #0]
 80031b4:	440b      	add	r3, r1
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60bb      	str	r3, [r7, #8]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	3302      	adds	r3, #2
 80031c4:	6839      	ldr	r1, [r7, #0]
 80031c6:	440b      	add	r3, r1
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	041b      	lsls	r3, r3, #16
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	3303      	adds	r3, #3
 80031d6:	6839      	ldr	r1, [r7, #0]
 80031d8:	440b      	add	r3, r1
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	061b      	lsls	r3, r3, #24
 80031de:	4313      	orrs	r3, r2
 80031e0:	60bb      	str	r3, [r7, #8]
      this->yaw = u_yaw.real;
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->yaw);
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	3304      	adds	r3, #4
 80031ec:	617b      	str	r3, [r7, #20]
     return offset;
 80031ee:	697b      	ldr	r3, [r7, #20]
    }
 80031f0:	4618      	mov	r0, r3
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <_ZN10custom_msg7mpu_msg7getTypeEv>:

    virtual const char * getType() override { return "custom_msg/mpu_msg"; };
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	4b03      	ldr	r3, [pc, #12]	; (8003214 <_ZN10custom_msg7mpu_msg7getTypeEv+0x18>)
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	0800f070 	.word	0x0800f070

08003218 <_ZN10custom_msg7mpu_msg6getMD5Ev>:
    virtual const char * getMD5() override { return "c66f4de7f99199dd8e863fffbef112ad"; };
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	4b03      	ldr	r3, [pc, #12]	; (8003230 <_ZN10custom_msg7mpu_msg6getMD5Ev+0x18>)
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	0800f084 	.word	0x0800f084

08003234 <_ZN13STM32HardwareC1Ev>:
// Create Serial Buffer with UART2:
extern BufferedSerial buff_serial;

class STM32Hardware {
 public:
  STM32Hardware() : serial(&buff_serial) {}
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a04      	ldr	r2, [pc, #16]	; (8003250 <_ZN13STM32HardwareC1Ev+0x1c>)
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	20000210 	.word	0x20000210

08003254 <_ZN13STM32Hardware4initEv>:

  // Any initialization code necessary to use the serial port:
  void init() { serial->init(); }
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7fd fee9 	bl	8001038 <_ZN14BufferedSerial4initEv>
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <_ZN13STM32Hardware4readEv>:

  // Read a byte from the serial port. -1 = failure:
  int read() { return serial->read(); }
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd fee7 	bl	800104e <_ZN14BufferedSerial4readEv>
 8003280:	4603      	mov	r3, r0
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <_ZN13STM32Hardware5writeEPhi>:

  // Write data to the connection to ROS:
  void write(uint8_t* data, int length) { serial->write(data, length); }
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fd ff0b 	bl	80010ba <_ZN14BufferedSerial5writeEPKhi>
 80032a4:	bf00      	nop
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <_ZN13STM32Hardware4timeEv>:

  // Returns milliseconds since start of program:
  unsigned long time() { return HAL_GetTick(); };
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	f002 f9fa 	bl	80056ac <HAL_GetTick>
 80032b8:	4603      	mov	r3, r0
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
      data()
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff f9e4 	bl	80026bc <_ZN3ros3MsgC1Ev>
 80032f4:	4a06      	ldr	r2, [pc, #24]	; (8003310 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3304      	adds	r3, #4
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff ffdf 	bl	80032c2 <_ZN3ros4TimeC1Ev>
    {
    }
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	0800f2f4 	.word	0x0800f2f4

08003314 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6859      	ldr	r1, [r3, #4]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	4413      	add	r3, r2
 800332c:	b2ca      	uxtb	r2, r1
 800332e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	0a19      	lsrs	r1, r3, #8
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	3301      	adds	r3, #1
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	4413      	add	r3, r2
 800333e:	b2ca      	uxtb	r2, r1
 8003340:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	0c19      	lsrs	r1, r3, #16
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3302      	adds	r3, #2
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	4413      	add	r3, r2
 8003350:	b2ca      	uxtb	r2, r1
 8003352:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	0e19      	lsrs	r1, r3, #24
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	3303      	adds	r3, #3
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	4413      	add	r3, r2
 8003362:	b2ca      	uxtb	r2, r1
 8003364:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	3304      	adds	r3, #4
 800336a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6899      	ldr	r1, [r3, #8]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	4413      	add	r3, r2
 8003376:	b2ca      	uxtb	r2, r1
 8003378:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	0a19      	lsrs	r1, r3, #8
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3301      	adds	r3, #1
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	4413      	add	r3, r2
 8003388:	b2ca      	uxtb	r2, r1
 800338a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	0c19      	lsrs	r1, r3, #16
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3302      	adds	r3, #2
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	4413      	add	r3, r2
 800339a:	b2ca      	uxtb	r2, r1
 800339c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	0e19      	lsrs	r1, r3, #24
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3303      	adds	r3, #3
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	4413      	add	r3, r2
 80033ac:	b2ca      	uxtb	r2, r1
 80033ae:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	3304      	adds	r3, #4
 80033b4:	60fb      	str	r3, [r7, #12]
      return offset;
 80033b6:	68fb      	ldr	r3, [r7, #12]
    }
 80033b8:	4618      	mov	r0, r3
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	4413      	add	r3, r2
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	3301      	adds	r3, #1
 80033e8:	6839      	ldr	r1, [r7, #0]
 80033ea:	440b      	add	r3, r1
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	3302      	adds	r3, #2
 80033fe:	6839      	ldr	r1, [r7, #0]
 8003400:	440b      	add	r3, r1
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	041b      	lsls	r3, r3, #16
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3303      	adds	r3, #3
 8003414:	6839      	ldr	r1, [r7, #0]
 8003416:	440b      	add	r3, r1
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	061b      	lsls	r3, r3, #24
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	3304      	adds	r3, #4
 8003426:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	4413      	add	r3, r2
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3301      	adds	r3, #1
 800343e:	6839      	ldr	r1, [r7, #0]
 8003440:	440b      	add	r3, r1
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	021b      	lsls	r3, r3, #8
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3302      	adds	r3, #2
 8003454:	6839      	ldr	r1, [r7, #0]
 8003456:	440b      	add	r3, r1
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	041b      	lsls	r3, r3, #16
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3303      	adds	r3, #3
 800346a:	6839      	ldr	r1, [r7, #0]
 800346c:	440b      	add	r3, r1
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	3304      	adds	r3, #4
 800347c:	60fb      	str	r3, [r7, #12]
     return offset;
 800347e:	68fb      	ldr	r3, [r7, #12]
    }
 8003480:	4618      	mov	r0, r3
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	0800f0a8 	.word	0x0800f0a8

080034a8 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	0800f0b8 	.word	0x0800f0b8

080034c4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff f8f4 	bl	80026bc <_ZN3ros3MsgC1Ev>
 80034d4:	4a0b      	ldr	r2, [pc, #44]	; (8003504 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	809a      	strh	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a09      	ldr	r2, [pc, #36]	; (8003508 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80034e4:	609a      	str	r2, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a07      	ldr	r2, [pc, #28]	; (8003508 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80034ea:	60da      	str	r2, [r3, #12]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a06      	ldr	r2, [pc, #24]	; (8003508 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80034f0:	611a      	str	r2, [r3, #16]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	615a      	str	r2, [r3, #20]
    {
    }
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	0800f2dc 	.word	0x0800f2dc
 8003508:	0800f0dc 	.word	0x0800f0dc

0800350c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	8899      	ldrh	r1, [r3, #4]
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	4413      	add	r3, r2
 8003524:	b2ca      	uxtb	r2, r1
 8003526:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	889b      	ldrh	r3, [r3, #4]
 800352c:	0a1b      	lsrs	r3, r3, #8
 800352e:	b299      	uxth	r1, r3
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	3301      	adds	r3, #1
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	4413      	add	r3, r2
 8003538:	b2ca      	uxtb	r2, r1
 800353a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	3302      	adds	r3, #2
 8003540:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fc fe42 	bl	80001d0 <strlen>
 800354c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	4413      	add	r3, r2
 8003554:	69b9      	ldr	r1, [r7, #24]
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fef6 	bl	8004348 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	3304      	adds	r3, #4
 8003560:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	18d0      	adds	r0, r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4619      	mov	r1, r3
 8003570:	f007 f8b4 	bl	800a6dc <memcpy>
      offset += length_topic_name;
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	4413      	add	r3, r2
 800357a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4618      	mov	r0, r3
 8003582:	f7fc fe25 	bl	80001d0 <strlen>
 8003586:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	4413      	add	r3, r2
 800358e:	6979      	ldr	r1, [r7, #20]
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fed9 	bl	8004348 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	3304      	adds	r3, #4
 800359a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	18d0      	adds	r0, r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4619      	mov	r1, r3
 80035aa:	f007 f897 	bl	800a6dc <memcpy>
      offset += length_message_type;
 80035ae:	69fa      	ldr	r2, [r7, #28]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	4413      	add	r3, r2
 80035b4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fc fe08 	bl	80001d0 <strlen>
 80035c0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	4413      	add	r3, r2
 80035c8:	6939      	ldr	r1, [r7, #16]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 febc 	bl	8004348 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	3304      	adds	r3, #4
 80035d4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	18d0      	adds	r0, r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4619      	mov	r1, r3
 80035e4:	f007 f87a 	bl	800a6dc <memcpy>
      offset += length_md5sum;
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4413      	add	r3, r2
 80035ee:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80035f6:	68f9      	ldr	r1, [r7, #12]
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	4413      	add	r3, r2
 80035fe:	b2ca      	uxtb	r2, r1
 8003600:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	0a19      	lsrs	r1, r3, #8
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3301      	adds	r3, #1
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	4413      	add	r3, r2
 800360e:	b2ca      	uxtb	r2, r1
 8003610:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	0c19      	lsrs	r1, r3, #16
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3302      	adds	r3, #2
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	4413      	add	r3, r2
 800361e:	b2ca      	uxtb	r2, r1
 8003620:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	0e19      	lsrs	r1, r3, #24
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	3303      	adds	r3, #3
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	4413      	add	r3, r2
 800362e:	b2ca      	uxtb	r2, r1
 8003630:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3304      	adds	r3, #4
 8003636:	61fb      	str	r3, [r7, #28]
      return offset;
 8003638:	69fb      	ldr	r3, [r7, #28]
    }
 800363a:	4618      	mov	r0, r3
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003642:	b580      	push	{r7, lr}
 8003644:	b08a      	sub	sp, #40	; 0x28
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	4413      	add	r3, r2
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	b29a      	uxth	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	889b      	ldrh	r3, [r3, #4]
 8003662:	b21a      	sxth	r2, r3
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	3301      	adds	r3, #1
 8003668:	6839      	ldr	r1, [r7, #0]
 800366a:	440b      	add	r3, r1
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	b21b      	sxth	r3, r3
 8003672:	4313      	orrs	r3, r2
 8003674:	b21b      	sxth	r3, r3
 8003676:	b29a      	uxth	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	3302      	adds	r3, #2
 8003680:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	441a      	add	r2, r3
 8003688:	f107 0314 	add.w	r3, r7, #20
 800368c:	4611      	mov	r1, r2
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fe78 	bl	8004384 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	3304      	adds	r3, #4
 8003698:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	4413      	add	r3, r2
 80036a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d20c      	bcs.n	80036c4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	441a      	add	r2, r3
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	3b01      	subs	r3, #1
 80036b4:	6839      	ldr	r1, [r7, #0]
 80036b6:	440b      	add	r3, r1
 80036b8:	7812      	ldrb	r2, [r2, #0]
 80036ba:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	3301      	adds	r3, #1
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
 80036c2:	e7ec      	b.n	800369e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	4413      	add	r3, r2
 80036ca:	3b01      	subs	r3, #1
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	4413      	add	r3, r2
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	441a      	add	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	4413      	add	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	441a      	add	r2, r3
 80036ee:	f107 0310 	add.w	r3, r7, #16
 80036f2:	4611      	mov	r1, r2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fe45 	bl	8004384 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	3304      	adds	r3, #4
 80036fe:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	623b      	str	r3, [r7, #32]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4413      	add	r3, r2
 800370a:	6a3a      	ldr	r2, [r7, #32]
 800370c:	429a      	cmp	r2, r3
 800370e:	d20c      	bcs.n	800372a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	441a      	add	r2, r3
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	3b01      	subs	r3, #1
 800371a:	6839      	ldr	r1, [r7, #0]
 800371c:	440b      	add	r3, r1
 800371e:	7812      	ldrb	r2, [r2, #0]
 8003720:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	3301      	adds	r3, #1
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	e7ec      	b.n	8003704 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4413      	add	r3, r2
 8003730:	3b01      	subs	r3, #1
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	4413      	add	r3, r2
 8003736:	2200      	movs	r2, #0
 8003738:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	3b01      	subs	r3, #1
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	441a      	add	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4413      	add	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	441a      	add	r2, r3
 8003754:	f107 030c 	add.w	r3, r7, #12
 8003758:	4611      	mov	r1, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fe12 	bl	8004384 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	3304      	adds	r3, #4
 8003764:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4413      	add	r3, r2
 8003770:	69fa      	ldr	r2, [r7, #28]
 8003772:	429a      	cmp	r2, r3
 8003774:	d20c      	bcs.n	8003790 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	441a      	add	r2, r3
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	3b01      	subs	r3, #1
 8003780:	6839      	ldr	r1, [r7, #0]
 8003782:	440b      	add	r3, r1
 8003784:	7812      	ldrb	r2, [r2, #0]
 8003786:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	3301      	adds	r3, #1
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	e7ec      	b.n	800376a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4413      	add	r3, r2
 8003796:	3b01      	subs	r3, #1
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	4413      	add	r3, r2
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	441a      	add	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4413      	add	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	6839      	ldr	r1, [r7, #0]
 80037be:	440a      	add	r2, r1
 80037c0:	7812      	ldrb	r2, [r2, #0]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	3301      	adds	r3, #1
 80037cc:	6839      	ldr	r1, [r7, #0]
 80037ce:	440b      	add	r3, r1
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	021b      	lsls	r3, r3, #8
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	3302      	adds	r3, #2
 80037de:	6839      	ldr	r1, [r7, #0]
 80037e0:	440b      	add	r3, r1
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	041b      	lsls	r3, r3, #16
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	3303      	adds	r3, #3
 80037f0:	6839      	ldr	r1, [r7, #0]
 80037f2:	440b      	add	r3, r1
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	061b      	lsls	r3, r3, #24
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	3304      	adds	r3, #4
 8003806:	61bb      	str	r3, [r7, #24]
     return offset;
 8003808:	69bb      	ldr	r3, [r7, #24]
    }
 800380a:	4618      	mov	r0, r3
 800380c:	3728      	adds	r7, #40	; 0x28
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	4b03      	ldr	r3, [pc, #12]	; (800382c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800381e:	4618      	mov	r0, r3
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	0800f0e0 	.word	0x0800f0e0

08003830 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	4b03      	ldr	r3, [pc, #12]	; (8003848 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800383a:	4618      	mov	r0, r3
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	0800f0fc 	.word	0x0800f0fc

0800384c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4618      	mov	r0, r3
 8003858:	f7fe ff30 	bl	80026bc <_ZN3ros3MsgC1Ev>
 800385c:	4a06      	ldr	r2, [pc, #24]	; (8003878 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	711a      	strb	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a04      	ldr	r2, [pc, #16]	; (800387c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800386c:	609a      	str	r2, [r3, #8]
    {
    }
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	0800f2c4 	.word	0x0800f2c4
 800387c:	0800f0dc 	.word	0x0800f0dc

08003880 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	4413      	add	r3, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	7912      	ldrb	r2, [r2, #4]
 8003898:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	3301      	adds	r3, #1
 800389e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fc fc93 	bl	80001d0 <strlen>
 80038aa:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	4413      	add	r3, r2
 80038b2:	68b9      	ldr	r1, [r7, #8]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 fd47 	bl	8004348 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3304      	adds	r3, #4
 80038be:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	18d0      	adds	r0, r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	4619      	mov	r1, r3
 80038ce:	f006 ff05 	bl	800a6dc <memcpy>
      offset += length_msg;
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4413      	add	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]
      return offset;
 80038da:	68fb      	ldr	r3, [r7, #12]
    }
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	4413      	add	r3, r2
 80038f8:	781a      	ldrb	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	3301      	adds	r3, #1
 8003902:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	441a      	add	r2, r3
 800390a:	f107 030c 	add.w	r3, r7, #12
 800390e:	4611      	mov	r1, r2
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fd37 	bl	8004384 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	3304      	adds	r3, #4
 800391a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4413      	add	r3, r2
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	429a      	cmp	r2, r3
 800392a:	d20c      	bcs.n	8003946 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	441a      	add	r2, r3
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	3b01      	subs	r3, #1
 8003936:	6839      	ldr	r1, [r7, #0]
 8003938:	440b      	add	r3, r1
 800393a:	7812      	ldrb	r2, [r2, #0]
 800393c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	3301      	adds	r3, #1
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	e7ec      	b.n	8003920 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	3b01      	subs	r3, #1
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	4413      	add	r3, r2
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	3b01      	subs	r3, #1
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	441a      	add	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4413      	add	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
     return offset;
 800396a:	693b      	ldr	r3, [r7, #16]
    }
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	4b03      	ldr	r3, [pc, #12]	; (800398c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800397e:	4618      	mov	r0, r3
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	0800f120 	.word	0x0800f120

08003990 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800399a:	4618      	mov	r0, r3
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	0800f134 	.word	0x0800f134

080039ac <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe fe80 	bl	80026bc <_ZN3ros3MsgC1Ev>
 80039bc:	4a11      	ldr	r2, [pc, #68]	; (8003a04 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	605a      	str	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	609a      	str	r2, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	60da      	str	r2, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	611a      	str	r2, [r3, #16]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	615a      	str	r2, [r3, #20]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	619a      	str	r2, [r3, #24]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	61da      	str	r2, [r3, #28]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	621a      	str	r2, [r3, #32]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	0800f2ac 	.word	0x0800f2ac

08003a08 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08a      	sub	sp, #40	; 0x28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6859      	ldr	r1, [r3, #4]
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	4413      	add	r3, r2
 8003a20:	b2ca      	uxtb	r2, r1
 8003a22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	0a19      	lsrs	r1, r3, #8
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	4413      	add	r3, r2
 8003a32:	b2ca      	uxtb	r2, r1
 8003a34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	0c19      	lsrs	r1, r3, #16
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	3302      	adds	r3, #2
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	4413      	add	r3, r2
 8003a44:	b2ca      	uxtb	r2, r1
 8003a46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	0e19      	lsrs	r1, r3, #24
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	3303      	adds	r3, #3
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	4413      	add	r3, r2
 8003a56:	b2ca      	uxtb	r2, r1
 8003a58:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003a60:	2300      	movs	r3, #0
 8003a62:	623b      	str	r3, [r7, #32]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	6a3a      	ldr	r2, [r7, #32]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d22b      	bcs.n	8003ac6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8003a7c:	6939      	ldr	r1, [r7, #16]
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	4413      	add	r3, r2
 8003a84:	b2ca      	uxtb	r2, r1
 8003a86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	0a19      	lsrs	r1, r3, #8
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	3301      	adds	r3, #1
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	4413      	add	r3, r2
 8003a94:	b2ca      	uxtb	r2, r1
 8003a96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	0c19      	lsrs	r1, r3, #16
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	3302      	adds	r3, #2
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	b2ca      	uxtb	r2, r1
 8003aa6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	0e19      	lsrs	r1, r3, #24
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	3303      	adds	r3, #3
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	b2ca      	uxtb	r2, r1
 8003ab6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	3304      	adds	r3, #4
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	623b      	str	r3, [r7, #32]
 8003ac4:	e7ce      	b.n	8003a64 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6919      	ldr	r1, [r3, #16]
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	4413      	add	r3, r2
 8003ad0:	b2ca      	uxtb	r2, r1
 8003ad2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	0a19      	lsrs	r1, r3, #8
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	3301      	adds	r3, #1
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	b2ca      	uxtb	r2, r1
 8003ae4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	0c19      	lsrs	r1, r3, #16
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	3302      	adds	r3, #2
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	4413      	add	r3, r2
 8003af4:	b2ca      	uxtb	r2, r1
 8003af6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	0e19      	lsrs	r1, r3, #24
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	3303      	adds	r3, #3
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	4413      	add	r3, r2
 8003b06:	b2ca      	uxtb	r2, r1
 8003b08:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003b10:	2300      	movs	r3, #0
 8003b12:	61fb      	str	r3, [r7, #28]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	69fa      	ldr	r2, [r7, #28]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d22b      	bcs.n	8003b76 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8003b2c:	68f9      	ldr	r1, [r7, #12]
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	4413      	add	r3, r2
 8003b34:	b2ca      	uxtb	r2, r1
 8003b36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	0a19      	lsrs	r1, r3, #8
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	3301      	adds	r3, #1
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	4413      	add	r3, r2
 8003b44:	b2ca      	uxtb	r2, r1
 8003b46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	0c19      	lsrs	r1, r3, #16
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	3302      	adds	r3, #2
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	4413      	add	r3, r2
 8003b54:	b2ca      	uxtb	r2, r1
 8003b56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	0e19      	lsrs	r1, r3, #24
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	3303      	adds	r3, #3
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	4413      	add	r3, r2
 8003b64:	b2ca      	uxtb	r2, r1
 8003b66:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	3301      	adds	r3, #1
 8003b72:	61fb      	str	r3, [r7, #28]
 8003b74:	e7ce      	b.n	8003b14 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69d9      	ldr	r1, [r3, #28]
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	4413      	add	r3, r2
 8003b80:	b2ca      	uxtb	r2, r1
 8003b82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	0a19      	lsrs	r1, r3, #8
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	4413      	add	r3, r2
 8003b92:	b2ca      	uxtb	r2, r1
 8003b94:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	0c19      	lsrs	r1, r3, #16
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	3302      	adds	r3, #2
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	b2ca      	uxtb	r2, r1
 8003ba6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	0e19      	lsrs	r1, r3, #24
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	3303      	adds	r3, #3
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	b2ca      	uxtb	r2, r1
 8003bb8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d228      	bcs.n	8003c20 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fc faf8 	bl	80001d0 <strlen>
 8003be0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	4413      	add	r3, r2
 8003be8:	6979      	ldr	r1, [r7, #20]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 fbac 	bl	8004348 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	18d0      	adds	r0, r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	f006 fd66 	bl	800a6dc <memcpy>
      offset += length_stringsi;
 8003c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	4413      	add	r3, r2
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	e7d1      	b.n	8003bc4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003c22:	4618      	mov	r0, r3
 8003c24:	3728      	adds	r7, #40	; 0x28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b08e      	sub	sp, #56	; 0x38
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c44:	3301      	adds	r3, #1
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	4413      	add	r3, r2
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	6a3a      	ldr	r2, [r7, #32]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c56:	3302      	adds	r3, #2
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	041b      	lsls	r3, r3, #16
 8003c60:	6a3a      	ldr	r2, [r7, #32]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c68:	3303      	adds	r3, #3
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	061b      	lsls	r3, r3, #24
 8003c72:	6a3a      	ldr	r2, [r7, #32]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8003c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	6a3a      	ldr	r2, [r7, #32]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d90a      	bls.n	8003c9e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4619      	mov	r1, r3
 8003c92:	4610      	mov	r0, r2
 8003c94:	f007 fbb2 	bl	800b3fc <realloc>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a3a      	ldr	r2, [r7, #32]
 8003ca2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d236      	bcs.n	8003d20 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cba:	6839      	ldr	r1, [r7, #0]
 8003cbc:	440a      	add	r2, r1
 8003cbe:	7812      	ldrb	r2, [r2, #0]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc8:	3301      	adds	r3, #1
 8003cca:	6839      	ldr	r1, [r7, #0]
 8003ccc:	440b      	add	r3, r1
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	021b      	lsls	r3, r3, #8
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cda:	3302      	adds	r3, #2
 8003cdc:	6839      	ldr	r1, [r7, #0]
 8003cde:	440b      	add	r3, r1
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	041b      	lsls	r3, r3, #16
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cec:	3303      	adds	r3, #3
 8003cee:	6839      	ldr	r1, [r7, #0]
 8003cf0:	440b      	add	r3, r1
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	061b      	lsls	r3, r3, #24
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8003d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d02:	3304      	adds	r3, #4
 8003d04:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	3208      	adds	r2, #8
 8003d14:	6812      	ldr	r2, [r2, #0]
 8003d16:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8003d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d1e:	e7c3      	b.n	8003ca8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	4413      	add	r3, r2
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	4413      	add	r3, r2
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	021b      	lsls	r3, r3, #8
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3e:	3302      	adds	r3, #2
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	4413      	add	r3, r2
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	041b      	lsls	r3, r3, #16
 8003d48:	69fa      	ldr	r2, [r7, #28]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d50:	3303      	adds	r3, #3
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	4413      	add	r3, r2
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	061b      	lsls	r3, r3, #24
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8003d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d62:	3304      	adds	r3, #4
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d90a      	bls.n	8003d86 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699a      	ldr	r2, [r3, #24]
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	f007 fb3e 	bl	800b3fc <realloc>
 8003d80:	4602      	mov	r2, r0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d236      	bcs.n	8003e08 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003da2:	6839      	ldr	r1, [r7, #0]
 8003da4:	440a      	add	r2, r1
 8003da6:	7812      	ldrb	r2, [r2, #0]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db0:	3301      	adds	r3, #1
 8003db2:	6839      	ldr	r1, [r7, #0]
 8003db4:	440b      	add	r3, r1
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc2:	3302      	adds	r3, #2
 8003dc4:	6839      	ldr	r1, [r7, #0]
 8003dc6:	440b      	add	r3, r1
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	041b      	lsls	r3, r3, #16
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd4:	3303      	adds	r3, #3
 8003dd6:	6839      	ldr	r1, [r7, #0]
 8003dd8:	440b      	add	r3, r1
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	061b      	lsls	r3, r3, #24
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dea:	3304      	adds	r3, #4
 8003dec:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	3214      	adds	r2, #20
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8003e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e02:	3301      	adds	r3, #1
 8003e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e06:	e7c3      	b.n	8003d90 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e14:	3301      	adds	r3, #1
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	4413      	add	r3, r2
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	021b      	lsls	r3, r3, #8
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e26:	3302      	adds	r3, #2
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	041b      	lsls	r3, r3, #16
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e38:	3303      	adds	r3, #3
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	061b      	lsls	r3, r3, #24
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8003e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d90a      	bls.n	8003e6e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4619      	mov	r1, r3
 8003e62:	4610      	mov	r0, r2
 8003e64:	f007 faca 	bl	800b3fc <realloc>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8003e74:	2300      	movs	r3, #0
 8003e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d23f      	bcs.n	8003f02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8003e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	441a      	add	r2, r3
 8003e88:	f107 030c 	add.w	r3, r7, #12
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fa78 	bl	8004384 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e96:	3304      	adds	r3, #4
 8003e98:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d20c      	bcs.n	8003ec4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	441a      	add	r2, r3
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	6839      	ldr	r1, [r7, #0]
 8003eb6:	440b      	add	r3, r1
 8003eb8:	7812      	ldrb	r2, [r2, #0]
 8003eba:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec2:	e7ec      	b.n	8003e9e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8003ec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4413      	add	r3, r2
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	4413      	add	r3, r2
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8003ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	441a      	add	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	3220      	adds	r2, #32
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	3301      	adds	r3, #1
 8003efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f00:	e7ba      	b.n	8003e78 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8003f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003f04:	4618      	mov	r0, r3
 8003f06:	3738      	adds	r7, #56	; 0x38
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	4b03      	ldr	r3, [pc, #12]	; (8003f24 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	0800f218 	.word	0x0800f218

08003f28 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8003f32:	4618      	mov	r0, r3
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	0800f158 	.word	0x0800f158

08003f44 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
 8003f50:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	611a      	str	r2, [r3, #16]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4618      	mov	r0, r3
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68d8      	ldr	r0, [r3, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6891      	ldr	r1, [r2, #8]
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	4798      	blx	r3
 8003f90:	4603      	mov	r3, r0
  };
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
  }
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
      data("")
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe fb7c 	bl	80026bc <_ZN3ros3MsgC1Ev>
 8003fc4:	4a05      	ldr	r2, [pc, #20]	; (8003fdc <_ZN8std_msgs6StringC1Ev+0x28>)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a04      	ldr	r2, [pc, #16]	; (8003fe0 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8003fce:	605a      	str	r2, [r3, #4]
    {
    }
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	0800f268 	.word	0x0800f268
 8003fe0:	0800f0dc 	.word	0x0800f0dc

08003fe4 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fc f8ea 	bl	80001d0 <strlen>
 8003ffc:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	4413      	add	r3, r2
 8004004:	68b9      	ldr	r1, [r7, #8]
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f99e 	bl	8004348 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3304      	adds	r3, #4
 8004010:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	18d0      	adds	r0, r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	4619      	mov	r1, r3
 8004020:	f006 fb5c 	bl	800a6dc <memcpy>
      offset += length_data;
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	4413      	add	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
      return offset;
 800402c:	68fb      	ldr	r3, [r7, #12]
    }
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004036:	b580      	push	{r7, lr}
 8004038:	b086      	sub	sp, #24
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004040:	2300      	movs	r3, #0
 8004042:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	441a      	add	r2, r3
 800404a:	f107 030c 	add.w	r3, r7, #12
 800404e:	4611      	mov	r1, r2
 8004050:	4618      	mov	r0, r3
 8004052:	f000 f997 	bl	8004384 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	3304      	adds	r3, #4
 800405a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4413      	add	r3, r2
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	429a      	cmp	r2, r3
 800406a:	d20c      	bcs.n	8004086 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	441a      	add	r2, r3
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	3b01      	subs	r3, #1
 8004076:	6839      	ldr	r1, [r7, #0]
 8004078:	440b      	add	r3, r1
 800407a:	7812      	ldrb	r2, [r2, #0]
 800407c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	3301      	adds	r3, #1
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	e7ec      	b.n	8004060 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	3b01      	subs	r3, #1
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	4413      	add	r3, r2
 8004092:	2200      	movs	r2, #0
 8004094:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	3b01      	subs	r3, #1
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	441a      	add	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4413      	add	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
     return offset;
 80040aa:	693b      	ldr	r3, [r7, #16]
    }
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	4b03      	ldr	r3, [pc, #12]	; (80040cc <_ZN8std_msgs6String7getTypeEv+0x18>)
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	0800f17c 	.word	0x0800f17c

080040d0 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	4b03      	ldr	r3, [pc, #12]	; (80040e8 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80040da:	4618      	mov	r0, r3
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	0800f18c 	.word	0x0800f18c

080040ec <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	4a04      	ldr	r2, [pc, #16]	; (8004108 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	0800f298 	.word	0x0800f298

0800410c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff ffe8 	bl	80040ec <_ZN3ros15NodeHandleBase_C1Ev>
 800411c:	4a33      	ldr	r2, [pc, #204]	; (80041ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xe0>)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3304      	adds	r3, #4
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff f884 	bl	8003234 <_ZN13STM32HardwareC1Ev>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	609a      	str	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	60da      	str	r2, [r3, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	611a      	str	r2, [r3, #16]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	615a      	str	r2, [r3, #20]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3318      	adds	r3, #24
 8004148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800414c:	2100      	movs	r1, #0
 800414e:	4618      	mov	r0, r3
 8004150:	f006 fad2 	bl	800a6f8 <memset>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800415a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800415e:	2100      	movs	r1, #0
 8004160:	4618      	mov	r0, r3
 8004162:	f006 fac9 	bl	800a6f8 <memset>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800416c:	2264      	movs	r2, #100	; 0x64
 800416e:	2100      	movs	r1, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f006 fac1 	bl	800a6f8 <memset>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 800417c:	2264      	movs	r2, #100	; 0x64
 800417e:	2100      	movs	r1, #0
 8004180:	4618      	mov	r0, r3
 8004182:	f006 fab9 	bl	800a6f8 <memset>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff fbe5 	bl	80039ac <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	0800f254 	.word	0x0800f254

080041f0 <setup>:

//Create a subscriber node to receive setpoint, Kp, Ki and Kd
ros::Subscriber<custom_msg::encoder_input_msg> vel_sub("PID_ctrl", &vel_cb);

void setup(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  nh.initNode();
 80041f4:	480a      	ldr	r0, [pc, #40]	; (8004220 <setup+0x30>)
 80041f6:	f000 f91f 	bl	8004438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 80041fa:	490a      	ldr	r1, [pc, #40]	; (8004224 <setup+0x34>)
 80041fc:	4808      	ldr	r0, [pc, #32]	; (8004220 <setup+0x30>)
 80041fe:	f000 f938 	bl	8004472 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(pid_pub);
 8004202:	4909      	ldr	r1, [pc, #36]	; (8004228 <setup+0x38>)
 8004204:	4806      	ldr	r0, [pc, #24]	; (8004220 <setup+0x30>)
 8004206:	f000 f934 	bl	8004472 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(mpu_pub);
 800420a:	4908      	ldr	r1, [pc, #32]	; (800422c <setup+0x3c>)
 800420c:	4804      	ldr	r0, [pc, #16]	; (8004220 <setup+0x30>)
 800420e:	f000 f930 	bl	8004472 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.subscribe(vel_sub);
 8004212:	4907      	ldr	r1, [pc, #28]	; (8004230 <setup+0x40>)
 8004214:	4802      	ldr	r0, [pc, #8]	; (8004220 <setup+0x30>)
 8004216:	f000 f95a 	bl	80044ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
}
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000944 	.word	0x20000944
 8004224:	20000e7c 	.word	0x20000e7c
 8004228:	20000ea4 	.word	0x20000ea4
 800422c:	20000ec8 	.word	0x20000ec8
 8004230:	20000edc 	.word	0x20000edc

08004234 <loop>:

void loop(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
	str_msg.data = hello;
 8004238:	4b1b      	ldr	r3, [pc, #108]	; (80042a8 <loop+0x74>)
 800423a:	4a1c      	ldr	r2, [pc, #112]	; (80042ac <loop+0x78>)
 800423c:	605a      	str	r2, [r3, #4]

	pid_msg.output_controller_m1 = m1.u;
 800423e:	4b1c      	ldr	r3, [pc, #112]	; (80042b0 <loop+0x7c>)
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	4a1c      	ldr	r2, [pc, #112]	; (80042b4 <loop+0x80>)
 8004244:	6093      	str	r3, [r2, #8]
	pid_msg.output_rpm_m1 = m1.v;
 8004246:	4b1a      	ldr	r3, [pc, #104]	; (80042b0 <loop+0x7c>)
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <loop+0x80>)
 800424c:	6053      	str	r3, [r2, #4]
	pid_msg.output_controller_m2 = m2.u;
 800424e:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <loop+0x84>)
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	4a18      	ldr	r2, [pc, #96]	; (80042b4 <loop+0x80>)
 8004254:	6113      	str	r3, [r2, #16]
	pid_msg.output_rpm_m2 = m2.v;
 8004256:	4b18      	ldr	r3, [pc, #96]	; (80042b8 <loop+0x84>)
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	4a16      	ldr	r2, [pc, #88]	; (80042b4 <loop+0x80>)
 800425c:	60d3      	str	r3, [r2, #12]

	mpu_msg.roll = -attitude.r;
 800425e:	4b17      	ldr	r3, [pc, #92]	; (80042bc <loop+0x88>)
 8004260:	edd3 7a00 	vldr	s15, [r3]
 8004264:	eef1 7a67 	vneg.f32	s15, s15
 8004268:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <loop+0x8c>)
 800426a:	edc3 7a01 	vstr	s15, [r3, #4]
	mpu_msg.pitch = attitude.p;
 800426e:	4b13      	ldr	r3, [pc, #76]	; (80042bc <loop+0x88>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	4a13      	ldr	r2, [pc, #76]	; (80042c0 <loop+0x8c>)
 8004274:	6093      	str	r3, [r2, #8]
	mpu_msg.yaw = attitude.y;
 8004276:	4b11      	ldr	r3, [pc, #68]	; (80042bc <loop+0x88>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	4a11      	ldr	r2, [pc, #68]	; (80042c0 <loop+0x8c>)
 800427c:	60d3      	str	r3, [r2, #12]

	chatter.publish(&str_msg);
 800427e:	490a      	ldr	r1, [pc, #40]	; (80042a8 <loop+0x74>)
 8004280:	4810      	ldr	r0, [pc, #64]	; (80042c4 <loop+0x90>)
 8004282:	f7ff fe76 	bl	8003f72 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	pid_pub.publish(&pid_msg);
 8004286:	490b      	ldr	r1, [pc, #44]	; (80042b4 <loop+0x80>)
 8004288:	480f      	ldr	r0, [pc, #60]	; (80042c8 <loop+0x94>)
 800428a:	f7ff fe72 	bl	8003f72 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	mpu_pub.publish(&mpu_msg);
 800428e:	490c      	ldr	r1, [pc, #48]	; (80042c0 <loop+0x8c>)
 8004290:	480e      	ldr	r0, [pc, #56]	; (80042cc <loop+0x98>)
 8004292:	f7ff fe6e 	bl	8003f72 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	nh.spinOnce();
 8004296:	480e      	ldr	r0, [pc, #56]	; (80042d0 <loop+0x9c>)
 8004298:	f000 f946 	bl	8004528 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	HAL_Delay(50);
 800429c:	2032      	movs	r0, #50	; 0x32
 800429e:	f001 fa11 	bl	80056c4 <HAL_Delay>
}
 80042a2:	bf00      	nop
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20000e74 	.word	0x20000e74
 80042ac:	20000000 	.word	0x20000000
 80042b0:	200008cc 	.word	0x200008cc
 80042b4:	20000e90 	.word	0x20000e90
 80042b8:	200008f0 	.word	0x200008f0
 80042bc:	20000898 	.word	0x20000898
 80042c0:	20000eb8 	.word	0x20000eb8
 80042c4:	20000e7c 	.word	0x20000e7c
 80042c8:	20000ea4 	.word	0x20000ea4
 80042cc:	20000ec8 	.word	0x20000ec8
 80042d0:	20000944 	.word	0x20000944

080042d4 <_Z6vel_cbRKN10custom_msg17encoder_input_msgE>:

void vel_cb(const custom_msg::encoder_input_msg& msg){
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
	Setpoint_value_m1 = msg.input_setpoint_m1;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	4a11      	ldr	r2, [pc, #68]	; (8004328 <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x54>)
 80042e2:	6013      	str	r3, [r2, #0]
	Kp_m1 = msg.input_Kp_m1;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	4a10      	ldr	r2, [pc, #64]	; (800432c <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x58>)
 80042ea:	6013      	str	r3, [r2, #0]
	Ki_m1 = msg.input_Ki_m1;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	4a0f      	ldr	r2, [pc, #60]	; (8004330 <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x5c>)
 80042f2:	6013      	str	r3, [r2, #0]
	Kd_m1 = msg.input_Kd_m1;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	4a0e      	ldr	r2, [pc, #56]	; (8004334 <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x60>)
 80042fa:	6013      	str	r3, [r2, #0]
	Setpoint_value_m2 = msg.input_setpoint_m2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	4a0d      	ldr	r2, [pc, #52]	; (8004338 <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x64>)
 8004302:	6013      	str	r3, [r2, #0]
	Kp_m2 = msg.input_Kp_m2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	4a0c      	ldr	r2, [pc, #48]	; (800433c <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x68>)
 800430a:	6013      	str	r3, [r2, #0]
	Ki_m2 = msg.input_Ki_m2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	4a0b      	ldr	r2, [pc, #44]	; (8004340 <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x6c>)
 8004312:	6013      	str	r3, [r2, #0]
	Kd_m2 = msg.input_Kd_m2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	4a0a      	ldr	r2, [pc, #40]	; (8004344 <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x70>)
 800431a:	6013      	str	r3, [r2, #0]
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	200008a4 	.word	0x200008a4
 800432c:	200008ac 	.word	0x200008ac
 8004330:	200008b4 	.word	0x200008b4
 8004334:	200008bc 	.word	0x200008bc
 8004338:	200008a8 	.word	0x200008a8
 800433c:	200008b0 	.word	0x200008b0
 8004340:	200008b8 	.word	0x200008b8
 8004344:	200008c0 	.word	0x200008c0

08004348 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b03      	cmp	r3, #3
 800435a:	d80d      	bhi.n	8004378 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	fa22 f103 	lsr.w	r1, r2, r3
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4413      	add	r3, r2
 800436c:	b2ca      	uxtb	r2, r1
 800436e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3301      	adds	r3, #1
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	e7ee      	b.n	8004356 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8004378:	bf00      	nop
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004394:	2300      	movs	r3, #0
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b03      	cmp	r3, #3
 800439c:	d811      	bhi.n	80043c2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6839      	ldr	r1, [r7, #0]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	440a      	add	r2, r1
 80043a8:	7812      	ldrb	r2, [r2, #0]
 80043aa:	4611      	mov	r1, r2
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	00d2      	lsls	r2, r2, #3
 80043b0:	fa01 f202 	lsl.w	r2, r1, r2
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3301      	adds	r3, #1
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	e7ea      	b.n	8004398 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80043c2:	bf00      	nop
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	4a04      	ldr	r2, [pc, #16]	; (80043ec <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	0800f280 	.word	0x0800f280

080043f0 <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff ffe5 	bl	80043d0 <_ZN3ros11Subscriber_C1Ev>
 8004406:	4a0b      	ldr	r2, [pc, #44]	; (8004434 <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	330c      	adds	r3, #12
 8004410:	4618      	mov	r0, r3
 8004412:	f7fe f963 	bl	80026dc <_ZN10custom_msg17encoder_input_msgC1Ev>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	609a      	str	r2, [r3, #8]
  };
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	0800f23c 	.word	0x0800f23c

08004438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3304      	adds	r3, #4
 8004444:	4618      	mov	r0, r3
 8004446:	f7fe ff05 	bl	8003254 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 800446a:	bf00      	nop
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8004472:	b480      	push	{r7}
 8004474:	b085      	sub	sp, #20
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b18      	cmp	r3, #24
 8004484:	dc1c      	bgt.n	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4e>
    {
      if (publishers[i] == 0) // empty slot
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800448e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d110      	bne.n	80044b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800449e:	6839      	ldr	r1, [r7, #0]
 80044a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	60da      	str	r2, [r3, #12]
        return true;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e004      	b.n	80044c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3301      	adds	r3, #1
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	e7df      	b.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 80044c0:	2300      	movs	r3, #0
  }
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80044ce:	b480      	push	{r7}
 80044d0:	b085      	sub	sp, #20
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b18      	cmp	r3, #24
 80044e0:	dc1b      	bgt.n	800451a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10e      	bne.n	8004512 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x44>
      {
        subscribers[i] = &s;
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	605a      	str	r2, [r3, #4]
        return true;
 800450e:	2301      	movs	r3, #1
 8004510:	e004      	b.n	800451c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3301      	adds	r3, #1
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	e7e0      	b.n	80044dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 800451a:	2300      	movs	r3, #0
  }
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
 8004534:	4618      	mov	r0, r3
 8004536:	f7fe feb9 	bl	80032ac <_ZN13STM32Hardware4timeEv>
 800453a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800454a:	4293      	cmp	r3, r2
 800454c:	d903      	bls.n	8004556 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d009      	beq.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	429a      	cmp	r2, r3
 800456a:	d903      	bls.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d013      	beq.n	80045a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3304      	adds	r3, #4
 8004580:	4618      	mov	r0, r3
 8004582:	f7fe fe93 	bl	80032ac <_ZN13STM32Hardware4timeEv>
 8004586:	4602      	mov	r2, r0
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	1ad2      	subs	r2, r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	429a      	cmp	r2, r3
 8004592:	bf8c      	ite	hi
 8004594:	2301      	movhi	r3, #1
 8004596:	2300      	movls	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 800459e:	f06f 0301 	mvn.w	r3, #1
 80045a2:	e190      	b.n	80048c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3304      	adds	r3, #4
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fe fe60 	bl	800326e <_ZN13STM32Hardware4readEv>
 80045ae:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f2c0 8170 	blt.w	8004898 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>
      checksum_ += data;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	441a      	add	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80045ce:	2b07      	cmp	r3, #7
 80045d0:	d11d      	bne.n	800460e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80045d8:	1c59      	adds	r1, r3, #1
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	b2d1      	uxtb	r1, r2
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	4413      	add	r3, r2
 80045e8:	460a      	mov	r2, r1
 80045ea:	761a      	strb	r2, [r3, #24]
        bytes_--;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80045f2:	1e5a      	subs	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1b7      	bne.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2208      	movs	r2, #8
 8004608:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800460c:	e7b2      	b.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d128      	bne.n	800466a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2bff      	cmp	r3, #255	; 0xff
 800461c:	d10d      	bne.n	800463a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f103 0214 	add.w	r2, r3, #20
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8004638:	e79c      	b.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3304      	adds	r3, #4
 800463e:	4618      	mov	r0, r3
 8004640:	f7fe fe34 	bl	80032ac <_ZN13STM32Hardware4timeEv>
 8004644:	4602      	mov	r2, r0
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	f241 3288 	movw	r2, #5000	; 0x1388
 800464e:	4293      	cmp	r3, r2
 8004650:	bf8c      	ite	hi
 8004652:	2301      	movhi	r3, #1
 8004654:	2300      	movls	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d08b      	beq.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 8004664:	f06f 0301 	mvn.w	r3, #1
 8004668:	e12d      	b.n	80048c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004670:	2b01      	cmp	r3, #1
 8004672:	d118      	bne.n	80046a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2bfe      	cmp	r3, #254	; 0xfe
 8004678:	d107      	bne.n	800468a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004688:	e774      	b.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004698:	2b00      	cmp	r3, #0
 800469a:	f47f af6b 	bne.w	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f915 	bl	80048ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80046a4:	e766      	b.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d113      	bne.n	80046d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b0>
        bytes_ = data;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 80046d6:	e74d      	b.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d110      	bne.n	8004704 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	441a      	add	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004702:	e737      	b.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800470a:	2b04      	cmp	r3, #4
 800470c:	d116      	bne.n	800473c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004714:	425a      	negs	r2, r3
 8004716:	b2db      	uxtb	r3, r3
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	bf58      	it	pl
 800471c:	4253      	negpl	r3, r2
 800471e:	2bff      	cmp	r3, #255	; 0xff
 8004720:	d107      	bne.n	8004732 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20a>
          mode_++;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004730:	e720      	b.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800473a:	e71b      	b.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004742:	2b05      	cmp	r3, #5
 8004744:	d10f      	bne.n	8004766 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
        topic_ = data;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8004764:	e706      	b.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800476c:	2b06      	cmp	r3, #6
 800476e:	d117      	bne.n	80047a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	021b      	lsls	r3, r3, #8
 800477a:	441a      	add	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2207      	movs	r2, #7
 8004786:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8004790:	2b00      	cmp	r3, #0
 8004792:	f47f aeef 	bne.w	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2208      	movs	r2, #8
 800479a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800479e:	e6e9      	b.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	f47f aee4 	bne.w	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80047ba:	425a      	negs	r2, r3
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	bf58      	it	pl
 80047c2:	4253      	negpl	r3, r2
 80047c4:	2bff      	cmp	r3, #255	; 0xff
 80047c6:	f47f aed5 	bne.w	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d110      	bne.n	80047f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
            requestSyncTime();
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f87a 	bl	80048ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f894 	bl	8004908 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 80047f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047f4:	e067      	b.n	80048c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80047fc:	2b0a      	cmp	r3, #10
 80047fe:	d106      	bne.n	800480e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3318      	adds	r3, #24
 8004804:	4619      	mov	r1, r3
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f95e 	bl	8004ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800480c:	e6b2      	b.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004814:	2b06      	cmp	r3, #6
 8004816:	d10d      	bne.n	8004834 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3318      	adds	r3, #24
 8004822:	4619      	mov	r1, r3
 8004824:	4610      	mov	r0, r2
 8004826:	f7ff fa00 	bl	8003c2a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8004832:	e69f      	b.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800483a:	2b0b      	cmp	r3, #11
 800483c:	d104      	bne.n	8004848 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x320>
            configured_ = false;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8004846:	e695      	b.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800484e:	3b64      	subs	r3, #100	; 0x64
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	f43f ae89 	beq.w	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004868:	3b64      	subs	r3, #100	; 0x64
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	6858      	ldr	r0, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800487c:	3b64      	subs	r3, #100	; 0x64
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	3218      	adds	r2, #24
 8004892:	4611      	mov	r1, r2
 8004894:	4798      	blx	r3
    while (true)
 8004896:	e66d      	b.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004898:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00f      	beq.n	80048c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d906      	bls.n	80048c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
      requestSyncTime();
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f809 	bl	80048ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 80048c4:	2300      	movs	r3, #0
  }
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b086      	sub	sp, #24
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80048d6:	f107 030c 	add.w	r3, r7, #12
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fe fd02 	bl	80032e4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f107 020c 	add.w	r2, r7, #12
 80048ea:	210a      	movs	r1, #10
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	4798      	blx	r3
    rt_time = hardware_.time();
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3304      	adds	r3, #4
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fe fcd9 	bl	80032ac <_ZN13STM32Hardware4timeEv>
 80048fa:	4602      	mov	r2, r0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	609a      	str	r2, [r3, #8]
  }
 8004900:	bf00      	nop
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8004908:	b590      	push	{r4, r7, lr}
 800490a:	b08b      	sub	sp, #44	; 0x2c
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004910:	f107 030c 	add.w	r3, r7, #12
 8004914:	4618      	mov	r0, r3
 8004916:	f7fe fdd5 	bl	80034c4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800491a:	2300      	movs	r3, #0
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	2b18      	cmp	r3, #24
 8004922:	dc5b      	bgt.n	80049dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004928:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800492c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d04f      	beq.n	80049d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004938:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800493c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	b29b      	uxth	r3, r3
 8004944:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800494a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800494e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800495e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004962:	6859      	ldr	r1, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004968:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800496c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3308      	adds	r3, #8
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4608      	mov	r0, r1
 800497a:	4798      	blx	r3
 800497c:	4603      	mov	r3, r0
 800497e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004984:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800498c:	6859      	ldr	r1, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004992:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	330c      	adds	r3, #12
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4608      	mov	r0, r1
 80049a4:	4798      	blx	r3
 80049a6:	4603      	mov	r3, r0
 80049a8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80049aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049ae:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681c      	ldr	r4, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ba:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80049be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff fae9 	bl	8003f9a <_ZN3ros9Publisher15getEndpointTypeEv>
 80049c8:	4601      	mov	r1, r0
 80049ca:	f107 030c 	add.w	r3, r7, #12
 80049ce:	461a      	mov	r2, r3
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	3301      	adds	r3, #1
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
 80049da:	e7a0      	b.n	800491e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80049dc:	2300      	movs	r3, #0
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	2b18      	cmp	r3, #24
 80049e4:	dc68      	bgt.n	8004ab8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d05b      	beq.n	8004ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	6859      	ldr	r1, [r3, #4]
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3308      	adds	r3, #8
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4608      	mov	r0, r1
 8004a42:	4798      	blx	r3
 8004a44:	4603      	mov	r3, r0
 8004a46:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	6859      	ldr	r1, [r3, #4]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	330c      	adds	r3, #12
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4608      	mov	r0, r1
 8004a6c:	4798      	blx	r3
 8004a6e:	4603      	mov	r3, r0
 8004a70:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004a72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a76:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681c      	ldr	r4, [r3, #0]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	6859      	ldr	r1, [r3, #4]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	4798      	blx	r3
 8004aa4:	4601      	mov	r1, r0
 8004aa6:	f107 030c 	add.w	r3, r7, #12
 8004aaa:	461a      	mov	r2, r3
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab6:	e793      	b.n	80049e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 8004ac0:	bf00      	nop
 8004ac2:	372c      	adds	r7, #44	; 0x2c
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd90      	pop	{r4, r7, pc}

08004ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004ad2:	f107 0308 	add.w	r3, r7, #8
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fe fc04 	bl	80032e4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fe fbe3 	bl	80032ac <_ZN13STM32Hardware4timeEv>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004af0:	f107 0308 	add.w	r3, r7, #8
 8004af4:	6839      	ldr	r1, [r7, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fe fc64 	bl	80033c4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	4914      	ldr	r1, [pc, #80]	; (8004b54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8004b02:	fba1 1303 	umull	r1, r3, r1, r3
 8004b06:	099b      	lsrs	r3, r3, #6
 8004b08:	4413      	add	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004b0c:	6939      	ldr	r1, [r7, #16]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8004b12:	fba3 0302 	umull	r0, r3, r3, r2
 8004b16:	099b      	lsrs	r3, r3, #6
 8004b18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b1c:	fb00 f303 	mul.w	r3, r0, r3
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	4a0d      	ldr	r2, [pc, #52]	; (8004b58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004b24:	fb02 f303 	mul.w	r3, r2, r3
 8004b28:	440b      	add	r3, r1
 8004b2a:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004b2c:	f107 0308 	add.w	r3, r7, #8
 8004b30:	3304      	adds	r3, #4
 8004b32:	4619      	mov	r1, r3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f8a5 	bl	8004c84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fe fbb4 	bl	80032ac <_ZN13STM32Hardware4timeEv>
 8004b44:	4602      	mov	r2, r0
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 8004b4c:	bf00      	nop
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	10624dd3 	.word	0x10624dd3
 8004b58:	000f4240 	.word	0x000f4240

08004b5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2b63      	cmp	r3, #99	; 0x63
 8004b6c:	dd09      	ble.n	8004b82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004b74:	f083 0301 	eor.w	r3, r3, #1
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e079      	b.n	8004c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	f502 7206 	add.w	r2, r2, #536	; 0x218
 8004b8e:	3207      	adds	r2, #7
 8004b90:	4611      	mov	r1, r2
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	4798      	blx	r3
 8004b96:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	22ff      	movs	r2, #255	; 0xff
 8004b9c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	22fe      	movs	r2, #254	; 0xfe
 8004ba4:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	0a1b      	lsrs	r3, r3, #8
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8004bce:	4413      	add	r3, r2
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	b21b      	sxth	r3, r3
 8004bea:	121b      	asrs	r3, r3, #8
 8004bec:	b21b      	sxth	r3, r3
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004bfa:	2305      	movs	r3, #5
 8004bfc:	61bb      	str	r3, [r7, #24]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	3306      	adds	r3, #6
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	dc0d      	bgt.n	8004c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	461a      	mov	r2, r3
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	4413      	add	r3, r2
 8004c1a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	61bb      	str	r3, [r7, #24]
 8004c22:	e7ec      	b.n	8004bfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	3307      	adds	r3, #7
 8004c28:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	425a      	negs	r2, r3
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	bf58      	it	pl
 8004c34:	4253      	negpl	r3, r2
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	1c59      	adds	r1, r3, #1
 8004c3c:	6179      	str	r1, [r7, #20]
 8004c3e:	43d2      	mvns	r2, r2
 8004c40:	b2d1      	uxtb	r1, r2
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4413      	add	r3, r2
 8004c46:	460a      	mov	r2, r1
 8004c48:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c52:	dc0a      	bgt.n	8004c6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	1d18      	adds	r0, r3, #4
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4619      	mov	r1, r3
 8004c62:	f7fe fb12 	bl	800328a <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	e005      	b.n	8004c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004c6a:	4905      	ldr	r1, [pc, #20]	; (8004c80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f847 	bl	8004d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004c76:	4618      	mov	r0, r3
 8004c78:	3720      	adds	r7, #32
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	0800f1b0 	.word	0x0800f1b0

08004c84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	3304      	adds	r3, #4
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe fb0a 	bl	80032ac <_ZN13STM32Hardware4timeEv>
 8004c98:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4914      	ldr	r1, [pc, #80]	; (8004cf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 8004ca2:	fba1 1303 	umull	r1, r3, r1, r3
 8004ca6:	099b      	lsrs	r3, r3, #6
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	1e5a      	subs	r2, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	6859      	ldr	r1, [r3, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	4b0f      	ldr	r3, [pc, #60]	; (8004cf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 8004cb8:	fba3 0302 	umull	r0, r3, r3, r2
 8004cbc:	099b      	lsrs	r3, r3, #6
 8004cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cc2:	fb00 f303 	mul.w	r3, r0, r3
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	4a0b      	ldr	r2, [pc, #44]	; (8004cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8004cca:	fb02 f303 	mul.w	r3, r2, r3
 8004cce:	1aca      	subs	r2, r1, r3
 8004cd0:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8004cd2:	4413      	add	r3, r2
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f103 020c 	add.w	r2, r3, #12
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3310      	adds	r3, #16
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	f000 fc25 	bl	8005534 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004cea:	bf00      	nop
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	10624dd3 	.word	0x10624dd3
 8004cf8:	000f4240 	.word	0x000f4240
 8004cfc:	3b9aca00 	.word	0x3b9aca00

08004d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	2103      	movs	r1, #3
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f804 	bl	8004d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004d14:	bf00      	nop
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	460b      	mov	r3, r1
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004d2a:	f107 0314 	add.w	r3, r7, #20
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fe fd8c 	bl	800384c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004d34:	7afb      	ldrb	r3, [r7, #11]
 8004d36:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f107 0214 	add.w	r2, r7, #20
 8004d46:	2107      	movs	r1, #7
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	4798      	blx	r3
  }
 8004d4c:	bf00      	nop
 8004d4e:	3720      	adds	r7, #32
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <_Z41__static_initialization_and_destruction_0ii>:
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d128      	bne.n	8004db6 <_Z41__static_initialization_and_destruction_0ii+0x62>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d123      	bne.n	8004db6 <_Z41__static_initialization_and_destruction_0ii+0x62>
ros::NodeHandle nh;
 8004d6e:	4814      	ldr	r0, [pc, #80]	; (8004dc0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004d70:	f7ff f9cc 	bl	800410c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8004d74:	4813      	ldr	r0, [pc, #76]	; (8004dc4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004d76:	f7ff f91d 	bl	8003fb4 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	4a11      	ldr	r2, [pc, #68]	; (8004dc4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004d7e:	4912      	ldr	r1, [pc, #72]	; (8004dc8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004d80:	4812      	ldr	r0, [pc, #72]	; (8004dcc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004d82:	f7ff f8df 	bl	8003f44 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
custom_msg::encoder_output_msg pid_msg;
 8004d86:	4812      	ldr	r0, [pc, #72]	; (8004dd0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004d88:	f7fd ff82 	bl	8002c90 <_ZN10custom_msg18encoder_output_msgC1Ev>
ros::Publisher pid_pub("PID_data", &pid_msg);
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	4a10      	ldr	r2, [pc, #64]	; (8004dd0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004d90:	4910      	ldr	r1, [pc, #64]	; (8004dd4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004d92:	4811      	ldr	r0, [pc, #68]	; (8004dd8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004d94:	f7ff f8d6 	bl	8003f44 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
custom_msg::mpu_msg mpu_msg;
 8004d98:	4810      	ldr	r0, [pc, #64]	; (8004ddc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004d9a:	f7fe f90b 	bl	8002fb4 <_ZN10custom_msg7mpu_msgC1Ev>
ros::Publisher mpu_pub("MPU_data", &mpu_msg);
 8004d9e:	2300      	movs	r3, #0
 8004da0:	4a0e      	ldr	r2, [pc, #56]	; (8004ddc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004da2:	490f      	ldr	r1, [pc, #60]	; (8004de0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004da4:	480f      	ldr	r0, [pc, #60]	; (8004de4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004da6:	f7ff f8cd 	bl	8003f44 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<custom_msg::encoder_input_msg> vel_sub("PID_ctrl", &vel_cb);
 8004daa:	2301      	movs	r3, #1
 8004dac:	4a0e      	ldr	r2, [pc, #56]	; (8004de8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004dae:	490f      	ldr	r1, [pc, #60]	; (8004dec <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004db0:	480f      	ldr	r0, [pc, #60]	; (8004df0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004db2:	f7ff fb1d 	bl	80043f0 <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvEC1EPKcPFvRKS2_Ei>
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000944 	.word	0x20000944
 8004dc4:	20000e74 	.word	0x20000e74
 8004dc8:	0800f1ec 	.word	0x0800f1ec
 8004dcc:	20000e7c 	.word	0x20000e7c
 8004dd0:	20000e90 	.word	0x20000e90
 8004dd4:	0800f1f4 	.word	0x0800f1f4
 8004dd8:	20000ea4 	.word	0x20000ea4
 8004ddc:	20000eb8 	.word	0x20000eb8
 8004de0:	0800f200 	.word	0x0800f200
 8004de4:	20000ec8 	.word	0x20000ec8
 8004de8:	080042d5 	.word	0x080042d5
 8004dec:	0800f20c 	.word	0x0800f20c
 8004df0:	20000edc 	.word	0x20000edc

08004df4 <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	330c      	adds	r3, #12
 8004e02:	6839      	ldr	r1, [r7, #0]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fd fdc9 	bl	800299c <_ZN10custom_msg17encoder_input_msg11deserializeEPh>
    this->cb_(msg);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	320c      	adds	r2, #12
 8004e12:	4610      	mov	r0, r2
 8004e14:	4798      	blx	r3
  }
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	330c      	adds	r3, #12
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7fd ff08 	bl	8002c58 <_ZN10custom_msg17encoder_input_msg7getTypeEv>
 8004e48:	4603      	mov	r3, r0
  }
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	330c      	adds	r3, #12
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fd ff08 	bl	8002c74 <_ZN10custom_msg17encoder_input_msg6getMD5Ev>
 8004e64:	4603      	mov	r3, r0
  }
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
    return configured_;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <_GLOBAL__sub_I_nh>:
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e90:	2001      	movs	r0, #1
 8004e92:	f7ff ff5f 	bl	8004d54 <_Z41__static_initialization_and_destruction_0ii>
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	607b      	str	r3, [r7, #4]
 8004ea2:	4b10      	ldr	r3, [pc, #64]	; (8004ee4 <HAL_MspInit+0x4c>)
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea6:	4a0f      	ldr	r2, [pc, #60]	; (8004ee4 <HAL_MspInit+0x4c>)
 8004ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004eac:	6453      	str	r3, [r2, #68]	; 0x44
 8004eae:	4b0d      	ldr	r3, [pc, #52]	; (8004ee4 <HAL_MspInit+0x4c>)
 8004eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb6:	607b      	str	r3, [r7, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004eba:	2300      	movs	r3, #0
 8004ebc:	603b      	str	r3, [r7, #0]
 8004ebe:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <HAL_MspInit+0x4c>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <HAL_MspInit+0x4c>)
 8004ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eca:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <HAL_MspInit+0x4c>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40023800 	.word	0x40023800

08004ee8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08a      	sub	sp, #40	; 0x28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ef0:	f107 0314 	add.w	r3, r7, #20
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	605a      	str	r2, [r3, #4]
 8004efa:	609a      	str	r2, [r3, #8]
 8004efc:	60da      	str	r2, [r3, #12]
 8004efe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a19      	ldr	r2, [pc, #100]	; (8004f6c <HAL_I2C_MspInit+0x84>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d12c      	bne.n	8004f64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <HAL_I2C_MspInit+0x88>)
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	4a17      	ldr	r2, [pc, #92]	; (8004f70 <HAL_I2C_MspInit+0x88>)
 8004f14:	f043 0302 	orr.w	r3, r3, #2
 8004f18:	6313      	str	r3, [r2, #48]	; 0x30
 8004f1a:	4b15      	ldr	r3, [pc, #84]	; (8004f70 <HAL_I2C_MspInit+0x88>)
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	613b      	str	r3, [r7, #16]
 8004f24:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004f26:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f2c:	2312      	movs	r3, #18
 8004f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f34:	2303      	movs	r3, #3
 8004f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004f38:	2304      	movs	r3, #4
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f3c:	f107 0314 	add.w	r3, r7, #20
 8004f40:	4619      	mov	r1, r3
 8004f42:	480c      	ldr	r0, [pc, #48]	; (8004f74 <HAL_I2C_MspInit+0x8c>)
 8004f44:	f001 f8f6 	bl	8006134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	4b08      	ldr	r3, [pc, #32]	; (8004f70 <HAL_I2C_MspInit+0x88>)
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	4a07      	ldr	r2, [pc, #28]	; (8004f70 <HAL_I2C_MspInit+0x88>)
 8004f52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f56:	6413      	str	r3, [r2, #64]	; 0x40
 8004f58:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <HAL_I2C_MspInit+0x88>)
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004f64:	bf00      	nop
 8004f66:	3728      	adds	r7, #40	; 0x28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40005800 	.word	0x40005800
 8004f70:	40023800 	.word	0x40023800
 8004f74:	40020400 	.word	0x40020400

08004f78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f88:	d10d      	bne.n	8004fa6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	4b09      	ldr	r3, [pc, #36]	; (8004fb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	4a08      	ldr	r2, [pc, #32]	; (8004fb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	6413      	str	r3, [r2, #64]	; 0x40
 8004f9a:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004fa6:	bf00      	nop
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40023800 	.word	0x40023800

08004fb8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08c      	sub	sp, #48	; 0x30
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fc0:	f107 031c 	add.w	r3, r7, #28
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	605a      	str	r2, [r3, #4]
 8004fca:	609a      	str	r2, [r3, #8]
 8004fcc:	60da      	str	r2, [r3, #12]
 8004fce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a32      	ldr	r2, [pc, #200]	; (80050a0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d12c      	bne.n	8005034 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61bb      	str	r3, [r7, #24]
 8004fde:	4b31      	ldr	r3, [pc, #196]	; (80050a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	4a30      	ldr	r2, [pc, #192]	; (80050a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8004fe4:	f043 0302 	orr.w	r3, r3, #2
 8004fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8004fea:	4b2e      	ldr	r3, [pc, #184]	; (80050a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	61bb      	str	r3, [r7, #24]
 8004ff4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]
 8004ffa:	4b2a      	ldr	r3, [pc, #168]	; (80050a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	4a29      	ldr	r2, [pc, #164]	; (80050a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	6313      	str	r3, [r2, #48]	; 0x30
 8005006:	4b27      	ldr	r3, [pc, #156]	; (80050a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005012:	23c0      	movs	r3, #192	; 0xc0
 8005014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005016:	2302      	movs	r3, #2
 8005018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501a:	2300      	movs	r3, #0
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800501e:	2300      	movs	r3, #0
 8005020:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005022:	2302      	movs	r3, #2
 8005024:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005026:	f107 031c 	add.w	r3, r7, #28
 800502a:	4619      	mov	r1, r3
 800502c:	481e      	ldr	r0, [pc, #120]	; (80050a8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800502e:	f001 f881 	bl	8006134 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005032:	e031      	b.n	8005098 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1c      	ldr	r2, [pc, #112]	; (80050ac <HAL_TIM_Encoder_MspInit+0xf4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d12c      	bne.n	8005098 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800503e:	2300      	movs	r3, #0
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	4b18      	ldr	r3, [pc, #96]	; (80050a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	4a17      	ldr	r2, [pc, #92]	; (80050a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005048:	f043 0304 	orr.w	r3, r3, #4
 800504c:	6413      	str	r3, [r2, #64]	; 0x40
 800504e:	4b15      	ldr	r3, [pc, #84]	; (80050a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	613b      	str	r3, [r7, #16]
 8005058:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	4b11      	ldr	r3, [pc, #68]	; (80050a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005062:	4a10      	ldr	r2, [pc, #64]	; (80050a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8005064:	f043 0308 	orr.w	r3, r3, #8
 8005068:	6313      	str	r3, [r2, #48]	; 0x30
 800506a:	4b0e      	ldr	r3, [pc, #56]	; (80050a4 <HAL_TIM_Encoder_MspInit+0xec>)
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005076:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800507a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800507c:	2302      	movs	r3, #2
 800507e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005080:	2300      	movs	r3, #0
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005084:	2300      	movs	r3, #0
 8005086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005088:	2302      	movs	r3, #2
 800508a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800508c:	f107 031c 	add.w	r3, r7, #28
 8005090:	4619      	mov	r1, r3
 8005092:	4807      	ldr	r0, [pc, #28]	; (80050b0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8005094:	f001 f84e 	bl	8006134 <HAL_GPIO_Init>
}
 8005098:	bf00      	nop
 800509a:	3730      	adds	r7, #48	; 0x30
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40023800 	.word	0x40023800
 80050a8:	40020000 	.word	0x40020000
 80050ac:	40000800 	.word	0x40000800
 80050b0:	40020c00 	.word	0x40020c00

080050b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a0e      	ldr	r2, [pc, #56]	; (80050fc <HAL_TIM_Base_MspInit+0x48>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d115      	bne.n	80050f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	4b0d      	ldr	r3, [pc, #52]	; (8005100 <HAL_TIM_Base_MspInit+0x4c>)
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	4a0c      	ldr	r2, [pc, #48]	; (8005100 <HAL_TIM_Base_MspInit+0x4c>)
 80050d0:	f043 0308 	orr.w	r3, r3, #8
 80050d4:	6413      	str	r3, [r2, #64]	; 0x40
 80050d6:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <HAL_TIM_Base_MspInit+0x4c>)
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	f003 0308 	and.w	r3, r3, #8
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80050e2:	2200      	movs	r2, #0
 80050e4:	2100      	movs	r1, #0
 80050e6:	2032      	movs	r0, #50	; 0x32
 80050e8:	f000 fbeb 	bl	80058c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80050ec:	2032      	movs	r0, #50	; 0x32
 80050ee:	f000 fc04 	bl	80058fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80050f2:	bf00      	nop
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	40000c00 	.word	0x40000c00
 8005100:	40023800 	.word	0x40023800

08005104 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800510c:	f107 030c 	add.w	r3, r7, #12
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	605a      	str	r2, [r3, #4]
 8005116:	609a      	str	r2, [r3, #8]
 8005118:	60da      	str	r2, [r3, #12]
 800511a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005124:	d11d      	bne.n	8005162 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005126:	2300      	movs	r3, #0
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	4b10      	ldr	r3, [pc, #64]	; (800516c <HAL_TIM_MspPostInit+0x68>)
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	4a0f      	ldr	r2, [pc, #60]	; (800516c <HAL_TIM_MspPostInit+0x68>)
 8005130:	f043 0301 	orr.w	r3, r3, #1
 8005134:	6313      	str	r3, [r2, #48]	; 0x30
 8005136:	4b0d      	ldr	r3, [pc, #52]	; (800516c <HAL_TIM_MspPostInit+0x68>)
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	60bb      	str	r3, [r7, #8]
 8005140:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005142:	2303      	movs	r3, #3
 8005144:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005146:	2302      	movs	r3, #2
 8005148:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514a:	2300      	movs	r3, #0
 800514c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800514e:	2300      	movs	r3, #0
 8005150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005152:	2301      	movs	r3, #1
 8005154:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005156:	f107 030c 	add.w	r3, r7, #12
 800515a:	4619      	mov	r1, r3
 800515c:	4804      	ldr	r0, [pc, #16]	; (8005170 <HAL_TIM_MspPostInit+0x6c>)
 800515e:	f000 ffe9 	bl	8006134 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005162:	bf00      	nop
 8005164:	3720      	adds	r7, #32
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40023800 	.word	0x40023800
 8005170:	40020000 	.word	0x40020000

08005174 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b08a      	sub	sp, #40	; 0x28
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800517c:	f107 0314 	add.w	r3, r7, #20
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	605a      	str	r2, [r3, #4]
 8005186:	609a      	str	r2, [r3, #8]
 8005188:	60da      	str	r2, [r3, #12]
 800518a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a4c      	ldr	r2, [pc, #304]	; (80052c4 <HAL_UART_MspInit+0x150>)
 8005192:	4293      	cmp	r3, r2
 8005194:	f040 8092 	bne.w	80052bc <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005198:	2300      	movs	r3, #0
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	4b4a      	ldr	r3, [pc, #296]	; (80052c8 <HAL_UART_MspInit+0x154>)
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	4a49      	ldr	r2, [pc, #292]	; (80052c8 <HAL_UART_MspInit+0x154>)
 80051a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051a6:	6413      	str	r3, [r2, #64]	; 0x40
 80051a8:	4b47      	ldr	r3, [pc, #284]	; (80052c8 <HAL_UART_MspInit+0x154>)
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	4b43      	ldr	r3, [pc, #268]	; (80052c8 <HAL_UART_MspInit+0x154>)
 80051ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051bc:	4a42      	ldr	r2, [pc, #264]	; (80052c8 <HAL_UART_MspInit+0x154>)
 80051be:	f043 0308 	orr.w	r3, r3, #8
 80051c2:	6313      	str	r3, [r2, #48]	; 0x30
 80051c4:	4b40      	ldr	r3, [pc, #256]	; (80052c8 <HAL_UART_MspInit+0x154>)
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	f003 0308 	and.w	r3, r3, #8
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80051d0:	2360      	movs	r3, #96	; 0x60
 80051d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d4:	2302      	movs	r3, #2
 80051d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d8:	2300      	movs	r3, #0
 80051da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051dc:	2303      	movs	r3, #3
 80051de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80051e0:	2307      	movs	r3, #7
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051e4:	f107 0314 	add.w	r3, r7, #20
 80051e8:	4619      	mov	r1, r3
 80051ea:	4838      	ldr	r0, [pc, #224]	; (80052cc <HAL_UART_MspInit+0x158>)
 80051ec:	f000 ffa2 	bl	8006134 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80051f0:	4b37      	ldr	r3, [pc, #220]	; (80052d0 <HAL_UART_MspInit+0x15c>)
 80051f2:	4a38      	ldr	r2, [pc, #224]	; (80052d4 <HAL_UART_MspInit+0x160>)
 80051f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80051f6:	4b36      	ldr	r3, [pc, #216]	; (80052d0 <HAL_UART_MspInit+0x15c>)
 80051f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051fe:	4b34      	ldr	r3, [pc, #208]	; (80052d0 <HAL_UART_MspInit+0x15c>)
 8005200:	2200      	movs	r2, #0
 8005202:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005204:	4b32      	ldr	r3, [pc, #200]	; (80052d0 <HAL_UART_MspInit+0x15c>)
 8005206:	2200      	movs	r2, #0
 8005208:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800520a:	4b31      	ldr	r3, [pc, #196]	; (80052d0 <HAL_UART_MspInit+0x15c>)
 800520c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005210:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005212:	4b2f      	ldr	r3, [pc, #188]	; (80052d0 <HAL_UART_MspInit+0x15c>)
 8005214:	2200      	movs	r2, #0
 8005216:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005218:	4b2d      	ldr	r3, [pc, #180]	; (80052d0 <HAL_UART_MspInit+0x15c>)
 800521a:	2200      	movs	r2, #0
 800521c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800521e:	4b2c      	ldr	r3, [pc, #176]	; (80052d0 <HAL_UART_MspInit+0x15c>)
 8005220:	2200      	movs	r2, #0
 8005222:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005224:	4b2a      	ldr	r3, [pc, #168]	; (80052d0 <HAL_UART_MspInit+0x15c>)
 8005226:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800522a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800522c:	4b28      	ldr	r3, [pc, #160]	; (80052d0 <HAL_UART_MspInit+0x15c>)
 800522e:	2200      	movs	r2, #0
 8005230:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005232:	4827      	ldr	r0, [pc, #156]	; (80052d0 <HAL_UART_MspInit+0x15c>)
 8005234:	f000 fb7c 	bl	8005930 <HAL_DMA_Init>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800523e:	f7fd fa15 	bl	800266c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a22      	ldr	r2, [pc, #136]	; (80052d0 <HAL_UART_MspInit+0x15c>)
 8005246:	639a      	str	r2, [r3, #56]	; 0x38
 8005248:	4a21      	ldr	r2, [pc, #132]	; (80052d0 <HAL_UART_MspInit+0x15c>)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800524e:	4b22      	ldr	r3, [pc, #136]	; (80052d8 <HAL_UART_MspInit+0x164>)
 8005250:	4a22      	ldr	r2, [pc, #136]	; (80052dc <HAL_UART_MspInit+0x168>)
 8005252:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005254:	4b20      	ldr	r3, [pc, #128]	; (80052d8 <HAL_UART_MspInit+0x164>)
 8005256:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800525a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800525c:	4b1e      	ldr	r3, [pc, #120]	; (80052d8 <HAL_UART_MspInit+0x164>)
 800525e:	2240      	movs	r2, #64	; 0x40
 8005260:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005262:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <HAL_UART_MspInit+0x164>)
 8005264:	2200      	movs	r2, #0
 8005266:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005268:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <HAL_UART_MspInit+0x164>)
 800526a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800526e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005270:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <HAL_UART_MspInit+0x164>)
 8005272:	2200      	movs	r2, #0
 8005274:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005276:	4b18      	ldr	r3, [pc, #96]	; (80052d8 <HAL_UART_MspInit+0x164>)
 8005278:	2200      	movs	r2, #0
 800527a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800527c:	4b16      	ldr	r3, [pc, #88]	; (80052d8 <HAL_UART_MspInit+0x164>)
 800527e:	2200      	movs	r2, #0
 8005280:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <HAL_UART_MspInit+0x164>)
 8005284:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005288:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800528a:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <HAL_UART_MspInit+0x164>)
 800528c:	2200      	movs	r2, #0
 800528e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005290:	4811      	ldr	r0, [pc, #68]	; (80052d8 <HAL_UART_MspInit+0x164>)
 8005292:	f000 fb4d 	bl	8005930 <HAL_DMA_Init>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 800529c:	f7fd f9e6 	bl	800266c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a0d      	ldr	r2, [pc, #52]	; (80052d8 <HAL_UART_MspInit+0x164>)
 80052a4:	635a      	str	r2, [r3, #52]	; 0x34
 80052a6:	4a0c      	ldr	r2, [pc, #48]	; (80052d8 <HAL_UART_MspInit+0x164>)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80052ac:	2200      	movs	r2, #0
 80052ae:	2100      	movs	r1, #0
 80052b0:	2026      	movs	r0, #38	; 0x26
 80052b2:	f000 fb06 	bl	80058c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80052b6:	2026      	movs	r0, #38	; 0x26
 80052b8:	f000 fb1f 	bl	80058fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80052bc:	bf00      	nop
 80052be:	3728      	adds	r7, #40	; 0x28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40004400 	.word	0x40004400
 80052c8:	40023800 	.word	0x40023800
 80052cc:	40020c00 	.word	0x40020c00
 80052d0:	200007d8 	.word	0x200007d8
 80052d4:	40026088 	.word	0x40026088
 80052d8:	20000838 	.word	0x20000838
 80052dc:	400260a0 	.word	0x400260a0

080052e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80052e4:	e7fe      	b.n	80052e4 <NMI_Handler+0x4>

080052e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052e6:	b480      	push	{r7}
 80052e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052ea:	e7fe      	b.n	80052ea <HardFault_Handler+0x4>

080052ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052f0:	e7fe      	b.n	80052f0 <MemManage_Handler+0x4>

080052f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052f2:	b480      	push	{r7}
 80052f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052f6:	e7fe      	b.n	80052f6 <BusFault_Handler+0x4>

080052f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052fc:	e7fe      	b.n	80052fc <UsageFault_Handler+0x4>

080052fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80052fe:	b480      	push	{r7}
 8005300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005302:	bf00      	nop
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005310:	bf00      	nop
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800531a:	b480      	push	{r7}
 800531c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800531e:	bf00      	nop
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800532c:	f000 f9aa 	bl	8005684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005330:	bf00      	nop
 8005332:	bd80      	pop	{r7, pc}

08005334 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005338:	4802      	ldr	r0, [pc, #8]	; (8005344 <DMA1_Stream5_IRQHandler+0x10>)
 800533a:	f000 fc91 	bl	8005c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800533e:	bf00      	nop
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	200007d8 	.word	0x200007d8

08005348 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800534c:	4802      	ldr	r0, [pc, #8]	; (8005358 <DMA1_Stream6_IRQHandler+0x10>)
 800534e:	f000 fc87 	bl	8005c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005352:	bf00      	nop
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	20000838 	.word	0x20000838

0800535c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005360:	4802      	ldr	r0, [pc, #8]	; (800536c <USART2_IRQHandler+0x10>)
 8005362:	f003 ff17 	bl	8009194 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005366:	bf00      	nop
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000794 	.word	0x20000794

08005370 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005374:	4802      	ldr	r0, [pc, #8]	; (8005380 <TIM5_IRQHandler+0x10>)
 8005376:	f002 ffb7 	bl	80082e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800537a:	bf00      	nop
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	2000074c 	.word	0x2000074c

08005384 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  return 1;
 8005388:	2301      	movs	r3, #1
}
 800538a:	4618      	mov	r0, r3
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <_kill>:

int _kill(int pid, int sig)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800539e:	f005 f973 	bl	800a688 <__errno>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2216      	movs	r2, #22
 80053a6:	601a      	str	r2, [r3, #0]
  return -1;
 80053a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <_exit>:

void _exit (int status)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80053bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7ff ffe7 	bl	8005394 <_kill>
  while (1) {}    /* Make sure we hang here */
 80053c6:	e7fe      	b.n	80053c6 <_exit+0x12>

080053c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053d4:	2300      	movs	r3, #0
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	e00a      	b.n	80053f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80053da:	f3af 8000 	nop.w
 80053de:	4601      	mov	r1, r0
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	60ba      	str	r2, [r7, #8]
 80053e6:	b2ca      	uxtb	r2, r1
 80053e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	3301      	adds	r3, #1
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	dbf0      	blt.n	80053da <_read+0x12>
  }

  return len;
 80053f8:	687b      	ldr	r3, [r7, #4]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b086      	sub	sp, #24
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	e009      	b.n	8005428 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	60ba      	str	r2, [r7, #8]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	4618      	mov	r0, r3
 800541e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	3301      	adds	r3, #1
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	429a      	cmp	r2, r3
 800542e:	dbf1      	blt.n	8005414 <_write+0x12>
  }
  return len;
 8005430:	687b      	ldr	r3, [r7, #4]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <_close>:

int _close(int file)
{
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005446:	4618      	mov	r0, r3
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005462:	605a      	str	r2, [r3, #4]
  return 0;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <_isatty>:

int _isatty(int file)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800547a:	2301      	movs	r3, #1
}
 800547c:	4618      	mov	r0, r3
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
	...

080054a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80054ac:	4a14      	ldr	r2, [pc, #80]	; (8005500 <_sbrk+0x5c>)
 80054ae:	4b15      	ldr	r3, [pc, #84]	; (8005504 <_sbrk+0x60>)
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80054b8:	4b13      	ldr	r3, [pc, #76]	; (8005508 <_sbrk+0x64>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d102      	bne.n	80054c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80054c0:	4b11      	ldr	r3, [pc, #68]	; (8005508 <_sbrk+0x64>)
 80054c2:	4a12      	ldr	r2, [pc, #72]	; (800550c <_sbrk+0x68>)
 80054c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80054c6:	4b10      	ldr	r3, [pc, #64]	; (8005508 <_sbrk+0x64>)
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d207      	bcs.n	80054e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80054d4:	f005 f8d8 	bl	800a688 <__errno>
 80054d8:	4603      	mov	r3, r0
 80054da:	220c      	movs	r2, #12
 80054dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80054de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054e2:	e009      	b.n	80054f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80054e4:	4b08      	ldr	r3, [pc, #32]	; (8005508 <_sbrk+0x64>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80054ea:	4b07      	ldr	r3, [pc, #28]	; (8005508 <_sbrk+0x64>)
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4413      	add	r3, r2
 80054f2:	4a05      	ldr	r2, [pc, #20]	; (8005508 <_sbrk+0x64>)
 80054f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80054f6:	68fb      	ldr	r3, [r7, #12]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20020000 	.word	0x20020000
 8005504:	00000400 	.word	0x00000400
 8005508:	20000f14 	.word	0x20000f14
 800550c:	20000f30 	.word	0x20000f30

08005510 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005514:	4b06      	ldr	r3, [pc, #24]	; (8005530 <SystemInit+0x20>)
 8005516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551a:	4a05      	ldr	r2, [pc, #20]	; (8005530 <SystemInit+0x20>)
 800551c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005524:	bf00      	nop
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	e000ed00 	.word	0xe000ed00

08005534 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	0a5a      	lsrs	r2, r3, #9
 8005544:	490f      	ldr	r1, [pc, #60]	; (8005584 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8005546:	fba1 1202 	umull	r1, r2, r1, r2
 800554a:	09d2      	lsrs	r2, r2, #7
 800554c:	490e      	ldr	r1, [pc, #56]	; (8005588 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800554e:	fb01 f202 	mul.w	r2, r1, r2
 8005552:	1a9b      	subs	r3, r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	0a5b      	lsrs	r3, r3, #9
 800555c:	4a09      	ldr	r2, [pc, #36]	; (8005584 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800555e:	fba2 2303 	umull	r2, r3, r2, r3
 8005562:	09db      	lsrs	r3, r3, #7
 8005564:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	441a      	add	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	601a      	str	r2, [r3, #0]
}
 8005578:	bf00      	nop
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	00044b83 	.word	0x00044b83
 8005588:	3b9aca00 	.word	0x3b9aca00

0800558c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800558c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005590:	480d      	ldr	r0, [pc, #52]	; (80055c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005592:	490e      	ldr	r1, [pc, #56]	; (80055cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005594:	4a0e      	ldr	r2, [pc, #56]	; (80055d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005598:	e002      	b.n	80055a0 <LoopCopyDataInit>

0800559a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800559a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800559c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800559e:	3304      	adds	r3, #4

080055a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055a4:	d3f9      	bcc.n	800559a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055a6:	4a0b      	ldr	r2, [pc, #44]	; (80055d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80055a8:	4c0b      	ldr	r4, [pc, #44]	; (80055d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80055aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055ac:	e001      	b.n	80055b2 <LoopFillZerobss>

080055ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055b0:	3204      	adds	r2, #4

080055b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055b4:	d3fb      	bcc.n	80055ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80055b6:	f7ff ffab 	bl	8005510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055ba:	f005 f86b 	bl	800a694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055be:	f7fc faa7 	bl	8001b10 <main>
  bx  lr    
 80055c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80055c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80055c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055cc:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80055d0:	0800f880 	.word	0x0800f880
  ldr r2, =_sbss
 80055d4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80055d8:	20000f2c 	.word	0x20000f2c

080055dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055dc:	e7fe      	b.n	80055dc <ADC_IRQHandler>
	...

080055e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80055e4:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <HAL_Init+0x40>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a0d      	ldr	r2, [pc, #52]	; (8005620 <HAL_Init+0x40>)
 80055ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80055f0:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <HAL_Init+0x40>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a0a      	ldr	r2, [pc, #40]	; (8005620 <HAL_Init+0x40>)
 80055f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055fc:	4b08      	ldr	r3, [pc, #32]	; (8005620 <HAL_Init+0x40>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a07      	ldr	r2, [pc, #28]	; (8005620 <HAL_Init+0x40>)
 8005602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005608:	2003      	movs	r0, #3
 800560a:	f000 f94f 	bl	80058ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800560e:	200f      	movs	r0, #15
 8005610:	f000 f808 	bl	8005624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005614:	f7ff fc40 	bl	8004e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40023c00 	.word	0x40023c00

08005624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800562c:	4b12      	ldr	r3, [pc, #72]	; (8005678 <HAL_InitTick+0x54>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	4b12      	ldr	r3, [pc, #72]	; (800567c <HAL_InitTick+0x58>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	4619      	mov	r1, r3
 8005636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800563a:	fbb3 f3f1 	udiv	r3, r3, r1
 800563e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005642:	4618      	mov	r0, r3
 8005644:	f000 f967 	bl	8005916 <HAL_SYSTICK_Config>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e00e      	b.n	8005670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b0f      	cmp	r3, #15
 8005656:	d80a      	bhi.n	800566e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005658:	2200      	movs	r2, #0
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005660:	f000 f92f 	bl	80058c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005664:	4a06      	ldr	r2, [pc, #24]	; (8005680 <HAL_InitTick+0x5c>)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	e000      	b.n	8005670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
}
 8005670:	4618      	mov	r0, r3
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	20000010 	.word	0x20000010
 800567c:	20000018 	.word	0x20000018
 8005680:	20000014 	.word	0x20000014

08005684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005688:	4b06      	ldr	r3, [pc, #24]	; (80056a4 <HAL_IncTick+0x20>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	461a      	mov	r2, r3
 800568e:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <HAL_IncTick+0x24>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4413      	add	r3, r2
 8005694:	4a04      	ldr	r2, [pc, #16]	; (80056a8 <HAL_IncTick+0x24>)
 8005696:	6013      	str	r3, [r2, #0]
}
 8005698:	bf00      	nop
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20000018 	.word	0x20000018
 80056a8:	20000f18 	.word	0x20000f18

080056ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
  return uwTick;
 80056b0:	4b03      	ldr	r3, [pc, #12]	; (80056c0 <HAL_GetTick+0x14>)
 80056b2:	681b      	ldr	r3, [r3, #0]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	20000f18 	.word	0x20000f18

080056c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056cc:	f7ff ffee 	bl	80056ac <HAL_GetTick>
 80056d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056dc:	d005      	beq.n	80056ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056de:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <HAL_Delay+0x44>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4413      	add	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80056ea:	bf00      	nop
 80056ec:	f7ff ffde 	bl	80056ac <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d8f7      	bhi.n	80056ec <HAL_Delay+0x28>
  {
  }
}
 80056fc:	bf00      	nop
 80056fe:	bf00      	nop
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000018 	.word	0x20000018

0800570c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800571c:	4b0c      	ldr	r3, [pc, #48]	; (8005750 <__NVIC_SetPriorityGrouping+0x44>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005728:	4013      	ands	r3, r2
 800572a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800573c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800573e:	4a04      	ldr	r2, [pc, #16]	; (8005750 <__NVIC_SetPriorityGrouping+0x44>)
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	60d3      	str	r3, [r2, #12]
}
 8005744:	bf00      	nop
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	e000ed00 	.word	0xe000ed00

08005754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005758:	4b04      	ldr	r3, [pc, #16]	; (800576c <__NVIC_GetPriorityGrouping+0x18>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	0a1b      	lsrs	r3, r3, #8
 800575e:	f003 0307 	and.w	r3, r3, #7
}
 8005762:	4618      	mov	r0, r3
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	e000ed00 	.word	0xe000ed00

08005770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	4603      	mov	r3, r0
 8005778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800577a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800577e:	2b00      	cmp	r3, #0
 8005780:	db0b      	blt.n	800579a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	f003 021f 	and.w	r2, r3, #31
 8005788:	4907      	ldr	r1, [pc, #28]	; (80057a8 <__NVIC_EnableIRQ+0x38>)
 800578a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	2001      	movs	r0, #1
 8005792:	fa00 f202 	lsl.w	r2, r0, r2
 8005796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	e000e100 	.word	0xe000e100

080057ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	6039      	str	r1, [r7, #0]
 80057b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	db0a      	blt.n	80057d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	490c      	ldr	r1, [pc, #48]	; (80057f8 <__NVIC_SetPriority+0x4c>)
 80057c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ca:	0112      	lsls	r2, r2, #4
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	440b      	add	r3, r1
 80057d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057d4:	e00a      	b.n	80057ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	4908      	ldr	r1, [pc, #32]	; (80057fc <__NVIC_SetPriority+0x50>)
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	3b04      	subs	r3, #4
 80057e4:	0112      	lsls	r2, r2, #4
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	440b      	add	r3, r1
 80057ea:	761a      	strb	r2, [r3, #24]
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	e000e100 	.word	0xe000e100
 80057fc:	e000ed00 	.word	0xe000ed00

08005800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005800:	b480      	push	{r7}
 8005802:	b089      	sub	sp, #36	; 0x24
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	f1c3 0307 	rsb	r3, r3, #7
 800581a:	2b04      	cmp	r3, #4
 800581c:	bf28      	it	cs
 800581e:	2304      	movcs	r3, #4
 8005820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	3304      	adds	r3, #4
 8005826:	2b06      	cmp	r3, #6
 8005828:	d902      	bls.n	8005830 <NVIC_EncodePriority+0x30>
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	3b03      	subs	r3, #3
 800582e:	e000      	b.n	8005832 <NVIC_EncodePriority+0x32>
 8005830:	2300      	movs	r3, #0
 8005832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
 800583e:	43da      	mvns	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	401a      	ands	r2, r3
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005848:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	fa01 f303 	lsl.w	r3, r1, r3
 8005852:	43d9      	mvns	r1, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005858:	4313      	orrs	r3, r2
         );
}
 800585a:	4618      	mov	r0, r3
 800585c:	3724      	adds	r7, #36	; 0x24
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
	...

08005868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3b01      	subs	r3, #1
 8005874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005878:	d301      	bcc.n	800587e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800587a:	2301      	movs	r3, #1
 800587c:	e00f      	b.n	800589e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800587e:	4a0a      	ldr	r2, [pc, #40]	; (80058a8 <SysTick_Config+0x40>)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3b01      	subs	r3, #1
 8005884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005886:	210f      	movs	r1, #15
 8005888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800588c:	f7ff ff8e 	bl	80057ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <SysTick_Config+0x40>)
 8005892:	2200      	movs	r2, #0
 8005894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005896:	4b04      	ldr	r3, [pc, #16]	; (80058a8 <SysTick_Config+0x40>)
 8005898:	2207      	movs	r2, #7
 800589a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	e000e010 	.word	0xe000e010

080058ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff ff29 	bl	800570c <__NVIC_SetPriorityGrouping>
}
 80058ba:	bf00      	nop
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b086      	sub	sp, #24
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	4603      	mov	r3, r0
 80058ca:	60b9      	str	r1, [r7, #8]
 80058cc:	607a      	str	r2, [r7, #4]
 80058ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058d4:	f7ff ff3e 	bl	8005754 <__NVIC_GetPriorityGrouping>
 80058d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	68b9      	ldr	r1, [r7, #8]
 80058de:	6978      	ldr	r0, [r7, #20]
 80058e0:	f7ff ff8e 	bl	8005800 <NVIC_EncodePriority>
 80058e4:	4602      	mov	r2, r0
 80058e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ea:	4611      	mov	r1, r2
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff ff5d 	bl	80057ac <__NVIC_SetPriority>
}
 80058f2:	bf00      	nop
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b082      	sub	sp, #8
 80058fe:	af00      	add	r7, sp, #0
 8005900:	4603      	mov	r3, r0
 8005902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005908:	4618      	mov	r0, r3
 800590a:	f7ff ff31 	bl	8005770 <__NVIC_EnableIRQ>
}
 800590e:	bf00      	nop
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b082      	sub	sp, #8
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7ff ffa2 	bl	8005868 <SysTick_Config>
 8005924:	4603      	mov	r3, r0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
	...

08005930 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800593c:	f7ff feb6 	bl	80056ac <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e099      	b.n	8005a80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0201 	bic.w	r2, r2, #1
 800596a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800596c:	e00f      	b.n	800598e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800596e:	f7ff fe9d 	bl	80056ac <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b05      	cmp	r3, #5
 800597a:	d908      	bls.n	800598e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2203      	movs	r2, #3
 8005986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e078      	b.n	8005a80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1e8      	bne.n	800596e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4b38      	ldr	r3, [pc, #224]	; (8005a88 <HAL_DMA_Init+0x158>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d107      	bne.n	80059f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	4313      	orrs	r3, r2
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f023 0307 	bic.w	r3, r3, #7
 8005a0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	d117      	bne.n	8005a52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00e      	beq.n	8005a52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fb01 	bl	800603c <DMA_CheckFifoParam>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d008      	beq.n	8005a52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2240      	movs	r2, #64	; 0x40
 8005a44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e016      	b.n	8005a80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fab8 	bl	8005fd0 <DMA_CalcBaseAndBitshift>
 8005a60:	4603      	mov	r3, r0
 8005a62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a68:	223f      	movs	r2, #63	; 0x3f
 8005a6a:	409a      	lsls	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	f010803f 	.word	0xf010803f

08005a8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d101      	bne.n	8005ab2 <HAL_DMA_Start_IT+0x26>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e040      	b.n	8005b34 <HAL_DMA_Start_IT+0xa8>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d12f      	bne.n	8005b26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2202      	movs	r2, #2
 8005aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	68b9      	ldr	r1, [r7, #8]
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 fa4a 	bl	8005f74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae4:	223f      	movs	r2, #63	; 0x3f
 8005ae6:	409a      	lsls	r2, r3
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0216 	orr.w	r2, r2, #22
 8005afa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d007      	beq.n	8005b14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0208 	orr.w	r2, r2, #8
 8005b12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	e005      	b.n	8005b32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b2e:	2302      	movs	r3, #2
 8005b30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b48:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005b4a:	f7ff fdaf 	bl	80056ac <HAL_GetTick>
 8005b4e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d008      	beq.n	8005b6e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2280      	movs	r2, #128	; 0x80
 8005b60:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e052      	b.n	8005c14 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0216 	bic.w	r2, r2, #22
 8005b7c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	695a      	ldr	r2, [r3, #20]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b8c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d103      	bne.n	8005b9e <HAL_DMA_Abort+0x62>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d007      	beq.n	8005bae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0208 	bic.w	r2, r2, #8
 8005bac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0201 	bic.w	r2, r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bbe:	e013      	b.n	8005be8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bc0:	f7ff fd74 	bl	80056ac <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b05      	cmp	r3, #5
 8005bcc:	d90c      	bls.n	8005be8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2203      	movs	r2, #3
 8005bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e015      	b.n	8005c14 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e4      	bne.n	8005bc0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bfa:	223f      	movs	r2, #63	; 0x3f
 8005bfc:	409a      	lsls	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d004      	beq.n	8005c3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2280      	movs	r2, #128	; 0x80
 8005c34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e00c      	b.n	8005c54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2205      	movs	r2, #5
 8005c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0201 	bic.w	r2, r2, #1
 8005c50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c6c:	4b8e      	ldr	r3, [pc, #568]	; (8005ea8 <HAL_DMA_IRQHandler+0x248>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a8e      	ldr	r2, [pc, #568]	; (8005eac <HAL_DMA_IRQHandler+0x24c>)
 8005c72:	fba2 2303 	umull	r2, r3, r2, r3
 8005c76:	0a9b      	lsrs	r3, r3, #10
 8005c78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c8a:	2208      	movs	r2, #8
 8005c8c:	409a      	lsls	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4013      	ands	r3, r2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d01a      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d013      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0204 	bic.w	r2, r2, #4
 8005cb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb8:	2208      	movs	r2, #8
 8005cba:	409a      	lsls	r2, r3
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc4:	f043 0201 	orr.w	r2, r3, #1
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	409a      	lsls	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d012      	beq.n	8005d02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00b      	beq.n	8005d02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cee:	2201      	movs	r2, #1
 8005cf0:	409a      	lsls	r2, r3
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfa:	f043 0202 	orr.w	r2, r3, #2
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d06:	2204      	movs	r2, #4
 8005d08:	409a      	lsls	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d012      	beq.n	8005d38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00b      	beq.n	8005d38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d24:	2204      	movs	r2, #4
 8005d26:	409a      	lsls	r2, r3
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d30:	f043 0204 	orr.w	r2, r3, #4
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d3c:	2210      	movs	r2, #16
 8005d3e:	409a      	lsls	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4013      	ands	r3, r2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d043      	beq.n	8005dd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0308 	and.w	r3, r3, #8
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d03c      	beq.n	8005dd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5a:	2210      	movs	r2, #16
 8005d5c:	409a      	lsls	r2, r3
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d018      	beq.n	8005da2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d108      	bne.n	8005d90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d024      	beq.n	8005dd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	4798      	blx	r3
 8005d8e:	e01f      	b.n	8005dd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01b      	beq.n	8005dd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	4798      	blx	r3
 8005da0:	e016      	b.n	8005dd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d107      	bne.n	8005dc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0208 	bic.w	r2, r2, #8
 8005dbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	409a      	lsls	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 808f 	beq.w	8005f00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0310 	and.w	r3, r3, #16
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 8087 	beq.w	8005f00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df6:	2220      	movs	r2, #32
 8005df8:	409a      	lsls	r2, r3
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b05      	cmp	r3, #5
 8005e08:	d136      	bne.n	8005e78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0216 	bic.w	r2, r2, #22
 8005e18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	695a      	ldr	r2, [r3, #20]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d103      	bne.n	8005e3a <HAL_DMA_IRQHandler+0x1da>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d007      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0208 	bic.w	r2, r2, #8
 8005e48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e4e:	223f      	movs	r2, #63	; 0x3f
 8005e50:	409a      	lsls	r2, r3
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d07e      	beq.n	8005f6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	4798      	blx	r3
        }
        return;
 8005e76:	e079      	b.n	8005f6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d01d      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10d      	bne.n	8005eb0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d031      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	4798      	blx	r3
 8005ea4:	e02c      	b.n	8005f00 <HAL_DMA_IRQHandler+0x2a0>
 8005ea6:	bf00      	nop
 8005ea8:	20000010 	.word	0x20000010
 8005eac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d023      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	4798      	blx	r3
 8005ec0:	e01e      	b.n	8005f00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10f      	bne.n	8005ef0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0210 	bic.w	r2, r2, #16
 8005ede:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d032      	beq.n	8005f6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d022      	beq.n	8005f5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2205      	movs	r2, #5
 8005f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0201 	bic.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	60bb      	str	r3, [r7, #8]
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d307      	bcc.n	8005f48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1f2      	bne.n	8005f2c <HAL_DMA_IRQHandler+0x2cc>
 8005f46:	e000      	b.n	8005f4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005f48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d005      	beq.n	8005f6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	4798      	blx	r3
 8005f6a:	e000      	b.n	8005f6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005f6c:	bf00      	nop
    }
  }
}
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	2b40      	cmp	r3, #64	; 0x40
 8005fa0:	d108      	bne.n	8005fb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005fb2:	e007      	b.n	8005fc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	60da      	str	r2, [r3, #12]
}
 8005fc4:	bf00      	nop
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	3b10      	subs	r3, #16
 8005fe0:	4a14      	ldr	r2, [pc, #80]	; (8006034 <DMA_CalcBaseAndBitshift+0x64>)
 8005fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe6:	091b      	lsrs	r3, r3, #4
 8005fe8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005fea:	4a13      	ldr	r2, [pc, #76]	; (8006038 <DMA_CalcBaseAndBitshift+0x68>)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d909      	bls.n	8006012 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006006:	f023 0303 	bic.w	r3, r3, #3
 800600a:	1d1a      	adds	r2, r3, #4
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	659a      	str	r2, [r3, #88]	; 0x58
 8006010:	e007      	b.n	8006022 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800601a:	f023 0303 	bic.w	r3, r3, #3
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006026:	4618      	mov	r0, r3
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	aaaaaaab 	.word	0xaaaaaaab
 8006038:	0800f37c 	.word	0x0800f37c

0800603c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d11f      	bne.n	8006096 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b03      	cmp	r3, #3
 800605a:	d856      	bhi.n	800610a <DMA_CheckFifoParam+0xce>
 800605c:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <DMA_CheckFifoParam+0x28>)
 800605e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006062:	bf00      	nop
 8006064:	08006075 	.word	0x08006075
 8006068:	08006087 	.word	0x08006087
 800606c:	08006075 	.word	0x08006075
 8006070:	0800610b 	.word	0x0800610b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d046      	beq.n	800610e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006084:	e043      	b.n	800610e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800608e:	d140      	bne.n	8006112 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006094:	e03d      	b.n	8006112 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800609e:	d121      	bne.n	80060e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	d837      	bhi.n	8006116 <DMA_CheckFifoParam+0xda>
 80060a6:	a201      	add	r2, pc, #4	; (adr r2, 80060ac <DMA_CheckFifoParam+0x70>)
 80060a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ac:	080060bd 	.word	0x080060bd
 80060b0:	080060c3 	.word	0x080060c3
 80060b4:	080060bd 	.word	0x080060bd
 80060b8:	080060d5 	.word	0x080060d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	73fb      	strb	r3, [r7, #15]
      break;
 80060c0:	e030      	b.n	8006124 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d025      	beq.n	800611a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060d2:	e022      	b.n	800611a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060dc:	d11f      	bne.n	800611e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80060e2:	e01c      	b.n	800611e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d903      	bls.n	80060f2 <DMA_CheckFifoParam+0xb6>
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d003      	beq.n	80060f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80060f0:	e018      	b.n	8006124 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	73fb      	strb	r3, [r7, #15]
      break;
 80060f6:	e015      	b.n	8006124 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00e      	beq.n	8006122 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	73fb      	strb	r3, [r7, #15]
      break;
 8006108:	e00b      	b.n	8006122 <DMA_CheckFifoParam+0xe6>
      break;
 800610a:	bf00      	nop
 800610c:	e00a      	b.n	8006124 <DMA_CheckFifoParam+0xe8>
      break;
 800610e:	bf00      	nop
 8006110:	e008      	b.n	8006124 <DMA_CheckFifoParam+0xe8>
      break;
 8006112:	bf00      	nop
 8006114:	e006      	b.n	8006124 <DMA_CheckFifoParam+0xe8>
      break;
 8006116:	bf00      	nop
 8006118:	e004      	b.n	8006124 <DMA_CheckFifoParam+0xe8>
      break;
 800611a:	bf00      	nop
 800611c:	e002      	b.n	8006124 <DMA_CheckFifoParam+0xe8>
      break;   
 800611e:	bf00      	nop
 8006120:	e000      	b.n	8006124 <DMA_CheckFifoParam+0xe8>
      break;
 8006122:	bf00      	nop
    }
  } 
  
  return status; 
 8006124:	7bfb      	ldrb	r3, [r7, #15]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop

08006134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006134:	b480      	push	{r7}
 8006136:	b089      	sub	sp, #36	; 0x24
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800613e:	2300      	movs	r3, #0
 8006140:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006142:	2300      	movs	r3, #0
 8006144:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006146:	2300      	movs	r3, #0
 8006148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800614a:	2300      	movs	r3, #0
 800614c:	61fb      	str	r3, [r7, #28]
 800614e:	e16b      	b.n	8006428 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006150:	2201      	movs	r2, #1
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	fa02 f303 	lsl.w	r3, r2, r3
 8006158:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4013      	ands	r3, r2
 8006162:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	429a      	cmp	r2, r3
 800616a:	f040 815a 	bne.w	8006422 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	2b01      	cmp	r3, #1
 8006178:	d005      	beq.n	8006186 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006182:	2b02      	cmp	r3, #2
 8006184:	d130      	bne.n	80061e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	2203      	movs	r2, #3
 8006192:	fa02 f303 	lsl.w	r3, r2, r3
 8006196:	43db      	mvns	r3, r3
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	4013      	ands	r3, r2
 800619c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	fa02 f303 	lsl.w	r3, r2, r3
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061bc:	2201      	movs	r2, #1
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	43db      	mvns	r3, r3
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	4013      	ands	r3, r2
 80061ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	091b      	lsrs	r3, r3, #4
 80061d2:	f003 0201 	and.w	r2, r3, #1
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	fa02 f303 	lsl.w	r3, r2, r3
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	4313      	orrs	r3, r2
 80061e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f003 0303 	and.w	r3, r3, #3
 80061f0:	2b03      	cmp	r3, #3
 80061f2:	d017      	beq.n	8006224 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	2203      	movs	r2, #3
 8006200:	fa02 f303 	lsl.w	r3, r2, r3
 8006204:	43db      	mvns	r3, r3
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	4013      	ands	r3, r2
 800620a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	fa02 f303 	lsl.w	r3, r2, r3
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	4313      	orrs	r3, r2
 800621c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f003 0303 	and.w	r3, r3, #3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d123      	bne.n	8006278 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	08da      	lsrs	r2, r3, #3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3208      	adds	r2, #8
 8006238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	220f      	movs	r2, #15
 8006248:	fa02 f303 	lsl.w	r3, r2, r3
 800624c:	43db      	mvns	r3, r3
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	4013      	ands	r3, r2
 8006252:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	691a      	ldr	r2, [r3, #16]
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	fa02 f303 	lsl.w	r3, r2, r3
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	4313      	orrs	r3, r2
 8006268:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	08da      	lsrs	r2, r3, #3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	3208      	adds	r2, #8
 8006272:	69b9      	ldr	r1, [r7, #24]
 8006274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	2203      	movs	r2, #3
 8006284:	fa02 f303 	lsl.w	r3, r2, r3
 8006288:	43db      	mvns	r3, r3
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	4013      	ands	r3, r2
 800628e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f003 0203 	and.w	r2, r3, #3
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	005b      	lsls	r3, r3, #1
 800629c:	fa02 f303 	lsl.w	r3, r2, r3
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 80b4 	beq.w	8006422 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062ba:	2300      	movs	r3, #0
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	4b60      	ldr	r3, [pc, #384]	; (8006440 <HAL_GPIO_Init+0x30c>)
 80062c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c2:	4a5f      	ldr	r2, [pc, #380]	; (8006440 <HAL_GPIO_Init+0x30c>)
 80062c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062c8:	6453      	str	r3, [r2, #68]	; 0x44
 80062ca:	4b5d      	ldr	r3, [pc, #372]	; (8006440 <HAL_GPIO_Init+0x30c>)
 80062cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062d6:	4a5b      	ldr	r2, [pc, #364]	; (8006444 <HAL_GPIO_Init+0x310>)
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	089b      	lsrs	r3, r3, #2
 80062dc:	3302      	adds	r3, #2
 80062de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	220f      	movs	r2, #15
 80062ee:	fa02 f303 	lsl.w	r3, r2, r3
 80062f2:	43db      	mvns	r3, r3
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	4013      	ands	r3, r2
 80062f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a52      	ldr	r2, [pc, #328]	; (8006448 <HAL_GPIO_Init+0x314>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d02b      	beq.n	800635a <HAL_GPIO_Init+0x226>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a51      	ldr	r2, [pc, #324]	; (800644c <HAL_GPIO_Init+0x318>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d025      	beq.n	8006356 <HAL_GPIO_Init+0x222>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a50      	ldr	r2, [pc, #320]	; (8006450 <HAL_GPIO_Init+0x31c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d01f      	beq.n	8006352 <HAL_GPIO_Init+0x21e>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a4f      	ldr	r2, [pc, #316]	; (8006454 <HAL_GPIO_Init+0x320>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d019      	beq.n	800634e <HAL_GPIO_Init+0x21a>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a4e      	ldr	r2, [pc, #312]	; (8006458 <HAL_GPIO_Init+0x324>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d013      	beq.n	800634a <HAL_GPIO_Init+0x216>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a4d      	ldr	r2, [pc, #308]	; (800645c <HAL_GPIO_Init+0x328>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d00d      	beq.n	8006346 <HAL_GPIO_Init+0x212>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a4c      	ldr	r2, [pc, #304]	; (8006460 <HAL_GPIO_Init+0x32c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d007      	beq.n	8006342 <HAL_GPIO_Init+0x20e>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a4b      	ldr	r2, [pc, #300]	; (8006464 <HAL_GPIO_Init+0x330>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d101      	bne.n	800633e <HAL_GPIO_Init+0x20a>
 800633a:	2307      	movs	r3, #7
 800633c:	e00e      	b.n	800635c <HAL_GPIO_Init+0x228>
 800633e:	2308      	movs	r3, #8
 8006340:	e00c      	b.n	800635c <HAL_GPIO_Init+0x228>
 8006342:	2306      	movs	r3, #6
 8006344:	e00a      	b.n	800635c <HAL_GPIO_Init+0x228>
 8006346:	2305      	movs	r3, #5
 8006348:	e008      	b.n	800635c <HAL_GPIO_Init+0x228>
 800634a:	2304      	movs	r3, #4
 800634c:	e006      	b.n	800635c <HAL_GPIO_Init+0x228>
 800634e:	2303      	movs	r3, #3
 8006350:	e004      	b.n	800635c <HAL_GPIO_Init+0x228>
 8006352:	2302      	movs	r3, #2
 8006354:	e002      	b.n	800635c <HAL_GPIO_Init+0x228>
 8006356:	2301      	movs	r3, #1
 8006358:	e000      	b.n	800635c <HAL_GPIO_Init+0x228>
 800635a:	2300      	movs	r3, #0
 800635c:	69fa      	ldr	r2, [r7, #28]
 800635e:	f002 0203 	and.w	r2, r2, #3
 8006362:	0092      	lsls	r2, r2, #2
 8006364:	4093      	lsls	r3, r2
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	4313      	orrs	r3, r2
 800636a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800636c:	4935      	ldr	r1, [pc, #212]	; (8006444 <HAL_GPIO_Init+0x310>)
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	089b      	lsrs	r3, r3, #2
 8006372:	3302      	adds	r3, #2
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800637a:	4b3b      	ldr	r3, [pc, #236]	; (8006468 <HAL_GPIO_Init+0x334>)
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	43db      	mvns	r3, r3
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	4013      	ands	r3, r2
 8006388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	4313      	orrs	r3, r2
 800639c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800639e:	4a32      	ldr	r2, [pc, #200]	; (8006468 <HAL_GPIO_Init+0x334>)
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80063a4:	4b30      	ldr	r3, [pc, #192]	; (8006468 <HAL_GPIO_Init+0x334>)
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	43db      	mvns	r3, r3
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	4013      	ands	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063c8:	4a27      	ldr	r2, [pc, #156]	; (8006468 <HAL_GPIO_Init+0x334>)
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80063ce:	4b26      	ldr	r3, [pc, #152]	; (8006468 <HAL_GPIO_Init+0x334>)
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	43db      	mvns	r3, r3
 80063d8:	69ba      	ldr	r2, [r7, #24]
 80063da:	4013      	ands	r3, r2
 80063dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063f2:	4a1d      	ldr	r2, [pc, #116]	; (8006468 <HAL_GPIO_Init+0x334>)
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063f8:	4b1b      	ldr	r3, [pc, #108]	; (8006468 <HAL_GPIO_Init+0x334>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	43db      	mvns	r3, r3
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	4013      	ands	r3, r2
 8006406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800641c:	4a12      	ldr	r2, [pc, #72]	; (8006468 <HAL_GPIO_Init+0x334>)
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	3301      	adds	r3, #1
 8006426:	61fb      	str	r3, [r7, #28]
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	2b0f      	cmp	r3, #15
 800642c:	f67f ae90 	bls.w	8006150 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006430:	bf00      	nop
 8006432:	bf00      	nop
 8006434:	3724      	adds	r7, #36	; 0x24
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	40023800 	.word	0x40023800
 8006444:	40013800 	.word	0x40013800
 8006448:	40020000 	.word	0x40020000
 800644c:	40020400 	.word	0x40020400
 8006450:	40020800 	.word	0x40020800
 8006454:	40020c00 	.word	0x40020c00
 8006458:	40021000 	.word	0x40021000
 800645c:	40021400 	.word	0x40021400
 8006460:	40021800 	.word	0x40021800
 8006464:	40021c00 	.word	0x40021c00
 8006468:	40013c00 	.word	0x40013c00

0800646c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	460b      	mov	r3, r1
 8006476:	807b      	strh	r3, [r7, #2]
 8006478:	4613      	mov	r3, r2
 800647a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800647c:	787b      	ldrb	r3, [r7, #1]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006482:	887a      	ldrh	r2, [r7, #2]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006488:	e003      	b.n	8006492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800648a:	887b      	ldrh	r3, [r7, #2]
 800648c:	041a      	lsls	r2, r3, #16
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	619a      	str	r2, [r3, #24]
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
	...

080064a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e12b      	b.n	800670a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d106      	bne.n	80064cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fe fd0e 	bl	8004ee8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2224      	movs	r2, #36	; 0x24
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0201 	bic.w	r2, r2, #1
 80064e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006502:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006504:	f001 fbbc 	bl	8007c80 <HAL_RCC_GetPCLK1Freq>
 8006508:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	4a81      	ldr	r2, [pc, #516]	; (8006714 <HAL_I2C_Init+0x274>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d807      	bhi.n	8006524 <HAL_I2C_Init+0x84>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4a80      	ldr	r2, [pc, #512]	; (8006718 <HAL_I2C_Init+0x278>)
 8006518:	4293      	cmp	r3, r2
 800651a:	bf94      	ite	ls
 800651c:	2301      	movls	r3, #1
 800651e:	2300      	movhi	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	e006      	b.n	8006532 <HAL_I2C_Init+0x92>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4a7d      	ldr	r2, [pc, #500]	; (800671c <HAL_I2C_Init+0x27c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	bf94      	ite	ls
 800652c:	2301      	movls	r3, #1
 800652e:	2300      	movhi	r3, #0
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e0e7      	b.n	800670a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4a78      	ldr	r2, [pc, #480]	; (8006720 <HAL_I2C_Init+0x280>)
 800653e:	fba2 2303 	umull	r2, r3, r2, r3
 8006542:	0c9b      	lsrs	r3, r3, #18
 8006544:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	430a      	orrs	r2, r1
 8006558:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	4a6a      	ldr	r2, [pc, #424]	; (8006714 <HAL_I2C_Init+0x274>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d802      	bhi.n	8006574 <HAL_I2C_Init+0xd4>
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	3301      	adds	r3, #1
 8006572:	e009      	b.n	8006588 <HAL_I2C_Init+0xe8>
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800657a:	fb02 f303 	mul.w	r3, r2, r3
 800657e:	4a69      	ldr	r2, [pc, #420]	; (8006724 <HAL_I2C_Init+0x284>)
 8006580:	fba2 2303 	umull	r2, r3, r2, r3
 8006584:	099b      	lsrs	r3, r3, #6
 8006586:	3301      	adds	r3, #1
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6812      	ldr	r2, [r2, #0]
 800658c:	430b      	orrs	r3, r1
 800658e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800659a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	495c      	ldr	r1, [pc, #368]	; (8006714 <HAL_I2C_Init+0x274>)
 80065a4:	428b      	cmp	r3, r1
 80065a6:	d819      	bhi.n	80065dc <HAL_I2C_Init+0x13c>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	1e59      	subs	r1, r3, #1
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	005b      	lsls	r3, r3, #1
 80065b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80065b6:	1c59      	adds	r1, r3, #1
 80065b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065bc:	400b      	ands	r3, r1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <HAL_I2C_Init+0x138>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	1e59      	subs	r1, r3, #1
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	005b      	lsls	r3, r3, #1
 80065cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80065d0:	3301      	adds	r3, #1
 80065d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065d6:	e051      	b.n	800667c <HAL_I2C_Init+0x1dc>
 80065d8:	2304      	movs	r3, #4
 80065da:	e04f      	b.n	800667c <HAL_I2C_Init+0x1dc>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d111      	bne.n	8006608 <HAL_I2C_Init+0x168>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	1e58      	subs	r0, r3, #1
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6859      	ldr	r1, [r3, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	440b      	add	r3, r1
 80065f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80065f6:	3301      	adds	r3, #1
 80065f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	bf0c      	ite	eq
 8006600:	2301      	moveq	r3, #1
 8006602:	2300      	movne	r3, #0
 8006604:	b2db      	uxtb	r3, r3
 8006606:	e012      	b.n	800662e <HAL_I2C_Init+0x18e>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	1e58      	subs	r0, r3, #1
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6859      	ldr	r1, [r3, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	440b      	add	r3, r1
 8006616:	0099      	lsls	r1, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	fbb0 f3f3 	udiv	r3, r0, r3
 800661e:	3301      	adds	r3, #1
 8006620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006624:	2b00      	cmp	r3, #0
 8006626:	bf0c      	ite	eq
 8006628:	2301      	moveq	r3, #1
 800662a:	2300      	movne	r3, #0
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <HAL_I2C_Init+0x196>
 8006632:	2301      	movs	r3, #1
 8006634:	e022      	b.n	800667c <HAL_I2C_Init+0x1dc>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10e      	bne.n	800665c <HAL_I2C_Init+0x1bc>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	1e58      	subs	r0, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6859      	ldr	r1, [r3, #4]
 8006646:	460b      	mov	r3, r1
 8006648:	005b      	lsls	r3, r3, #1
 800664a:	440b      	add	r3, r1
 800664c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006650:	3301      	adds	r3, #1
 8006652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800665a:	e00f      	b.n	800667c <HAL_I2C_Init+0x1dc>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	1e58      	subs	r0, r3, #1
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6859      	ldr	r1, [r3, #4]
 8006664:	460b      	mov	r3, r1
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	440b      	add	r3, r1
 800666a:	0099      	lsls	r1, r3, #2
 800666c:	440b      	add	r3, r1
 800666e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006672:	3301      	adds	r3, #1
 8006674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006678:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	6809      	ldr	r1, [r1, #0]
 8006680:	4313      	orrs	r3, r2
 8006682:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69da      	ldr	r2, [r3, #28]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	431a      	orrs	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80066aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6911      	ldr	r1, [r2, #16]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	68d2      	ldr	r2, [r2, #12]
 80066b6:	4311      	orrs	r1, r2
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6812      	ldr	r2, [r2, #0]
 80066bc:	430b      	orrs	r3, r1
 80066be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695a      	ldr	r2, [r3, #20]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	430a      	orrs	r2, r1
 80066da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0201 	orr.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	000186a0 	.word	0x000186a0
 8006718:	001e847f 	.word	0x001e847f
 800671c:	003d08ff 	.word	0x003d08ff
 8006720:	431bde83 	.word	0x431bde83
 8006724:	10624dd3 	.word	0x10624dd3

08006728 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b088      	sub	sp, #32
 800672c:	af02      	add	r7, sp, #8
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	4608      	mov	r0, r1
 8006732:	4611      	mov	r1, r2
 8006734:	461a      	mov	r2, r3
 8006736:	4603      	mov	r3, r0
 8006738:	817b      	strh	r3, [r7, #10]
 800673a:	460b      	mov	r3, r1
 800673c:	813b      	strh	r3, [r7, #8]
 800673e:	4613      	mov	r3, r2
 8006740:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006742:	f7fe ffb3 	bl	80056ac <HAL_GetTick>
 8006746:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b20      	cmp	r3, #32
 8006752:	f040 80d9 	bne.w	8006908 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	2319      	movs	r3, #25
 800675c:	2201      	movs	r2, #1
 800675e:	496d      	ldr	r1, [pc, #436]	; (8006914 <HAL_I2C_Mem_Write+0x1ec>)
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 fc7f 	bl	8007064 <I2C_WaitOnFlagUntilTimeout>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800676c:	2302      	movs	r3, #2
 800676e:	e0cc      	b.n	800690a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006776:	2b01      	cmp	r3, #1
 8006778:	d101      	bne.n	800677e <HAL_I2C_Mem_Write+0x56>
 800677a:	2302      	movs	r3, #2
 800677c:	e0c5      	b.n	800690a <HAL_I2C_Mem_Write+0x1e2>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b01      	cmp	r3, #1
 8006792:	d007      	beq.n	80067a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0201 	orr.w	r2, r2, #1
 80067a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2221      	movs	r2, #33	; 0x21
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2240      	movs	r2, #64	; 0x40
 80067c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6a3a      	ldr	r2, [r7, #32]
 80067ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80067d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4a4d      	ldr	r2, [pc, #308]	; (8006918 <HAL_I2C_Mem_Write+0x1f0>)
 80067e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067e6:	88f8      	ldrh	r0, [r7, #6]
 80067e8:	893a      	ldrh	r2, [r7, #8]
 80067ea:	8979      	ldrh	r1, [r7, #10]
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	9301      	str	r3, [sp, #4]
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	4603      	mov	r3, r0
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 fab6 	bl	8006d68 <I2C_RequestMemoryWrite>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d052      	beq.n	80068a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e081      	b.n	800690a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f000 fd00 	bl	8007210 <I2C_WaitOnTXEFlagUntilTimeout>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00d      	beq.n	8006832 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	2b04      	cmp	r3, #4
 800681c:	d107      	bne.n	800682e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800682c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e06b      	b.n	800690a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	781a      	ldrb	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800684c:	3b01      	subs	r3, #1
 800684e:	b29a      	uxth	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006858:	b29b      	uxth	r3, r3
 800685a:	3b01      	subs	r3, #1
 800685c:	b29a      	uxth	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	f003 0304 	and.w	r3, r3, #4
 800686c:	2b04      	cmp	r3, #4
 800686e:	d11b      	bne.n	80068a8 <HAL_I2C_Mem_Write+0x180>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006874:	2b00      	cmp	r3, #0
 8006876:	d017      	beq.n	80068a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	781a      	ldrb	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800689e:	b29b      	uxth	r3, r3
 80068a0:	3b01      	subs	r3, #1
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1aa      	bne.n	8006806 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f000 fcec 	bl	8007292 <I2C_WaitOnBTFFlagUntilTimeout>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00d      	beq.n	80068dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c4:	2b04      	cmp	r3, #4
 80068c6:	d107      	bne.n	80068d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e016      	b.n	800690a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	e000      	b.n	800690a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006908:	2302      	movs	r3, #2
  }
}
 800690a:	4618      	mov	r0, r3
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	00100002 	.word	0x00100002
 8006918:	ffff0000 	.word	0xffff0000

0800691c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b08c      	sub	sp, #48	; 0x30
 8006920:	af02      	add	r7, sp, #8
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	4608      	mov	r0, r1
 8006926:	4611      	mov	r1, r2
 8006928:	461a      	mov	r2, r3
 800692a:	4603      	mov	r3, r0
 800692c:	817b      	strh	r3, [r7, #10]
 800692e:	460b      	mov	r3, r1
 8006930:	813b      	strh	r3, [r7, #8]
 8006932:	4613      	mov	r3, r2
 8006934:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006936:	f7fe feb9 	bl	80056ac <HAL_GetTick>
 800693a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b20      	cmp	r3, #32
 8006946:	f040 8208 	bne.w	8006d5a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	2319      	movs	r3, #25
 8006950:	2201      	movs	r2, #1
 8006952:	497b      	ldr	r1, [pc, #492]	; (8006b40 <HAL_I2C_Mem_Read+0x224>)
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 fb85 	bl	8007064 <I2C_WaitOnFlagUntilTimeout>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006960:	2302      	movs	r3, #2
 8006962:	e1fb      	b.n	8006d5c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800696a:	2b01      	cmp	r3, #1
 800696c:	d101      	bne.n	8006972 <HAL_I2C_Mem_Read+0x56>
 800696e:	2302      	movs	r3, #2
 8006970:	e1f4      	b.n	8006d5c <HAL_I2C_Mem_Read+0x440>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b01      	cmp	r3, #1
 8006986:	d007      	beq.n	8006998 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0201 	orr.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2222      	movs	r2, #34	; 0x22
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2240      	movs	r2, #64	; 0x40
 80069b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80069c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4a5b      	ldr	r2, [pc, #364]	; (8006b44 <HAL_I2C_Mem_Read+0x228>)
 80069d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069da:	88f8      	ldrh	r0, [r7, #6]
 80069dc:	893a      	ldrh	r2, [r7, #8]
 80069de:	8979      	ldrh	r1, [r7, #10]
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	9301      	str	r3, [sp, #4]
 80069e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	4603      	mov	r3, r0
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 fa52 	bl	8006e94 <I2C_RequestMemoryRead>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e1b0      	b.n	8006d5c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d113      	bne.n	8006a2a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a02:	2300      	movs	r3, #0
 8006a04:	623b      	str	r3, [r7, #32]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	623b      	str	r3, [r7, #32]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	623b      	str	r3, [r7, #32]
 8006a16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	e184      	b.n	8006d34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d11b      	bne.n	8006a6a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a42:	2300      	movs	r3, #0
 8006a44:	61fb      	str	r3, [r7, #28]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	61fb      	str	r3, [r7, #28]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	61fb      	str	r3, [r7, #28]
 8006a56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	e164      	b.n	8006d34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d11b      	bne.n	8006aaa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a92:	2300      	movs	r3, #0
 8006a94:	61bb      	str	r3, [r7, #24]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	61bb      	str	r3, [r7, #24]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	61bb      	str	r3, [r7, #24]
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	e144      	b.n	8006d34 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aaa:	2300      	movs	r3, #0
 8006aac:	617b      	str	r3, [r7, #20]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	617b      	str	r3, [r7, #20]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	617b      	str	r3, [r7, #20]
 8006abe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006ac0:	e138      	b.n	8006d34 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	f200 80f1 	bhi.w	8006cae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d123      	bne.n	8006b1c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 fc1b 	bl	8007314 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e139      	b.n	8006d5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691a      	ldr	r2, [r3, #16]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af2:	b2d2      	uxtb	r2, r2
 8006af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b04:	3b01      	subs	r3, #1
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b1a:	e10b      	b.n	8006d34 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d14e      	bne.n	8006bc2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	4906      	ldr	r1, [pc, #24]	; (8006b48 <HAL_I2C_Mem_Read+0x22c>)
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 fa98 	bl	8007064 <I2C_WaitOnFlagUntilTimeout>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d008      	beq.n	8006b4c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e10e      	b.n	8006d5c <HAL_I2C_Mem_Read+0x440>
 8006b3e:	bf00      	nop
 8006b40:	00100002 	.word	0x00100002
 8006b44:	ffff0000 	.word	0xffff0000
 8006b48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	691a      	ldr	r2, [r3, #16]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	3b01      	subs	r3, #1
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691a      	ldr	r2, [r3, #16]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bc0:	e0b8      	b.n	8006d34 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc8:	2200      	movs	r2, #0
 8006bca:	4966      	ldr	r1, [pc, #408]	; (8006d64 <HAL_I2C_Mem_Read+0x448>)
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 fa49 	bl	8007064 <I2C_WaitOnFlagUntilTimeout>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e0bf      	b.n	8006d5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	691a      	ldr	r2, [r3, #16]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	b2d2      	uxtb	r2, r2
 8006bf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	3b01      	subs	r3, #1
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c24:	2200      	movs	r2, #0
 8006c26:	494f      	ldr	r1, [pc, #316]	; (8006d64 <HAL_I2C_Mem_Read+0x448>)
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 fa1b 	bl	8007064 <I2C_WaitOnFlagUntilTimeout>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e091      	b.n	8006d5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	691a      	ldr	r2, [r3, #16]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c64:	3b01      	subs	r3, #1
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	3b01      	subs	r3, #1
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	691a      	ldr	r2, [r3, #16]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	b2d2      	uxtb	r2, r2
 8006c86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c96:	3b01      	subs	r3, #1
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cac:	e042      	b.n	8006d34 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f000 fb2e 	bl	8007314 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e04c      	b.n	8006d5c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	691a      	ldr	r2, [r3, #16]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	b2d2      	uxtb	r2, r2
 8006cce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	3b01      	subs	r3, #1
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	f003 0304 	and.w	r3, r3, #4
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	d118      	bne.n	8006d34 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691a      	ldr	r2, [r3, #16]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	b2d2      	uxtb	r2, r2
 8006d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f47f aec2 	bne.w	8006ac2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	e000      	b.n	8006d5c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006d5a:	2302      	movs	r3, #2
  }
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3728      	adds	r7, #40	; 0x28
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	00010004 	.word	0x00010004

08006d68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af02      	add	r7, sp, #8
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	4608      	mov	r0, r1
 8006d72:	4611      	mov	r1, r2
 8006d74:	461a      	mov	r2, r3
 8006d76:	4603      	mov	r3, r0
 8006d78:	817b      	strh	r3, [r7, #10]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	813b      	strh	r3, [r7, #8]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 f960 	bl	8007064 <I2C_WaitOnFlagUntilTimeout>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00d      	beq.n	8006dc6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006db8:	d103      	bne.n	8006dc2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e05f      	b.n	8006e86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006dc6:	897b      	ldrh	r3, [r7, #10]
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	461a      	mov	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006dd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	6a3a      	ldr	r2, [r7, #32]
 8006dda:	492d      	ldr	r1, [pc, #180]	; (8006e90 <I2C_RequestMemoryWrite+0x128>)
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 f998 	bl	8007112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e04c      	b.n	8006e86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dec:	2300      	movs	r3, #0
 8006dee:	617b      	str	r3, [r7, #20]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	617b      	str	r3, [r7, #20]
 8006e00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e04:	6a39      	ldr	r1, [r7, #32]
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 fa02 	bl	8007210 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00d      	beq.n	8006e2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	2b04      	cmp	r3, #4
 8006e18:	d107      	bne.n	8006e2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e02b      	b.n	8006e86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e2e:	88fb      	ldrh	r3, [r7, #6]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d105      	bne.n	8006e40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e34:	893b      	ldrh	r3, [r7, #8]
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	611a      	str	r2, [r3, #16]
 8006e3e:	e021      	b.n	8006e84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e40:	893b      	ldrh	r3, [r7, #8]
 8006e42:	0a1b      	lsrs	r3, r3, #8
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e50:	6a39      	ldr	r1, [r7, #32]
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 f9dc 	bl	8007210 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00d      	beq.n	8006e7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d107      	bne.n	8006e76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e005      	b.n	8006e86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e7a:	893b      	ldrh	r3, [r7, #8]
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	00010002 	.word	0x00010002

08006e94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b088      	sub	sp, #32
 8006e98:	af02      	add	r7, sp, #8
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	817b      	strh	r3, [r7, #10]
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	813b      	strh	r3, [r7, #8]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ebc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ecc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 f8c2 	bl	8007064 <I2C_WaitOnFlagUntilTimeout>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00d      	beq.n	8006f02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ef4:	d103      	bne.n	8006efe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006efc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e0aa      	b.n	8007058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f02:	897b      	ldrh	r3, [r7, #10]
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	461a      	mov	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	6a3a      	ldr	r2, [r7, #32]
 8006f16:	4952      	ldr	r1, [pc, #328]	; (8007060 <I2C_RequestMemoryRead+0x1cc>)
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 f8fa 	bl	8007112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e097      	b.n	8007058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f28:	2300      	movs	r3, #0
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	617b      	str	r3, [r7, #20]
 8006f3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f40:	6a39      	ldr	r1, [r7, #32]
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 f964 	bl	8007210 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00d      	beq.n	8006f6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	d107      	bne.n	8006f66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e076      	b.n	8007058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f6a:	88fb      	ldrh	r3, [r7, #6]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d105      	bne.n	8006f7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f70:	893b      	ldrh	r3, [r7, #8]
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	611a      	str	r2, [r3, #16]
 8006f7a:	e021      	b.n	8006fc0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f7c:	893b      	ldrh	r3, [r7, #8]
 8006f7e:	0a1b      	lsrs	r3, r3, #8
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f8c:	6a39      	ldr	r1, [r7, #32]
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f000 f93e 	bl	8007210 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00d      	beq.n	8006fb6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9e:	2b04      	cmp	r3, #4
 8006fa0:	d107      	bne.n	8006fb2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e050      	b.n	8007058 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fb6:	893b      	ldrh	r3, [r7, #8]
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc2:	6a39      	ldr	r1, [r7, #32]
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f000 f923 	bl	8007210 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00d      	beq.n	8006fec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d107      	bne.n	8006fe8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fe6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e035      	b.n	8007058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ffa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	2200      	movs	r2, #0
 8007004:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 f82b 	bl	8007064 <I2C_WaitOnFlagUntilTimeout>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00d      	beq.n	8007030 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800701e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007022:	d103      	bne.n	800702c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800702a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e013      	b.n	8007058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007030:	897b      	ldrh	r3, [r7, #10]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	f043 0301 	orr.w	r3, r3, #1
 8007038:	b2da      	uxtb	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	6a3a      	ldr	r2, [r7, #32]
 8007044:	4906      	ldr	r1, [pc, #24]	; (8007060 <I2C_RequestMemoryRead+0x1cc>)
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 f863 	bl	8007112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e000      	b.n	8007058 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	00010002 	.word	0x00010002

08007064 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	603b      	str	r3, [r7, #0]
 8007070:	4613      	mov	r3, r2
 8007072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007074:	e025      	b.n	80070c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800707c:	d021      	beq.n	80070c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800707e:	f7fe fb15 	bl	80056ac <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d302      	bcc.n	8007094 <I2C_WaitOnFlagUntilTimeout+0x30>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d116      	bne.n	80070c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2220      	movs	r2, #32
 800709e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ae:	f043 0220 	orr.w	r2, r3, #32
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e023      	b.n	800710a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	0c1b      	lsrs	r3, r3, #16
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d10d      	bne.n	80070e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	43da      	mvns	r2, r3
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	4013      	ands	r3, r2
 80070d8:	b29b      	uxth	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	bf0c      	ite	eq
 80070de:	2301      	moveq	r3, #1
 80070e0:	2300      	movne	r3, #0
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	461a      	mov	r2, r3
 80070e6:	e00c      	b.n	8007102 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	43da      	mvns	r2, r3
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	4013      	ands	r3, r2
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	bf0c      	ite	eq
 80070fa:	2301      	moveq	r3, #1
 80070fc:	2300      	movne	r3, #0
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	461a      	mov	r2, r3
 8007102:	79fb      	ldrb	r3, [r7, #7]
 8007104:	429a      	cmp	r2, r3
 8007106:	d0b6      	beq.n	8007076 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	60f8      	str	r0, [r7, #12]
 800711a:	60b9      	str	r1, [r7, #8]
 800711c:	607a      	str	r2, [r7, #4]
 800711e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007120:	e051      	b.n	80071c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800712c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007130:	d123      	bne.n	800717a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007140:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800714a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2220      	movs	r2, #32
 8007156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	f043 0204 	orr.w	r2, r3, #4
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e046      	b.n	8007208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007180:	d021      	beq.n	80071c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007182:	f7fe fa93 	bl	80056ac <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	429a      	cmp	r2, r3
 8007190:	d302      	bcc.n	8007198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d116      	bne.n	80071c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	f043 0220 	orr.w	r2, r3, #32
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e020      	b.n	8007208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	0c1b      	lsrs	r3, r3, #16
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d10c      	bne.n	80071ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	43da      	mvns	r2, r3
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	4013      	ands	r3, r2
 80071dc:	b29b      	uxth	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	bf14      	ite	ne
 80071e2:	2301      	movne	r3, #1
 80071e4:	2300      	moveq	r3, #0
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	e00b      	b.n	8007202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	43da      	mvns	r2, r3
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	4013      	ands	r3, r2
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	bf14      	ite	ne
 80071fc:	2301      	movne	r3, #1
 80071fe:	2300      	moveq	r3, #0
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d18d      	bne.n	8007122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800721c:	e02d      	b.n	800727a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 f8ce 	bl	80073c0 <I2C_IsAcknowledgeFailed>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d001      	beq.n	800722e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e02d      	b.n	800728a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007234:	d021      	beq.n	800727a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007236:	f7fe fa39 	bl	80056ac <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	429a      	cmp	r2, r3
 8007244:	d302      	bcc.n	800724c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d116      	bne.n	800727a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2220      	movs	r2, #32
 8007256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	f043 0220 	orr.w	r2, r3, #32
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e007      	b.n	800728a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007284:	2b80      	cmp	r3, #128	; 0x80
 8007286:	d1ca      	bne.n	800721e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b084      	sub	sp, #16
 8007296:	af00      	add	r7, sp, #0
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	60b9      	str	r1, [r7, #8]
 800729c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800729e:	e02d      	b.n	80072fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 f88d 	bl	80073c0 <I2C_IsAcknowledgeFailed>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e02d      	b.n	800730c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072b6:	d021      	beq.n	80072fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072b8:	f7fe f9f8 	bl	80056ac <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d302      	bcc.n	80072ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d116      	bne.n	80072fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e8:	f043 0220 	orr.w	r2, r3, #32
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e007      	b.n	800730c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	f003 0304 	and.w	r3, r3, #4
 8007306:	2b04      	cmp	r3, #4
 8007308:	d1ca      	bne.n	80072a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007320:	e042      	b.n	80073a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	f003 0310 	and.w	r3, r3, #16
 800732c:	2b10      	cmp	r3, #16
 800732e:	d119      	bne.n	8007364 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f06f 0210 	mvn.w	r2, #16
 8007338:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2220      	movs	r2, #32
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e029      	b.n	80073b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007364:	f7fe f9a2 	bl	80056ac <HAL_GetTick>
 8007368:	4602      	mov	r2, r0
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	429a      	cmp	r2, r3
 8007372:	d302      	bcc.n	800737a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d116      	bne.n	80073a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007394:	f043 0220 	orr.w	r2, r3, #32
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e007      	b.n	80073b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b2:	2b40      	cmp	r3, #64	; 0x40
 80073b4:	d1b5      	bne.n	8007322 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073d6:	d11b      	bne.n	8007410 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fc:	f043 0204 	orr.w	r2, r3, #4
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e000      	b.n	8007412 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
	...

08007420 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e267      	b.n	8007902 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	d075      	beq.n	800752a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800743e:	4b88      	ldr	r3, [pc, #544]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f003 030c 	and.w	r3, r3, #12
 8007446:	2b04      	cmp	r3, #4
 8007448:	d00c      	beq.n	8007464 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800744a:	4b85      	ldr	r3, [pc, #532]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007452:	2b08      	cmp	r3, #8
 8007454:	d112      	bne.n	800747c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007456:	4b82      	ldr	r3, [pc, #520]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800745e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007462:	d10b      	bne.n	800747c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007464:	4b7e      	ldr	r3, [pc, #504]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d05b      	beq.n	8007528 <HAL_RCC_OscConfig+0x108>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d157      	bne.n	8007528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e242      	b.n	8007902 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007484:	d106      	bne.n	8007494 <HAL_RCC_OscConfig+0x74>
 8007486:	4b76      	ldr	r3, [pc, #472]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a75      	ldr	r2, [pc, #468]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 800748c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007490:	6013      	str	r3, [r2, #0]
 8007492:	e01d      	b.n	80074d0 <HAL_RCC_OscConfig+0xb0>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800749c:	d10c      	bne.n	80074b8 <HAL_RCC_OscConfig+0x98>
 800749e:	4b70      	ldr	r3, [pc, #448]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a6f      	ldr	r2, [pc, #444]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 80074a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074a8:	6013      	str	r3, [r2, #0]
 80074aa:	4b6d      	ldr	r3, [pc, #436]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a6c      	ldr	r2, [pc, #432]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 80074b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074b4:	6013      	str	r3, [r2, #0]
 80074b6:	e00b      	b.n	80074d0 <HAL_RCC_OscConfig+0xb0>
 80074b8:	4b69      	ldr	r3, [pc, #420]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a68      	ldr	r2, [pc, #416]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 80074be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074c2:	6013      	str	r3, [r2, #0]
 80074c4:	4b66      	ldr	r3, [pc, #408]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a65      	ldr	r2, [pc, #404]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 80074ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d013      	beq.n	8007500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074d8:	f7fe f8e8 	bl	80056ac <HAL_GetTick>
 80074dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074de:	e008      	b.n	80074f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074e0:	f7fe f8e4 	bl	80056ac <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b64      	cmp	r3, #100	; 0x64
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e207      	b.n	8007902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074f2:	4b5b      	ldr	r3, [pc, #364]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0f0      	beq.n	80074e0 <HAL_RCC_OscConfig+0xc0>
 80074fe:	e014      	b.n	800752a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007500:	f7fe f8d4 	bl	80056ac <HAL_GetTick>
 8007504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007506:	e008      	b.n	800751a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007508:	f7fe f8d0 	bl	80056ac <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	2b64      	cmp	r3, #100	; 0x64
 8007514:	d901      	bls.n	800751a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e1f3      	b.n	8007902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800751a:	4b51      	ldr	r3, [pc, #324]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1f0      	bne.n	8007508 <HAL_RCC_OscConfig+0xe8>
 8007526:	e000      	b.n	800752a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d063      	beq.n	80075fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007536:	4b4a      	ldr	r3, [pc, #296]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f003 030c 	and.w	r3, r3, #12
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00b      	beq.n	800755a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007542:	4b47      	ldr	r3, [pc, #284]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800754a:	2b08      	cmp	r3, #8
 800754c:	d11c      	bne.n	8007588 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800754e:	4b44      	ldr	r3, [pc, #272]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d116      	bne.n	8007588 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800755a:	4b41      	ldr	r3, [pc, #260]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	2b00      	cmp	r3, #0
 8007564:	d005      	beq.n	8007572 <HAL_RCC_OscConfig+0x152>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d001      	beq.n	8007572 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e1c7      	b.n	8007902 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007572:	4b3b      	ldr	r3, [pc, #236]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	4937      	ldr	r1, [pc, #220]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 8007582:	4313      	orrs	r3, r2
 8007584:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007586:	e03a      	b.n	80075fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d020      	beq.n	80075d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007590:	4b34      	ldr	r3, [pc, #208]	; (8007664 <HAL_RCC_OscConfig+0x244>)
 8007592:	2201      	movs	r2, #1
 8007594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007596:	f7fe f889 	bl	80056ac <HAL_GetTick>
 800759a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800759c:	e008      	b.n	80075b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800759e:	f7fe f885 	bl	80056ac <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d901      	bls.n	80075b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e1a8      	b.n	8007902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075b0:	4b2b      	ldr	r3, [pc, #172]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0302 	and.w	r3, r3, #2
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d0f0      	beq.n	800759e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075bc:	4b28      	ldr	r3, [pc, #160]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	4925      	ldr	r1, [pc, #148]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	600b      	str	r3, [r1, #0]
 80075d0:	e015      	b.n	80075fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075d2:	4b24      	ldr	r3, [pc, #144]	; (8007664 <HAL_RCC_OscConfig+0x244>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d8:	f7fe f868 	bl	80056ac <HAL_GetTick>
 80075dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075de:	e008      	b.n	80075f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075e0:	f7fe f864 	bl	80056ac <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d901      	bls.n	80075f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e187      	b.n	8007902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075f2:	4b1b      	ldr	r3, [pc, #108]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0302 	and.w	r3, r3, #2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1f0      	bne.n	80075e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0308 	and.w	r3, r3, #8
 8007606:	2b00      	cmp	r3, #0
 8007608:	d036      	beq.n	8007678 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d016      	beq.n	8007640 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007612:	4b15      	ldr	r3, [pc, #84]	; (8007668 <HAL_RCC_OscConfig+0x248>)
 8007614:	2201      	movs	r2, #1
 8007616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007618:	f7fe f848 	bl	80056ac <HAL_GetTick>
 800761c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800761e:	e008      	b.n	8007632 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007620:	f7fe f844 	bl	80056ac <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	2b02      	cmp	r3, #2
 800762c:	d901      	bls.n	8007632 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e167      	b.n	8007902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007632:	4b0b      	ldr	r3, [pc, #44]	; (8007660 <HAL_RCC_OscConfig+0x240>)
 8007634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d0f0      	beq.n	8007620 <HAL_RCC_OscConfig+0x200>
 800763e:	e01b      	b.n	8007678 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007640:	4b09      	ldr	r3, [pc, #36]	; (8007668 <HAL_RCC_OscConfig+0x248>)
 8007642:	2200      	movs	r2, #0
 8007644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007646:	f7fe f831 	bl	80056ac <HAL_GetTick>
 800764a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800764c:	e00e      	b.n	800766c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800764e:	f7fe f82d 	bl	80056ac <HAL_GetTick>
 8007652:	4602      	mov	r2, r0
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	2b02      	cmp	r3, #2
 800765a:	d907      	bls.n	800766c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e150      	b.n	8007902 <HAL_RCC_OscConfig+0x4e2>
 8007660:	40023800 	.word	0x40023800
 8007664:	42470000 	.word	0x42470000
 8007668:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800766c:	4b88      	ldr	r3, [pc, #544]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 800766e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1ea      	bne.n	800764e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0304 	and.w	r3, r3, #4
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 8097 	beq.w	80077b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007686:	2300      	movs	r3, #0
 8007688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800768a:	4b81      	ldr	r3, [pc, #516]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 800768c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10f      	bne.n	80076b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007696:	2300      	movs	r3, #0
 8007698:	60bb      	str	r3, [r7, #8]
 800769a:	4b7d      	ldr	r3, [pc, #500]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 800769c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769e:	4a7c      	ldr	r2, [pc, #496]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 80076a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076a4:	6413      	str	r3, [r2, #64]	; 0x40
 80076a6:	4b7a      	ldr	r3, [pc, #488]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 80076a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076ae:	60bb      	str	r3, [r7, #8]
 80076b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076b2:	2301      	movs	r3, #1
 80076b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076b6:	4b77      	ldr	r3, [pc, #476]	; (8007894 <HAL_RCC_OscConfig+0x474>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d118      	bne.n	80076f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076c2:	4b74      	ldr	r3, [pc, #464]	; (8007894 <HAL_RCC_OscConfig+0x474>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a73      	ldr	r2, [pc, #460]	; (8007894 <HAL_RCC_OscConfig+0x474>)
 80076c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076ce:	f7fd ffed 	bl	80056ac <HAL_GetTick>
 80076d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076d4:	e008      	b.n	80076e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076d6:	f7fd ffe9 	bl	80056ac <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d901      	bls.n	80076e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e10c      	b.n	8007902 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076e8:	4b6a      	ldr	r3, [pc, #424]	; (8007894 <HAL_RCC_OscConfig+0x474>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d0f0      	beq.n	80076d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d106      	bne.n	800770a <HAL_RCC_OscConfig+0x2ea>
 80076fc:	4b64      	ldr	r3, [pc, #400]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 80076fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007700:	4a63      	ldr	r2, [pc, #396]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 8007702:	f043 0301 	orr.w	r3, r3, #1
 8007706:	6713      	str	r3, [r2, #112]	; 0x70
 8007708:	e01c      	b.n	8007744 <HAL_RCC_OscConfig+0x324>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	2b05      	cmp	r3, #5
 8007710:	d10c      	bne.n	800772c <HAL_RCC_OscConfig+0x30c>
 8007712:	4b5f      	ldr	r3, [pc, #380]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 8007714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007716:	4a5e      	ldr	r2, [pc, #376]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 8007718:	f043 0304 	orr.w	r3, r3, #4
 800771c:	6713      	str	r3, [r2, #112]	; 0x70
 800771e:	4b5c      	ldr	r3, [pc, #368]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 8007720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007722:	4a5b      	ldr	r2, [pc, #364]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 8007724:	f043 0301 	orr.w	r3, r3, #1
 8007728:	6713      	str	r3, [r2, #112]	; 0x70
 800772a:	e00b      	b.n	8007744 <HAL_RCC_OscConfig+0x324>
 800772c:	4b58      	ldr	r3, [pc, #352]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 800772e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007730:	4a57      	ldr	r2, [pc, #348]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 8007732:	f023 0301 	bic.w	r3, r3, #1
 8007736:	6713      	str	r3, [r2, #112]	; 0x70
 8007738:	4b55      	ldr	r3, [pc, #340]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 800773a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800773c:	4a54      	ldr	r2, [pc, #336]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 800773e:	f023 0304 	bic.w	r3, r3, #4
 8007742:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d015      	beq.n	8007778 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800774c:	f7fd ffae 	bl	80056ac <HAL_GetTick>
 8007750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007752:	e00a      	b.n	800776a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007754:	f7fd ffaa 	bl	80056ac <HAL_GetTick>
 8007758:	4602      	mov	r2, r0
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007762:	4293      	cmp	r3, r2
 8007764:	d901      	bls.n	800776a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e0cb      	b.n	8007902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800776a:	4b49      	ldr	r3, [pc, #292]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 800776c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0ee      	beq.n	8007754 <HAL_RCC_OscConfig+0x334>
 8007776:	e014      	b.n	80077a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007778:	f7fd ff98 	bl	80056ac <HAL_GetTick>
 800777c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800777e:	e00a      	b.n	8007796 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007780:	f7fd ff94 	bl	80056ac <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	f241 3288 	movw	r2, #5000	; 0x1388
 800778e:	4293      	cmp	r3, r2
 8007790:	d901      	bls.n	8007796 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e0b5      	b.n	8007902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007796:	4b3e      	ldr	r3, [pc, #248]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 8007798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1ee      	bne.n	8007780 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077a2:	7dfb      	ldrb	r3, [r7, #23]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d105      	bne.n	80077b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077a8:	4b39      	ldr	r3, [pc, #228]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 80077aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ac:	4a38      	ldr	r2, [pc, #224]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 80077ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 80a1 	beq.w	8007900 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80077be:	4b34      	ldr	r3, [pc, #208]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f003 030c 	and.w	r3, r3, #12
 80077c6:	2b08      	cmp	r3, #8
 80077c8:	d05c      	beq.n	8007884 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d141      	bne.n	8007856 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077d2:	4b31      	ldr	r3, [pc, #196]	; (8007898 <HAL_RCC_OscConfig+0x478>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077d8:	f7fd ff68 	bl	80056ac <HAL_GetTick>
 80077dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077de:	e008      	b.n	80077f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077e0:	f7fd ff64 	bl	80056ac <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d901      	bls.n	80077f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e087      	b.n	8007902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077f2:	4b27      	ldr	r3, [pc, #156]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1f0      	bne.n	80077e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	69da      	ldr	r2, [r3, #28]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	431a      	orrs	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780c:	019b      	lsls	r3, r3, #6
 800780e:	431a      	orrs	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007814:	085b      	lsrs	r3, r3, #1
 8007816:	3b01      	subs	r3, #1
 8007818:	041b      	lsls	r3, r3, #16
 800781a:	431a      	orrs	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007820:	061b      	lsls	r3, r3, #24
 8007822:	491b      	ldr	r1, [pc, #108]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 8007824:	4313      	orrs	r3, r2
 8007826:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007828:	4b1b      	ldr	r3, [pc, #108]	; (8007898 <HAL_RCC_OscConfig+0x478>)
 800782a:	2201      	movs	r2, #1
 800782c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800782e:	f7fd ff3d 	bl	80056ac <HAL_GetTick>
 8007832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007834:	e008      	b.n	8007848 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007836:	f7fd ff39 	bl	80056ac <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d901      	bls.n	8007848 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e05c      	b.n	8007902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007848:	4b11      	ldr	r3, [pc, #68]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0f0      	beq.n	8007836 <HAL_RCC_OscConfig+0x416>
 8007854:	e054      	b.n	8007900 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007856:	4b10      	ldr	r3, [pc, #64]	; (8007898 <HAL_RCC_OscConfig+0x478>)
 8007858:	2200      	movs	r2, #0
 800785a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800785c:	f7fd ff26 	bl	80056ac <HAL_GetTick>
 8007860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007862:	e008      	b.n	8007876 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007864:	f7fd ff22 	bl	80056ac <HAL_GetTick>
 8007868:	4602      	mov	r2, r0
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	2b02      	cmp	r3, #2
 8007870:	d901      	bls.n	8007876 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e045      	b.n	8007902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007876:	4b06      	ldr	r3, [pc, #24]	; (8007890 <HAL_RCC_OscConfig+0x470>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1f0      	bne.n	8007864 <HAL_RCC_OscConfig+0x444>
 8007882:	e03d      	b.n	8007900 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d107      	bne.n	800789c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e038      	b.n	8007902 <HAL_RCC_OscConfig+0x4e2>
 8007890:	40023800 	.word	0x40023800
 8007894:	40007000 	.word	0x40007000
 8007898:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800789c:	4b1b      	ldr	r3, [pc, #108]	; (800790c <HAL_RCC_OscConfig+0x4ec>)
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d028      	beq.n	80078fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d121      	bne.n	80078fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d11a      	bne.n	80078fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80078cc:	4013      	ands	r3, r2
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80078d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d111      	bne.n	80078fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e2:	085b      	lsrs	r3, r3, #1
 80078e4:	3b01      	subs	r3, #1
 80078e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d107      	bne.n	80078fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d001      	beq.n	8007900 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e000      	b.n	8007902 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	40023800 	.word	0x40023800

08007910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e0cc      	b.n	8007abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007924:	4b68      	ldr	r3, [pc, #416]	; (8007ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0307 	and.w	r3, r3, #7
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	429a      	cmp	r2, r3
 8007930:	d90c      	bls.n	800794c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007932:	4b65      	ldr	r3, [pc, #404]	; (8007ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	b2d2      	uxtb	r2, r2
 8007938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800793a:	4b63      	ldr	r3, [pc, #396]	; (8007ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0307 	and.w	r3, r3, #7
 8007942:	683a      	ldr	r2, [r7, #0]
 8007944:	429a      	cmp	r2, r3
 8007946:	d001      	beq.n	800794c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e0b8      	b.n	8007abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 0302 	and.w	r3, r3, #2
 8007954:	2b00      	cmp	r3, #0
 8007956:	d020      	beq.n	800799a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0304 	and.w	r3, r3, #4
 8007960:	2b00      	cmp	r3, #0
 8007962:	d005      	beq.n	8007970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007964:	4b59      	ldr	r3, [pc, #356]	; (8007acc <HAL_RCC_ClockConfig+0x1bc>)
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	4a58      	ldr	r2, [pc, #352]	; (8007acc <HAL_RCC_ClockConfig+0x1bc>)
 800796a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800796e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0308 	and.w	r3, r3, #8
 8007978:	2b00      	cmp	r3, #0
 800797a:	d005      	beq.n	8007988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800797c:	4b53      	ldr	r3, [pc, #332]	; (8007acc <HAL_RCC_ClockConfig+0x1bc>)
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	4a52      	ldr	r2, [pc, #328]	; (8007acc <HAL_RCC_ClockConfig+0x1bc>)
 8007982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007988:	4b50      	ldr	r3, [pc, #320]	; (8007acc <HAL_RCC_ClockConfig+0x1bc>)
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	494d      	ldr	r1, [pc, #308]	; (8007acc <HAL_RCC_ClockConfig+0x1bc>)
 8007996:	4313      	orrs	r3, r2
 8007998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 0301 	and.w	r3, r3, #1
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d044      	beq.n	8007a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d107      	bne.n	80079be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079ae:	4b47      	ldr	r3, [pc, #284]	; (8007acc <HAL_RCC_ClockConfig+0x1bc>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d119      	bne.n	80079ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e07f      	b.n	8007abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d003      	beq.n	80079ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80079ca:	2b03      	cmp	r3, #3
 80079cc:	d107      	bne.n	80079de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079ce:	4b3f      	ldr	r3, [pc, #252]	; (8007acc <HAL_RCC_ClockConfig+0x1bc>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d109      	bne.n	80079ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e06f      	b.n	8007abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079de:	4b3b      	ldr	r3, [pc, #236]	; (8007acc <HAL_RCC_ClockConfig+0x1bc>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0302 	and.w	r3, r3, #2
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e067      	b.n	8007abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079ee:	4b37      	ldr	r3, [pc, #220]	; (8007acc <HAL_RCC_ClockConfig+0x1bc>)
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f023 0203 	bic.w	r2, r3, #3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	4934      	ldr	r1, [pc, #208]	; (8007acc <HAL_RCC_ClockConfig+0x1bc>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a00:	f7fd fe54 	bl	80056ac <HAL_GetTick>
 8007a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a06:	e00a      	b.n	8007a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a08:	f7fd fe50 	bl	80056ac <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d901      	bls.n	8007a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e04f      	b.n	8007abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a1e:	4b2b      	ldr	r3, [pc, #172]	; (8007acc <HAL_RCC_ClockConfig+0x1bc>)
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f003 020c 	and.w	r2, r3, #12
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d1eb      	bne.n	8007a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a30:	4b25      	ldr	r3, [pc, #148]	; (8007ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0307 	and.w	r3, r3, #7
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d20c      	bcs.n	8007a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a3e:	4b22      	ldr	r3, [pc, #136]	; (8007ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	b2d2      	uxtb	r2, r2
 8007a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a46:	4b20      	ldr	r3, [pc, #128]	; (8007ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0307 	and.w	r3, r3, #7
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d001      	beq.n	8007a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e032      	b.n	8007abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0304 	and.w	r3, r3, #4
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d008      	beq.n	8007a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a64:	4b19      	ldr	r3, [pc, #100]	; (8007acc <HAL_RCC_ClockConfig+0x1bc>)
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	4916      	ldr	r1, [pc, #88]	; (8007acc <HAL_RCC_ClockConfig+0x1bc>)
 8007a72:	4313      	orrs	r3, r2
 8007a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0308 	and.w	r3, r3, #8
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d009      	beq.n	8007a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a82:	4b12      	ldr	r3, [pc, #72]	; (8007acc <HAL_RCC_ClockConfig+0x1bc>)
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	490e      	ldr	r1, [pc, #56]	; (8007acc <HAL_RCC_ClockConfig+0x1bc>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007a96:	f000 f821 	bl	8007adc <HAL_RCC_GetSysClockFreq>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	4b0b      	ldr	r3, [pc, #44]	; (8007acc <HAL_RCC_ClockConfig+0x1bc>)
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	091b      	lsrs	r3, r3, #4
 8007aa2:	f003 030f 	and.w	r3, r3, #15
 8007aa6:	490a      	ldr	r1, [pc, #40]	; (8007ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8007aa8:	5ccb      	ldrb	r3, [r1, r3]
 8007aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8007aae:	4a09      	ldr	r2, [pc, #36]	; (8007ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8007ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007ab2:	4b09      	ldr	r3, [pc, #36]	; (8007ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fd fdb4 	bl	8005624 <HAL_InitTick>

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	40023c00 	.word	0x40023c00
 8007acc:	40023800 	.word	0x40023800
 8007ad0:	0800f364 	.word	0x0800f364
 8007ad4:	20000010 	.word	0x20000010
 8007ad8:	20000014 	.word	0x20000014

08007adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ae0:	b090      	sub	sp, #64	; 0x40
 8007ae2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ae8:	2300      	movs	r3, #0
 8007aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aec:	2300      	movs	r3, #0
 8007aee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007af4:	4b59      	ldr	r3, [pc, #356]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f003 030c 	and.w	r3, r3, #12
 8007afc:	2b08      	cmp	r3, #8
 8007afe:	d00d      	beq.n	8007b1c <HAL_RCC_GetSysClockFreq+0x40>
 8007b00:	2b08      	cmp	r3, #8
 8007b02:	f200 80a1 	bhi.w	8007c48 <HAL_RCC_GetSysClockFreq+0x16c>
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d002      	beq.n	8007b10 <HAL_RCC_GetSysClockFreq+0x34>
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d003      	beq.n	8007b16 <HAL_RCC_GetSysClockFreq+0x3a>
 8007b0e:	e09b      	b.n	8007c48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b10:	4b53      	ldr	r3, [pc, #332]	; (8007c60 <HAL_RCC_GetSysClockFreq+0x184>)
 8007b12:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007b14:	e09b      	b.n	8007c4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b16:	4b53      	ldr	r3, [pc, #332]	; (8007c64 <HAL_RCC_GetSysClockFreq+0x188>)
 8007b18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b1a:	e098      	b.n	8007c4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b1c:	4b4f      	ldr	r3, [pc, #316]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b24:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b26:	4b4d      	ldr	r3, [pc, #308]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d028      	beq.n	8007b84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b32:	4b4a      	ldr	r3, [pc, #296]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	099b      	lsrs	r3, r3, #6
 8007b38:	2200      	movs	r2, #0
 8007b3a:	623b      	str	r3, [r7, #32]
 8007b3c:	627a      	str	r2, [r7, #36]	; 0x24
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007b44:	2100      	movs	r1, #0
 8007b46:	4b47      	ldr	r3, [pc, #284]	; (8007c64 <HAL_RCC_GetSysClockFreq+0x188>)
 8007b48:	fb03 f201 	mul.w	r2, r3, r1
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	fb00 f303 	mul.w	r3, r0, r3
 8007b52:	4413      	add	r3, r2
 8007b54:	4a43      	ldr	r2, [pc, #268]	; (8007c64 <HAL_RCC_GetSysClockFreq+0x188>)
 8007b56:	fba0 1202 	umull	r1, r2, r0, r2
 8007b5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b5c:	460a      	mov	r2, r1
 8007b5e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b62:	4413      	add	r3, r2
 8007b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b68:	2200      	movs	r2, #0
 8007b6a:	61bb      	str	r3, [r7, #24]
 8007b6c:	61fa      	str	r2, [r7, #28]
 8007b6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007b76:	f7f9 f887 	bl	8000c88 <__aeabi_uldivmod>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	4613      	mov	r3, r2
 8007b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b82:	e053      	b.n	8007c2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b84:	4b35      	ldr	r3, [pc, #212]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	099b      	lsrs	r3, r3, #6
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	613b      	str	r3, [r7, #16]
 8007b8e:	617a      	str	r2, [r7, #20]
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007b96:	f04f 0b00 	mov.w	fp, #0
 8007b9a:	4652      	mov	r2, sl
 8007b9c:	465b      	mov	r3, fp
 8007b9e:	f04f 0000 	mov.w	r0, #0
 8007ba2:	f04f 0100 	mov.w	r1, #0
 8007ba6:	0159      	lsls	r1, r3, #5
 8007ba8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007bac:	0150      	lsls	r0, r2, #5
 8007bae:	4602      	mov	r2, r0
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	ebb2 080a 	subs.w	r8, r2, sl
 8007bb6:	eb63 090b 	sbc.w	r9, r3, fp
 8007bba:	f04f 0200 	mov.w	r2, #0
 8007bbe:	f04f 0300 	mov.w	r3, #0
 8007bc2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007bc6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007bca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007bce:	ebb2 0408 	subs.w	r4, r2, r8
 8007bd2:	eb63 0509 	sbc.w	r5, r3, r9
 8007bd6:	f04f 0200 	mov.w	r2, #0
 8007bda:	f04f 0300 	mov.w	r3, #0
 8007bde:	00eb      	lsls	r3, r5, #3
 8007be0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007be4:	00e2      	lsls	r2, r4, #3
 8007be6:	4614      	mov	r4, r2
 8007be8:	461d      	mov	r5, r3
 8007bea:	eb14 030a 	adds.w	r3, r4, sl
 8007bee:	603b      	str	r3, [r7, #0]
 8007bf0:	eb45 030b 	adc.w	r3, r5, fp
 8007bf4:	607b      	str	r3, [r7, #4]
 8007bf6:	f04f 0200 	mov.w	r2, #0
 8007bfa:	f04f 0300 	mov.w	r3, #0
 8007bfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c02:	4629      	mov	r1, r5
 8007c04:	028b      	lsls	r3, r1, #10
 8007c06:	4621      	mov	r1, r4
 8007c08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	028a      	lsls	r2, r1, #10
 8007c10:	4610      	mov	r0, r2
 8007c12:	4619      	mov	r1, r3
 8007c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c16:	2200      	movs	r2, #0
 8007c18:	60bb      	str	r3, [r7, #8]
 8007c1a:	60fa      	str	r2, [r7, #12]
 8007c1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c20:	f7f9 f832 	bl	8000c88 <__aeabi_uldivmod>
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	4613      	mov	r3, r2
 8007c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007c2c:	4b0b      	ldr	r3, [pc, #44]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	0c1b      	lsrs	r3, r3, #16
 8007c32:	f003 0303 	and.w	r3, r3, #3
 8007c36:	3301      	adds	r3, #1
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007c3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007c46:	e002      	b.n	8007c4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c48:	4b05      	ldr	r3, [pc, #20]	; (8007c60 <HAL_RCC_GetSysClockFreq+0x184>)
 8007c4a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3740      	adds	r7, #64	; 0x40
 8007c54:	46bd      	mov	sp, r7
 8007c56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c5a:	bf00      	nop
 8007c5c:	40023800 	.word	0x40023800
 8007c60:	00f42400 	.word	0x00f42400
 8007c64:	017d7840 	.word	0x017d7840

08007c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c6c:	4b03      	ldr	r3, [pc, #12]	; (8007c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	20000010 	.word	0x20000010

08007c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007c84:	f7ff fff0 	bl	8007c68 <HAL_RCC_GetHCLKFreq>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	4b05      	ldr	r3, [pc, #20]	; (8007ca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	0a9b      	lsrs	r3, r3, #10
 8007c90:	f003 0307 	and.w	r3, r3, #7
 8007c94:	4903      	ldr	r1, [pc, #12]	; (8007ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c96:	5ccb      	ldrb	r3, [r1, r3]
 8007c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	40023800 	.word	0x40023800
 8007ca4:	0800f374 	.word	0x0800f374

08007ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007cac:	f7ff ffdc 	bl	8007c68 <HAL_RCC_GetHCLKFreq>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	4b05      	ldr	r3, [pc, #20]	; (8007cc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	0b5b      	lsrs	r3, r3, #13
 8007cb8:	f003 0307 	and.w	r3, r3, #7
 8007cbc:	4903      	ldr	r1, [pc, #12]	; (8007ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cbe:	5ccb      	ldrb	r3, [r1, r3]
 8007cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	40023800 	.word	0x40023800
 8007ccc:	0800f374 	.word	0x0800f374

08007cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d101      	bne.n	8007ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e041      	b.n	8007d66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d106      	bne.n	8007cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7fd f9dc 	bl	80050b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	4610      	mov	r0, r2
 8007d10:	f000 fda4 	bl	800885c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
	...

08007d70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d001      	beq.n	8007d88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e04e      	b.n	8007e26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0201 	orr.w	r2, r2, #1
 8007d9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a23      	ldr	r2, [pc, #140]	; (8007e34 <HAL_TIM_Base_Start_IT+0xc4>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d022      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0x80>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007db2:	d01d      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0x80>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a1f      	ldr	r2, [pc, #124]	; (8007e38 <HAL_TIM_Base_Start_IT+0xc8>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d018      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0x80>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a1e      	ldr	r2, [pc, #120]	; (8007e3c <HAL_TIM_Base_Start_IT+0xcc>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d013      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0x80>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a1c      	ldr	r2, [pc, #112]	; (8007e40 <HAL_TIM_Base_Start_IT+0xd0>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d00e      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0x80>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a1b      	ldr	r2, [pc, #108]	; (8007e44 <HAL_TIM_Base_Start_IT+0xd4>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d009      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0x80>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a19      	ldr	r2, [pc, #100]	; (8007e48 <HAL_TIM_Base_Start_IT+0xd8>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d004      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0x80>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a18      	ldr	r2, [pc, #96]	; (8007e4c <HAL_TIM_Base_Start_IT+0xdc>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d111      	bne.n	8007e14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2b06      	cmp	r3, #6
 8007e00:	d010      	beq.n	8007e24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f042 0201 	orr.w	r2, r2, #1
 8007e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e12:	e007      	b.n	8007e24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f042 0201 	orr.w	r2, r2, #1
 8007e22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	40010000 	.word	0x40010000
 8007e38:	40000400 	.word	0x40000400
 8007e3c:	40000800 	.word	0x40000800
 8007e40:	40000c00 	.word	0x40000c00
 8007e44:	40010400 	.word	0x40010400
 8007e48:	40014000 	.word	0x40014000
 8007e4c:	40001800 	.word	0x40001800

08007e50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e041      	b.n	8007ee6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d106      	bne.n	8007e7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7fd f87e 	bl	8004f78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	4610      	mov	r0, r2
 8007e90:	f000 fce4 	bl	800885c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
	...

08007ef0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d109      	bne.n	8007f14 <HAL_TIM_PWM_Start+0x24>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	bf14      	ite	ne
 8007f0c:	2301      	movne	r3, #1
 8007f0e:	2300      	moveq	r3, #0
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	e022      	b.n	8007f5a <HAL_TIM_PWM_Start+0x6a>
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	2b04      	cmp	r3, #4
 8007f18:	d109      	bne.n	8007f2e <HAL_TIM_PWM_Start+0x3e>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	bf14      	ite	ne
 8007f26:	2301      	movne	r3, #1
 8007f28:	2300      	moveq	r3, #0
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	e015      	b.n	8007f5a <HAL_TIM_PWM_Start+0x6a>
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2b08      	cmp	r3, #8
 8007f32:	d109      	bne.n	8007f48 <HAL_TIM_PWM_Start+0x58>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	bf14      	ite	ne
 8007f40:	2301      	movne	r3, #1
 8007f42:	2300      	moveq	r3, #0
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	e008      	b.n	8007f5a <HAL_TIM_PWM_Start+0x6a>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	bf14      	ite	ne
 8007f54:	2301      	movne	r3, #1
 8007f56:	2300      	moveq	r3, #0
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e07c      	b.n	800805c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d104      	bne.n	8007f72 <HAL_TIM_PWM_Start+0x82>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f70:	e013      	b.n	8007f9a <HAL_TIM_PWM_Start+0xaa>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b04      	cmp	r3, #4
 8007f76:	d104      	bne.n	8007f82 <HAL_TIM_PWM_Start+0x92>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f80:	e00b      	b.n	8007f9a <HAL_TIM_PWM_Start+0xaa>
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	2b08      	cmp	r3, #8
 8007f86:	d104      	bne.n	8007f92 <HAL_TIM_PWM_Start+0xa2>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f90:	e003      	b.n	8007f9a <HAL_TIM_PWM_Start+0xaa>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2202      	movs	r2, #2
 8007f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 ff44 	bl	8008e30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a2d      	ldr	r2, [pc, #180]	; (8008064 <HAL_TIM_PWM_Start+0x174>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d004      	beq.n	8007fbc <HAL_TIM_PWM_Start+0xcc>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a2c      	ldr	r2, [pc, #176]	; (8008068 <HAL_TIM_PWM_Start+0x178>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d101      	bne.n	8007fc0 <HAL_TIM_PWM_Start+0xd0>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e000      	b.n	8007fc2 <HAL_TIM_PWM_Start+0xd2>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d007      	beq.n	8007fd6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a22      	ldr	r2, [pc, #136]	; (8008064 <HAL_TIM_PWM_Start+0x174>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d022      	beq.n	8008026 <HAL_TIM_PWM_Start+0x136>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe8:	d01d      	beq.n	8008026 <HAL_TIM_PWM_Start+0x136>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a1f      	ldr	r2, [pc, #124]	; (800806c <HAL_TIM_PWM_Start+0x17c>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d018      	beq.n	8008026 <HAL_TIM_PWM_Start+0x136>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a1d      	ldr	r2, [pc, #116]	; (8008070 <HAL_TIM_PWM_Start+0x180>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d013      	beq.n	8008026 <HAL_TIM_PWM_Start+0x136>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a1c      	ldr	r2, [pc, #112]	; (8008074 <HAL_TIM_PWM_Start+0x184>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d00e      	beq.n	8008026 <HAL_TIM_PWM_Start+0x136>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a16      	ldr	r2, [pc, #88]	; (8008068 <HAL_TIM_PWM_Start+0x178>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d009      	beq.n	8008026 <HAL_TIM_PWM_Start+0x136>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a18      	ldr	r2, [pc, #96]	; (8008078 <HAL_TIM_PWM_Start+0x188>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d004      	beq.n	8008026 <HAL_TIM_PWM_Start+0x136>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a16      	ldr	r2, [pc, #88]	; (800807c <HAL_TIM_PWM_Start+0x18c>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d111      	bne.n	800804a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	f003 0307 	and.w	r3, r3, #7
 8008030:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b06      	cmp	r3, #6
 8008036:	d010      	beq.n	800805a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f042 0201 	orr.w	r2, r2, #1
 8008046:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008048:	e007      	b.n	800805a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f042 0201 	orr.w	r2, r2, #1
 8008058:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	40010000 	.word	0x40010000
 8008068:	40010400 	.word	0x40010400
 800806c:	40000400 	.word	0x40000400
 8008070:	40000800 	.word	0x40000800
 8008074:	40000c00 	.word	0x40000c00
 8008078:	40014000 	.word	0x40014000
 800807c:	40001800 	.word	0x40001800

08008080 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e097      	b.n	80081c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b00      	cmp	r3, #0
 800809e:	d106      	bne.n	80080ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7fc ff85 	bl	8004fb8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2202      	movs	r2, #2
 80080b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	6812      	ldr	r2, [r2, #0]
 80080c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080c4:	f023 0307 	bic.w	r3, r3, #7
 80080c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	3304      	adds	r3, #4
 80080d2:	4619      	mov	r1, r3
 80080d4:	4610      	mov	r0, r2
 80080d6:	f000 fbc1 	bl	800885c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008102:	f023 0303 	bic.w	r3, r3, #3
 8008106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	689a      	ldr	r2, [r3, #8]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	021b      	lsls	r3, r3, #8
 8008112:	4313      	orrs	r3, r2
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	4313      	orrs	r3, r2
 8008118:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008120:	f023 030c 	bic.w	r3, r3, #12
 8008124:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800812c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	68da      	ldr	r2, [r3, #12]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	021b      	lsls	r3, r3, #8
 800813c:	4313      	orrs	r3, r2
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	4313      	orrs	r3, r2
 8008142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	011a      	lsls	r2, r3, #4
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	031b      	lsls	r3, r3, #12
 8008150:	4313      	orrs	r3, r2
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	4313      	orrs	r3, r2
 8008156:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800815e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008166:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	011b      	lsls	r3, r3, #4
 8008172:	4313      	orrs	r3, r2
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	4313      	orrs	r3, r2
 8008178:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3718      	adds	r7, #24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80081ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80081f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d110      	bne.n	800821e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d102      	bne.n	8008208 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008202:	7b7b      	ldrb	r3, [r7, #13]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d001      	beq.n	800820c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e069      	b.n	80082e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2202      	movs	r2, #2
 8008210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2202      	movs	r2, #2
 8008218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800821c:	e031      	b.n	8008282 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b04      	cmp	r3, #4
 8008222:	d110      	bne.n	8008246 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008224:	7bbb      	ldrb	r3, [r7, #14]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d102      	bne.n	8008230 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800822a:	7b3b      	ldrb	r3, [r7, #12]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d001      	beq.n	8008234 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e055      	b.n	80082e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008244:	e01d      	b.n	8008282 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008246:	7bfb      	ldrb	r3, [r7, #15]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d108      	bne.n	800825e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800824c:	7bbb      	ldrb	r3, [r7, #14]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d105      	bne.n	800825e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008252:	7b7b      	ldrb	r3, [r7, #13]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d102      	bne.n	800825e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008258:	7b3b      	ldrb	r3, [r7, #12]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d001      	beq.n	8008262 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e03e      	b.n	80082e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2202      	movs	r2, #2
 8008266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2202      	movs	r2, #2
 800826e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2202      	movs	r2, #2
 8008276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2202      	movs	r2, #2
 800827e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <HAL_TIM_Encoder_Start+0xc4>
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	2b04      	cmp	r3, #4
 800828c:	d008      	beq.n	80082a0 <HAL_TIM_Encoder_Start+0xd4>
 800828e:	e00f      	b.n	80082b0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2201      	movs	r2, #1
 8008296:	2100      	movs	r1, #0
 8008298:	4618      	mov	r0, r3
 800829a:	f000 fdc9 	bl	8008e30 <TIM_CCxChannelCmd>
      break;
 800829e:	e016      	b.n	80082ce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2201      	movs	r2, #1
 80082a6:	2104      	movs	r1, #4
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 fdc1 	bl	8008e30 <TIM_CCxChannelCmd>
      break;
 80082ae:	e00e      	b.n	80082ce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2201      	movs	r2, #1
 80082b6:	2100      	movs	r1, #0
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 fdb9 	bl	8008e30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2201      	movs	r2, #1
 80082c4:	2104      	movs	r1, #4
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 fdb2 	bl	8008e30 <TIM_CCxChannelCmd>
      break;
 80082cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f042 0201 	orr.w	r2, r2, #1
 80082dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	f003 0302 	and.w	r3, r3, #2
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d122      	bne.n	8008344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	f003 0302 	and.w	r3, r3, #2
 8008308:	2b02      	cmp	r3, #2
 800830a:	d11b      	bne.n	8008344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f06f 0202 	mvn.w	r2, #2
 8008314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fa77 	bl	800881e <HAL_TIM_IC_CaptureCallback>
 8008330:	e005      	b.n	800833e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fa69 	bl	800880a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fa7a 	bl	8008832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	f003 0304 	and.w	r3, r3, #4
 800834e:	2b04      	cmp	r3, #4
 8008350:	d122      	bne.n	8008398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f003 0304 	and.w	r3, r3, #4
 800835c:	2b04      	cmp	r3, #4
 800835e:	d11b      	bne.n	8008398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f06f 0204 	mvn.w	r2, #4
 8008368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2202      	movs	r2, #2
 800836e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fa4d 	bl	800881e <HAL_TIM_IC_CaptureCallback>
 8008384:	e005      	b.n	8008392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fa3f 	bl	800880a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fa50 	bl	8008832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	f003 0308 	and.w	r3, r3, #8
 80083a2:	2b08      	cmp	r3, #8
 80083a4:	d122      	bne.n	80083ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	f003 0308 	and.w	r3, r3, #8
 80083b0:	2b08      	cmp	r3, #8
 80083b2:	d11b      	bne.n	80083ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f06f 0208 	mvn.w	r2, #8
 80083bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2204      	movs	r2, #4
 80083c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	69db      	ldr	r3, [r3, #28]
 80083ca:	f003 0303 	and.w	r3, r3, #3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d003      	beq.n	80083da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fa23 	bl	800881e <HAL_TIM_IC_CaptureCallback>
 80083d8:	e005      	b.n	80083e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fa15 	bl	800880a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fa26 	bl	8008832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	f003 0310 	and.w	r3, r3, #16
 80083f6:	2b10      	cmp	r3, #16
 80083f8:	d122      	bne.n	8008440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	f003 0310 	and.w	r3, r3, #16
 8008404:	2b10      	cmp	r3, #16
 8008406:	d11b      	bne.n	8008440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f06f 0210 	mvn.w	r2, #16
 8008410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2208      	movs	r2, #8
 8008416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f9f9 	bl	800881e <HAL_TIM_IC_CaptureCallback>
 800842c:	e005      	b.n	800843a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f9eb 	bl	800880a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f9fc 	bl	8008832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b01      	cmp	r3, #1
 800844c:	d10e      	bne.n	800846c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	2b01      	cmp	r3, #1
 800845a:	d107      	bne.n	800846c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f06f 0201 	mvn.w	r2, #1
 8008464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7f9 fe9a 	bl	80021a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008476:	2b80      	cmp	r3, #128	; 0x80
 8008478:	d10e      	bne.n	8008498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008484:	2b80      	cmp	r3, #128	; 0x80
 8008486:	d107      	bne.n	8008498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fd78 	bl	8008f88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a2:	2b40      	cmp	r3, #64	; 0x40
 80084a4:	d10e      	bne.n	80084c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b0:	2b40      	cmp	r3, #64	; 0x40
 80084b2:	d107      	bne.n	80084c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f9c1 	bl	8008846 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	f003 0320 	and.w	r3, r3, #32
 80084ce:	2b20      	cmp	r3, #32
 80084d0:	d10e      	bne.n	80084f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f003 0320 	and.w	r3, r3, #32
 80084dc:	2b20      	cmp	r3, #32
 80084de:	d107      	bne.n	80084f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f06f 0220 	mvn.w	r2, #32
 80084e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fd42 	bl	8008f74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084f0:	bf00      	nop
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800850e:	2b01      	cmp	r3, #1
 8008510:	d101      	bne.n	8008516 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008512:	2302      	movs	r3, #2
 8008514:	e0ae      	b.n	8008674 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2b0c      	cmp	r3, #12
 8008522:	f200 809f 	bhi.w	8008664 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008526:	a201      	add	r2, pc, #4	; (adr r2, 800852c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852c:	08008561 	.word	0x08008561
 8008530:	08008665 	.word	0x08008665
 8008534:	08008665 	.word	0x08008665
 8008538:	08008665 	.word	0x08008665
 800853c:	080085a1 	.word	0x080085a1
 8008540:	08008665 	.word	0x08008665
 8008544:	08008665 	.word	0x08008665
 8008548:	08008665 	.word	0x08008665
 800854c:	080085e3 	.word	0x080085e3
 8008550:	08008665 	.word	0x08008665
 8008554:	08008665 	.word	0x08008665
 8008558:	08008665 	.word	0x08008665
 800855c:	08008623 	.word	0x08008623
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68b9      	ldr	r1, [r7, #8]
 8008566:	4618      	mov	r0, r3
 8008568:	f000 fa18 	bl	800899c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	699a      	ldr	r2, [r3, #24]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f042 0208 	orr.w	r2, r2, #8
 800857a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	699a      	ldr	r2, [r3, #24]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 0204 	bic.w	r2, r2, #4
 800858a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6999      	ldr	r1, [r3, #24]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	691a      	ldr	r2, [r3, #16]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	430a      	orrs	r2, r1
 800859c:	619a      	str	r2, [r3, #24]
      break;
 800859e:	e064      	b.n	800866a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68b9      	ldr	r1, [r7, #8]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 fa68 	bl	8008a7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	699a      	ldr	r2, [r3, #24]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	699a      	ldr	r2, [r3, #24]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6999      	ldr	r1, [r3, #24]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	021a      	lsls	r2, r3, #8
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	430a      	orrs	r2, r1
 80085de:	619a      	str	r2, [r3, #24]
      break;
 80085e0:	e043      	b.n	800866a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68b9      	ldr	r1, [r7, #8]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 fabd 	bl	8008b68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	69da      	ldr	r2, [r3, #28]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f042 0208 	orr.w	r2, r2, #8
 80085fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	69da      	ldr	r2, [r3, #28]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f022 0204 	bic.w	r2, r2, #4
 800860c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	69d9      	ldr	r1, [r3, #28]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	691a      	ldr	r2, [r3, #16]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	430a      	orrs	r2, r1
 800861e:	61da      	str	r2, [r3, #28]
      break;
 8008620:	e023      	b.n	800866a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68b9      	ldr	r1, [r7, #8]
 8008628:	4618      	mov	r0, r3
 800862a:	f000 fb11 	bl	8008c50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	69da      	ldr	r2, [r3, #28]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800863c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	69da      	ldr	r2, [r3, #28]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800864c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	69d9      	ldr	r1, [r3, #28]
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	021a      	lsls	r2, r3, #8
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	430a      	orrs	r2, r1
 8008660:	61da      	str	r2, [r3, #28]
      break;
 8008662:	e002      	b.n	800866a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	75fb      	strb	r3, [r7, #23]
      break;
 8008668:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008672:	7dfb      	ldrb	r3, [r7, #23]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3718      	adds	r7, #24
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008686:	2300      	movs	r3, #0
 8008688:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008690:	2b01      	cmp	r3, #1
 8008692:	d101      	bne.n	8008698 <HAL_TIM_ConfigClockSource+0x1c>
 8008694:	2302      	movs	r3, #2
 8008696:	e0b4      	b.n	8008802 <HAL_TIM_ConfigClockSource+0x186>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2202      	movs	r2, #2
 80086a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80086b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086d0:	d03e      	beq.n	8008750 <HAL_TIM_ConfigClockSource+0xd4>
 80086d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086d6:	f200 8087 	bhi.w	80087e8 <HAL_TIM_ConfigClockSource+0x16c>
 80086da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086de:	f000 8086 	beq.w	80087ee <HAL_TIM_ConfigClockSource+0x172>
 80086e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086e6:	d87f      	bhi.n	80087e8 <HAL_TIM_ConfigClockSource+0x16c>
 80086e8:	2b70      	cmp	r3, #112	; 0x70
 80086ea:	d01a      	beq.n	8008722 <HAL_TIM_ConfigClockSource+0xa6>
 80086ec:	2b70      	cmp	r3, #112	; 0x70
 80086ee:	d87b      	bhi.n	80087e8 <HAL_TIM_ConfigClockSource+0x16c>
 80086f0:	2b60      	cmp	r3, #96	; 0x60
 80086f2:	d050      	beq.n	8008796 <HAL_TIM_ConfigClockSource+0x11a>
 80086f4:	2b60      	cmp	r3, #96	; 0x60
 80086f6:	d877      	bhi.n	80087e8 <HAL_TIM_ConfigClockSource+0x16c>
 80086f8:	2b50      	cmp	r3, #80	; 0x50
 80086fa:	d03c      	beq.n	8008776 <HAL_TIM_ConfigClockSource+0xfa>
 80086fc:	2b50      	cmp	r3, #80	; 0x50
 80086fe:	d873      	bhi.n	80087e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008700:	2b40      	cmp	r3, #64	; 0x40
 8008702:	d058      	beq.n	80087b6 <HAL_TIM_ConfigClockSource+0x13a>
 8008704:	2b40      	cmp	r3, #64	; 0x40
 8008706:	d86f      	bhi.n	80087e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008708:	2b30      	cmp	r3, #48	; 0x30
 800870a:	d064      	beq.n	80087d6 <HAL_TIM_ConfigClockSource+0x15a>
 800870c:	2b30      	cmp	r3, #48	; 0x30
 800870e:	d86b      	bhi.n	80087e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008710:	2b20      	cmp	r3, #32
 8008712:	d060      	beq.n	80087d6 <HAL_TIM_ConfigClockSource+0x15a>
 8008714:	2b20      	cmp	r3, #32
 8008716:	d867      	bhi.n	80087e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008718:	2b00      	cmp	r3, #0
 800871a:	d05c      	beq.n	80087d6 <HAL_TIM_ConfigClockSource+0x15a>
 800871c:	2b10      	cmp	r3, #16
 800871e:	d05a      	beq.n	80087d6 <HAL_TIM_ConfigClockSource+0x15a>
 8008720:	e062      	b.n	80087e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6818      	ldr	r0, [r3, #0]
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	6899      	ldr	r1, [r3, #8]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	f000 fb5d 	bl	8008df0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008744:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	609a      	str	r2, [r3, #8]
      break;
 800874e:	e04f      	b.n	80087f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6818      	ldr	r0, [r3, #0]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	6899      	ldr	r1, [r3, #8]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	685a      	ldr	r2, [r3, #4]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f000 fb46 	bl	8008df0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	689a      	ldr	r2, [r3, #8]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008772:	609a      	str	r2, [r3, #8]
      break;
 8008774:	e03c      	b.n	80087f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6818      	ldr	r0, [r3, #0]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	6859      	ldr	r1, [r3, #4]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	461a      	mov	r2, r3
 8008784:	f000 faba 	bl	8008cfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2150      	movs	r1, #80	; 0x50
 800878e:	4618      	mov	r0, r3
 8008790:	f000 fb13 	bl	8008dba <TIM_ITRx_SetConfig>
      break;
 8008794:	e02c      	b.n	80087f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6818      	ldr	r0, [r3, #0]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	6859      	ldr	r1, [r3, #4]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	461a      	mov	r2, r3
 80087a4:	f000 fad9 	bl	8008d5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2160      	movs	r1, #96	; 0x60
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 fb03 	bl	8008dba <TIM_ITRx_SetConfig>
      break;
 80087b4:	e01c      	b.n	80087f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6818      	ldr	r0, [r3, #0]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	6859      	ldr	r1, [r3, #4]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	461a      	mov	r2, r3
 80087c4:	f000 fa9a 	bl	8008cfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2140      	movs	r1, #64	; 0x40
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 faf3 	bl	8008dba <TIM_ITRx_SetConfig>
      break;
 80087d4:	e00c      	b.n	80087f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4619      	mov	r1, r3
 80087e0:	4610      	mov	r0, r2
 80087e2:	f000 faea 	bl	8008dba <TIM_ITRx_SetConfig>
      break;
 80087e6:	e003      	b.n	80087f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	73fb      	strb	r3, [r7, #15]
      break;
 80087ec:	e000      	b.n	80087f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80087ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008800:	7bfb      	ldrb	r3, [r7, #15]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800880a:	b480      	push	{r7}
 800880c:	b083      	sub	sp, #12
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008812:	bf00      	nop
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800881e:	b480      	push	{r7}
 8008820:	b083      	sub	sp, #12
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008826:	bf00      	nop
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008832:	b480      	push	{r7}
 8008834:	b083      	sub	sp, #12
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800883a:	bf00      	nop
 800883c:	370c      	adds	r7, #12
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008846:	b480      	push	{r7}
 8008848:	b083      	sub	sp, #12
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800884e:	bf00      	nop
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
	...

0800885c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a40      	ldr	r2, [pc, #256]	; (8008970 <TIM_Base_SetConfig+0x114>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d013      	beq.n	800889c <TIM_Base_SetConfig+0x40>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800887a:	d00f      	beq.n	800889c <TIM_Base_SetConfig+0x40>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a3d      	ldr	r2, [pc, #244]	; (8008974 <TIM_Base_SetConfig+0x118>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d00b      	beq.n	800889c <TIM_Base_SetConfig+0x40>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a3c      	ldr	r2, [pc, #240]	; (8008978 <TIM_Base_SetConfig+0x11c>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d007      	beq.n	800889c <TIM_Base_SetConfig+0x40>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a3b      	ldr	r2, [pc, #236]	; (800897c <TIM_Base_SetConfig+0x120>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d003      	beq.n	800889c <TIM_Base_SetConfig+0x40>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a3a      	ldr	r2, [pc, #232]	; (8008980 <TIM_Base_SetConfig+0x124>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d108      	bne.n	80088ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a2f      	ldr	r2, [pc, #188]	; (8008970 <TIM_Base_SetConfig+0x114>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d02b      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088bc:	d027      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a2c      	ldr	r2, [pc, #176]	; (8008974 <TIM_Base_SetConfig+0x118>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d023      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a2b      	ldr	r2, [pc, #172]	; (8008978 <TIM_Base_SetConfig+0x11c>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d01f      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a2a      	ldr	r2, [pc, #168]	; (800897c <TIM_Base_SetConfig+0x120>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d01b      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a29      	ldr	r2, [pc, #164]	; (8008980 <TIM_Base_SetConfig+0x124>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d017      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a28      	ldr	r2, [pc, #160]	; (8008984 <TIM_Base_SetConfig+0x128>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d013      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a27      	ldr	r2, [pc, #156]	; (8008988 <TIM_Base_SetConfig+0x12c>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d00f      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a26      	ldr	r2, [pc, #152]	; (800898c <TIM_Base_SetConfig+0x130>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d00b      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a25      	ldr	r2, [pc, #148]	; (8008990 <TIM_Base_SetConfig+0x134>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d007      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a24      	ldr	r2, [pc, #144]	; (8008994 <TIM_Base_SetConfig+0x138>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d003      	beq.n	800890e <TIM_Base_SetConfig+0xb2>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a23      	ldr	r2, [pc, #140]	; (8008998 <TIM_Base_SetConfig+0x13c>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d108      	bne.n	8008920 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	4313      	orrs	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	4313      	orrs	r3, r2
 800892c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	689a      	ldr	r2, [r3, #8]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a0a      	ldr	r2, [pc, #40]	; (8008970 <TIM_Base_SetConfig+0x114>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d003      	beq.n	8008954 <TIM_Base_SetConfig+0xf8>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a0c      	ldr	r2, [pc, #48]	; (8008980 <TIM_Base_SetConfig+0x124>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d103      	bne.n	800895c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	691a      	ldr	r2, [r3, #16]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	615a      	str	r2, [r3, #20]
}
 8008962:	bf00      	nop
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	40010000 	.word	0x40010000
 8008974:	40000400 	.word	0x40000400
 8008978:	40000800 	.word	0x40000800
 800897c:	40000c00 	.word	0x40000c00
 8008980:	40010400 	.word	0x40010400
 8008984:	40014000 	.word	0x40014000
 8008988:	40014400 	.word	0x40014400
 800898c:	40014800 	.word	0x40014800
 8008990:	40001800 	.word	0x40001800
 8008994:	40001c00 	.word	0x40001c00
 8008998:	40002000 	.word	0x40002000

0800899c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800899c:	b480      	push	{r7}
 800899e:	b087      	sub	sp, #28
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	f023 0201 	bic.w	r2, r3, #1
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f023 0303 	bic.w	r3, r3, #3
 80089d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	4313      	orrs	r3, r2
 80089dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	f023 0302 	bic.w	r3, r3, #2
 80089e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a20      	ldr	r2, [pc, #128]	; (8008a74 <TIM_OC1_SetConfig+0xd8>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d003      	beq.n	8008a00 <TIM_OC1_SetConfig+0x64>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a1f      	ldr	r2, [pc, #124]	; (8008a78 <TIM_OC1_SetConfig+0xdc>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d10c      	bne.n	8008a1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	f023 0308 	bic.w	r3, r3, #8
 8008a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	697a      	ldr	r2, [r7, #20]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f023 0304 	bic.w	r3, r3, #4
 8008a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a15      	ldr	r2, [pc, #84]	; (8008a74 <TIM_OC1_SetConfig+0xd8>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d003      	beq.n	8008a2a <TIM_OC1_SetConfig+0x8e>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a14      	ldr	r2, [pc, #80]	; (8008a78 <TIM_OC1_SetConfig+0xdc>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d111      	bne.n	8008a4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	685a      	ldr	r2, [r3, #4]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	621a      	str	r2, [r3, #32]
}
 8008a68:	bf00      	nop
 8008a6a:	371c      	adds	r7, #28
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr
 8008a74:	40010000 	.word	0x40010000
 8008a78:	40010400 	.word	0x40010400

08008a7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b087      	sub	sp, #28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	f023 0210 	bic.w	r2, r3, #16
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	021b      	lsls	r3, r3, #8
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	f023 0320 	bic.w	r3, r3, #32
 8008ac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	011b      	lsls	r3, r3, #4
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a22      	ldr	r2, [pc, #136]	; (8008b60 <TIM_OC2_SetConfig+0xe4>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d003      	beq.n	8008ae4 <TIM_OC2_SetConfig+0x68>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a21      	ldr	r2, [pc, #132]	; (8008b64 <TIM_OC2_SetConfig+0xe8>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d10d      	bne.n	8008b00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	011b      	lsls	r3, r3, #4
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008afe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a17      	ldr	r2, [pc, #92]	; (8008b60 <TIM_OC2_SetConfig+0xe4>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d003      	beq.n	8008b10 <TIM_OC2_SetConfig+0x94>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a16      	ldr	r2, [pc, #88]	; (8008b64 <TIM_OC2_SetConfig+0xe8>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d113      	bne.n	8008b38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	695b      	ldr	r3, [r3, #20]
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	693a      	ldr	r2, [r7, #16]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	685a      	ldr	r2, [r3, #4]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	621a      	str	r2, [r3, #32]
}
 8008b52:	bf00      	nop
 8008b54:	371c      	adds	r7, #28
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	40010000 	.word	0x40010000
 8008b64:	40010400 	.word	0x40010400

08008b68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	69db      	ldr	r3, [r3, #28]
 8008b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f023 0303 	bic.w	r3, r3, #3
 8008b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	021b      	lsls	r3, r3, #8
 8008bb8:	697a      	ldr	r2, [r7, #20]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a21      	ldr	r2, [pc, #132]	; (8008c48 <TIM_OC3_SetConfig+0xe0>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d003      	beq.n	8008bce <TIM_OC3_SetConfig+0x66>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a20      	ldr	r2, [pc, #128]	; (8008c4c <TIM_OC3_SetConfig+0xe4>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d10d      	bne.n	8008bea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	021b      	lsls	r3, r3, #8
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a16      	ldr	r2, [pc, #88]	; (8008c48 <TIM_OC3_SetConfig+0xe0>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d003      	beq.n	8008bfa <TIM_OC3_SetConfig+0x92>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a15      	ldr	r2, [pc, #84]	; (8008c4c <TIM_OC3_SetConfig+0xe4>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d113      	bne.n	8008c22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	011b      	lsls	r3, r3, #4
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	011b      	lsls	r3, r3, #4
 8008c1c:	693a      	ldr	r2, [r7, #16]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	685a      	ldr	r2, [r3, #4]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	697a      	ldr	r2, [r7, #20]
 8008c3a:	621a      	str	r2, [r3, #32]
}
 8008c3c:	bf00      	nop
 8008c3e:	371c      	adds	r7, #28
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	40010000 	.word	0x40010000
 8008c4c:	40010400 	.word	0x40010400

08008c50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b087      	sub	sp, #28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	021b      	lsls	r3, r3, #8
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	031b      	lsls	r3, r3, #12
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a12      	ldr	r2, [pc, #72]	; (8008cf4 <TIM_OC4_SetConfig+0xa4>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d003      	beq.n	8008cb8 <TIM_OC4_SetConfig+0x68>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a11      	ldr	r2, [pc, #68]	; (8008cf8 <TIM_OC4_SetConfig+0xa8>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d109      	bne.n	8008ccc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	019b      	lsls	r3, r3, #6
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	685a      	ldr	r2, [r3, #4]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	621a      	str	r2, [r3, #32]
}
 8008ce6:	bf00      	nop
 8008ce8:	371c      	adds	r7, #28
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	40010000 	.word	0x40010000
 8008cf8:	40010400 	.word	0x40010400

08008cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b087      	sub	sp, #28
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6a1b      	ldr	r3, [r3, #32]
 8008d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	f023 0201 	bic.w	r2, r3, #1
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	011b      	lsls	r3, r3, #4
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f023 030a 	bic.w	r3, r3, #10
 8008d38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	621a      	str	r2, [r3, #32]
}
 8008d4e:	bf00      	nop
 8008d50:	371c      	adds	r7, #28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b087      	sub	sp, #28
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	60f8      	str	r0, [r7, #12]
 8008d62:	60b9      	str	r1, [r7, #8]
 8008d64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	f023 0210 	bic.w	r2, r3, #16
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6a1b      	ldr	r3, [r3, #32]
 8008d7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	031b      	lsls	r3, r3, #12
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	011b      	lsls	r3, r3, #4
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	697a      	ldr	r2, [r7, #20]
 8008da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	621a      	str	r2, [r3, #32]
}
 8008dae:	bf00      	nop
 8008db0:	371c      	adds	r7, #28
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b085      	sub	sp, #20
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	f043 0307 	orr.w	r3, r3, #7
 8008ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	609a      	str	r2, [r3, #8]
}
 8008de4:	bf00      	nop
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	021a      	lsls	r2, r3, #8
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	431a      	orrs	r2, r3
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	609a      	str	r2, [r3, #8]
}
 8008e24:	bf00      	nop
 8008e26:	371c      	adds	r7, #28
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	f003 031f 	and.w	r3, r3, #31
 8008e42:	2201      	movs	r2, #1
 8008e44:	fa02 f303 	lsl.w	r3, r2, r3
 8008e48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6a1a      	ldr	r2, [r3, #32]
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	43db      	mvns	r3, r3
 8008e52:	401a      	ands	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6a1a      	ldr	r2, [r3, #32]
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	f003 031f 	and.w	r3, r3, #31
 8008e62:	6879      	ldr	r1, [r7, #4]
 8008e64:	fa01 f303 	lsl.w	r3, r1, r3
 8008e68:	431a      	orrs	r2, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	621a      	str	r2, [r3, #32]
}
 8008e6e:	bf00      	nop
 8008e70:	371c      	adds	r7, #28
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
	...

08008e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d101      	bne.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e90:	2302      	movs	r3, #2
 8008e92:	e05a      	b.n	8008f4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2202      	movs	r2, #2
 8008ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a21      	ldr	r2, [pc, #132]	; (8008f58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d022      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ee0:	d01d      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a1d      	ldr	r2, [pc, #116]	; (8008f5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d018      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a1b      	ldr	r2, [pc, #108]	; (8008f60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d013      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a1a      	ldr	r2, [pc, #104]	; (8008f64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d00e      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a18      	ldr	r2, [pc, #96]	; (8008f68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d009      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a17      	ldr	r2, [pc, #92]	; (8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d004      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a15      	ldr	r2, [pc, #84]	; (8008f70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d10c      	bne.n	8008f38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	40010000 	.word	0x40010000
 8008f5c:	40000400 	.word	0x40000400
 8008f60:	40000800 	.word	0x40000800
 8008f64:	40000c00 	.word	0x40000c00
 8008f68:	40010400 	.word	0x40010400
 8008f6c:	40014000 	.word	0x40014000
 8008f70:	40001800 	.word	0x40001800

08008f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f7c:	bf00      	nop
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d101      	bne.n	8008fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e03f      	b.n	800902e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d106      	bne.n	8008fc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7fc f8d6 	bl	8005174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2224      	movs	r2, #36	; 0x24
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68da      	ldr	r2, [r3, #12]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 ff43 	bl	8009e6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	691a      	ldr	r2, [r3, #16]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ff4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	695a      	ldr	r2, [r3, #20]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68da      	ldr	r2, [r3, #12]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2220      	movs	r2, #32
 8009020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2220      	movs	r2, #32
 8009028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b08c      	sub	sp, #48	; 0x30
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	4613      	mov	r3, r2
 8009044:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b20      	cmp	r3, #32
 8009050:	d165      	bne.n	800911e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <HAL_UART_Transmit_DMA+0x26>
 8009058:	88fb      	ldrh	r3, [r7, #6]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d101      	bne.n	8009062 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e05e      	b.n	8009120 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009068:	2b01      	cmp	r3, #1
 800906a:	d101      	bne.n	8009070 <HAL_UART_Transmit_DMA+0x38>
 800906c:	2302      	movs	r3, #2
 800906e:	e057      	b.n	8009120 <HAL_UART_Transmit_DMA+0xe8>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	88fa      	ldrh	r2, [r7, #6]
 8009082:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	88fa      	ldrh	r2, [r7, #6]
 8009088:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2221      	movs	r2, #33	; 0x21
 8009094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909c:	4a22      	ldr	r2, [pc, #136]	; (8009128 <HAL_UART_Transmit_DMA+0xf0>)
 800909e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a4:	4a21      	ldr	r2, [pc, #132]	; (800912c <HAL_UART_Transmit_DMA+0xf4>)
 80090a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ac:	4a20      	ldr	r2, [pc, #128]	; (8009130 <HAL_UART_Transmit_DMA+0xf8>)
 80090ae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b4:	2200      	movs	r2, #0
 80090b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80090b8:	f107 0308 	add.w	r3, r7, #8
 80090bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80090c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c4:	6819      	ldr	r1, [r3, #0]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	3304      	adds	r3, #4
 80090cc:	461a      	mov	r2, r3
 80090ce:	88fb      	ldrh	r3, [r7, #6]
 80090d0:	f7fc fcdc 	bl	8005a8c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80090dc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	3314      	adds	r3, #20
 80090ec:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	e853 3f00 	ldrex	r3, [r3]
 80090f4:	617b      	str	r3, [r7, #20]
   return(result);
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3314      	adds	r3, #20
 8009104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009106:	627a      	str	r2, [r7, #36]	; 0x24
 8009108:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910a:	6a39      	ldr	r1, [r7, #32]
 800910c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800910e:	e841 2300 	strex	r3, r2, [r1]
 8009112:	61fb      	str	r3, [r7, #28]
   return(result);
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1e5      	bne.n	80090e6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	e000      	b.n	8009120 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800911e:	2302      	movs	r3, #2
  }
}
 8009120:	4618      	mov	r0, r3
 8009122:	3730      	adds	r7, #48	; 0x30
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	08009705 	.word	0x08009705
 800912c:	0800979f 	.word	0x0800979f
 8009130:	08009917 	.word	0x08009917

08009134 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	4613      	mov	r3, r2
 8009140:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b20      	cmp	r3, #32
 800914c:	d11d      	bne.n	800918a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d002      	beq.n	800915a <HAL_UART_Receive_DMA+0x26>
 8009154:	88fb      	ldrh	r3, [r7, #6]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d101      	bne.n	800915e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e016      	b.n	800918c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009164:	2b01      	cmp	r3, #1
 8009166:	d101      	bne.n	800916c <HAL_UART_Receive_DMA+0x38>
 8009168:	2302      	movs	r3, #2
 800916a:	e00f      	b.n	800918c <HAL_UART_Receive_DMA+0x58>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800917a:	88fb      	ldrh	r3, [r7, #6]
 800917c:	461a      	mov	r2, r3
 800917e:	68b9      	ldr	r1, [r7, #8]
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f000 fc13 	bl	80099ac <UART_Start_Receive_DMA>
 8009186:	4603      	mov	r3, r0
 8009188:	e000      	b.n	800918c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800918a:	2302      	movs	r3, #2
  }
}
 800918c:	4618      	mov	r0, r3
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b0ba      	sub	sp, #232	; 0xe8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	695b      	ldr	r3, [r3, #20]
 80091b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80091ba:	2300      	movs	r3, #0
 80091bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80091c0:	2300      	movs	r3, #0
 80091c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80091c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ca:	f003 030f 	and.w	r3, r3, #15
 80091ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80091d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d10f      	bne.n	80091fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091de:	f003 0320 	and.w	r3, r3, #32
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d009      	beq.n	80091fa <HAL_UART_IRQHandler+0x66>
 80091e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091ea:	f003 0320 	and.w	r3, r3, #32
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d003      	beq.n	80091fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fd7f 	bl	8009cf6 <UART_Receive_IT>
      return;
 80091f8:	e256      	b.n	80096a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80091fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f000 80de 	beq.w	80093c0 <HAL_UART_IRQHandler+0x22c>
 8009204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009208:	f003 0301 	and.w	r3, r3, #1
 800920c:	2b00      	cmp	r3, #0
 800920e:	d106      	bne.n	800921e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009214:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009218:	2b00      	cmp	r3, #0
 800921a:	f000 80d1 	beq.w	80093c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800921e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00b      	beq.n	8009242 <HAL_UART_IRQHandler+0xae>
 800922a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800922e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009232:	2b00      	cmp	r3, #0
 8009234:	d005      	beq.n	8009242 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923a:	f043 0201 	orr.w	r2, r3, #1
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009246:	f003 0304 	and.w	r3, r3, #4
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00b      	beq.n	8009266 <HAL_UART_IRQHandler+0xd2>
 800924e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009252:	f003 0301 	and.w	r3, r3, #1
 8009256:	2b00      	cmp	r3, #0
 8009258:	d005      	beq.n	8009266 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925e:	f043 0202 	orr.w	r2, r3, #2
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800926a:	f003 0302 	and.w	r3, r3, #2
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00b      	beq.n	800928a <HAL_UART_IRQHandler+0xf6>
 8009272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	2b00      	cmp	r3, #0
 800927c:	d005      	beq.n	800928a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009282:	f043 0204 	orr.w	r2, r3, #4
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800928a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800928e:	f003 0308 	and.w	r3, r3, #8
 8009292:	2b00      	cmp	r3, #0
 8009294:	d011      	beq.n	80092ba <HAL_UART_IRQHandler+0x126>
 8009296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800929a:	f003 0320 	and.w	r3, r3, #32
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d105      	bne.n	80092ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80092a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092a6:	f003 0301 	and.w	r3, r3, #1
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d005      	beq.n	80092ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b2:	f043 0208 	orr.w	r2, r3, #8
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f000 81ed 	beq.w	800969e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80092c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092c8:	f003 0320 	and.w	r3, r3, #32
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d008      	beq.n	80092e2 <HAL_UART_IRQHandler+0x14e>
 80092d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092d4:	f003 0320 	and.w	r3, r3, #32
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d002      	beq.n	80092e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fd0a 	bl	8009cf6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	695b      	ldr	r3, [r3, #20]
 80092e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ec:	2b40      	cmp	r3, #64	; 0x40
 80092ee:	bf0c      	ite	eq
 80092f0:	2301      	moveq	r3, #1
 80092f2:	2300      	movne	r3, #0
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fe:	f003 0308 	and.w	r3, r3, #8
 8009302:	2b00      	cmp	r3, #0
 8009304:	d103      	bne.n	800930e <HAL_UART_IRQHandler+0x17a>
 8009306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800930a:	2b00      	cmp	r3, #0
 800930c:	d04f      	beq.n	80093ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fc12 	bl	8009b38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	695b      	ldr	r3, [r3, #20]
 800931a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800931e:	2b40      	cmp	r3, #64	; 0x40
 8009320:	d141      	bne.n	80093a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3314      	adds	r3, #20
 8009328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009330:	e853 3f00 	ldrex	r3, [r3]
 8009334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009338:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800933c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3314      	adds	r3, #20
 800934a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800934e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009352:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009356:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800935a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800935e:	e841 2300 	strex	r3, r2, [r1]
 8009362:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1d9      	bne.n	8009322 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009372:	2b00      	cmp	r3, #0
 8009374:	d013      	beq.n	800939e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937a:	4a7d      	ldr	r2, [pc, #500]	; (8009570 <HAL_UART_IRQHandler+0x3dc>)
 800937c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009382:	4618      	mov	r0, r3
 8009384:	f7fc fc4a 	bl	8005c1c <HAL_DMA_Abort_IT>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d016      	beq.n	80093bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009398:	4610      	mov	r0, r2
 800939a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800939c:	e00e      	b.n	80093bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f99a 	bl	80096d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093a4:	e00a      	b.n	80093bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f996 	bl	80096d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093ac:	e006      	b.n	80093bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f992 	bl	80096d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80093ba:	e170      	b.n	800969e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093bc:	bf00      	nop
    return;
 80093be:	e16e      	b.n	800969e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	f040 814a 	bne.w	800965e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80093ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ce:	f003 0310 	and.w	r3, r3, #16
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f000 8143 	beq.w	800965e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80093d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093dc:	f003 0310 	and.w	r3, r3, #16
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f000 813c 	beq.w	800965e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80093e6:	2300      	movs	r3, #0
 80093e8:	60bb      	str	r3, [r7, #8]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	60bb      	str	r3, [r7, #8]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	60bb      	str	r3, [r7, #8]
 80093fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	695b      	ldr	r3, [r3, #20]
 8009402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009406:	2b40      	cmp	r3, #64	; 0x40
 8009408:	f040 80b4 	bne.w	8009574 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009418:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 8140 	beq.w	80096a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009426:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800942a:	429a      	cmp	r2, r3
 800942c:	f080 8139 	bcs.w	80096a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009436:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009442:	f000 8088 	beq.w	8009556 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	330c      	adds	r3, #12
 800944c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009450:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009454:	e853 3f00 	ldrex	r3, [r3]
 8009458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800945c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009464:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	330c      	adds	r3, #12
 800946e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009472:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009476:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800947e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009482:	e841 2300 	strex	r3, r2, [r1]
 8009486:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800948a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1d9      	bne.n	8009446 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	3314      	adds	r3, #20
 8009498:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800949c:	e853 3f00 	ldrex	r3, [r3]
 80094a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80094a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094a4:	f023 0301 	bic.w	r3, r3, #1
 80094a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	3314      	adds	r3, #20
 80094b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80094b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80094ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80094be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80094c2:	e841 2300 	strex	r3, r2, [r1]
 80094c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80094c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1e1      	bne.n	8009492 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3314      	adds	r3, #20
 80094d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094d8:	e853 3f00 	ldrex	r3, [r3]
 80094dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80094de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	3314      	adds	r3, #20
 80094ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80094f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80094f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80094f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80094fa:	e841 2300 	strex	r3, r2, [r1]
 80094fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1e3      	bne.n	80094ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2220      	movs	r2, #32
 800950a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	330c      	adds	r3, #12
 800951a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800951e:	e853 3f00 	ldrex	r3, [r3]
 8009522:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009526:	f023 0310 	bic.w	r3, r3, #16
 800952a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	330c      	adds	r3, #12
 8009534:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009538:	65ba      	str	r2, [r7, #88]	; 0x58
 800953a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800953e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009540:	e841 2300 	strex	r3, r2, [r1]
 8009544:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1e3      	bne.n	8009514 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009550:	4618      	mov	r0, r3
 8009552:	f7fc faf3 	bl	8005b3c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800955e:	b29b      	uxth	r3, r3
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	b29b      	uxth	r3, r3
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f8c0 	bl	80096ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800956c:	e099      	b.n	80096a2 <HAL_UART_IRQHandler+0x50e>
 800956e:	bf00      	nop
 8009570:	08009bff 	.word	0x08009bff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800957c:	b29b      	uxth	r3, r3
 800957e:	1ad3      	subs	r3, r2, r3
 8009580:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009588:	b29b      	uxth	r3, r3
 800958a:	2b00      	cmp	r3, #0
 800958c:	f000 808b 	beq.w	80096a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009590:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009594:	2b00      	cmp	r3, #0
 8009596:	f000 8086 	beq.w	80096a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	330c      	adds	r3, #12
 80095a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a4:	e853 3f00 	ldrex	r3, [r3]
 80095a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	330c      	adds	r3, #12
 80095ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80095be:	647a      	str	r2, [r7, #68]	; 0x44
 80095c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095c6:	e841 2300 	strex	r3, r2, [r1]
 80095ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1e3      	bne.n	800959a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3314      	adds	r3, #20
 80095d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095dc:	e853 3f00 	ldrex	r3, [r3]
 80095e0:	623b      	str	r3, [r7, #32]
   return(result);
 80095e2:	6a3b      	ldr	r3, [r7, #32]
 80095e4:	f023 0301 	bic.w	r3, r3, #1
 80095e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	3314      	adds	r3, #20
 80095f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80095f6:	633a      	str	r2, [r7, #48]	; 0x30
 80095f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095fe:	e841 2300 	strex	r3, r2, [r1]
 8009602:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1e3      	bne.n	80095d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2220      	movs	r2, #32
 800960e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	330c      	adds	r3, #12
 800961e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	e853 3f00 	ldrex	r3, [r3]
 8009626:	60fb      	str	r3, [r7, #12]
   return(result);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f023 0310 	bic.w	r3, r3, #16
 800962e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	330c      	adds	r3, #12
 8009638:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800963c:	61fa      	str	r2, [r7, #28]
 800963e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009640:	69b9      	ldr	r1, [r7, #24]
 8009642:	69fa      	ldr	r2, [r7, #28]
 8009644:	e841 2300 	strex	r3, r2, [r1]
 8009648:	617b      	str	r3, [r7, #20]
   return(result);
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1e3      	bne.n	8009618 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009654:	4619      	mov	r1, r3
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 f848 	bl	80096ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800965c:	e023      	b.n	80096a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800965e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009666:	2b00      	cmp	r3, #0
 8009668:	d009      	beq.n	800967e <HAL_UART_IRQHandler+0x4ea>
 800966a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800966e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009672:	2b00      	cmp	r3, #0
 8009674:	d003      	beq.n	800967e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fad5 	bl	8009c26 <UART_Transmit_IT>
    return;
 800967c:	e014      	b.n	80096a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800967e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00e      	beq.n	80096a8 <HAL_UART_IRQHandler+0x514>
 800968a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800968e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009692:	2b00      	cmp	r3, #0
 8009694:	d008      	beq.n	80096a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fb15 	bl	8009cc6 <UART_EndTransmit_IT>
    return;
 800969c:	e004      	b.n	80096a8 <HAL_UART_IRQHandler+0x514>
    return;
 800969e:	bf00      	nop
 80096a0:	e002      	b.n	80096a8 <HAL_UART_IRQHandler+0x514>
      return;
 80096a2:	bf00      	nop
 80096a4:	e000      	b.n	80096a8 <HAL_UART_IRQHandler+0x514>
      return;
 80096a6:	bf00      	nop
  }
}
 80096a8:	37e8      	adds	r7, #232	; 0xe8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop

080096b0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80096cc:	bf00      	nop
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	460b      	mov	r3, r1
 80096f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80096f8:	bf00      	nop
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b090      	sub	sp, #64	; 0x40
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009710:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800971c:	2b00      	cmp	r3, #0
 800971e:	d137      	bne.n	8009790 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009722:	2200      	movs	r2, #0
 8009724:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	3314      	adds	r3, #20
 800972c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009730:	e853 3f00 	ldrex	r3, [r3]
 8009734:	623b      	str	r3, [r7, #32]
   return(result);
 8009736:	6a3b      	ldr	r3, [r7, #32]
 8009738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800973c:	63bb      	str	r3, [r7, #56]	; 0x38
 800973e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	3314      	adds	r3, #20
 8009744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009746:	633a      	str	r2, [r7, #48]	; 0x30
 8009748:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800974c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800974e:	e841 2300 	strex	r3, r2, [r1]
 8009752:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1e5      	bne.n	8009726 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800975a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	330c      	adds	r3, #12
 8009760:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	e853 3f00 	ldrex	r3, [r3]
 8009768:	60fb      	str	r3, [r7, #12]
   return(result);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009770:	637b      	str	r3, [r7, #52]	; 0x34
 8009772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	330c      	adds	r3, #12
 8009778:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800977a:	61fa      	str	r2, [r7, #28]
 800977c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977e:	69b9      	ldr	r1, [r7, #24]
 8009780:	69fa      	ldr	r2, [r7, #28]
 8009782:	e841 2300 	strex	r3, r2, [r1]
 8009786:	617b      	str	r3, [r7, #20]
   return(result);
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1e5      	bne.n	800975a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800978e:	e002      	b.n	8009796 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009790:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009792:	f7f7 fd95 	bl	80012c0 <HAL_UART_TxCpltCallback>
}
 8009796:	bf00      	nop
 8009798:	3740      	adds	r7, #64	; 0x40
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b084      	sub	sp, #16
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f7ff ff7f 	bl	80096b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097b2:	bf00      	nop
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b09c      	sub	sp, #112	; 0x70
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d172      	bne.n	80098bc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80097d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097d8:	2200      	movs	r2, #0
 80097da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	330c      	adds	r3, #12
 80097e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097e6:	e853 3f00 	ldrex	r3, [r3]
 80097ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80097ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80097f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	330c      	adds	r3, #12
 80097fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80097fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80097fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009800:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009802:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009804:	e841 2300 	strex	r3, r2, [r1]
 8009808:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800980a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1e5      	bne.n	80097dc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3314      	adds	r3, #20
 8009816:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981a:	e853 3f00 	ldrex	r3, [r3]
 800981e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009822:	f023 0301 	bic.w	r3, r3, #1
 8009826:	667b      	str	r3, [r7, #100]	; 0x64
 8009828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	3314      	adds	r3, #20
 800982e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009830:	647a      	str	r2, [r7, #68]	; 0x44
 8009832:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009834:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009838:	e841 2300 	strex	r3, r2, [r1]
 800983c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800983e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009840:	2b00      	cmp	r3, #0
 8009842:	d1e5      	bne.n	8009810 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	3314      	adds	r3, #20
 800984a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984e:	e853 3f00 	ldrex	r3, [r3]
 8009852:	623b      	str	r3, [r7, #32]
   return(result);
 8009854:	6a3b      	ldr	r3, [r7, #32]
 8009856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800985a:	663b      	str	r3, [r7, #96]	; 0x60
 800985c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3314      	adds	r3, #20
 8009862:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009864:	633a      	str	r2, [r7, #48]	; 0x30
 8009866:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009868:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800986a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800986c:	e841 2300 	strex	r3, r2, [r1]
 8009870:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009874:	2b00      	cmp	r3, #0
 8009876:	d1e5      	bne.n	8009844 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800987a:	2220      	movs	r2, #32
 800987c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009884:	2b01      	cmp	r3, #1
 8009886:	d119      	bne.n	80098bc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	330c      	adds	r3, #12
 800988e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	e853 3f00 	ldrex	r3, [r3]
 8009896:	60fb      	str	r3, [r7, #12]
   return(result);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f023 0310 	bic.w	r3, r3, #16
 800989e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	330c      	adds	r3, #12
 80098a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80098a8:	61fa      	str	r2, [r7, #28]
 80098aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ac:	69b9      	ldr	r1, [r7, #24]
 80098ae:	69fa      	ldr	r2, [r7, #28]
 80098b0:	e841 2300 	strex	r3, r2, [r1]
 80098b4:	617b      	str	r3, [r7, #20]
   return(result);
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1e5      	bne.n	8009888 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d106      	bne.n	80098d2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80098c8:	4619      	mov	r1, r3
 80098ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80098cc:	f7ff ff0e 	bl	80096ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80098d0:	e002      	b.n	80098d8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80098d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80098d4:	f7f7 fd10 	bl	80012f8 <HAL_UART_RxCpltCallback>
}
 80098d8:	bf00      	nop
 80098da:	3770      	adds	r7, #112	; 0x70
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ec:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d108      	bne.n	8009908 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80098fa:	085b      	lsrs	r3, r3, #1
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	4619      	mov	r1, r3
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f7ff fef3 	bl	80096ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009906:	e002      	b.n	800990e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f7ff fedb 	bl	80096c4 <HAL_UART_RxHalfCpltCallback>
}
 800990e:	bf00      	nop
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b084      	sub	sp, #16
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800991e:	2300      	movs	r3, #0
 8009920:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009926:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	695b      	ldr	r3, [r3, #20]
 800992e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009932:	2b80      	cmp	r3, #128	; 0x80
 8009934:	bf0c      	ite	eq
 8009936:	2301      	moveq	r3, #1
 8009938:	2300      	movne	r3, #0
 800993a:	b2db      	uxtb	r3, r3
 800993c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b21      	cmp	r3, #33	; 0x21
 8009948:	d108      	bne.n	800995c <UART_DMAError+0x46>
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d005      	beq.n	800995c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2200      	movs	r2, #0
 8009954:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009956:	68b8      	ldr	r0, [r7, #8]
 8009958:	f000 f8c6 	bl	8009ae8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	695b      	ldr	r3, [r3, #20]
 8009962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009966:	2b40      	cmp	r3, #64	; 0x40
 8009968:	bf0c      	ite	eq
 800996a:	2301      	moveq	r3, #1
 800996c:	2300      	movne	r3, #0
 800996e:	b2db      	uxtb	r3, r3
 8009970:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009978:	b2db      	uxtb	r3, r3
 800997a:	2b22      	cmp	r3, #34	; 0x22
 800997c:	d108      	bne.n	8009990 <UART_DMAError+0x7a>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d005      	beq.n	8009990 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	2200      	movs	r2, #0
 8009988:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800998a:	68b8      	ldr	r0, [r7, #8]
 800998c:	f000 f8d4 	bl	8009b38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009994:	f043 0210 	orr.w	r2, r3, #16
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800999c:	68b8      	ldr	r0, [r7, #8]
 800999e:	f7ff fe9b 	bl	80096d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099a2:	bf00      	nop
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
	...

080099ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b098      	sub	sp, #96	; 0x60
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	4613      	mov	r3, r2
 80099b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	88fa      	ldrh	r2, [r7, #6]
 80099c4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2222      	movs	r2, #34	; 0x22
 80099d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d8:	4a40      	ldr	r2, [pc, #256]	; (8009adc <UART_Start_Receive_DMA+0x130>)
 80099da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e0:	4a3f      	ldr	r2, [pc, #252]	; (8009ae0 <UART_Start_Receive_DMA+0x134>)
 80099e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e8:	4a3e      	ldr	r2, [pc, #248]	; (8009ae4 <UART_Start_Receive_DMA+0x138>)
 80099ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f0:	2200      	movs	r2, #0
 80099f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80099f4:	f107 0308 	add.w	r3, r7, #8
 80099f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3304      	adds	r3, #4
 8009a04:	4619      	mov	r1, r3
 8009a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	88fb      	ldrh	r3, [r7, #6]
 8009a0c:	f7fc f83e 	bl	8005a8c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009a10:	2300      	movs	r3, #0
 8009a12:	613b      	str	r3, [r7, #16]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	613b      	str	r3, [r7, #16]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	613b      	str	r3, [r7, #16]
 8009a24:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d019      	beq.n	8009a6a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	330c      	adds	r3, #12
 8009a3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a40:	e853 3f00 	ldrex	r3, [r3]
 8009a44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	330c      	adds	r3, #12
 8009a54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a56:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009a58:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009a5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a5e:	e841 2300 	strex	r3, r2, [r1]
 8009a62:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1e5      	bne.n	8009a36 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3314      	adds	r3, #20
 8009a70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7c:	f043 0301 	orr.w	r3, r3, #1
 8009a80:	657b      	str	r3, [r7, #84]	; 0x54
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	3314      	adds	r3, #20
 8009a88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a8a:	63ba      	str	r2, [r7, #56]	; 0x38
 8009a8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a92:	e841 2300 	strex	r3, r2, [r1]
 8009a96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1e5      	bne.n	8009a6a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	3314      	adds	r3, #20
 8009aa4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	e853 3f00 	ldrex	r3, [r3]
 8009aac:	617b      	str	r3, [r7, #20]
   return(result);
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ab4:	653b      	str	r3, [r7, #80]	; 0x50
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	3314      	adds	r3, #20
 8009abc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009abe:	627a      	str	r2, [r7, #36]	; 0x24
 8009ac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac2:	6a39      	ldr	r1, [r7, #32]
 8009ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ac6:	e841 2300 	strex	r3, r2, [r1]
 8009aca:	61fb      	str	r3, [r7, #28]
   return(result);
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1e5      	bne.n	8009a9e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3760      	adds	r7, #96	; 0x60
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	080097bb 	.word	0x080097bb
 8009ae0:	080098e1 	.word	0x080098e1
 8009ae4:	08009917 	.word	0x08009917

08009ae8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b089      	sub	sp, #36	; 0x24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	330c      	adds	r3, #12
 8009af6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	e853 3f00 	ldrex	r3, [r3]
 8009afe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009b06:	61fb      	str	r3, [r7, #28]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	330c      	adds	r3, #12
 8009b0e:	69fa      	ldr	r2, [r7, #28]
 8009b10:	61ba      	str	r2, [r7, #24]
 8009b12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b14:	6979      	ldr	r1, [r7, #20]
 8009b16:	69ba      	ldr	r2, [r7, #24]
 8009b18:	e841 2300 	strex	r3, r2, [r1]
 8009b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1e5      	bne.n	8009af0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2220      	movs	r2, #32
 8009b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009b2c:	bf00      	nop
 8009b2e:	3724      	adds	r7, #36	; 0x24
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b095      	sub	sp, #84	; 0x54
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	330c      	adds	r3, #12
 8009b46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4a:	e853 3f00 	ldrex	r3, [r3]
 8009b4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	330c      	adds	r3, #12
 8009b5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b60:	643a      	str	r2, [r7, #64]	; 0x40
 8009b62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b68:	e841 2300 	strex	r3, r2, [r1]
 8009b6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1e5      	bne.n	8009b40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	3314      	adds	r3, #20
 8009b7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7c:	6a3b      	ldr	r3, [r7, #32]
 8009b7e:	e853 3f00 	ldrex	r3, [r3]
 8009b82:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	f023 0301 	bic.w	r3, r3, #1
 8009b8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	3314      	adds	r3, #20
 8009b92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b9c:	e841 2300 	strex	r3, r2, [r1]
 8009ba0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1e5      	bne.n	8009b74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d119      	bne.n	8009be4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	330c      	adds	r3, #12
 8009bb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	e853 3f00 	ldrex	r3, [r3]
 8009bbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	f023 0310 	bic.w	r3, r3, #16
 8009bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	330c      	adds	r3, #12
 8009bce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bd0:	61ba      	str	r2, [r7, #24]
 8009bd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd4:	6979      	ldr	r1, [r7, #20]
 8009bd6:	69ba      	ldr	r2, [r7, #24]
 8009bd8:	e841 2300 	strex	r3, r2, [r1]
 8009bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d1e5      	bne.n	8009bb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2220      	movs	r2, #32
 8009be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009bf2:	bf00      	nop
 8009bf4:	3754      	adds	r7, #84	; 0x54
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f7ff fd5d 	bl	80096d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c1e:	bf00      	nop
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009c26:	b480      	push	{r7}
 8009c28:	b085      	sub	sp, #20
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	2b21      	cmp	r3, #33	; 0x21
 8009c38:	d13e      	bne.n	8009cb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c42:	d114      	bne.n	8009c6e <UART_Transmit_IT+0x48>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d110      	bne.n	8009c6e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a1b      	ldr	r3, [r3, #32]
 8009c50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	1c9a      	adds	r2, r3, #2
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	621a      	str	r2, [r3, #32]
 8009c6c:	e008      	b.n	8009c80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	1c59      	adds	r1, r3, #1
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	6211      	str	r1, [r2, #32]
 8009c78:	781a      	ldrb	r2, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	3b01      	subs	r3, #1
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10f      	bne.n	8009cb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68da      	ldr	r2, [r3, #12]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ca2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68da      	ldr	r2, [r3, #12]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	e000      	b.n	8009cba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009cb8:	2302      	movs	r3, #2
  }
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3714      	adds	r7, #20
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr

08009cc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b082      	sub	sp, #8
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68da      	ldr	r2, [r3, #12]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cdc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2220      	movs	r2, #32
 8009ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f7f7 faea 	bl	80012c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3708      	adds	r7, #8
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b08c      	sub	sp, #48	; 0x30
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	2b22      	cmp	r3, #34	; 0x22
 8009d08:	f040 80ab 	bne.w	8009e62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d14:	d117      	bne.n	8009d46 <UART_Receive_IT+0x50>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	691b      	ldr	r3, [r3, #16]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d113      	bne.n	8009d46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3e:	1c9a      	adds	r2, r3, #2
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	629a      	str	r2, [r3, #40]	; 0x28
 8009d44:	e026      	b.n	8009d94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d58:	d007      	beq.n	8009d6a <UART_Receive_IT+0x74>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d10a      	bne.n	8009d78 <UART_Receive_IT+0x82>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d106      	bne.n	8009d78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d74:	701a      	strb	r2, [r3, #0]
 8009d76:	e008      	b.n	8009d8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d84:	b2da      	uxtb	r2, r3
 8009d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d8e:	1c5a      	adds	r2, r3, #1
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	4619      	mov	r1, r3
 8009da2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d15a      	bne.n	8009e5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68da      	ldr	r2, [r3, #12]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f022 0220 	bic.w	r2, r2, #32
 8009db6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68da      	ldr	r2, [r3, #12]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009dc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	695a      	ldr	r2, [r3, #20]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f022 0201 	bic.w	r2, r2, #1
 8009dd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2220      	movs	r2, #32
 8009ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d135      	bne.n	8009e54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	330c      	adds	r3, #12
 8009df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	e853 3f00 	ldrex	r3, [r3]
 8009dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	f023 0310 	bic.w	r3, r3, #16
 8009e04:	627b      	str	r3, [r7, #36]	; 0x24
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	330c      	adds	r3, #12
 8009e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e0e:	623a      	str	r2, [r7, #32]
 8009e10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e12:	69f9      	ldr	r1, [r7, #28]
 8009e14:	6a3a      	ldr	r2, [r7, #32]
 8009e16:	e841 2300 	strex	r3, r2, [r1]
 8009e1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1e5      	bne.n	8009dee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f003 0310 	and.w	r3, r3, #16
 8009e2c:	2b10      	cmp	r3, #16
 8009e2e:	d10a      	bne.n	8009e46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e30:	2300      	movs	r3, #0
 8009e32:	60fb      	str	r3, [r7, #12]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	60fb      	str	r3, [r7, #12]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	60fb      	str	r3, [r7, #12]
 8009e44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f7ff fc4d 	bl	80096ec <HAL_UARTEx_RxEventCallback>
 8009e52:	e002      	b.n	8009e5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f7f7 fa4f 	bl	80012f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	e002      	b.n	8009e64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	e000      	b.n	8009e64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009e62:	2302      	movs	r3, #2
  }
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3730      	adds	r7, #48	; 0x30
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e70:	b0c0      	sub	sp, #256	; 0x100
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e88:	68d9      	ldr	r1, [r3, #12]
 8009e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	ea40 0301 	orr.w	r3, r0, r1
 8009e94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e9a:	689a      	ldr	r2, [r3, #8]
 8009e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	431a      	orrs	r2, r3
 8009ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ea8:	695b      	ldr	r3, [r3, #20]
 8009eaa:	431a      	orrs	r2, r3
 8009eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eb0:	69db      	ldr	r3, [r3, #28]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009ec4:	f021 010c 	bic.w	r1, r1, #12
 8009ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ed2:	430b      	orrs	r3, r1
 8009ed4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	695b      	ldr	r3, [r3, #20]
 8009ede:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ee6:	6999      	ldr	r1, [r3, #24]
 8009ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	ea40 0301 	orr.w	r3, r0, r1
 8009ef2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	4b8f      	ldr	r3, [pc, #572]	; (800a138 <UART_SetConfig+0x2cc>)
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d005      	beq.n	8009f0c <UART_SetConfig+0xa0>
 8009f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	4b8d      	ldr	r3, [pc, #564]	; (800a13c <UART_SetConfig+0x2d0>)
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d104      	bne.n	8009f16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009f0c:	f7fd fecc 	bl	8007ca8 <HAL_RCC_GetPCLK2Freq>
 8009f10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009f14:	e003      	b.n	8009f1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009f16:	f7fd feb3 	bl	8007c80 <HAL_RCC_GetPCLK1Freq>
 8009f1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f22:	69db      	ldr	r3, [r3, #28]
 8009f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f28:	f040 810c 	bne.w	800a144 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f30:	2200      	movs	r2, #0
 8009f32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009f36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009f3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009f3e:	4622      	mov	r2, r4
 8009f40:	462b      	mov	r3, r5
 8009f42:	1891      	adds	r1, r2, r2
 8009f44:	65b9      	str	r1, [r7, #88]	; 0x58
 8009f46:	415b      	adcs	r3, r3
 8009f48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009f4e:	4621      	mov	r1, r4
 8009f50:	eb12 0801 	adds.w	r8, r2, r1
 8009f54:	4629      	mov	r1, r5
 8009f56:	eb43 0901 	adc.w	r9, r3, r1
 8009f5a:	f04f 0200 	mov.w	r2, #0
 8009f5e:	f04f 0300 	mov.w	r3, #0
 8009f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f6e:	4690      	mov	r8, r2
 8009f70:	4699      	mov	r9, r3
 8009f72:	4623      	mov	r3, r4
 8009f74:	eb18 0303 	adds.w	r3, r8, r3
 8009f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f7c:	462b      	mov	r3, r5
 8009f7e:	eb49 0303 	adc.w	r3, r9, r3
 8009f82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009f96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	18db      	adds	r3, r3, r3
 8009f9e:	653b      	str	r3, [r7, #80]	; 0x50
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	eb42 0303 	adc.w	r3, r2, r3
 8009fa6:	657b      	str	r3, [r7, #84]	; 0x54
 8009fa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009fac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009fb0:	f7f6 fe6a 	bl	8000c88 <__aeabi_uldivmod>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4b61      	ldr	r3, [pc, #388]	; (800a140 <UART_SetConfig+0x2d4>)
 8009fba:	fba3 2302 	umull	r2, r3, r3, r2
 8009fbe:	095b      	lsrs	r3, r3, #5
 8009fc0:	011c      	lsls	r4, r3, #4
 8009fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009fcc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009fd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009fd4:	4642      	mov	r2, r8
 8009fd6:	464b      	mov	r3, r9
 8009fd8:	1891      	adds	r1, r2, r2
 8009fda:	64b9      	str	r1, [r7, #72]	; 0x48
 8009fdc:	415b      	adcs	r3, r3
 8009fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fe0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009fe4:	4641      	mov	r1, r8
 8009fe6:	eb12 0a01 	adds.w	sl, r2, r1
 8009fea:	4649      	mov	r1, r9
 8009fec:	eb43 0b01 	adc.w	fp, r3, r1
 8009ff0:	f04f 0200 	mov.w	r2, #0
 8009ff4:	f04f 0300 	mov.w	r3, #0
 8009ff8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009ffc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a000:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a004:	4692      	mov	sl, r2
 800a006:	469b      	mov	fp, r3
 800a008:	4643      	mov	r3, r8
 800a00a:	eb1a 0303 	adds.w	r3, sl, r3
 800a00e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a012:	464b      	mov	r3, r9
 800a014:	eb4b 0303 	adc.w	r3, fp, r3
 800a018:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a01c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a028:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a02c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a030:	460b      	mov	r3, r1
 800a032:	18db      	adds	r3, r3, r3
 800a034:	643b      	str	r3, [r7, #64]	; 0x40
 800a036:	4613      	mov	r3, r2
 800a038:	eb42 0303 	adc.w	r3, r2, r3
 800a03c:	647b      	str	r3, [r7, #68]	; 0x44
 800a03e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a042:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a046:	f7f6 fe1f 	bl	8000c88 <__aeabi_uldivmod>
 800a04a:	4602      	mov	r2, r0
 800a04c:	460b      	mov	r3, r1
 800a04e:	4611      	mov	r1, r2
 800a050:	4b3b      	ldr	r3, [pc, #236]	; (800a140 <UART_SetConfig+0x2d4>)
 800a052:	fba3 2301 	umull	r2, r3, r3, r1
 800a056:	095b      	lsrs	r3, r3, #5
 800a058:	2264      	movs	r2, #100	; 0x64
 800a05a:	fb02 f303 	mul.w	r3, r2, r3
 800a05e:	1acb      	subs	r3, r1, r3
 800a060:	00db      	lsls	r3, r3, #3
 800a062:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a066:	4b36      	ldr	r3, [pc, #216]	; (800a140 <UART_SetConfig+0x2d4>)
 800a068:	fba3 2302 	umull	r2, r3, r3, r2
 800a06c:	095b      	lsrs	r3, r3, #5
 800a06e:	005b      	lsls	r3, r3, #1
 800a070:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a074:	441c      	add	r4, r3
 800a076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a07a:	2200      	movs	r2, #0
 800a07c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a080:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a084:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a088:	4642      	mov	r2, r8
 800a08a:	464b      	mov	r3, r9
 800a08c:	1891      	adds	r1, r2, r2
 800a08e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a090:	415b      	adcs	r3, r3
 800a092:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a094:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a098:	4641      	mov	r1, r8
 800a09a:	1851      	adds	r1, r2, r1
 800a09c:	6339      	str	r1, [r7, #48]	; 0x30
 800a09e:	4649      	mov	r1, r9
 800a0a0:	414b      	adcs	r3, r1
 800a0a2:	637b      	str	r3, [r7, #52]	; 0x34
 800a0a4:	f04f 0200 	mov.w	r2, #0
 800a0a8:	f04f 0300 	mov.w	r3, #0
 800a0ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a0b0:	4659      	mov	r1, fp
 800a0b2:	00cb      	lsls	r3, r1, #3
 800a0b4:	4651      	mov	r1, sl
 800a0b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0ba:	4651      	mov	r1, sl
 800a0bc:	00ca      	lsls	r2, r1, #3
 800a0be:	4610      	mov	r0, r2
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	4642      	mov	r2, r8
 800a0c6:	189b      	adds	r3, r3, r2
 800a0c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0cc:	464b      	mov	r3, r9
 800a0ce:	460a      	mov	r2, r1
 800a0d0:	eb42 0303 	adc.w	r3, r2, r3
 800a0d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a0e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a0e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	18db      	adds	r3, r3, r3
 800a0f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	eb42 0303 	adc.w	r3, r2, r3
 800a0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a102:	f7f6 fdc1 	bl	8000c88 <__aeabi_uldivmod>
 800a106:	4602      	mov	r2, r0
 800a108:	460b      	mov	r3, r1
 800a10a:	4b0d      	ldr	r3, [pc, #52]	; (800a140 <UART_SetConfig+0x2d4>)
 800a10c:	fba3 1302 	umull	r1, r3, r3, r2
 800a110:	095b      	lsrs	r3, r3, #5
 800a112:	2164      	movs	r1, #100	; 0x64
 800a114:	fb01 f303 	mul.w	r3, r1, r3
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	00db      	lsls	r3, r3, #3
 800a11c:	3332      	adds	r3, #50	; 0x32
 800a11e:	4a08      	ldr	r2, [pc, #32]	; (800a140 <UART_SetConfig+0x2d4>)
 800a120:	fba2 2303 	umull	r2, r3, r2, r3
 800a124:	095b      	lsrs	r3, r3, #5
 800a126:	f003 0207 	and.w	r2, r3, #7
 800a12a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4422      	add	r2, r4
 800a132:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a134:	e105      	b.n	800a342 <UART_SetConfig+0x4d6>
 800a136:	bf00      	nop
 800a138:	40011000 	.word	0x40011000
 800a13c:	40011400 	.word	0x40011400
 800a140:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a148:	2200      	movs	r2, #0
 800a14a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a14e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a152:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a156:	4642      	mov	r2, r8
 800a158:	464b      	mov	r3, r9
 800a15a:	1891      	adds	r1, r2, r2
 800a15c:	6239      	str	r1, [r7, #32]
 800a15e:	415b      	adcs	r3, r3
 800a160:	627b      	str	r3, [r7, #36]	; 0x24
 800a162:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a166:	4641      	mov	r1, r8
 800a168:	1854      	adds	r4, r2, r1
 800a16a:	4649      	mov	r1, r9
 800a16c:	eb43 0501 	adc.w	r5, r3, r1
 800a170:	f04f 0200 	mov.w	r2, #0
 800a174:	f04f 0300 	mov.w	r3, #0
 800a178:	00eb      	lsls	r3, r5, #3
 800a17a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a17e:	00e2      	lsls	r2, r4, #3
 800a180:	4614      	mov	r4, r2
 800a182:	461d      	mov	r5, r3
 800a184:	4643      	mov	r3, r8
 800a186:	18e3      	adds	r3, r4, r3
 800a188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a18c:	464b      	mov	r3, r9
 800a18e:	eb45 0303 	adc.w	r3, r5, r3
 800a192:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a1a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a1a6:	f04f 0200 	mov.w	r2, #0
 800a1aa:	f04f 0300 	mov.w	r3, #0
 800a1ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a1b2:	4629      	mov	r1, r5
 800a1b4:	008b      	lsls	r3, r1, #2
 800a1b6:	4621      	mov	r1, r4
 800a1b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1bc:	4621      	mov	r1, r4
 800a1be:	008a      	lsls	r2, r1, #2
 800a1c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a1c4:	f7f6 fd60 	bl	8000c88 <__aeabi_uldivmod>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	4b60      	ldr	r3, [pc, #384]	; (800a350 <UART_SetConfig+0x4e4>)
 800a1ce:	fba3 2302 	umull	r2, r3, r3, r2
 800a1d2:	095b      	lsrs	r3, r3, #5
 800a1d4:	011c      	lsls	r4, r3, #4
 800a1d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a1e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a1e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a1e8:	4642      	mov	r2, r8
 800a1ea:	464b      	mov	r3, r9
 800a1ec:	1891      	adds	r1, r2, r2
 800a1ee:	61b9      	str	r1, [r7, #24]
 800a1f0:	415b      	adcs	r3, r3
 800a1f2:	61fb      	str	r3, [r7, #28]
 800a1f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a1f8:	4641      	mov	r1, r8
 800a1fa:	1851      	adds	r1, r2, r1
 800a1fc:	6139      	str	r1, [r7, #16]
 800a1fe:	4649      	mov	r1, r9
 800a200:	414b      	adcs	r3, r1
 800a202:	617b      	str	r3, [r7, #20]
 800a204:	f04f 0200 	mov.w	r2, #0
 800a208:	f04f 0300 	mov.w	r3, #0
 800a20c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a210:	4659      	mov	r1, fp
 800a212:	00cb      	lsls	r3, r1, #3
 800a214:	4651      	mov	r1, sl
 800a216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a21a:	4651      	mov	r1, sl
 800a21c:	00ca      	lsls	r2, r1, #3
 800a21e:	4610      	mov	r0, r2
 800a220:	4619      	mov	r1, r3
 800a222:	4603      	mov	r3, r0
 800a224:	4642      	mov	r2, r8
 800a226:	189b      	adds	r3, r3, r2
 800a228:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a22c:	464b      	mov	r3, r9
 800a22e:	460a      	mov	r2, r1
 800a230:	eb42 0303 	adc.w	r3, r2, r3
 800a234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	67bb      	str	r3, [r7, #120]	; 0x78
 800a242:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a244:	f04f 0200 	mov.w	r2, #0
 800a248:	f04f 0300 	mov.w	r3, #0
 800a24c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a250:	4649      	mov	r1, r9
 800a252:	008b      	lsls	r3, r1, #2
 800a254:	4641      	mov	r1, r8
 800a256:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a25a:	4641      	mov	r1, r8
 800a25c:	008a      	lsls	r2, r1, #2
 800a25e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a262:	f7f6 fd11 	bl	8000c88 <__aeabi_uldivmod>
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
 800a26a:	4b39      	ldr	r3, [pc, #228]	; (800a350 <UART_SetConfig+0x4e4>)
 800a26c:	fba3 1302 	umull	r1, r3, r3, r2
 800a270:	095b      	lsrs	r3, r3, #5
 800a272:	2164      	movs	r1, #100	; 0x64
 800a274:	fb01 f303 	mul.w	r3, r1, r3
 800a278:	1ad3      	subs	r3, r2, r3
 800a27a:	011b      	lsls	r3, r3, #4
 800a27c:	3332      	adds	r3, #50	; 0x32
 800a27e:	4a34      	ldr	r2, [pc, #208]	; (800a350 <UART_SetConfig+0x4e4>)
 800a280:	fba2 2303 	umull	r2, r3, r2, r3
 800a284:	095b      	lsrs	r3, r3, #5
 800a286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a28a:	441c      	add	r4, r3
 800a28c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a290:	2200      	movs	r2, #0
 800a292:	673b      	str	r3, [r7, #112]	; 0x70
 800a294:	677a      	str	r2, [r7, #116]	; 0x74
 800a296:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a29a:	4642      	mov	r2, r8
 800a29c:	464b      	mov	r3, r9
 800a29e:	1891      	adds	r1, r2, r2
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	415b      	adcs	r3, r3
 800a2a4:	60fb      	str	r3, [r7, #12]
 800a2a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a2aa:	4641      	mov	r1, r8
 800a2ac:	1851      	adds	r1, r2, r1
 800a2ae:	6039      	str	r1, [r7, #0]
 800a2b0:	4649      	mov	r1, r9
 800a2b2:	414b      	adcs	r3, r1
 800a2b4:	607b      	str	r3, [r7, #4]
 800a2b6:	f04f 0200 	mov.w	r2, #0
 800a2ba:	f04f 0300 	mov.w	r3, #0
 800a2be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a2c2:	4659      	mov	r1, fp
 800a2c4:	00cb      	lsls	r3, r1, #3
 800a2c6:	4651      	mov	r1, sl
 800a2c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2cc:	4651      	mov	r1, sl
 800a2ce:	00ca      	lsls	r2, r1, #3
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	4642      	mov	r2, r8
 800a2d8:	189b      	adds	r3, r3, r2
 800a2da:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2dc:	464b      	mov	r3, r9
 800a2de:	460a      	mov	r2, r1
 800a2e0:	eb42 0303 	adc.w	r3, r2, r3
 800a2e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a2e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	663b      	str	r3, [r7, #96]	; 0x60
 800a2f0:	667a      	str	r2, [r7, #100]	; 0x64
 800a2f2:	f04f 0200 	mov.w	r2, #0
 800a2f6:	f04f 0300 	mov.w	r3, #0
 800a2fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a2fe:	4649      	mov	r1, r9
 800a300:	008b      	lsls	r3, r1, #2
 800a302:	4641      	mov	r1, r8
 800a304:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a308:	4641      	mov	r1, r8
 800a30a:	008a      	lsls	r2, r1, #2
 800a30c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a310:	f7f6 fcba 	bl	8000c88 <__aeabi_uldivmod>
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	4b0d      	ldr	r3, [pc, #52]	; (800a350 <UART_SetConfig+0x4e4>)
 800a31a:	fba3 1302 	umull	r1, r3, r3, r2
 800a31e:	095b      	lsrs	r3, r3, #5
 800a320:	2164      	movs	r1, #100	; 0x64
 800a322:	fb01 f303 	mul.w	r3, r1, r3
 800a326:	1ad3      	subs	r3, r2, r3
 800a328:	011b      	lsls	r3, r3, #4
 800a32a:	3332      	adds	r3, #50	; 0x32
 800a32c:	4a08      	ldr	r2, [pc, #32]	; (800a350 <UART_SetConfig+0x4e4>)
 800a32e:	fba2 2303 	umull	r2, r3, r2, r3
 800a332:	095b      	lsrs	r3, r3, #5
 800a334:	f003 020f 	and.w	r2, r3, #15
 800a338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4422      	add	r2, r4
 800a340:	609a      	str	r2, [r3, #8]
}
 800a342:	bf00      	nop
 800a344:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a348:	46bd      	mov	sp, r7
 800a34a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a34e:	bf00      	nop
 800a350:	51eb851f 	.word	0x51eb851f

0800a354 <__cxa_pure_virtual>:
 800a354:	b508      	push	{r3, lr}
 800a356:	f000 f80d 	bl	800a374 <_ZSt9terminatev>

0800a35a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a35a:	b508      	push	{r3, lr}
 800a35c:	4780      	blx	r0
 800a35e:	f000 f98c 	bl	800a67a <abort>
	...

0800a364 <_ZSt13get_terminatev>:
 800a364:	4b02      	ldr	r3, [pc, #8]	; (800a370 <_ZSt13get_terminatev+0xc>)
 800a366:	6818      	ldr	r0, [r3, #0]
 800a368:	f3bf 8f5b 	dmb	ish
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	2000001c 	.word	0x2000001c

0800a374 <_ZSt9terminatev>:
 800a374:	b508      	push	{r3, lr}
 800a376:	f7ff fff5 	bl	800a364 <_ZSt13get_terminatev>
 800a37a:	f7ff ffee 	bl	800a35a <_ZN10__cxxabiv111__terminateEPFvvE>

0800a37e <atan2f>:
 800a37e:	f000 b801 	b.w	800a384 <__ieee754_atan2f>
	...

0800a384 <__ieee754_atan2f>:
 800a384:	ee10 2a90 	vmov	r2, s1
 800a388:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a38c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a390:	b510      	push	{r4, lr}
 800a392:	eef0 7a40 	vmov.f32	s15, s0
 800a396:	dc06      	bgt.n	800a3a6 <__ieee754_atan2f+0x22>
 800a398:	ee10 0a10 	vmov	r0, s0
 800a39c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a3a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a3a4:	dd04      	ble.n	800a3b0 <__ieee754_atan2f+0x2c>
 800a3a6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a3aa:	eeb0 0a67 	vmov.f32	s0, s15
 800a3ae:	bd10      	pop	{r4, pc}
 800a3b0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a3b4:	d103      	bne.n	800a3be <__ieee754_atan2f+0x3a>
 800a3b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3ba:	f000 b883 	b.w	800a4c4 <atanf>
 800a3be:	1794      	asrs	r4, r2, #30
 800a3c0:	f004 0402 	and.w	r4, r4, #2
 800a3c4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a3c8:	b943      	cbnz	r3, 800a3dc <__ieee754_atan2f+0x58>
 800a3ca:	2c02      	cmp	r4, #2
 800a3cc:	d05e      	beq.n	800a48c <__ieee754_atan2f+0x108>
 800a3ce:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a4a0 <__ieee754_atan2f+0x11c>
 800a3d2:	2c03      	cmp	r4, #3
 800a3d4:	bf08      	it	eq
 800a3d6:	eef0 7a47 	vmoveq.f32	s15, s14
 800a3da:	e7e6      	b.n	800a3aa <__ieee754_atan2f+0x26>
 800a3dc:	b941      	cbnz	r1, 800a3f0 <__ieee754_atan2f+0x6c>
 800a3de:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a4a4 <__ieee754_atan2f+0x120>
 800a3e2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800a4a8 <__ieee754_atan2f+0x124>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	bfb8      	it	lt
 800a3ea:	eef0 7a40 	vmovlt.f32	s15, s0
 800a3ee:	e7dc      	b.n	800a3aa <__ieee754_atan2f+0x26>
 800a3f0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a3f4:	d110      	bne.n	800a418 <__ieee754_atan2f+0x94>
 800a3f6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a3fa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a3fe:	d107      	bne.n	800a410 <__ieee754_atan2f+0x8c>
 800a400:	2c02      	cmp	r4, #2
 800a402:	d846      	bhi.n	800a492 <__ieee754_atan2f+0x10e>
 800a404:	4b29      	ldr	r3, [pc, #164]	; (800a4ac <__ieee754_atan2f+0x128>)
 800a406:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a40a:	edd4 7a00 	vldr	s15, [r4]
 800a40e:	e7cc      	b.n	800a3aa <__ieee754_atan2f+0x26>
 800a410:	2c02      	cmp	r4, #2
 800a412:	d841      	bhi.n	800a498 <__ieee754_atan2f+0x114>
 800a414:	4b26      	ldr	r3, [pc, #152]	; (800a4b0 <__ieee754_atan2f+0x12c>)
 800a416:	e7f6      	b.n	800a406 <__ieee754_atan2f+0x82>
 800a418:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a41c:	d0df      	beq.n	800a3de <__ieee754_atan2f+0x5a>
 800a41e:	1a5b      	subs	r3, r3, r1
 800a420:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800a424:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a428:	da1a      	bge.n	800a460 <__ieee754_atan2f+0xdc>
 800a42a:	2a00      	cmp	r2, #0
 800a42c:	da01      	bge.n	800a432 <__ieee754_atan2f+0xae>
 800a42e:	313c      	adds	r1, #60	; 0x3c
 800a430:	db19      	blt.n	800a466 <__ieee754_atan2f+0xe2>
 800a432:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a436:	f000 f919 	bl	800a66c <fabsf>
 800a43a:	f000 f843 	bl	800a4c4 <atanf>
 800a43e:	eef0 7a40 	vmov.f32	s15, s0
 800a442:	2c01      	cmp	r4, #1
 800a444:	d012      	beq.n	800a46c <__ieee754_atan2f+0xe8>
 800a446:	2c02      	cmp	r4, #2
 800a448:	d017      	beq.n	800a47a <__ieee754_atan2f+0xf6>
 800a44a:	2c00      	cmp	r4, #0
 800a44c:	d0ad      	beq.n	800a3aa <__ieee754_atan2f+0x26>
 800a44e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a4b4 <__ieee754_atan2f+0x130>
 800a452:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a456:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a4b8 <__ieee754_atan2f+0x134>
 800a45a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a45e:	e7a4      	b.n	800a3aa <__ieee754_atan2f+0x26>
 800a460:	eddf 7a10 	vldr	s15, [pc, #64]	; 800a4a4 <__ieee754_atan2f+0x120>
 800a464:	e7ed      	b.n	800a442 <__ieee754_atan2f+0xbe>
 800a466:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a4bc <__ieee754_atan2f+0x138>
 800a46a:	e7ea      	b.n	800a442 <__ieee754_atan2f+0xbe>
 800a46c:	ee17 3a90 	vmov	r3, s15
 800a470:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a474:	ee07 3a90 	vmov	s15, r3
 800a478:	e797      	b.n	800a3aa <__ieee754_atan2f+0x26>
 800a47a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a4b4 <__ieee754_atan2f+0x130>
 800a47e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a482:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800a4b8 <__ieee754_atan2f+0x134>
 800a486:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a48a:	e78e      	b.n	800a3aa <__ieee754_atan2f+0x26>
 800a48c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800a4b8 <__ieee754_atan2f+0x134>
 800a490:	e78b      	b.n	800a3aa <__ieee754_atan2f+0x26>
 800a492:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a4c0 <__ieee754_atan2f+0x13c>
 800a496:	e788      	b.n	800a3aa <__ieee754_atan2f+0x26>
 800a498:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a4bc <__ieee754_atan2f+0x138>
 800a49c:	e785      	b.n	800a3aa <__ieee754_atan2f+0x26>
 800a49e:	bf00      	nop
 800a4a0:	c0490fdb 	.word	0xc0490fdb
 800a4a4:	3fc90fdb 	.word	0x3fc90fdb
 800a4a8:	bfc90fdb 	.word	0xbfc90fdb
 800a4ac:	0800f384 	.word	0x0800f384
 800a4b0:	0800f390 	.word	0x0800f390
 800a4b4:	33bbbd2e 	.word	0x33bbbd2e
 800a4b8:	40490fdb 	.word	0x40490fdb
 800a4bc:	00000000 	.word	0x00000000
 800a4c0:	3f490fdb 	.word	0x3f490fdb

0800a4c4 <atanf>:
 800a4c4:	b538      	push	{r3, r4, r5, lr}
 800a4c6:	ee10 5a10 	vmov	r5, s0
 800a4ca:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a4ce:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800a4d2:	eef0 7a40 	vmov.f32	s15, s0
 800a4d6:	db10      	blt.n	800a4fa <atanf+0x36>
 800a4d8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a4dc:	dd04      	ble.n	800a4e8 <atanf+0x24>
 800a4de:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a4e2:	eeb0 0a67 	vmov.f32	s0, s15
 800a4e6:	bd38      	pop	{r3, r4, r5, pc}
 800a4e8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800a620 <atanf+0x15c>
 800a4ec:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800a624 <atanf+0x160>
 800a4f0:	2d00      	cmp	r5, #0
 800a4f2:	bfd8      	it	le
 800a4f4:	eef0 7a40 	vmovle.f32	s15, s0
 800a4f8:	e7f3      	b.n	800a4e2 <atanf+0x1e>
 800a4fa:	4b4b      	ldr	r3, [pc, #300]	; (800a628 <atanf+0x164>)
 800a4fc:	429c      	cmp	r4, r3
 800a4fe:	dc10      	bgt.n	800a522 <atanf+0x5e>
 800a500:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800a504:	da0a      	bge.n	800a51c <atanf+0x58>
 800a506:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a62c <atanf+0x168>
 800a50a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a50e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a512:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a51a:	dce2      	bgt.n	800a4e2 <atanf+0x1e>
 800a51c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a520:	e013      	b.n	800a54a <atanf+0x86>
 800a522:	f000 f8a3 	bl	800a66c <fabsf>
 800a526:	4b42      	ldr	r3, [pc, #264]	; (800a630 <atanf+0x16c>)
 800a528:	429c      	cmp	r4, r3
 800a52a:	dc4f      	bgt.n	800a5cc <atanf+0x108>
 800a52c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800a530:	429c      	cmp	r4, r3
 800a532:	dc41      	bgt.n	800a5b8 <atanf+0xf4>
 800a534:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a538:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a53c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a540:	2300      	movs	r3, #0
 800a542:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a546:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a54a:	1c5a      	adds	r2, r3, #1
 800a54c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a550:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a634 <atanf+0x170>
 800a554:	eddf 5a38 	vldr	s11, [pc, #224]	; 800a638 <atanf+0x174>
 800a558:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800a63c <atanf+0x178>
 800a55c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a560:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a564:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a640 <atanf+0x17c>
 800a568:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a56c:	eddf 5a35 	vldr	s11, [pc, #212]	; 800a644 <atanf+0x180>
 800a570:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a574:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a648 <atanf+0x184>
 800a578:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a57c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a64c <atanf+0x188>
 800a580:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a584:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800a650 <atanf+0x18c>
 800a588:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a58c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a654 <atanf+0x190>
 800a590:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a594:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800a658 <atanf+0x194>
 800a598:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a59c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a65c <atanf+0x198>
 800a5a0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a5a4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a5a8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a5ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a5b0:	d121      	bne.n	800a5f6 <atanf+0x132>
 800a5b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a5b6:	e794      	b.n	800a4e2 <atanf+0x1e>
 800a5b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a5bc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a5c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a5ca:	e7be      	b.n	800a54a <atanf+0x86>
 800a5cc:	4b24      	ldr	r3, [pc, #144]	; (800a660 <atanf+0x19c>)
 800a5ce:	429c      	cmp	r4, r3
 800a5d0:	dc0b      	bgt.n	800a5ea <atanf+0x126>
 800a5d2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800a5d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5da:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a5de:	2302      	movs	r3, #2
 800a5e0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a5e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5e8:	e7af      	b.n	800a54a <atanf+0x86>
 800a5ea:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a5ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	e7a9      	b.n	800a54a <atanf+0x86>
 800a5f6:	4a1b      	ldr	r2, [pc, #108]	; (800a664 <atanf+0x1a0>)
 800a5f8:	491b      	ldr	r1, [pc, #108]	; (800a668 <atanf+0x1a4>)
 800a5fa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a5fe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a602:	ed93 0a00 	vldr	s0, [r3]
 800a606:	ee37 7a40 	vsub.f32	s14, s14, s0
 800a60a:	ed92 0a00 	vldr	s0, [r2]
 800a60e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a612:	2d00      	cmp	r5, #0
 800a614:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a618:	bfb8      	it	lt
 800a61a:	eef1 7a67 	vneglt.f32	s15, s15
 800a61e:	e760      	b.n	800a4e2 <atanf+0x1e>
 800a620:	3fc90fdb 	.word	0x3fc90fdb
 800a624:	bfc90fdb 	.word	0xbfc90fdb
 800a628:	3edfffff 	.word	0x3edfffff
 800a62c:	7149f2ca 	.word	0x7149f2ca
 800a630:	3f97ffff 	.word	0x3f97ffff
 800a634:	3c8569d7 	.word	0x3c8569d7
 800a638:	3d4bda59 	.word	0x3d4bda59
 800a63c:	bd6ef16b 	.word	0xbd6ef16b
 800a640:	3d886b35 	.word	0x3d886b35
 800a644:	3dba2e6e 	.word	0x3dba2e6e
 800a648:	3e124925 	.word	0x3e124925
 800a64c:	3eaaaaab 	.word	0x3eaaaaab
 800a650:	bd15a221 	.word	0xbd15a221
 800a654:	bd9d8795 	.word	0xbd9d8795
 800a658:	bde38e38 	.word	0xbde38e38
 800a65c:	be4ccccd 	.word	0xbe4ccccd
 800a660:	401bffff 	.word	0x401bffff
 800a664:	0800f39c 	.word	0x0800f39c
 800a668:	0800f3ac 	.word	0x0800f3ac

0800a66c <fabsf>:
 800a66c:	ee10 3a10 	vmov	r3, s0
 800a670:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a674:	ee00 3a10 	vmov	s0, r3
 800a678:	4770      	bx	lr

0800a67a <abort>:
 800a67a:	b508      	push	{r3, lr}
 800a67c:	2006      	movs	r0, #6
 800a67e:	f000 fef3 	bl	800b468 <raise>
 800a682:	2001      	movs	r0, #1
 800a684:	f7fa fe96 	bl	80053b4 <_exit>

0800a688 <__errno>:
 800a688:	4b01      	ldr	r3, [pc, #4]	; (800a690 <__errno+0x8>)
 800a68a:	6818      	ldr	r0, [r3, #0]
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	20000020 	.word	0x20000020

0800a694 <__libc_init_array>:
 800a694:	b570      	push	{r4, r5, r6, lr}
 800a696:	4d0d      	ldr	r5, [pc, #52]	; (800a6cc <__libc_init_array+0x38>)
 800a698:	4c0d      	ldr	r4, [pc, #52]	; (800a6d0 <__libc_init_array+0x3c>)
 800a69a:	1b64      	subs	r4, r4, r5
 800a69c:	10a4      	asrs	r4, r4, #2
 800a69e:	2600      	movs	r6, #0
 800a6a0:	42a6      	cmp	r6, r4
 800a6a2:	d109      	bne.n	800a6b8 <__libc_init_array+0x24>
 800a6a4:	4d0b      	ldr	r5, [pc, #44]	; (800a6d4 <__libc_init_array+0x40>)
 800a6a6:	4c0c      	ldr	r4, [pc, #48]	; (800a6d8 <__libc_init_array+0x44>)
 800a6a8:	f004 fc90 	bl	800efcc <_init>
 800a6ac:	1b64      	subs	r4, r4, r5
 800a6ae:	10a4      	asrs	r4, r4, #2
 800a6b0:	2600      	movs	r6, #0
 800a6b2:	42a6      	cmp	r6, r4
 800a6b4:	d105      	bne.n	800a6c2 <__libc_init_array+0x2e>
 800a6b6:	bd70      	pop	{r4, r5, r6, pc}
 800a6b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6bc:	4798      	blx	r3
 800a6be:	3601      	adds	r6, #1
 800a6c0:	e7ee      	b.n	800a6a0 <__libc_init_array+0xc>
 800a6c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6c6:	4798      	blx	r3
 800a6c8:	3601      	adds	r6, #1
 800a6ca:	e7f2      	b.n	800a6b2 <__libc_init_array+0x1e>
 800a6cc:	0800f86c 	.word	0x0800f86c
 800a6d0:	0800f86c 	.word	0x0800f86c
 800a6d4:	0800f86c 	.word	0x0800f86c
 800a6d8:	0800f87c 	.word	0x0800f87c

0800a6dc <memcpy>:
 800a6dc:	440a      	add	r2, r1
 800a6de:	4291      	cmp	r1, r2
 800a6e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a6e4:	d100      	bne.n	800a6e8 <memcpy+0xc>
 800a6e6:	4770      	bx	lr
 800a6e8:	b510      	push	{r4, lr}
 800a6ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6f2:	4291      	cmp	r1, r2
 800a6f4:	d1f9      	bne.n	800a6ea <memcpy+0xe>
 800a6f6:	bd10      	pop	{r4, pc}

0800a6f8 <memset>:
 800a6f8:	4402      	add	r2, r0
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d100      	bne.n	800a702 <memset+0xa>
 800a700:	4770      	bx	lr
 800a702:	f803 1b01 	strb.w	r1, [r3], #1
 800a706:	e7f9      	b.n	800a6fc <memset+0x4>

0800a708 <__cvt>:
 800a708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a70c:	ec55 4b10 	vmov	r4, r5, d0
 800a710:	2d00      	cmp	r5, #0
 800a712:	460e      	mov	r6, r1
 800a714:	4619      	mov	r1, r3
 800a716:	462b      	mov	r3, r5
 800a718:	bfbb      	ittet	lt
 800a71a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a71e:	461d      	movlt	r5, r3
 800a720:	2300      	movge	r3, #0
 800a722:	232d      	movlt	r3, #45	; 0x2d
 800a724:	700b      	strb	r3, [r1, #0]
 800a726:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a728:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a72c:	4691      	mov	r9, r2
 800a72e:	f023 0820 	bic.w	r8, r3, #32
 800a732:	bfbc      	itt	lt
 800a734:	4622      	movlt	r2, r4
 800a736:	4614      	movlt	r4, r2
 800a738:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a73c:	d005      	beq.n	800a74a <__cvt+0x42>
 800a73e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a742:	d100      	bne.n	800a746 <__cvt+0x3e>
 800a744:	3601      	adds	r6, #1
 800a746:	2102      	movs	r1, #2
 800a748:	e000      	b.n	800a74c <__cvt+0x44>
 800a74a:	2103      	movs	r1, #3
 800a74c:	ab03      	add	r3, sp, #12
 800a74e:	9301      	str	r3, [sp, #4]
 800a750:	ab02      	add	r3, sp, #8
 800a752:	9300      	str	r3, [sp, #0]
 800a754:	ec45 4b10 	vmov	d0, r4, r5
 800a758:	4653      	mov	r3, sl
 800a75a:	4632      	mov	r2, r6
 800a75c:	f001 fdf8 	bl	800c350 <_dtoa_r>
 800a760:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a764:	4607      	mov	r7, r0
 800a766:	d102      	bne.n	800a76e <__cvt+0x66>
 800a768:	f019 0f01 	tst.w	r9, #1
 800a76c:	d022      	beq.n	800a7b4 <__cvt+0xac>
 800a76e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a772:	eb07 0906 	add.w	r9, r7, r6
 800a776:	d110      	bne.n	800a79a <__cvt+0x92>
 800a778:	783b      	ldrb	r3, [r7, #0]
 800a77a:	2b30      	cmp	r3, #48	; 0x30
 800a77c:	d10a      	bne.n	800a794 <__cvt+0x8c>
 800a77e:	2200      	movs	r2, #0
 800a780:	2300      	movs	r3, #0
 800a782:	4620      	mov	r0, r4
 800a784:	4629      	mov	r1, r5
 800a786:	f7f6 f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a78a:	b918      	cbnz	r0, 800a794 <__cvt+0x8c>
 800a78c:	f1c6 0601 	rsb	r6, r6, #1
 800a790:	f8ca 6000 	str.w	r6, [sl]
 800a794:	f8da 3000 	ldr.w	r3, [sl]
 800a798:	4499      	add	r9, r3
 800a79a:	2200      	movs	r2, #0
 800a79c:	2300      	movs	r3, #0
 800a79e:	4620      	mov	r0, r4
 800a7a0:	4629      	mov	r1, r5
 800a7a2:	f7f6 f991 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7a6:	b108      	cbz	r0, 800a7ac <__cvt+0xa4>
 800a7a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a7ac:	2230      	movs	r2, #48	; 0x30
 800a7ae:	9b03      	ldr	r3, [sp, #12]
 800a7b0:	454b      	cmp	r3, r9
 800a7b2:	d307      	bcc.n	800a7c4 <__cvt+0xbc>
 800a7b4:	9b03      	ldr	r3, [sp, #12]
 800a7b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7b8:	1bdb      	subs	r3, r3, r7
 800a7ba:	4638      	mov	r0, r7
 800a7bc:	6013      	str	r3, [r2, #0]
 800a7be:	b004      	add	sp, #16
 800a7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c4:	1c59      	adds	r1, r3, #1
 800a7c6:	9103      	str	r1, [sp, #12]
 800a7c8:	701a      	strb	r2, [r3, #0]
 800a7ca:	e7f0      	b.n	800a7ae <__cvt+0xa6>

0800a7cc <__exponent>:
 800a7cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2900      	cmp	r1, #0
 800a7d2:	bfb8      	it	lt
 800a7d4:	4249      	neglt	r1, r1
 800a7d6:	f803 2b02 	strb.w	r2, [r3], #2
 800a7da:	bfb4      	ite	lt
 800a7dc:	222d      	movlt	r2, #45	; 0x2d
 800a7de:	222b      	movge	r2, #43	; 0x2b
 800a7e0:	2909      	cmp	r1, #9
 800a7e2:	7042      	strb	r2, [r0, #1]
 800a7e4:	dd2a      	ble.n	800a83c <__exponent+0x70>
 800a7e6:	f10d 0407 	add.w	r4, sp, #7
 800a7ea:	46a4      	mov	ip, r4
 800a7ec:	270a      	movs	r7, #10
 800a7ee:	46a6      	mov	lr, r4
 800a7f0:	460a      	mov	r2, r1
 800a7f2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a7f6:	fb07 1516 	mls	r5, r7, r6, r1
 800a7fa:	3530      	adds	r5, #48	; 0x30
 800a7fc:	2a63      	cmp	r2, #99	; 0x63
 800a7fe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a802:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a806:	4631      	mov	r1, r6
 800a808:	dcf1      	bgt.n	800a7ee <__exponent+0x22>
 800a80a:	3130      	adds	r1, #48	; 0x30
 800a80c:	f1ae 0502 	sub.w	r5, lr, #2
 800a810:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a814:	1c44      	adds	r4, r0, #1
 800a816:	4629      	mov	r1, r5
 800a818:	4561      	cmp	r1, ip
 800a81a:	d30a      	bcc.n	800a832 <__exponent+0x66>
 800a81c:	f10d 0209 	add.w	r2, sp, #9
 800a820:	eba2 020e 	sub.w	r2, r2, lr
 800a824:	4565      	cmp	r5, ip
 800a826:	bf88      	it	hi
 800a828:	2200      	movhi	r2, #0
 800a82a:	4413      	add	r3, r2
 800a82c:	1a18      	subs	r0, r3, r0
 800a82e:	b003      	add	sp, #12
 800a830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a832:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a836:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a83a:	e7ed      	b.n	800a818 <__exponent+0x4c>
 800a83c:	2330      	movs	r3, #48	; 0x30
 800a83e:	3130      	adds	r1, #48	; 0x30
 800a840:	7083      	strb	r3, [r0, #2]
 800a842:	70c1      	strb	r1, [r0, #3]
 800a844:	1d03      	adds	r3, r0, #4
 800a846:	e7f1      	b.n	800a82c <__exponent+0x60>

0800a848 <_printf_float>:
 800a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	ed2d 8b02 	vpush	{d8}
 800a850:	b08d      	sub	sp, #52	; 0x34
 800a852:	460c      	mov	r4, r1
 800a854:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a858:	4616      	mov	r6, r2
 800a85a:	461f      	mov	r7, r3
 800a85c:	4605      	mov	r5, r0
 800a85e:	f002 fed5 	bl	800d60c <_localeconv_r>
 800a862:	f8d0 a000 	ldr.w	sl, [r0]
 800a866:	4650      	mov	r0, sl
 800a868:	f7f5 fcb2 	bl	80001d0 <strlen>
 800a86c:	2300      	movs	r3, #0
 800a86e:	930a      	str	r3, [sp, #40]	; 0x28
 800a870:	6823      	ldr	r3, [r4, #0]
 800a872:	9305      	str	r3, [sp, #20]
 800a874:	f8d8 3000 	ldr.w	r3, [r8]
 800a878:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a87c:	3307      	adds	r3, #7
 800a87e:	f023 0307 	bic.w	r3, r3, #7
 800a882:	f103 0208 	add.w	r2, r3, #8
 800a886:	f8c8 2000 	str.w	r2, [r8]
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a892:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a896:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a89a:	9307      	str	r3, [sp, #28]
 800a89c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a8a0:	ee08 0a10 	vmov	s16, r0
 800a8a4:	4b9f      	ldr	r3, [pc, #636]	; (800ab24 <_printf_float+0x2dc>)
 800a8a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8ae:	f7f6 f93d 	bl	8000b2c <__aeabi_dcmpun>
 800a8b2:	bb88      	cbnz	r0, 800a918 <_printf_float+0xd0>
 800a8b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8b8:	4b9a      	ldr	r3, [pc, #616]	; (800ab24 <_printf_float+0x2dc>)
 800a8ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8be:	f7f6 f917 	bl	8000af0 <__aeabi_dcmple>
 800a8c2:	bb48      	cbnz	r0, 800a918 <_printf_float+0xd0>
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	4640      	mov	r0, r8
 800a8ca:	4649      	mov	r1, r9
 800a8cc:	f7f6 f906 	bl	8000adc <__aeabi_dcmplt>
 800a8d0:	b110      	cbz	r0, 800a8d8 <_printf_float+0x90>
 800a8d2:	232d      	movs	r3, #45	; 0x2d
 800a8d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8d8:	4b93      	ldr	r3, [pc, #588]	; (800ab28 <_printf_float+0x2e0>)
 800a8da:	4894      	ldr	r0, [pc, #592]	; (800ab2c <_printf_float+0x2e4>)
 800a8dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a8e0:	bf94      	ite	ls
 800a8e2:	4698      	movls	r8, r3
 800a8e4:	4680      	movhi	r8, r0
 800a8e6:	2303      	movs	r3, #3
 800a8e8:	6123      	str	r3, [r4, #16]
 800a8ea:	9b05      	ldr	r3, [sp, #20]
 800a8ec:	f023 0204 	bic.w	r2, r3, #4
 800a8f0:	6022      	str	r2, [r4, #0]
 800a8f2:	f04f 0900 	mov.w	r9, #0
 800a8f6:	9700      	str	r7, [sp, #0]
 800a8f8:	4633      	mov	r3, r6
 800a8fa:	aa0b      	add	r2, sp, #44	; 0x2c
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	4628      	mov	r0, r5
 800a900:	f000 f9d8 	bl	800acb4 <_printf_common>
 800a904:	3001      	adds	r0, #1
 800a906:	f040 8090 	bne.w	800aa2a <_printf_float+0x1e2>
 800a90a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a90e:	b00d      	add	sp, #52	; 0x34
 800a910:	ecbd 8b02 	vpop	{d8}
 800a914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a918:	4642      	mov	r2, r8
 800a91a:	464b      	mov	r3, r9
 800a91c:	4640      	mov	r0, r8
 800a91e:	4649      	mov	r1, r9
 800a920:	f7f6 f904 	bl	8000b2c <__aeabi_dcmpun>
 800a924:	b140      	cbz	r0, 800a938 <_printf_float+0xf0>
 800a926:	464b      	mov	r3, r9
 800a928:	2b00      	cmp	r3, #0
 800a92a:	bfbc      	itt	lt
 800a92c:	232d      	movlt	r3, #45	; 0x2d
 800a92e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a932:	487f      	ldr	r0, [pc, #508]	; (800ab30 <_printf_float+0x2e8>)
 800a934:	4b7f      	ldr	r3, [pc, #508]	; (800ab34 <_printf_float+0x2ec>)
 800a936:	e7d1      	b.n	800a8dc <_printf_float+0x94>
 800a938:	6863      	ldr	r3, [r4, #4]
 800a93a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a93e:	9206      	str	r2, [sp, #24]
 800a940:	1c5a      	adds	r2, r3, #1
 800a942:	d13f      	bne.n	800a9c4 <_printf_float+0x17c>
 800a944:	2306      	movs	r3, #6
 800a946:	6063      	str	r3, [r4, #4]
 800a948:	9b05      	ldr	r3, [sp, #20]
 800a94a:	6861      	ldr	r1, [r4, #4]
 800a94c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a950:	2300      	movs	r3, #0
 800a952:	9303      	str	r3, [sp, #12]
 800a954:	ab0a      	add	r3, sp, #40	; 0x28
 800a956:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a95a:	ab09      	add	r3, sp, #36	; 0x24
 800a95c:	ec49 8b10 	vmov	d0, r8, r9
 800a960:	9300      	str	r3, [sp, #0]
 800a962:	6022      	str	r2, [r4, #0]
 800a964:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a968:	4628      	mov	r0, r5
 800a96a:	f7ff fecd 	bl	800a708 <__cvt>
 800a96e:	9b06      	ldr	r3, [sp, #24]
 800a970:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a972:	2b47      	cmp	r3, #71	; 0x47
 800a974:	4680      	mov	r8, r0
 800a976:	d108      	bne.n	800a98a <_printf_float+0x142>
 800a978:	1cc8      	adds	r0, r1, #3
 800a97a:	db02      	blt.n	800a982 <_printf_float+0x13a>
 800a97c:	6863      	ldr	r3, [r4, #4]
 800a97e:	4299      	cmp	r1, r3
 800a980:	dd41      	ble.n	800aa06 <_printf_float+0x1be>
 800a982:	f1ab 0b02 	sub.w	fp, fp, #2
 800a986:	fa5f fb8b 	uxtb.w	fp, fp
 800a98a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a98e:	d820      	bhi.n	800a9d2 <_printf_float+0x18a>
 800a990:	3901      	subs	r1, #1
 800a992:	465a      	mov	r2, fp
 800a994:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a998:	9109      	str	r1, [sp, #36]	; 0x24
 800a99a:	f7ff ff17 	bl	800a7cc <__exponent>
 800a99e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9a0:	1813      	adds	r3, r2, r0
 800a9a2:	2a01      	cmp	r2, #1
 800a9a4:	4681      	mov	r9, r0
 800a9a6:	6123      	str	r3, [r4, #16]
 800a9a8:	dc02      	bgt.n	800a9b0 <_printf_float+0x168>
 800a9aa:	6822      	ldr	r2, [r4, #0]
 800a9ac:	07d2      	lsls	r2, r2, #31
 800a9ae:	d501      	bpl.n	800a9b4 <_printf_float+0x16c>
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	6123      	str	r3, [r4, #16]
 800a9b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d09c      	beq.n	800a8f6 <_printf_float+0xae>
 800a9bc:	232d      	movs	r3, #45	; 0x2d
 800a9be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9c2:	e798      	b.n	800a8f6 <_printf_float+0xae>
 800a9c4:	9a06      	ldr	r2, [sp, #24]
 800a9c6:	2a47      	cmp	r2, #71	; 0x47
 800a9c8:	d1be      	bne.n	800a948 <_printf_float+0x100>
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d1bc      	bne.n	800a948 <_printf_float+0x100>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e7b9      	b.n	800a946 <_printf_float+0xfe>
 800a9d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a9d6:	d118      	bne.n	800aa0a <_printf_float+0x1c2>
 800a9d8:	2900      	cmp	r1, #0
 800a9da:	6863      	ldr	r3, [r4, #4]
 800a9dc:	dd0b      	ble.n	800a9f6 <_printf_float+0x1ae>
 800a9de:	6121      	str	r1, [r4, #16]
 800a9e0:	b913      	cbnz	r3, 800a9e8 <_printf_float+0x1a0>
 800a9e2:	6822      	ldr	r2, [r4, #0]
 800a9e4:	07d0      	lsls	r0, r2, #31
 800a9e6:	d502      	bpl.n	800a9ee <_printf_float+0x1a6>
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	440b      	add	r3, r1
 800a9ec:	6123      	str	r3, [r4, #16]
 800a9ee:	65a1      	str	r1, [r4, #88]	; 0x58
 800a9f0:	f04f 0900 	mov.w	r9, #0
 800a9f4:	e7de      	b.n	800a9b4 <_printf_float+0x16c>
 800a9f6:	b913      	cbnz	r3, 800a9fe <_printf_float+0x1b6>
 800a9f8:	6822      	ldr	r2, [r4, #0]
 800a9fa:	07d2      	lsls	r2, r2, #31
 800a9fc:	d501      	bpl.n	800aa02 <_printf_float+0x1ba>
 800a9fe:	3302      	adds	r3, #2
 800aa00:	e7f4      	b.n	800a9ec <_printf_float+0x1a4>
 800aa02:	2301      	movs	r3, #1
 800aa04:	e7f2      	b.n	800a9ec <_printf_float+0x1a4>
 800aa06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800aa0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa0c:	4299      	cmp	r1, r3
 800aa0e:	db05      	blt.n	800aa1c <_printf_float+0x1d4>
 800aa10:	6823      	ldr	r3, [r4, #0]
 800aa12:	6121      	str	r1, [r4, #16]
 800aa14:	07d8      	lsls	r0, r3, #31
 800aa16:	d5ea      	bpl.n	800a9ee <_printf_float+0x1a6>
 800aa18:	1c4b      	adds	r3, r1, #1
 800aa1a:	e7e7      	b.n	800a9ec <_printf_float+0x1a4>
 800aa1c:	2900      	cmp	r1, #0
 800aa1e:	bfd4      	ite	le
 800aa20:	f1c1 0202 	rsble	r2, r1, #2
 800aa24:	2201      	movgt	r2, #1
 800aa26:	4413      	add	r3, r2
 800aa28:	e7e0      	b.n	800a9ec <_printf_float+0x1a4>
 800aa2a:	6823      	ldr	r3, [r4, #0]
 800aa2c:	055a      	lsls	r2, r3, #21
 800aa2e:	d407      	bmi.n	800aa40 <_printf_float+0x1f8>
 800aa30:	6923      	ldr	r3, [r4, #16]
 800aa32:	4642      	mov	r2, r8
 800aa34:	4631      	mov	r1, r6
 800aa36:	4628      	mov	r0, r5
 800aa38:	47b8      	blx	r7
 800aa3a:	3001      	adds	r0, #1
 800aa3c:	d12c      	bne.n	800aa98 <_printf_float+0x250>
 800aa3e:	e764      	b.n	800a90a <_printf_float+0xc2>
 800aa40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aa44:	f240 80e0 	bls.w	800ac08 <_printf_float+0x3c0>
 800aa48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	2300      	movs	r3, #0
 800aa50:	f7f6 f83a 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	d034      	beq.n	800aac2 <_printf_float+0x27a>
 800aa58:	4a37      	ldr	r2, [pc, #220]	; (800ab38 <_printf_float+0x2f0>)
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	4631      	mov	r1, r6
 800aa5e:	4628      	mov	r0, r5
 800aa60:	47b8      	blx	r7
 800aa62:	3001      	adds	r0, #1
 800aa64:	f43f af51 	beq.w	800a90a <_printf_float+0xc2>
 800aa68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	db02      	blt.n	800aa76 <_printf_float+0x22e>
 800aa70:	6823      	ldr	r3, [r4, #0]
 800aa72:	07d8      	lsls	r0, r3, #31
 800aa74:	d510      	bpl.n	800aa98 <_printf_float+0x250>
 800aa76:	ee18 3a10 	vmov	r3, s16
 800aa7a:	4652      	mov	r2, sl
 800aa7c:	4631      	mov	r1, r6
 800aa7e:	4628      	mov	r0, r5
 800aa80:	47b8      	blx	r7
 800aa82:	3001      	adds	r0, #1
 800aa84:	f43f af41 	beq.w	800a90a <_printf_float+0xc2>
 800aa88:	f04f 0800 	mov.w	r8, #0
 800aa8c:	f104 091a 	add.w	r9, r4, #26
 800aa90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa92:	3b01      	subs	r3, #1
 800aa94:	4543      	cmp	r3, r8
 800aa96:	dc09      	bgt.n	800aaac <_printf_float+0x264>
 800aa98:	6823      	ldr	r3, [r4, #0]
 800aa9a:	079b      	lsls	r3, r3, #30
 800aa9c:	f100 8105 	bmi.w	800acaa <_printf_float+0x462>
 800aaa0:	68e0      	ldr	r0, [r4, #12]
 800aaa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaa4:	4298      	cmp	r0, r3
 800aaa6:	bfb8      	it	lt
 800aaa8:	4618      	movlt	r0, r3
 800aaaa:	e730      	b.n	800a90e <_printf_float+0xc6>
 800aaac:	2301      	movs	r3, #1
 800aaae:	464a      	mov	r2, r9
 800aab0:	4631      	mov	r1, r6
 800aab2:	4628      	mov	r0, r5
 800aab4:	47b8      	blx	r7
 800aab6:	3001      	adds	r0, #1
 800aab8:	f43f af27 	beq.w	800a90a <_printf_float+0xc2>
 800aabc:	f108 0801 	add.w	r8, r8, #1
 800aac0:	e7e6      	b.n	800aa90 <_printf_float+0x248>
 800aac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	dc39      	bgt.n	800ab3c <_printf_float+0x2f4>
 800aac8:	4a1b      	ldr	r2, [pc, #108]	; (800ab38 <_printf_float+0x2f0>)
 800aaca:	2301      	movs	r3, #1
 800aacc:	4631      	mov	r1, r6
 800aace:	4628      	mov	r0, r5
 800aad0:	47b8      	blx	r7
 800aad2:	3001      	adds	r0, #1
 800aad4:	f43f af19 	beq.w	800a90a <_printf_float+0xc2>
 800aad8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aadc:	4313      	orrs	r3, r2
 800aade:	d102      	bne.n	800aae6 <_printf_float+0x29e>
 800aae0:	6823      	ldr	r3, [r4, #0]
 800aae2:	07d9      	lsls	r1, r3, #31
 800aae4:	d5d8      	bpl.n	800aa98 <_printf_float+0x250>
 800aae6:	ee18 3a10 	vmov	r3, s16
 800aaea:	4652      	mov	r2, sl
 800aaec:	4631      	mov	r1, r6
 800aaee:	4628      	mov	r0, r5
 800aaf0:	47b8      	blx	r7
 800aaf2:	3001      	adds	r0, #1
 800aaf4:	f43f af09 	beq.w	800a90a <_printf_float+0xc2>
 800aaf8:	f04f 0900 	mov.w	r9, #0
 800aafc:	f104 0a1a 	add.w	sl, r4, #26
 800ab00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab02:	425b      	negs	r3, r3
 800ab04:	454b      	cmp	r3, r9
 800ab06:	dc01      	bgt.n	800ab0c <_printf_float+0x2c4>
 800ab08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab0a:	e792      	b.n	800aa32 <_printf_float+0x1ea>
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	4652      	mov	r2, sl
 800ab10:	4631      	mov	r1, r6
 800ab12:	4628      	mov	r0, r5
 800ab14:	47b8      	blx	r7
 800ab16:	3001      	adds	r0, #1
 800ab18:	f43f aef7 	beq.w	800a90a <_printf_float+0xc2>
 800ab1c:	f109 0901 	add.w	r9, r9, #1
 800ab20:	e7ee      	b.n	800ab00 <_printf_float+0x2b8>
 800ab22:	bf00      	nop
 800ab24:	7fefffff 	.word	0x7fefffff
 800ab28:	0800f3c0 	.word	0x0800f3c0
 800ab2c:	0800f3c4 	.word	0x0800f3c4
 800ab30:	0800f3cc 	.word	0x0800f3cc
 800ab34:	0800f3c8 	.word	0x0800f3c8
 800ab38:	0800f3d0 	.word	0x0800f3d0
 800ab3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab40:	429a      	cmp	r2, r3
 800ab42:	bfa8      	it	ge
 800ab44:	461a      	movge	r2, r3
 800ab46:	2a00      	cmp	r2, #0
 800ab48:	4691      	mov	r9, r2
 800ab4a:	dc37      	bgt.n	800abbc <_printf_float+0x374>
 800ab4c:	f04f 0b00 	mov.w	fp, #0
 800ab50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab54:	f104 021a 	add.w	r2, r4, #26
 800ab58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab5a:	9305      	str	r3, [sp, #20]
 800ab5c:	eba3 0309 	sub.w	r3, r3, r9
 800ab60:	455b      	cmp	r3, fp
 800ab62:	dc33      	bgt.n	800abcc <_printf_float+0x384>
 800ab64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	db3b      	blt.n	800abe4 <_printf_float+0x39c>
 800ab6c:	6823      	ldr	r3, [r4, #0]
 800ab6e:	07da      	lsls	r2, r3, #31
 800ab70:	d438      	bmi.n	800abe4 <_printf_float+0x39c>
 800ab72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab74:	9a05      	ldr	r2, [sp, #20]
 800ab76:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab78:	1a9a      	subs	r2, r3, r2
 800ab7a:	eba3 0901 	sub.w	r9, r3, r1
 800ab7e:	4591      	cmp	r9, r2
 800ab80:	bfa8      	it	ge
 800ab82:	4691      	movge	r9, r2
 800ab84:	f1b9 0f00 	cmp.w	r9, #0
 800ab88:	dc35      	bgt.n	800abf6 <_printf_float+0x3ae>
 800ab8a:	f04f 0800 	mov.w	r8, #0
 800ab8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab92:	f104 0a1a 	add.w	sl, r4, #26
 800ab96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab9a:	1a9b      	subs	r3, r3, r2
 800ab9c:	eba3 0309 	sub.w	r3, r3, r9
 800aba0:	4543      	cmp	r3, r8
 800aba2:	f77f af79 	ble.w	800aa98 <_printf_float+0x250>
 800aba6:	2301      	movs	r3, #1
 800aba8:	4652      	mov	r2, sl
 800abaa:	4631      	mov	r1, r6
 800abac:	4628      	mov	r0, r5
 800abae:	47b8      	blx	r7
 800abb0:	3001      	adds	r0, #1
 800abb2:	f43f aeaa 	beq.w	800a90a <_printf_float+0xc2>
 800abb6:	f108 0801 	add.w	r8, r8, #1
 800abba:	e7ec      	b.n	800ab96 <_printf_float+0x34e>
 800abbc:	4613      	mov	r3, r2
 800abbe:	4631      	mov	r1, r6
 800abc0:	4642      	mov	r2, r8
 800abc2:	4628      	mov	r0, r5
 800abc4:	47b8      	blx	r7
 800abc6:	3001      	adds	r0, #1
 800abc8:	d1c0      	bne.n	800ab4c <_printf_float+0x304>
 800abca:	e69e      	b.n	800a90a <_printf_float+0xc2>
 800abcc:	2301      	movs	r3, #1
 800abce:	4631      	mov	r1, r6
 800abd0:	4628      	mov	r0, r5
 800abd2:	9205      	str	r2, [sp, #20]
 800abd4:	47b8      	blx	r7
 800abd6:	3001      	adds	r0, #1
 800abd8:	f43f ae97 	beq.w	800a90a <_printf_float+0xc2>
 800abdc:	9a05      	ldr	r2, [sp, #20]
 800abde:	f10b 0b01 	add.w	fp, fp, #1
 800abe2:	e7b9      	b.n	800ab58 <_printf_float+0x310>
 800abe4:	ee18 3a10 	vmov	r3, s16
 800abe8:	4652      	mov	r2, sl
 800abea:	4631      	mov	r1, r6
 800abec:	4628      	mov	r0, r5
 800abee:	47b8      	blx	r7
 800abf0:	3001      	adds	r0, #1
 800abf2:	d1be      	bne.n	800ab72 <_printf_float+0x32a>
 800abf4:	e689      	b.n	800a90a <_printf_float+0xc2>
 800abf6:	9a05      	ldr	r2, [sp, #20]
 800abf8:	464b      	mov	r3, r9
 800abfa:	4442      	add	r2, r8
 800abfc:	4631      	mov	r1, r6
 800abfe:	4628      	mov	r0, r5
 800ac00:	47b8      	blx	r7
 800ac02:	3001      	adds	r0, #1
 800ac04:	d1c1      	bne.n	800ab8a <_printf_float+0x342>
 800ac06:	e680      	b.n	800a90a <_printf_float+0xc2>
 800ac08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac0a:	2a01      	cmp	r2, #1
 800ac0c:	dc01      	bgt.n	800ac12 <_printf_float+0x3ca>
 800ac0e:	07db      	lsls	r3, r3, #31
 800ac10:	d538      	bpl.n	800ac84 <_printf_float+0x43c>
 800ac12:	2301      	movs	r3, #1
 800ac14:	4642      	mov	r2, r8
 800ac16:	4631      	mov	r1, r6
 800ac18:	4628      	mov	r0, r5
 800ac1a:	47b8      	blx	r7
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	f43f ae74 	beq.w	800a90a <_printf_float+0xc2>
 800ac22:	ee18 3a10 	vmov	r3, s16
 800ac26:	4652      	mov	r2, sl
 800ac28:	4631      	mov	r1, r6
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	47b8      	blx	r7
 800ac2e:	3001      	adds	r0, #1
 800ac30:	f43f ae6b 	beq.w	800a90a <_printf_float+0xc2>
 800ac34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac38:	2200      	movs	r2, #0
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	f7f5 ff44 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac40:	b9d8      	cbnz	r0, 800ac7a <_printf_float+0x432>
 800ac42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac44:	f108 0201 	add.w	r2, r8, #1
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	4631      	mov	r1, r6
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	47b8      	blx	r7
 800ac50:	3001      	adds	r0, #1
 800ac52:	d10e      	bne.n	800ac72 <_printf_float+0x42a>
 800ac54:	e659      	b.n	800a90a <_printf_float+0xc2>
 800ac56:	2301      	movs	r3, #1
 800ac58:	4652      	mov	r2, sl
 800ac5a:	4631      	mov	r1, r6
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	47b8      	blx	r7
 800ac60:	3001      	adds	r0, #1
 800ac62:	f43f ae52 	beq.w	800a90a <_printf_float+0xc2>
 800ac66:	f108 0801 	add.w	r8, r8, #1
 800ac6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	4543      	cmp	r3, r8
 800ac70:	dcf1      	bgt.n	800ac56 <_printf_float+0x40e>
 800ac72:	464b      	mov	r3, r9
 800ac74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ac78:	e6dc      	b.n	800aa34 <_printf_float+0x1ec>
 800ac7a:	f04f 0800 	mov.w	r8, #0
 800ac7e:	f104 0a1a 	add.w	sl, r4, #26
 800ac82:	e7f2      	b.n	800ac6a <_printf_float+0x422>
 800ac84:	2301      	movs	r3, #1
 800ac86:	4642      	mov	r2, r8
 800ac88:	e7df      	b.n	800ac4a <_printf_float+0x402>
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	464a      	mov	r2, r9
 800ac8e:	4631      	mov	r1, r6
 800ac90:	4628      	mov	r0, r5
 800ac92:	47b8      	blx	r7
 800ac94:	3001      	adds	r0, #1
 800ac96:	f43f ae38 	beq.w	800a90a <_printf_float+0xc2>
 800ac9a:	f108 0801 	add.w	r8, r8, #1
 800ac9e:	68e3      	ldr	r3, [r4, #12]
 800aca0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aca2:	1a5b      	subs	r3, r3, r1
 800aca4:	4543      	cmp	r3, r8
 800aca6:	dcf0      	bgt.n	800ac8a <_printf_float+0x442>
 800aca8:	e6fa      	b.n	800aaa0 <_printf_float+0x258>
 800acaa:	f04f 0800 	mov.w	r8, #0
 800acae:	f104 0919 	add.w	r9, r4, #25
 800acb2:	e7f4      	b.n	800ac9e <_printf_float+0x456>

0800acb4 <_printf_common>:
 800acb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acb8:	4616      	mov	r6, r2
 800acba:	4699      	mov	r9, r3
 800acbc:	688a      	ldr	r2, [r1, #8]
 800acbe:	690b      	ldr	r3, [r1, #16]
 800acc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800acc4:	4293      	cmp	r3, r2
 800acc6:	bfb8      	it	lt
 800acc8:	4613      	movlt	r3, r2
 800acca:	6033      	str	r3, [r6, #0]
 800accc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800acd0:	4607      	mov	r7, r0
 800acd2:	460c      	mov	r4, r1
 800acd4:	b10a      	cbz	r2, 800acda <_printf_common+0x26>
 800acd6:	3301      	adds	r3, #1
 800acd8:	6033      	str	r3, [r6, #0]
 800acda:	6823      	ldr	r3, [r4, #0]
 800acdc:	0699      	lsls	r1, r3, #26
 800acde:	bf42      	ittt	mi
 800ace0:	6833      	ldrmi	r3, [r6, #0]
 800ace2:	3302      	addmi	r3, #2
 800ace4:	6033      	strmi	r3, [r6, #0]
 800ace6:	6825      	ldr	r5, [r4, #0]
 800ace8:	f015 0506 	ands.w	r5, r5, #6
 800acec:	d106      	bne.n	800acfc <_printf_common+0x48>
 800acee:	f104 0a19 	add.w	sl, r4, #25
 800acf2:	68e3      	ldr	r3, [r4, #12]
 800acf4:	6832      	ldr	r2, [r6, #0]
 800acf6:	1a9b      	subs	r3, r3, r2
 800acf8:	42ab      	cmp	r3, r5
 800acfa:	dc26      	bgt.n	800ad4a <_printf_common+0x96>
 800acfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ad00:	1e13      	subs	r3, r2, #0
 800ad02:	6822      	ldr	r2, [r4, #0]
 800ad04:	bf18      	it	ne
 800ad06:	2301      	movne	r3, #1
 800ad08:	0692      	lsls	r2, r2, #26
 800ad0a:	d42b      	bmi.n	800ad64 <_printf_common+0xb0>
 800ad0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad10:	4649      	mov	r1, r9
 800ad12:	4638      	mov	r0, r7
 800ad14:	47c0      	blx	r8
 800ad16:	3001      	adds	r0, #1
 800ad18:	d01e      	beq.n	800ad58 <_printf_common+0xa4>
 800ad1a:	6823      	ldr	r3, [r4, #0]
 800ad1c:	68e5      	ldr	r5, [r4, #12]
 800ad1e:	6832      	ldr	r2, [r6, #0]
 800ad20:	f003 0306 	and.w	r3, r3, #6
 800ad24:	2b04      	cmp	r3, #4
 800ad26:	bf08      	it	eq
 800ad28:	1aad      	subeq	r5, r5, r2
 800ad2a:	68a3      	ldr	r3, [r4, #8]
 800ad2c:	6922      	ldr	r2, [r4, #16]
 800ad2e:	bf0c      	ite	eq
 800ad30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad34:	2500      	movne	r5, #0
 800ad36:	4293      	cmp	r3, r2
 800ad38:	bfc4      	itt	gt
 800ad3a:	1a9b      	subgt	r3, r3, r2
 800ad3c:	18ed      	addgt	r5, r5, r3
 800ad3e:	2600      	movs	r6, #0
 800ad40:	341a      	adds	r4, #26
 800ad42:	42b5      	cmp	r5, r6
 800ad44:	d11a      	bne.n	800ad7c <_printf_common+0xc8>
 800ad46:	2000      	movs	r0, #0
 800ad48:	e008      	b.n	800ad5c <_printf_common+0xa8>
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	4652      	mov	r2, sl
 800ad4e:	4649      	mov	r1, r9
 800ad50:	4638      	mov	r0, r7
 800ad52:	47c0      	blx	r8
 800ad54:	3001      	adds	r0, #1
 800ad56:	d103      	bne.n	800ad60 <_printf_common+0xac>
 800ad58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad60:	3501      	adds	r5, #1
 800ad62:	e7c6      	b.n	800acf2 <_printf_common+0x3e>
 800ad64:	18e1      	adds	r1, r4, r3
 800ad66:	1c5a      	adds	r2, r3, #1
 800ad68:	2030      	movs	r0, #48	; 0x30
 800ad6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad6e:	4422      	add	r2, r4
 800ad70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad78:	3302      	adds	r3, #2
 800ad7a:	e7c7      	b.n	800ad0c <_printf_common+0x58>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	4622      	mov	r2, r4
 800ad80:	4649      	mov	r1, r9
 800ad82:	4638      	mov	r0, r7
 800ad84:	47c0      	blx	r8
 800ad86:	3001      	adds	r0, #1
 800ad88:	d0e6      	beq.n	800ad58 <_printf_common+0xa4>
 800ad8a:	3601      	adds	r6, #1
 800ad8c:	e7d9      	b.n	800ad42 <_printf_common+0x8e>
	...

0800ad90 <_printf_i>:
 800ad90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad94:	7e0f      	ldrb	r7, [r1, #24]
 800ad96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad98:	2f78      	cmp	r7, #120	; 0x78
 800ad9a:	4691      	mov	r9, r2
 800ad9c:	4680      	mov	r8, r0
 800ad9e:	460c      	mov	r4, r1
 800ada0:	469a      	mov	sl, r3
 800ada2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ada6:	d807      	bhi.n	800adb8 <_printf_i+0x28>
 800ada8:	2f62      	cmp	r7, #98	; 0x62
 800adaa:	d80a      	bhi.n	800adc2 <_printf_i+0x32>
 800adac:	2f00      	cmp	r7, #0
 800adae:	f000 80d8 	beq.w	800af62 <_printf_i+0x1d2>
 800adb2:	2f58      	cmp	r7, #88	; 0x58
 800adb4:	f000 80a3 	beq.w	800aefe <_printf_i+0x16e>
 800adb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800adc0:	e03a      	b.n	800ae38 <_printf_i+0xa8>
 800adc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800adc6:	2b15      	cmp	r3, #21
 800adc8:	d8f6      	bhi.n	800adb8 <_printf_i+0x28>
 800adca:	a101      	add	r1, pc, #4	; (adr r1, 800add0 <_printf_i+0x40>)
 800adcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800add0:	0800ae29 	.word	0x0800ae29
 800add4:	0800ae3d 	.word	0x0800ae3d
 800add8:	0800adb9 	.word	0x0800adb9
 800addc:	0800adb9 	.word	0x0800adb9
 800ade0:	0800adb9 	.word	0x0800adb9
 800ade4:	0800adb9 	.word	0x0800adb9
 800ade8:	0800ae3d 	.word	0x0800ae3d
 800adec:	0800adb9 	.word	0x0800adb9
 800adf0:	0800adb9 	.word	0x0800adb9
 800adf4:	0800adb9 	.word	0x0800adb9
 800adf8:	0800adb9 	.word	0x0800adb9
 800adfc:	0800af49 	.word	0x0800af49
 800ae00:	0800ae6d 	.word	0x0800ae6d
 800ae04:	0800af2b 	.word	0x0800af2b
 800ae08:	0800adb9 	.word	0x0800adb9
 800ae0c:	0800adb9 	.word	0x0800adb9
 800ae10:	0800af6b 	.word	0x0800af6b
 800ae14:	0800adb9 	.word	0x0800adb9
 800ae18:	0800ae6d 	.word	0x0800ae6d
 800ae1c:	0800adb9 	.word	0x0800adb9
 800ae20:	0800adb9 	.word	0x0800adb9
 800ae24:	0800af33 	.word	0x0800af33
 800ae28:	682b      	ldr	r3, [r5, #0]
 800ae2a:	1d1a      	adds	r2, r3, #4
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	602a      	str	r2, [r5, #0]
 800ae30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e0a3      	b.n	800af84 <_printf_i+0x1f4>
 800ae3c:	6820      	ldr	r0, [r4, #0]
 800ae3e:	6829      	ldr	r1, [r5, #0]
 800ae40:	0606      	lsls	r6, r0, #24
 800ae42:	f101 0304 	add.w	r3, r1, #4
 800ae46:	d50a      	bpl.n	800ae5e <_printf_i+0xce>
 800ae48:	680e      	ldr	r6, [r1, #0]
 800ae4a:	602b      	str	r3, [r5, #0]
 800ae4c:	2e00      	cmp	r6, #0
 800ae4e:	da03      	bge.n	800ae58 <_printf_i+0xc8>
 800ae50:	232d      	movs	r3, #45	; 0x2d
 800ae52:	4276      	negs	r6, r6
 800ae54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae58:	485e      	ldr	r0, [pc, #376]	; (800afd4 <_printf_i+0x244>)
 800ae5a:	230a      	movs	r3, #10
 800ae5c:	e019      	b.n	800ae92 <_printf_i+0x102>
 800ae5e:	680e      	ldr	r6, [r1, #0]
 800ae60:	602b      	str	r3, [r5, #0]
 800ae62:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae66:	bf18      	it	ne
 800ae68:	b236      	sxthne	r6, r6
 800ae6a:	e7ef      	b.n	800ae4c <_printf_i+0xbc>
 800ae6c:	682b      	ldr	r3, [r5, #0]
 800ae6e:	6820      	ldr	r0, [r4, #0]
 800ae70:	1d19      	adds	r1, r3, #4
 800ae72:	6029      	str	r1, [r5, #0]
 800ae74:	0601      	lsls	r1, r0, #24
 800ae76:	d501      	bpl.n	800ae7c <_printf_i+0xec>
 800ae78:	681e      	ldr	r6, [r3, #0]
 800ae7a:	e002      	b.n	800ae82 <_printf_i+0xf2>
 800ae7c:	0646      	lsls	r6, r0, #25
 800ae7e:	d5fb      	bpl.n	800ae78 <_printf_i+0xe8>
 800ae80:	881e      	ldrh	r6, [r3, #0]
 800ae82:	4854      	ldr	r0, [pc, #336]	; (800afd4 <_printf_i+0x244>)
 800ae84:	2f6f      	cmp	r7, #111	; 0x6f
 800ae86:	bf0c      	ite	eq
 800ae88:	2308      	moveq	r3, #8
 800ae8a:	230a      	movne	r3, #10
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae92:	6865      	ldr	r5, [r4, #4]
 800ae94:	60a5      	str	r5, [r4, #8]
 800ae96:	2d00      	cmp	r5, #0
 800ae98:	bfa2      	ittt	ge
 800ae9a:	6821      	ldrge	r1, [r4, #0]
 800ae9c:	f021 0104 	bicge.w	r1, r1, #4
 800aea0:	6021      	strge	r1, [r4, #0]
 800aea2:	b90e      	cbnz	r6, 800aea8 <_printf_i+0x118>
 800aea4:	2d00      	cmp	r5, #0
 800aea6:	d04d      	beq.n	800af44 <_printf_i+0x1b4>
 800aea8:	4615      	mov	r5, r2
 800aeaa:	fbb6 f1f3 	udiv	r1, r6, r3
 800aeae:	fb03 6711 	mls	r7, r3, r1, r6
 800aeb2:	5dc7      	ldrb	r7, [r0, r7]
 800aeb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aeb8:	4637      	mov	r7, r6
 800aeba:	42bb      	cmp	r3, r7
 800aebc:	460e      	mov	r6, r1
 800aebe:	d9f4      	bls.n	800aeaa <_printf_i+0x11a>
 800aec0:	2b08      	cmp	r3, #8
 800aec2:	d10b      	bne.n	800aedc <_printf_i+0x14c>
 800aec4:	6823      	ldr	r3, [r4, #0]
 800aec6:	07de      	lsls	r6, r3, #31
 800aec8:	d508      	bpl.n	800aedc <_printf_i+0x14c>
 800aeca:	6923      	ldr	r3, [r4, #16]
 800aecc:	6861      	ldr	r1, [r4, #4]
 800aece:	4299      	cmp	r1, r3
 800aed0:	bfde      	ittt	le
 800aed2:	2330      	movle	r3, #48	; 0x30
 800aed4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aed8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800aedc:	1b52      	subs	r2, r2, r5
 800aede:	6122      	str	r2, [r4, #16]
 800aee0:	f8cd a000 	str.w	sl, [sp]
 800aee4:	464b      	mov	r3, r9
 800aee6:	aa03      	add	r2, sp, #12
 800aee8:	4621      	mov	r1, r4
 800aeea:	4640      	mov	r0, r8
 800aeec:	f7ff fee2 	bl	800acb4 <_printf_common>
 800aef0:	3001      	adds	r0, #1
 800aef2:	d14c      	bne.n	800af8e <_printf_i+0x1fe>
 800aef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aef8:	b004      	add	sp, #16
 800aefa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aefe:	4835      	ldr	r0, [pc, #212]	; (800afd4 <_printf_i+0x244>)
 800af00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800af04:	6829      	ldr	r1, [r5, #0]
 800af06:	6823      	ldr	r3, [r4, #0]
 800af08:	f851 6b04 	ldr.w	r6, [r1], #4
 800af0c:	6029      	str	r1, [r5, #0]
 800af0e:	061d      	lsls	r5, r3, #24
 800af10:	d514      	bpl.n	800af3c <_printf_i+0x1ac>
 800af12:	07df      	lsls	r7, r3, #31
 800af14:	bf44      	itt	mi
 800af16:	f043 0320 	orrmi.w	r3, r3, #32
 800af1a:	6023      	strmi	r3, [r4, #0]
 800af1c:	b91e      	cbnz	r6, 800af26 <_printf_i+0x196>
 800af1e:	6823      	ldr	r3, [r4, #0]
 800af20:	f023 0320 	bic.w	r3, r3, #32
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	2310      	movs	r3, #16
 800af28:	e7b0      	b.n	800ae8c <_printf_i+0xfc>
 800af2a:	6823      	ldr	r3, [r4, #0]
 800af2c:	f043 0320 	orr.w	r3, r3, #32
 800af30:	6023      	str	r3, [r4, #0]
 800af32:	2378      	movs	r3, #120	; 0x78
 800af34:	4828      	ldr	r0, [pc, #160]	; (800afd8 <_printf_i+0x248>)
 800af36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af3a:	e7e3      	b.n	800af04 <_printf_i+0x174>
 800af3c:	0659      	lsls	r1, r3, #25
 800af3e:	bf48      	it	mi
 800af40:	b2b6      	uxthmi	r6, r6
 800af42:	e7e6      	b.n	800af12 <_printf_i+0x182>
 800af44:	4615      	mov	r5, r2
 800af46:	e7bb      	b.n	800aec0 <_printf_i+0x130>
 800af48:	682b      	ldr	r3, [r5, #0]
 800af4a:	6826      	ldr	r6, [r4, #0]
 800af4c:	6961      	ldr	r1, [r4, #20]
 800af4e:	1d18      	adds	r0, r3, #4
 800af50:	6028      	str	r0, [r5, #0]
 800af52:	0635      	lsls	r5, r6, #24
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	d501      	bpl.n	800af5c <_printf_i+0x1cc>
 800af58:	6019      	str	r1, [r3, #0]
 800af5a:	e002      	b.n	800af62 <_printf_i+0x1d2>
 800af5c:	0670      	lsls	r0, r6, #25
 800af5e:	d5fb      	bpl.n	800af58 <_printf_i+0x1c8>
 800af60:	8019      	strh	r1, [r3, #0]
 800af62:	2300      	movs	r3, #0
 800af64:	6123      	str	r3, [r4, #16]
 800af66:	4615      	mov	r5, r2
 800af68:	e7ba      	b.n	800aee0 <_printf_i+0x150>
 800af6a:	682b      	ldr	r3, [r5, #0]
 800af6c:	1d1a      	adds	r2, r3, #4
 800af6e:	602a      	str	r2, [r5, #0]
 800af70:	681d      	ldr	r5, [r3, #0]
 800af72:	6862      	ldr	r2, [r4, #4]
 800af74:	2100      	movs	r1, #0
 800af76:	4628      	mov	r0, r5
 800af78:	f7f5 f932 	bl	80001e0 <memchr>
 800af7c:	b108      	cbz	r0, 800af82 <_printf_i+0x1f2>
 800af7e:	1b40      	subs	r0, r0, r5
 800af80:	6060      	str	r0, [r4, #4]
 800af82:	6863      	ldr	r3, [r4, #4]
 800af84:	6123      	str	r3, [r4, #16]
 800af86:	2300      	movs	r3, #0
 800af88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af8c:	e7a8      	b.n	800aee0 <_printf_i+0x150>
 800af8e:	6923      	ldr	r3, [r4, #16]
 800af90:	462a      	mov	r2, r5
 800af92:	4649      	mov	r1, r9
 800af94:	4640      	mov	r0, r8
 800af96:	47d0      	blx	sl
 800af98:	3001      	adds	r0, #1
 800af9a:	d0ab      	beq.n	800aef4 <_printf_i+0x164>
 800af9c:	6823      	ldr	r3, [r4, #0]
 800af9e:	079b      	lsls	r3, r3, #30
 800afa0:	d413      	bmi.n	800afca <_printf_i+0x23a>
 800afa2:	68e0      	ldr	r0, [r4, #12]
 800afa4:	9b03      	ldr	r3, [sp, #12]
 800afa6:	4298      	cmp	r0, r3
 800afa8:	bfb8      	it	lt
 800afaa:	4618      	movlt	r0, r3
 800afac:	e7a4      	b.n	800aef8 <_printf_i+0x168>
 800afae:	2301      	movs	r3, #1
 800afb0:	4632      	mov	r2, r6
 800afb2:	4649      	mov	r1, r9
 800afb4:	4640      	mov	r0, r8
 800afb6:	47d0      	blx	sl
 800afb8:	3001      	adds	r0, #1
 800afba:	d09b      	beq.n	800aef4 <_printf_i+0x164>
 800afbc:	3501      	adds	r5, #1
 800afbe:	68e3      	ldr	r3, [r4, #12]
 800afc0:	9903      	ldr	r1, [sp, #12]
 800afc2:	1a5b      	subs	r3, r3, r1
 800afc4:	42ab      	cmp	r3, r5
 800afc6:	dcf2      	bgt.n	800afae <_printf_i+0x21e>
 800afc8:	e7eb      	b.n	800afa2 <_printf_i+0x212>
 800afca:	2500      	movs	r5, #0
 800afcc:	f104 0619 	add.w	r6, r4, #25
 800afd0:	e7f5      	b.n	800afbe <_printf_i+0x22e>
 800afd2:	bf00      	nop
 800afd4:	0800f3d2 	.word	0x0800f3d2
 800afd8:	0800f3e3 	.word	0x0800f3e3

0800afdc <_scanf_float>:
 800afdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe0:	b087      	sub	sp, #28
 800afe2:	4617      	mov	r7, r2
 800afe4:	9303      	str	r3, [sp, #12]
 800afe6:	688b      	ldr	r3, [r1, #8]
 800afe8:	1e5a      	subs	r2, r3, #1
 800afea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800afee:	bf83      	ittte	hi
 800aff0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aff4:	195b      	addhi	r3, r3, r5
 800aff6:	9302      	strhi	r3, [sp, #8]
 800aff8:	2300      	movls	r3, #0
 800affa:	bf86      	itte	hi
 800affc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b000:	608b      	strhi	r3, [r1, #8]
 800b002:	9302      	strls	r3, [sp, #8]
 800b004:	680b      	ldr	r3, [r1, #0]
 800b006:	468b      	mov	fp, r1
 800b008:	2500      	movs	r5, #0
 800b00a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b00e:	f84b 3b1c 	str.w	r3, [fp], #28
 800b012:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b016:	4680      	mov	r8, r0
 800b018:	460c      	mov	r4, r1
 800b01a:	465e      	mov	r6, fp
 800b01c:	46aa      	mov	sl, r5
 800b01e:	46a9      	mov	r9, r5
 800b020:	9501      	str	r5, [sp, #4]
 800b022:	68a2      	ldr	r2, [r4, #8]
 800b024:	b152      	cbz	r2, 800b03c <_scanf_float+0x60>
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	2b4e      	cmp	r3, #78	; 0x4e
 800b02c:	d864      	bhi.n	800b0f8 <_scanf_float+0x11c>
 800b02e:	2b40      	cmp	r3, #64	; 0x40
 800b030:	d83c      	bhi.n	800b0ac <_scanf_float+0xd0>
 800b032:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b036:	b2c8      	uxtb	r0, r1
 800b038:	280e      	cmp	r0, #14
 800b03a:	d93a      	bls.n	800b0b2 <_scanf_float+0xd6>
 800b03c:	f1b9 0f00 	cmp.w	r9, #0
 800b040:	d003      	beq.n	800b04a <_scanf_float+0x6e>
 800b042:	6823      	ldr	r3, [r4, #0]
 800b044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b048:	6023      	str	r3, [r4, #0]
 800b04a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b04e:	f1ba 0f01 	cmp.w	sl, #1
 800b052:	f200 8113 	bhi.w	800b27c <_scanf_float+0x2a0>
 800b056:	455e      	cmp	r6, fp
 800b058:	f200 8105 	bhi.w	800b266 <_scanf_float+0x28a>
 800b05c:	2501      	movs	r5, #1
 800b05e:	4628      	mov	r0, r5
 800b060:	b007      	add	sp, #28
 800b062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b066:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b06a:	2a0d      	cmp	r2, #13
 800b06c:	d8e6      	bhi.n	800b03c <_scanf_float+0x60>
 800b06e:	a101      	add	r1, pc, #4	; (adr r1, 800b074 <_scanf_float+0x98>)
 800b070:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b074:	0800b1b3 	.word	0x0800b1b3
 800b078:	0800b03d 	.word	0x0800b03d
 800b07c:	0800b03d 	.word	0x0800b03d
 800b080:	0800b03d 	.word	0x0800b03d
 800b084:	0800b213 	.word	0x0800b213
 800b088:	0800b1eb 	.word	0x0800b1eb
 800b08c:	0800b03d 	.word	0x0800b03d
 800b090:	0800b03d 	.word	0x0800b03d
 800b094:	0800b1c1 	.word	0x0800b1c1
 800b098:	0800b03d 	.word	0x0800b03d
 800b09c:	0800b03d 	.word	0x0800b03d
 800b0a0:	0800b03d 	.word	0x0800b03d
 800b0a4:	0800b03d 	.word	0x0800b03d
 800b0a8:	0800b179 	.word	0x0800b179
 800b0ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b0b0:	e7db      	b.n	800b06a <_scanf_float+0x8e>
 800b0b2:	290e      	cmp	r1, #14
 800b0b4:	d8c2      	bhi.n	800b03c <_scanf_float+0x60>
 800b0b6:	a001      	add	r0, pc, #4	; (adr r0, 800b0bc <_scanf_float+0xe0>)
 800b0b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b0bc:	0800b16b 	.word	0x0800b16b
 800b0c0:	0800b03d 	.word	0x0800b03d
 800b0c4:	0800b16b 	.word	0x0800b16b
 800b0c8:	0800b1ff 	.word	0x0800b1ff
 800b0cc:	0800b03d 	.word	0x0800b03d
 800b0d0:	0800b119 	.word	0x0800b119
 800b0d4:	0800b155 	.word	0x0800b155
 800b0d8:	0800b155 	.word	0x0800b155
 800b0dc:	0800b155 	.word	0x0800b155
 800b0e0:	0800b155 	.word	0x0800b155
 800b0e4:	0800b155 	.word	0x0800b155
 800b0e8:	0800b155 	.word	0x0800b155
 800b0ec:	0800b155 	.word	0x0800b155
 800b0f0:	0800b155 	.word	0x0800b155
 800b0f4:	0800b155 	.word	0x0800b155
 800b0f8:	2b6e      	cmp	r3, #110	; 0x6e
 800b0fa:	d809      	bhi.n	800b110 <_scanf_float+0x134>
 800b0fc:	2b60      	cmp	r3, #96	; 0x60
 800b0fe:	d8b2      	bhi.n	800b066 <_scanf_float+0x8a>
 800b100:	2b54      	cmp	r3, #84	; 0x54
 800b102:	d077      	beq.n	800b1f4 <_scanf_float+0x218>
 800b104:	2b59      	cmp	r3, #89	; 0x59
 800b106:	d199      	bne.n	800b03c <_scanf_float+0x60>
 800b108:	2d07      	cmp	r5, #7
 800b10a:	d197      	bne.n	800b03c <_scanf_float+0x60>
 800b10c:	2508      	movs	r5, #8
 800b10e:	e029      	b.n	800b164 <_scanf_float+0x188>
 800b110:	2b74      	cmp	r3, #116	; 0x74
 800b112:	d06f      	beq.n	800b1f4 <_scanf_float+0x218>
 800b114:	2b79      	cmp	r3, #121	; 0x79
 800b116:	e7f6      	b.n	800b106 <_scanf_float+0x12a>
 800b118:	6821      	ldr	r1, [r4, #0]
 800b11a:	05c8      	lsls	r0, r1, #23
 800b11c:	d51a      	bpl.n	800b154 <_scanf_float+0x178>
 800b11e:	9b02      	ldr	r3, [sp, #8]
 800b120:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b124:	6021      	str	r1, [r4, #0]
 800b126:	f109 0901 	add.w	r9, r9, #1
 800b12a:	b11b      	cbz	r3, 800b134 <_scanf_float+0x158>
 800b12c:	3b01      	subs	r3, #1
 800b12e:	3201      	adds	r2, #1
 800b130:	9302      	str	r3, [sp, #8]
 800b132:	60a2      	str	r2, [r4, #8]
 800b134:	68a3      	ldr	r3, [r4, #8]
 800b136:	3b01      	subs	r3, #1
 800b138:	60a3      	str	r3, [r4, #8]
 800b13a:	6923      	ldr	r3, [r4, #16]
 800b13c:	3301      	adds	r3, #1
 800b13e:	6123      	str	r3, [r4, #16]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	3b01      	subs	r3, #1
 800b144:	2b00      	cmp	r3, #0
 800b146:	607b      	str	r3, [r7, #4]
 800b148:	f340 8084 	ble.w	800b254 <_scanf_float+0x278>
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	3301      	adds	r3, #1
 800b150:	603b      	str	r3, [r7, #0]
 800b152:	e766      	b.n	800b022 <_scanf_float+0x46>
 800b154:	eb1a 0f05 	cmn.w	sl, r5
 800b158:	f47f af70 	bne.w	800b03c <_scanf_float+0x60>
 800b15c:	6822      	ldr	r2, [r4, #0]
 800b15e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b162:	6022      	str	r2, [r4, #0]
 800b164:	f806 3b01 	strb.w	r3, [r6], #1
 800b168:	e7e4      	b.n	800b134 <_scanf_float+0x158>
 800b16a:	6822      	ldr	r2, [r4, #0]
 800b16c:	0610      	lsls	r0, r2, #24
 800b16e:	f57f af65 	bpl.w	800b03c <_scanf_float+0x60>
 800b172:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b176:	e7f4      	b.n	800b162 <_scanf_float+0x186>
 800b178:	f1ba 0f00 	cmp.w	sl, #0
 800b17c:	d10e      	bne.n	800b19c <_scanf_float+0x1c0>
 800b17e:	f1b9 0f00 	cmp.w	r9, #0
 800b182:	d10e      	bne.n	800b1a2 <_scanf_float+0x1c6>
 800b184:	6822      	ldr	r2, [r4, #0]
 800b186:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b18a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b18e:	d108      	bne.n	800b1a2 <_scanf_float+0x1c6>
 800b190:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b194:	6022      	str	r2, [r4, #0]
 800b196:	f04f 0a01 	mov.w	sl, #1
 800b19a:	e7e3      	b.n	800b164 <_scanf_float+0x188>
 800b19c:	f1ba 0f02 	cmp.w	sl, #2
 800b1a0:	d055      	beq.n	800b24e <_scanf_float+0x272>
 800b1a2:	2d01      	cmp	r5, #1
 800b1a4:	d002      	beq.n	800b1ac <_scanf_float+0x1d0>
 800b1a6:	2d04      	cmp	r5, #4
 800b1a8:	f47f af48 	bne.w	800b03c <_scanf_float+0x60>
 800b1ac:	3501      	adds	r5, #1
 800b1ae:	b2ed      	uxtb	r5, r5
 800b1b0:	e7d8      	b.n	800b164 <_scanf_float+0x188>
 800b1b2:	f1ba 0f01 	cmp.w	sl, #1
 800b1b6:	f47f af41 	bne.w	800b03c <_scanf_float+0x60>
 800b1ba:	f04f 0a02 	mov.w	sl, #2
 800b1be:	e7d1      	b.n	800b164 <_scanf_float+0x188>
 800b1c0:	b97d      	cbnz	r5, 800b1e2 <_scanf_float+0x206>
 800b1c2:	f1b9 0f00 	cmp.w	r9, #0
 800b1c6:	f47f af3c 	bne.w	800b042 <_scanf_float+0x66>
 800b1ca:	6822      	ldr	r2, [r4, #0]
 800b1cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b1d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b1d4:	f47f af39 	bne.w	800b04a <_scanf_float+0x6e>
 800b1d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b1dc:	6022      	str	r2, [r4, #0]
 800b1de:	2501      	movs	r5, #1
 800b1e0:	e7c0      	b.n	800b164 <_scanf_float+0x188>
 800b1e2:	2d03      	cmp	r5, #3
 800b1e4:	d0e2      	beq.n	800b1ac <_scanf_float+0x1d0>
 800b1e6:	2d05      	cmp	r5, #5
 800b1e8:	e7de      	b.n	800b1a8 <_scanf_float+0x1cc>
 800b1ea:	2d02      	cmp	r5, #2
 800b1ec:	f47f af26 	bne.w	800b03c <_scanf_float+0x60>
 800b1f0:	2503      	movs	r5, #3
 800b1f2:	e7b7      	b.n	800b164 <_scanf_float+0x188>
 800b1f4:	2d06      	cmp	r5, #6
 800b1f6:	f47f af21 	bne.w	800b03c <_scanf_float+0x60>
 800b1fa:	2507      	movs	r5, #7
 800b1fc:	e7b2      	b.n	800b164 <_scanf_float+0x188>
 800b1fe:	6822      	ldr	r2, [r4, #0]
 800b200:	0591      	lsls	r1, r2, #22
 800b202:	f57f af1b 	bpl.w	800b03c <_scanf_float+0x60>
 800b206:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b20a:	6022      	str	r2, [r4, #0]
 800b20c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b210:	e7a8      	b.n	800b164 <_scanf_float+0x188>
 800b212:	6822      	ldr	r2, [r4, #0]
 800b214:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b218:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b21c:	d006      	beq.n	800b22c <_scanf_float+0x250>
 800b21e:	0550      	lsls	r0, r2, #21
 800b220:	f57f af0c 	bpl.w	800b03c <_scanf_float+0x60>
 800b224:	f1b9 0f00 	cmp.w	r9, #0
 800b228:	f43f af0f 	beq.w	800b04a <_scanf_float+0x6e>
 800b22c:	0591      	lsls	r1, r2, #22
 800b22e:	bf58      	it	pl
 800b230:	9901      	ldrpl	r1, [sp, #4]
 800b232:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b236:	bf58      	it	pl
 800b238:	eba9 0101 	subpl.w	r1, r9, r1
 800b23c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b240:	bf58      	it	pl
 800b242:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b246:	6022      	str	r2, [r4, #0]
 800b248:	f04f 0900 	mov.w	r9, #0
 800b24c:	e78a      	b.n	800b164 <_scanf_float+0x188>
 800b24e:	f04f 0a03 	mov.w	sl, #3
 800b252:	e787      	b.n	800b164 <_scanf_float+0x188>
 800b254:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b258:	4639      	mov	r1, r7
 800b25a:	4640      	mov	r0, r8
 800b25c:	4798      	blx	r3
 800b25e:	2800      	cmp	r0, #0
 800b260:	f43f aedf 	beq.w	800b022 <_scanf_float+0x46>
 800b264:	e6ea      	b.n	800b03c <_scanf_float+0x60>
 800b266:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b26a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b26e:	463a      	mov	r2, r7
 800b270:	4640      	mov	r0, r8
 800b272:	4798      	blx	r3
 800b274:	6923      	ldr	r3, [r4, #16]
 800b276:	3b01      	subs	r3, #1
 800b278:	6123      	str	r3, [r4, #16]
 800b27a:	e6ec      	b.n	800b056 <_scanf_float+0x7a>
 800b27c:	1e6b      	subs	r3, r5, #1
 800b27e:	2b06      	cmp	r3, #6
 800b280:	d825      	bhi.n	800b2ce <_scanf_float+0x2f2>
 800b282:	2d02      	cmp	r5, #2
 800b284:	d836      	bhi.n	800b2f4 <_scanf_float+0x318>
 800b286:	455e      	cmp	r6, fp
 800b288:	f67f aee8 	bls.w	800b05c <_scanf_float+0x80>
 800b28c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b290:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b294:	463a      	mov	r2, r7
 800b296:	4640      	mov	r0, r8
 800b298:	4798      	blx	r3
 800b29a:	6923      	ldr	r3, [r4, #16]
 800b29c:	3b01      	subs	r3, #1
 800b29e:	6123      	str	r3, [r4, #16]
 800b2a0:	e7f1      	b.n	800b286 <_scanf_float+0x2aa>
 800b2a2:	9802      	ldr	r0, [sp, #8]
 800b2a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b2a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b2ac:	9002      	str	r0, [sp, #8]
 800b2ae:	463a      	mov	r2, r7
 800b2b0:	4640      	mov	r0, r8
 800b2b2:	4798      	blx	r3
 800b2b4:	6923      	ldr	r3, [r4, #16]
 800b2b6:	3b01      	subs	r3, #1
 800b2b8:	6123      	str	r3, [r4, #16]
 800b2ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b2be:	fa5f fa8a 	uxtb.w	sl, sl
 800b2c2:	f1ba 0f02 	cmp.w	sl, #2
 800b2c6:	d1ec      	bne.n	800b2a2 <_scanf_float+0x2c6>
 800b2c8:	3d03      	subs	r5, #3
 800b2ca:	b2ed      	uxtb	r5, r5
 800b2cc:	1b76      	subs	r6, r6, r5
 800b2ce:	6823      	ldr	r3, [r4, #0]
 800b2d0:	05da      	lsls	r2, r3, #23
 800b2d2:	d52f      	bpl.n	800b334 <_scanf_float+0x358>
 800b2d4:	055b      	lsls	r3, r3, #21
 800b2d6:	d510      	bpl.n	800b2fa <_scanf_float+0x31e>
 800b2d8:	455e      	cmp	r6, fp
 800b2da:	f67f aebf 	bls.w	800b05c <_scanf_float+0x80>
 800b2de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b2e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b2e6:	463a      	mov	r2, r7
 800b2e8:	4640      	mov	r0, r8
 800b2ea:	4798      	blx	r3
 800b2ec:	6923      	ldr	r3, [r4, #16]
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	6123      	str	r3, [r4, #16]
 800b2f2:	e7f1      	b.n	800b2d8 <_scanf_float+0x2fc>
 800b2f4:	46aa      	mov	sl, r5
 800b2f6:	9602      	str	r6, [sp, #8]
 800b2f8:	e7df      	b.n	800b2ba <_scanf_float+0x2de>
 800b2fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b2fe:	6923      	ldr	r3, [r4, #16]
 800b300:	2965      	cmp	r1, #101	; 0x65
 800b302:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b306:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800b30a:	6123      	str	r3, [r4, #16]
 800b30c:	d00c      	beq.n	800b328 <_scanf_float+0x34c>
 800b30e:	2945      	cmp	r1, #69	; 0x45
 800b310:	d00a      	beq.n	800b328 <_scanf_float+0x34c>
 800b312:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b316:	463a      	mov	r2, r7
 800b318:	4640      	mov	r0, r8
 800b31a:	4798      	blx	r3
 800b31c:	6923      	ldr	r3, [r4, #16]
 800b31e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b322:	3b01      	subs	r3, #1
 800b324:	1eb5      	subs	r5, r6, #2
 800b326:	6123      	str	r3, [r4, #16]
 800b328:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b32c:	463a      	mov	r2, r7
 800b32e:	4640      	mov	r0, r8
 800b330:	4798      	blx	r3
 800b332:	462e      	mov	r6, r5
 800b334:	6825      	ldr	r5, [r4, #0]
 800b336:	f015 0510 	ands.w	r5, r5, #16
 800b33a:	d159      	bne.n	800b3f0 <_scanf_float+0x414>
 800b33c:	7035      	strb	r5, [r6, #0]
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b348:	d11b      	bne.n	800b382 <_scanf_float+0x3a6>
 800b34a:	9b01      	ldr	r3, [sp, #4]
 800b34c:	454b      	cmp	r3, r9
 800b34e:	eba3 0209 	sub.w	r2, r3, r9
 800b352:	d123      	bne.n	800b39c <_scanf_float+0x3c0>
 800b354:	2200      	movs	r2, #0
 800b356:	4659      	mov	r1, fp
 800b358:	4640      	mov	r0, r8
 800b35a:	f000 fee3 	bl	800c124 <_strtod_r>
 800b35e:	6822      	ldr	r2, [r4, #0]
 800b360:	9b03      	ldr	r3, [sp, #12]
 800b362:	f012 0f02 	tst.w	r2, #2
 800b366:	ec57 6b10 	vmov	r6, r7, d0
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	d021      	beq.n	800b3b2 <_scanf_float+0x3d6>
 800b36e:	9903      	ldr	r1, [sp, #12]
 800b370:	1d1a      	adds	r2, r3, #4
 800b372:	600a      	str	r2, [r1, #0]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	e9c3 6700 	strd	r6, r7, [r3]
 800b37a:	68e3      	ldr	r3, [r4, #12]
 800b37c:	3301      	adds	r3, #1
 800b37e:	60e3      	str	r3, [r4, #12]
 800b380:	e66d      	b.n	800b05e <_scanf_float+0x82>
 800b382:	9b04      	ldr	r3, [sp, #16]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d0e5      	beq.n	800b354 <_scanf_float+0x378>
 800b388:	9905      	ldr	r1, [sp, #20]
 800b38a:	230a      	movs	r3, #10
 800b38c:	462a      	mov	r2, r5
 800b38e:	3101      	adds	r1, #1
 800b390:	4640      	mov	r0, r8
 800b392:	f000 ff4f 	bl	800c234 <_strtol_r>
 800b396:	9b04      	ldr	r3, [sp, #16]
 800b398:	9e05      	ldr	r6, [sp, #20]
 800b39a:	1ac2      	subs	r2, r0, r3
 800b39c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b3a0:	429e      	cmp	r6, r3
 800b3a2:	bf28      	it	cs
 800b3a4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b3a8:	4912      	ldr	r1, [pc, #72]	; (800b3f4 <_scanf_float+0x418>)
 800b3aa:	4630      	mov	r0, r6
 800b3ac:	f000 f878 	bl	800b4a0 <siprintf>
 800b3b0:	e7d0      	b.n	800b354 <_scanf_float+0x378>
 800b3b2:	9903      	ldr	r1, [sp, #12]
 800b3b4:	f012 0f04 	tst.w	r2, #4
 800b3b8:	f103 0204 	add.w	r2, r3, #4
 800b3bc:	600a      	str	r2, [r1, #0]
 800b3be:	d1d9      	bne.n	800b374 <_scanf_float+0x398>
 800b3c0:	f8d3 8000 	ldr.w	r8, [r3]
 800b3c4:	ee10 2a10 	vmov	r2, s0
 800b3c8:	ee10 0a10 	vmov	r0, s0
 800b3cc:	463b      	mov	r3, r7
 800b3ce:	4639      	mov	r1, r7
 800b3d0:	f7f5 fbac 	bl	8000b2c <__aeabi_dcmpun>
 800b3d4:	b128      	cbz	r0, 800b3e2 <_scanf_float+0x406>
 800b3d6:	4808      	ldr	r0, [pc, #32]	; (800b3f8 <_scanf_float+0x41c>)
 800b3d8:	f000 f818 	bl	800b40c <nanf>
 800b3dc:	ed88 0a00 	vstr	s0, [r8]
 800b3e0:	e7cb      	b.n	800b37a <_scanf_float+0x39e>
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	4639      	mov	r1, r7
 800b3e6:	f7f5 fbff 	bl	8000be8 <__aeabi_d2f>
 800b3ea:	f8c8 0000 	str.w	r0, [r8]
 800b3ee:	e7c4      	b.n	800b37a <_scanf_float+0x39e>
 800b3f0:	2500      	movs	r5, #0
 800b3f2:	e634      	b.n	800b05e <_scanf_float+0x82>
 800b3f4:	0800f3f4 	.word	0x0800f3f4
 800b3f8:	0800f800 	.word	0x0800f800

0800b3fc <realloc>:
 800b3fc:	4b02      	ldr	r3, [pc, #8]	; (800b408 <realloc+0xc>)
 800b3fe:	460a      	mov	r2, r1
 800b400:	4601      	mov	r1, r0
 800b402:	6818      	ldr	r0, [r3, #0]
 800b404:	f002 bed8 	b.w	800e1b8 <_realloc_r>
 800b408:	20000020 	.word	0x20000020

0800b40c <nanf>:
 800b40c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b414 <nanf+0x8>
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	7fc00000 	.word	0x7fc00000

0800b418 <_raise_r>:
 800b418:	291f      	cmp	r1, #31
 800b41a:	b538      	push	{r3, r4, r5, lr}
 800b41c:	4604      	mov	r4, r0
 800b41e:	460d      	mov	r5, r1
 800b420:	d904      	bls.n	800b42c <_raise_r+0x14>
 800b422:	2316      	movs	r3, #22
 800b424:	6003      	str	r3, [r0, #0]
 800b426:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b42a:	bd38      	pop	{r3, r4, r5, pc}
 800b42c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b42e:	b112      	cbz	r2, 800b436 <_raise_r+0x1e>
 800b430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b434:	b94b      	cbnz	r3, 800b44a <_raise_r+0x32>
 800b436:	4620      	mov	r0, r4
 800b438:	f000 f830 	bl	800b49c <_getpid_r>
 800b43c:	462a      	mov	r2, r5
 800b43e:	4601      	mov	r1, r0
 800b440:	4620      	mov	r0, r4
 800b442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b446:	f000 b817 	b.w	800b478 <_kill_r>
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d00a      	beq.n	800b464 <_raise_r+0x4c>
 800b44e:	1c59      	adds	r1, r3, #1
 800b450:	d103      	bne.n	800b45a <_raise_r+0x42>
 800b452:	2316      	movs	r3, #22
 800b454:	6003      	str	r3, [r0, #0]
 800b456:	2001      	movs	r0, #1
 800b458:	e7e7      	b.n	800b42a <_raise_r+0x12>
 800b45a:	2400      	movs	r4, #0
 800b45c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b460:	4628      	mov	r0, r5
 800b462:	4798      	blx	r3
 800b464:	2000      	movs	r0, #0
 800b466:	e7e0      	b.n	800b42a <_raise_r+0x12>

0800b468 <raise>:
 800b468:	4b02      	ldr	r3, [pc, #8]	; (800b474 <raise+0xc>)
 800b46a:	4601      	mov	r1, r0
 800b46c:	6818      	ldr	r0, [r3, #0]
 800b46e:	f7ff bfd3 	b.w	800b418 <_raise_r>
 800b472:	bf00      	nop
 800b474:	20000020 	.word	0x20000020

0800b478 <_kill_r>:
 800b478:	b538      	push	{r3, r4, r5, lr}
 800b47a:	4d07      	ldr	r5, [pc, #28]	; (800b498 <_kill_r+0x20>)
 800b47c:	2300      	movs	r3, #0
 800b47e:	4604      	mov	r4, r0
 800b480:	4608      	mov	r0, r1
 800b482:	4611      	mov	r1, r2
 800b484:	602b      	str	r3, [r5, #0]
 800b486:	f7f9 ff85 	bl	8005394 <_kill>
 800b48a:	1c43      	adds	r3, r0, #1
 800b48c:	d102      	bne.n	800b494 <_kill_r+0x1c>
 800b48e:	682b      	ldr	r3, [r5, #0]
 800b490:	b103      	cbz	r3, 800b494 <_kill_r+0x1c>
 800b492:	6023      	str	r3, [r4, #0]
 800b494:	bd38      	pop	{r3, r4, r5, pc}
 800b496:	bf00      	nop
 800b498:	20000f24 	.word	0x20000f24

0800b49c <_getpid_r>:
 800b49c:	f7f9 bf72 	b.w	8005384 <_getpid>

0800b4a0 <siprintf>:
 800b4a0:	b40e      	push	{r1, r2, r3}
 800b4a2:	b500      	push	{lr}
 800b4a4:	b09c      	sub	sp, #112	; 0x70
 800b4a6:	ab1d      	add	r3, sp, #116	; 0x74
 800b4a8:	9002      	str	r0, [sp, #8]
 800b4aa:	9006      	str	r0, [sp, #24]
 800b4ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b4b0:	4809      	ldr	r0, [pc, #36]	; (800b4d8 <siprintf+0x38>)
 800b4b2:	9107      	str	r1, [sp, #28]
 800b4b4:	9104      	str	r1, [sp, #16]
 800b4b6:	4909      	ldr	r1, [pc, #36]	; (800b4dc <siprintf+0x3c>)
 800b4b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4bc:	9105      	str	r1, [sp, #20]
 800b4be:	6800      	ldr	r0, [r0, #0]
 800b4c0:	9301      	str	r3, [sp, #4]
 800b4c2:	a902      	add	r1, sp, #8
 800b4c4:	f002 ff02 	bl	800e2cc <_svfiprintf_r>
 800b4c8:	9b02      	ldr	r3, [sp, #8]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	701a      	strb	r2, [r3, #0]
 800b4ce:	b01c      	add	sp, #112	; 0x70
 800b4d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4d4:	b003      	add	sp, #12
 800b4d6:	4770      	bx	lr
 800b4d8:	20000020 	.word	0x20000020
 800b4dc:	ffff0208 	.word	0xffff0208

0800b4e0 <sulp>:
 800b4e0:	b570      	push	{r4, r5, r6, lr}
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	460d      	mov	r5, r1
 800b4e6:	ec45 4b10 	vmov	d0, r4, r5
 800b4ea:	4616      	mov	r6, r2
 800b4ec:	f002 fc1e 	bl	800dd2c <__ulp>
 800b4f0:	ec51 0b10 	vmov	r0, r1, d0
 800b4f4:	b17e      	cbz	r6, 800b516 <sulp+0x36>
 800b4f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b4fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	dd09      	ble.n	800b516 <sulp+0x36>
 800b502:	051b      	lsls	r3, r3, #20
 800b504:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b508:	2400      	movs	r4, #0
 800b50a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b50e:	4622      	mov	r2, r4
 800b510:	462b      	mov	r3, r5
 800b512:	f7f5 f871 	bl	80005f8 <__aeabi_dmul>
 800b516:	bd70      	pop	{r4, r5, r6, pc}

0800b518 <_strtod_l>:
 800b518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b51c:	ed2d 8b02 	vpush	{d8}
 800b520:	b09d      	sub	sp, #116	; 0x74
 800b522:	461f      	mov	r7, r3
 800b524:	2300      	movs	r3, #0
 800b526:	9318      	str	r3, [sp, #96]	; 0x60
 800b528:	4ba2      	ldr	r3, [pc, #648]	; (800b7b4 <_strtod_l+0x29c>)
 800b52a:	9213      	str	r2, [sp, #76]	; 0x4c
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	9305      	str	r3, [sp, #20]
 800b530:	4604      	mov	r4, r0
 800b532:	4618      	mov	r0, r3
 800b534:	4688      	mov	r8, r1
 800b536:	f7f4 fe4b 	bl	80001d0 <strlen>
 800b53a:	f04f 0a00 	mov.w	sl, #0
 800b53e:	4605      	mov	r5, r0
 800b540:	f04f 0b00 	mov.w	fp, #0
 800b544:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b548:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b54a:	781a      	ldrb	r2, [r3, #0]
 800b54c:	2a2b      	cmp	r2, #43	; 0x2b
 800b54e:	d04e      	beq.n	800b5ee <_strtod_l+0xd6>
 800b550:	d83b      	bhi.n	800b5ca <_strtod_l+0xb2>
 800b552:	2a0d      	cmp	r2, #13
 800b554:	d834      	bhi.n	800b5c0 <_strtod_l+0xa8>
 800b556:	2a08      	cmp	r2, #8
 800b558:	d834      	bhi.n	800b5c4 <_strtod_l+0xac>
 800b55a:	2a00      	cmp	r2, #0
 800b55c:	d03e      	beq.n	800b5dc <_strtod_l+0xc4>
 800b55e:	2300      	movs	r3, #0
 800b560:	930a      	str	r3, [sp, #40]	; 0x28
 800b562:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b564:	7833      	ldrb	r3, [r6, #0]
 800b566:	2b30      	cmp	r3, #48	; 0x30
 800b568:	f040 80b0 	bne.w	800b6cc <_strtod_l+0x1b4>
 800b56c:	7873      	ldrb	r3, [r6, #1]
 800b56e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b572:	2b58      	cmp	r3, #88	; 0x58
 800b574:	d168      	bne.n	800b648 <_strtod_l+0x130>
 800b576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b578:	9301      	str	r3, [sp, #4]
 800b57a:	ab18      	add	r3, sp, #96	; 0x60
 800b57c:	9702      	str	r7, [sp, #8]
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	4a8d      	ldr	r2, [pc, #564]	; (800b7b8 <_strtod_l+0x2a0>)
 800b582:	ab19      	add	r3, sp, #100	; 0x64
 800b584:	a917      	add	r1, sp, #92	; 0x5c
 800b586:	4620      	mov	r0, r4
 800b588:	f001 fd38 	bl	800cffc <__gethex>
 800b58c:	f010 0707 	ands.w	r7, r0, #7
 800b590:	4605      	mov	r5, r0
 800b592:	d005      	beq.n	800b5a0 <_strtod_l+0x88>
 800b594:	2f06      	cmp	r7, #6
 800b596:	d12c      	bne.n	800b5f2 <_strtod_l+0xda>
 800b598:	3601      	adds	r6, #1
 800b59a:	2300      	movs	r3, #0
 800b59c:	9617      	str	r6, [sp, #92]	; 0x5c
 800b59e:	930a      	str	r3, [sp, #40]	; 0x28
 800b5a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	f040 8590 	bne.w	800c0c8 <_strtod_l+0xbb0>
 800b5a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5aa:	b1eb      	cbz	r3, 800b5e8 <_strtod_l+0xd0>
 800b5ac:	4652      	mov	r2, sl
 800b5ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b5b2:	ec43 2b10 	vmov	d0, r2, r3
 800b5b6:	b01d      	add	sp, #116	; 0x74
 800b5b8:	ecbd 8b02 	vpop	{d8}
 800b5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c0:	2a20      	cmp	r2, #32
 800b5c2:	d1cc      	bne.n	800b55e <_strtod_l+0x46>
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	9317      	str	r3, [sp, #92]	; 0x5c
 800b5c8:	e7be      	b.n	800b548 <_strtod_l+0x30>
 800b5ca:	2a2d      	cmp	r2, #45	; 0x2d
 800b5cc:	d1c7      	bne.n	800b55e <_strtod_l+0x46>
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	920a      	str	r2, [sp, #40]	; 0x28
 800b5d2:	1c5a      	adds	r2, r3, #1
 800b5d4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b5d6:	785b      	ldrb	r3, [r3, #1]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1c2      	bne.n	800b562 <_strtod_l+0x4a>
 800b5dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b5de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	f040 856e 	bne.w	800c0c4 <_strtod_l+0xbac>
 800b5e8:	4652      	mov	r2, sl
 800b5ea:	465b      	mov	r3, fp
 800b5ec:	e7e1      	b.n	800b5b2 <_strtod_l+0x9a>
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	e7ee      	b.n	800b5d0 <_strtod_l+0xb8>
 800b5f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b5f4:	b13a      	cbz	r2, 800b606 <_strtod_l+0xee>
 800b5f6:	2135      	movs	r1, #53	; 0x35
 800b5f8:	a81a      	add	r0, sp, #104	; 0x68
 800b5fa:	f002 fca2 	bl	800df42 <__copybits>
 800b5fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b600:	4620      	mov	r0, r4
 800b602:	f002 f861 	bl	800d6c8 <_Bfree>
 800b606:	3f01      	subs	r7, #1
 800b608:	2f04      	cmp	r7, #4
 800b60a:	d806      	bhi.n	800b61a <_strtod_l+0x102>
 800b60c:	e8df f007 	tbb	[pc, r7]
 800b610:	1714030a 	.word	0x1714030a
 800b614:	0a          	.byte	0x0a
 800b615:	00          	.byte	0x00
 800b616:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b61a:	0728      	lsls	r0, r5, #28
 800b61c:	d5c0      	bpl.n	800b5a0 <_strtod_l+0x88>
 800b61e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b622:	e7bd      	b.n	800b5a0 <_strtod_l+0x88>
 800b624:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b628:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b62a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b62e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b632:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b636:	e7f0      	b.n	800b61a <_strtod_l+0x102>
 800b638:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b7bc <_strtod_l+0x2a4>
 800b63c:	e7ed      	b.n	800b61a <_strtod_l+0x102>
 800b63e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b642:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b646:	e7e8      	b.n	800b61a <_strtod_l+0x102>
 800b648:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b64a:	1c5a      	adds	r2, r3, #1
 800b64c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b64e:	785b      	ldrb	r3, [r3, #1]
 800b650:	2b30      	cmp	r3, #48	; 0x30
 800b652:	d0f9      	beq.n	800b648 <_strtod_l+0x130>
 800b654:	2b00      	cmp	r3, #0
 800b656:	d0a3      	beq.n	800b5a0 <_strtod_l+0x88>
 800b658:	2301      	movs	r3, #1
 800b65a:	f04f 0900 	mov.w	r9, #0
 800b65e:	9304      	str	r3, [sp, #16]
 800b660:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b662:	9308      	str	r3, [sp, #32]
 800b664:	f8cd 901c 	str.w	r9, [sp, #28]
 800b668:	464f      	mov	r7, r9
 800b66a:	220a      	movs	r2, #10
 800b66c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b66e:	7806      	ldrb	r6, [r0, #0]
 800b670:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b674:	b2d9      	uxtb	r1, r3
 800b676:	2909      	cmp	r1, #9
 800b678:	d92a      	bls.n	800b6d0 <_strtod_l+0x1b8>
 800b67a:	9905      	ldr	r1, [sp, #20]
 800b67c:	462a      	mov	r2, r5
 800b67e:	f002 ff3f 	bl	800e500 <strncmp>
 800b682:	b398      	cbz	r0, 800b6ec <_strtod_l+0x1d4>
 800b684:	2000      	movs	r0, #0
 800b686:	4632      	mov	r2, r6
 800b688:	463d      	mov	r5, r7
 800b68a:	9005      	str	r0, [sp, #20]
 800b68c:	4603      	mov	r3, r0
 800b68e:	2a65      	cmp	r2, #101	; 0x65
 800b690:	d001      	beq.n	800b696 <_strtod_l+0x17e>
 800b692:	2a45      	cmp	r2, #69	; 0x45
 800b694:	d118      	bne.n	800b6c8 <_strtod_l+0x1b0>
 800b696:	b91d      	cbnz	r5, 800b6a0 <_strtod_l+0x188>
 800b698:	9a04      	ldr	r2, [sp, #16]
 800b69a:	4302      	orrs	r2, r0
 800b69c:	d09e      	beq.n	800b5dc <_strtod_l+0xc4>
 800b69e:	2500      	movs	r5, #0
 800b6a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b6a4:	f108 0201 	add.w	r2, r8, #1
 800b6a8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b6aa:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b6ae:	2a2b      	cmp	r2, #43	; 0x2b
 800b6b0:	d075      	beq.n	800b79e <_strtod_l+0x286>
 800b6b2:	2a2d      	cmp	r2, #45	; 0x2d
 800b6b4:	d07b      	beq.n	800b7ae <_strtod_l+0x296>
 800b6b6:	f04f 0c00 	mov.w	ip, #0
 800b6ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b6be:	2909      	cmp	r1, #9
 800b6c0:	f240 8082 	bls.w	800b7c8 <_strtod_l+0x2b0>
 800b6c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b6c8:	2600      	movs	r6, #0
 800b6ca:	e09d      	b.n	800b808 <_strtod_l+0x2f0>
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	e7c4      	b.n	800b65a <_strtod_l+0x142>
 800b6d0:	2f08      	cmp	r7, #8
 800b6d2:	bfd8      	it	le
 800b6d4:	9907      	ldrle	r1, [sp, #28]
 800b6d6:	f100 0001 	add.w	r0, r0, #1
 800b6da:	bfda      	itte	le
 800b6dc:	fb02 3301 	mlale	r3, r2, r1, r3
 800b6e0:	9307      	strle	r3, [sp, #28]
 800b6e2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b6e6:	3701      	adds	r7, #1
 800b6e8:	9017      	str	r0, [sp, #92]	; 0x5c
 800b6ea:	e7bf      	b.n	800b66c <_strtod_l+0x154>
 800b6ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6ee:	195a      	adds	r2, r3, r5
 800b6f0:	9217      	str	r2, [sp, #92]	; 0x5c
 800b6f2:	5d5a      	ldrb	r2, [r3, r5]
 800b6f4:	2f00      	cmp	r7, #0
 800b6f6:	d037      	beq.n	800b768 <_strtod_l+0x250>
 800b6f8:	9005      	str	r0, [sp, #20]
 800b6fa:	463d      	mov	r5, r7
 800b6fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b700:	2b09      	cmp	r3, #9
 800b702:	d912      	bls.n	800b72a <_strtod_l+0x212>
 800b704:	2301      	movs	r3, #1
 800b706:	e7c2      	b.n	800b68e <_strtod_l+0x176>
 800b708:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b70a:	1c5a      	adds	r2, r3, #1
 800b70c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b70e:	785a      	ldrb	r2, [r3, #1]
 800b710:	3001      	adds	r0, #1
 800b712:	2a30      	cmp	r2, #48	; 0x30
 800b714:	d0f8      	beq.n	800b708 <_strtod_l+0x1f0>
 800b716:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b71a:	2b08      	cmp	r3, #8
 800b71c:	f200 84d9 	bhi.w	800c0d2 <_strtod_l+0xbba>
 800b720:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b722:	9005      	str	r0, [sp, #20]
 800b724:	2000      	movs	r0, #0
 800b726:	9308      	str	r3, [sp, #32]
 800b728:	4605      	mov	r5, r0
 800b72a:	3a30      	subs	r2, #48	; 0x30
 800b72c:	f100 0301 	add.w	r3, r0, #1
 800b730:	d014      	beq.n	800b75c <_strtod_l+0x244>
 800b732:	9905      	ldr	r1, [sp, #20]
 800b734:	4419      	add	r1, r3
 800b736:	9105      	str	r1, [sp, #20]
 800b738:	462b      	mov	r3, r5
 800b73a:	eb00 0e05 	add.w	lr, r0, r5
 800b73e:	210a      	movs	r1, #10
 800b740:	4573      	cmp	r3, lr
 800b742:	d113      	bne.n	800b76c <_strtod_l+0x254>
 800b744:	182b      	adds	r3, r5, r0
 800b746:	2b08      	cmp	r3, #8
 800b748:	f105 0501 	add.w	r5, r5, #1
 800b74c:	4405      	add	r5, r0
 800b74e:	dc1c      	bgt.n	800b78a <_strtod_l+0x272>
 800b750:	9907      	ldr	r1, [sp, #28]
 800b752:	230a      	movs	r3, #10
 800b754:	fb03 2301 	mla	r3, r3, r1, r2
 800b758:	9307      	str	r3, [sp, #28]
 800b75a:	2300      	movs	r3, #0
 800b75c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b75e:	1c51      	adds	r1, r2, #1
 800b760:	9117      	str	r1, [sp, #92]	; 0x5c
 800b762:	7852      	ldrb	r2, [r2, #1]
 800b764:	4618      	mov	r0, r3
 800b766:	e7c9      	b.n	800b6fc <_strtod_l+0x1e4>
 800b768:	4638      	mov	r0, r7
 800b76a:	e7d2      	b.n	800b712 <_strtod_l+0x1fa>
 800b76c:	2b08      	cmp	r3, #8
 800b76e:	dc04      	bgt.n	800b77a <_strtod_l+0x262>
 800b770:	9e07      	ldr	r6, [sp, #28]
 800b772:	434e      	muls	r6, r1
 800b774:	9607      	str	r6, [sp, #28]
 800b776:	3301      	adds	r3, #1
 800b778:	e7e2      	b.n	800b740 <_strtod_l+0x228>
 800b77a:	f103 0c01 	add.w	ip, r3, #1
 800b77e:	f1bc 0f10 	cmp.w	ip, #16
 800b782:	bfd8      	it	le
 800b784:	fb01 f909 	mulle.w	r9, r1, r9
 800b788:	e7f5      	b.n	800b776 <_strtod_l+0x25e>
 800b78a:	2d10      	cmp	r5, #16
 800b78c:	bfdc      	itt	le
 800b78e:	230a      	movle	r3, #10
 800b790:	fb03 2909 	mlale	r9, r3, r9, r2
 800b794:	e7e1      	b.n	800b75a <_strtod_l+0x242>
 800b796:	2300      	movs	r3, #0
 800b798:	9305      	str	r3, [sp, #20]
 800b79a:	2301      	movs	r3, #1
 800b79c:	e77c      	b.n	800b698 <_strtod_l+0x180>
 800b79e:	f04f 0c00 	mov.w	ip, #0
 800b7a2:	f108 0202 	add.w	r2, r8, #2
 800b7a6:	9217      	str	r2, [sp, #92]	; 0x5c
 800b7a8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b7ac:	e785      	b.n	800b6ba <_strtod_l+0x1a2>
 800b7ae:	f04f 0c01 	mov.w	ip, #1
 800b7b2:	e7f6      	b.n	800b7a2 <_strtod_l+0x28a>
 800b7b4:	0800f648 	.word	0x0800f648
 800b7b8:	0800f3fc 	.word	0x0800f3fc
 800b7bc:	7ff00000 	.word	0x7ff00000
 800b7c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b7c2:	1c51      	adds	r1, r2, #1
 800b7c4:	9117      	str	r1, [sp, #92]	; 0x5c
 800b7c6:	7852      	ldrb	r2, [r2, #1]
 800b7c8:	2a30      	cmp	r2, #48	; 0x30
 800b7ca:	d0f9      	beq.n	800b7c0 <_strtod_l+0x2a8>
 800b7cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b7d0:	2908      	cmp	r1, #8
 800b7d2:	f63f af79 	bhi.w	800b6c8 <_strtod_l+0x1b0>
 800b7d6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b7da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b7dc:	9206      	str	r2, [sp, #24]
 800b7de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b7e0:	1c51      	adds	r1, r2, #1
 800b7e2:	9117      	str	r1, [sp, #92]	; 0x5c
 800b7e4:	7852      	ldrb	r2, [r2, #1]
 800b7e6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b7ea:	2e09      	cmp	r6, #9
 800b7ec:	d937      	bls.n	800b85e <_strtod_l+0x346>
 800b7ee:	9e06      	ldr	r6, [sp, #24]
 800b7f0:	1b89      	subs	r1, r1, r6
 800b7f2:	2908      	cmp	r1, #8
 800b7f4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b7f8:	dc02      	bgt.n	800b800 <_strtod_l+0x2e8>
 800b7fa:	4576      	cmp	r6, lr
 800b7fc:	bfa8      	it	ge
 800b7fe:	4676      	movge	r6, lr
 800b800:	f1bc 0f00 	cmp.w	ip, #0
 800b804:	d000      	beq.n	800b808 <_strtod_l+0x2f0>
 800b806:	4276      	negs	r6, r6
 800b808:	2d00      	cmp	r5, #0
 800b80a:	d14d      	bne.n	800b8a8 <_strtod_l+0x390>
 800b80c:	9904      	ldr	r1, [sp, #16]
 800b80e:	4301      	orrs	r1, r0
 800b810:	f47f aec6 	bne.w	800b5a0 <_strtod_l+0x88>
 800b814:	2b00      	cmp	r3, #0
 800b816:	f47f aee1 	bne.w	800b5dc <_strtod_l+0xc4>
 800b81a:	2a69      	cmp	r2, #105	; 0x69
 800b81c:	d027      	beq.n	800b86e <_strtod_l+0x356>
 800b81e:	dc24      	bgt.n	800b86a <_strtod_l+0x352>
 800b820:	2a49      	cmp	r2, #73	; 0x49
 800b822:	d024      	beq.n	800b86e <_strtod_l+0x356>
 800b824:	2a4e      	cmp	r2, #78	; 0x4e
 800b826:	f47f aed9 	bne.w	800b5dc <_strtod_l+0xc4>
 800b82a:	499f      	ldr	r1, [pc, #636]	; (800baa8 <_strtod_l+0x590>)
 800b82c:	a817      	add	r0, sp, #92	; 0x5c
 800b82e:	f001 fe3d 	bl	800d4ac <__match>
 800b832:	2800      	cmp	r0, #0
 800b834:	f43f aed2 	beq.w	800b5dc <_strtod_l+0xc4>
 800b838:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	2b28      	cmp	r3, #40	; 0x28
 800b83e:	d12d      	bne.n	800b89c <_strtod_l+0x384>
 800b840:	499a      	ldr	r1, [pc, #616]	; (800baac <_strtod_l+0x594>)
 800b842:	aa1a      	add	r2, sp, #104	; 0x68
 800b844:	a817      	add	r0, sp, #92	; 0x5c
 800b846:	f001 fe45 	bl	800d4d4 <__hexnan>
 800b84a:	2805      	cmp	r0, #5
 800b84c:	d126      	bne.n	800b89c <_strtod_l+0x384>
 800b84e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b850:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b854:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b858:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b85c:	e6a0      	b.n	800b5a0 <_strtod_l+0x88>
 800b85e:	210a      	movs	r1, #10
 800b860:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b864:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b868:	e7b9      	b.n	800b7de <_strtod_l+0x2c6>
 800b86a:	2a6e      	cmp	r2, #110	; 0x6e
 800b86c:	e7db      	b.n	800b826 <_strtod_l+0x30e>
 800b86e:	4990      	ldr	r1, [pc, #576]	; (800bab0 <_strtod_l+0x598>)
 800b870:	a817      	add	r0, sp, #92	; 0x5c
 800b872:	f001 fe1b 	bl	800d4ac <__match>
 800b876:	2800      	cmp	r0, #0
 800b878:	f43f aeb0 	beq.w	800b5dc <_strtod_l+0xc4>
 800b87c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b87e:	498d      	ldr	r1, [pc, #564]	; (800bab4 <_strtod_l+0x59c>)
 800b880:	3b01      	subs	r3, #1
 800b882:	a817      	add	r0, sp, #92	; 0x5c
 800b884:	9317      	str	r3, [sp, #92]	; 0x5c
 800b886:	f001 fe11 	bl	800d4ac <__match>
 800b88a:	b910      	cbnz	r0, 800b892 <_strtod_l+0x37a>
 800b88c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b88e:	3301      	adds	r3, #1
 800b890:	9317      	str	r3, [sp, #92]	; 0x5c
 800b892:	f8df b230 	ldr.w	fp, [pc, #560]	; 800bac4 <_strtod_l+0x5ac>
 800b896:	f04f 0a00 	mov.w	sl, #0
 800b89a:	e681      	b.n	800b5a0 <_strtod_l+0x88>
 800b89c:	4886      	ldr	r0, [pc, #536]	; (800bab8 <_strtod_l+0x5a0>)
 800b89e:	f002 fe17 	bl	800e4d0 <nan>
 800b8a2:	ec5b ab10 	vmov	sl, fp, d0
 800b8a6:	e67b      	b.n	800b5a0 <_strtod_l+0x88>
 800b8a8:	9b05      	ldr	r3, [sp, #20]
 800b8aa:	9807      	ldr	r0, [sp, #28]
 800b8ac:	1af3      	subs	r3, r6, r3
 800b8ae:	2f00      	cmp	r7, #0
 800b8b0:	bf08      	it	eq
 800b8b2:	462f      	moveq	r7, r5
 800b8b4:	2d10      	cmp	r5, #16
 800b8b6:	9306      	str	r3, [sp, #24]
 800b8b8:	46a8      	mov	r8, r5
 800b8ba:	bfa8      	it	ge
 800b8bc:	f04f 0810 	movge.w	r8, #16
 800b8c0:	f7f4 fe20 	bl	8000504 <__aeabi_ui2d>
 800b8c4:	2d09      	cmp	r5, #9
 800b8c6:	4682      	mov	sl, r0
 800b8c8:	468b      	mov	fp, r1
 800b8ca:	dd13      	ble.n	800b8f4 <_strtod_l+0x3dc>
 800b8cc:	4b7b      	ldr	r3, [pc, #492]	; (800babc <_strtod_l+0x5a4>)
 800b8ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b8d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b8d6:	f7f4 fe8f 	bl	80005f8 <__aeabi_dmul>
 800b8da:	4682      	mov	sl, r0
 800b8dc:	4648      	mov	r0, r9
 800b8de:	468b      	mov	fp, r1
 800b8e0:	f7f4 fe10 	bl	8000504 <__aeabi_ui2d>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	4650      	mov	r0, sl
 800b8ea:	4659      	mov	r1, fp
 800b8ec:	f7f4 fcce 	bl	800028c <__adddf3>
 800b8f0:	4682      	mov	sl, r0
 800b8f2:	468b      	mov	fp, r1
 800b8f4:	2d0f      	cmp	r5, #15
 800b8f6:	dc38      	bgt.n	800b96a <_strtod_l+0x452>
 800b8f8:	9b06      	ldr	r3, [sp, #24]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	f43f ae50 	beq.w	800b5a0 <_strtod_l+0x88>
 800b900:	dd24      	ble.n	800b94c <_strtod_l+0x434>
 800b902:	2b16      	cmp	r3, #22
 800b904:	dc0b      	bgt.n	800b91e <_strtod_l+0x406>
 800b906:	496d      	ldr	r1, [pc, #436]	; (800babc <_strtod_l+0x5a4>)
 800b908:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b90c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b910:	4652      	mov	r2, sl
 800b912:	465b      	mov	r3, fp
 800b914:	f7f4 fe70 	bl	80005f8 <__aeabi_dmul>
 800b918:	4682      	mov	sl, r0
 800b91a:	468b      	mov	fp, r1
 800b91c:	e640      	b.n	800b5a0 <_strtod_l+0x88>
 800b91e:	9a06      	ldr	r2, [sp, #24]
 800b920:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b924:	4293      	cmp	r3, r2
 800b926:	db20      	blt.n	800b96a <_strtod_l+0x452>
 800b928:	4c64      	ldr	r4, [pc, #400]	; (800babc <_strtod_l+0x5a4>)
 800b92a:	f1c5 050f 	rsb	r5, r5, #15
 800b92e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b932:	4652      	mov	r2, sl
 800b934:	465b      	mov	r3, fp
 800b936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b93a:	f7f4 fe5d 	bl	80005f8 <__aeabi_dmul>
 800b93e:	9b06      	ldr	r3, [sp, #24]
 800b940:	1b5d      	subs	r5, r3, r5
 800b942:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b946:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b94a:	e7e3      	b.n	800b914 <_strtod_l+0x3fc>
 800b94c:	9b06      	ldr	r3, [sp, #24]
 800b94e:	3316      	adds	r3, #22
 800b950:	db0b      	blt.n	800b96a <_strtod_l+0x452>
 800b952:	9b05      	ldr	r3, [sp, #20]
 800b954:	1b9e      	subs	r6, r3, r6
 800b956:	4b59      	ldr	r3, [pc, #356]	; (800babc <_strtod_l+0x5a4>)
 800b958:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b95c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b960:	4650      	mov	r0, sl
 800b962:	4659      	mov	r1, fp
 800b964:	f7f4 ff72 	bl	800084c <__aeabi_ddiv>
 800b968:	e7d6      	b.n	800b918 <_strtod_l+0x400>
 800b96a:	9b06      	ldr	r3, [sp, #24]
 800b96c:	eba5 0808 	sub.w	r8, r5, r8
 800b970:	4498      	add	r8, r3
 800b972:	f1b8 0f00 	cmp.w	r8, #0
 800b976:	dd74      	ble.n	800ba62 <_strtod_l+0x54a>
 800b978:	f018 030f 	ands.w	r3, r8, #15
 800b97c:	d00a      	beq.n	800b994 <_strtod_l+0x47c>
 800b97e:	494f      	ldr	r1, [pc, #316]	; (800babc <_strtod_l+0x5a4>)
 800b980:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b984:	4652      	mov	r2, sl
 800b986:	465b      	mov	r3, fp
 800b988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b98c:	f7f4 fe34 	bl	80005f8 <__aeabi_dmul>
 800b990:	4682      	mov	sl, r0
 800b992:	468b      	mov	fp, r1
 800b994:	f038 080f 	bics.w	r8, r8, #15
 800b998:	d04f      	beq.n	800ba3a <_strtod_l+0x522>
 800b99a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b99e:	dd22      	ble.n	800b9e6 <_strtod_l+0x4ce>
 800b9a0:	2500      	movs	r5, #0
 800b9a2:	462e      	mov	r6, r5
 800b9a4:	9507      	str	r5, [sp, #28]
 800b9a6:	9505      	str	r5, [sp, #20]
 800b9a8:	2322      	movs	r3, #34	; 0x22
 800b9aa:	f8df b118 	ldr.w	fp, [pc, #280]	; 800bac4 <_strtod_l+0x5ac>
 800b9ae:	6023      	str	r3, [r4, #0]
 800b9b0:	f04f 0a00 	mov.w	sl, #0
 800b9b4:	9b07      	ldr	r3, [sp, #28]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f43f adf2 	beq.w	800b5a0 <_strtod_l+0x88>
 800b9bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f001 fe82 	bl	800d6c8 <_Bfree>
 800b9c4:	9905      	ldr	r1, [sp, #20]
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	f001 fe7e 	bl	800d6c8 <_Bfree>
 800b9cc:	4631      	mov	r1, r6
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f001 fe7a 	bl	800d6c8 <_Bfree>
 800b9d4:	9907      	ldr	r1, [sp, #28]
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	f001 fe76 	bl	800d6c8 <_Bfree>
 800b9dc:	4629      	mov	r1, r5
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f001 fe72 	bl	800d6c8 <_Bfree>
 800b9e4:	e5dc      	b.n	800b5a0 <_strtod_l+0x88>
 800b9e6:	4b36      	ldr	r3, [pc, #216]	; (800bac0 <_strtod_l+0x5a8>)
 800b9e8:	9304      	str	r3, [sp, #16]
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b9f0:	4650      	mov	r0, sl
 800b9f2:	4659      	mov	r1, fp
 800b9f4:	4699      	mov	r9, r3
 800b9f6:	f1b8 0f01 	cmp.w	r8, #1
 800b9fa:	dc21      	bgt.n	800ba40 <_strtod_l+0x528>
 800b9fc:	b10b      	cbz	r3, 800ba02 <_strtod_l+0x4ea>
 800b9fe:	4682      	mov	sl, r0
 800ba00:	468b      	mov	fp, r1
 800ba02:	4b2f      	ldr	r3, [pc, #188]	; (800bac0 <_strtod_l+0x5a8>)
 800ba04:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ba08:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ba0c:	4652      	mov	r2, sl
 800ba0e:	465b      	mov	r3, fp
 800ba10:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ba14:	f7f4 fdf0 	bl	80005f8 <__aeabi_dmul>
 800ba18:	4b2a      	ldr	r3, [pc, #168]	; (800bac4 <_strtod_l+0x5ac>)
 800ba1a:	460a      	mov	r2, r1
 800ba1c:	400b      	ands	r3, r1
 800ba1e:	492a      	ldr	r1, [pc, #168]	; (800bac8 <_strtod_l+0x5b0>)
 800ba20:	428b      	cmp	r3, r1
 800ba22:	4682      	mov	sl, r0
 800ba24:	d8bc      	bhi.n	800b9a0 <_strtod_l+0x488>
 800ba26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ba2a:	428b      	cmp	r3, r1
 800ba2c:	bf86      	itte	hi
 800ba2e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800bacc <_strtod_l+0x5b4>
 800ba32:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800ba36:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	9304      	str	r3, [sp, #16]
 800ba3e:	e084      	b.n	800bb4a <_strtod_l+0x632>
 800ba40:	f018 0f01 	tst.w	r8, #1
 800ba44:	d005      	beq.n	800ba52 <_strtod_l+0x53a>
 800ba46:	9b04      	ldr	r3, [sp, #16]
 800ba48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4c:	f7f4 fdd4 	bl	80005f8 <__aeabi_dmul>
 800ba50:	2301      	movs	r3, #1
 800ba52:	9a04      	ldr	r2, [sp, #16]
 800ba54:	3208      	adds	r2, #8
 800ba56:	f109 0901 	add.w	r9, r9, #1
 800ba5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ba5e:	9204      	str	r2, [sp, #16]
 800ba60:	e7c9      	b.n	800b9f6 <_strtod_l+0x4de>
 800ba62:	d0ea      	beq.n	800ba3a <_strtod_l+0x522>
 800ba64:	f1c8 0800 	rsb	r8, r8, #0
 800ba68:	f018 020f 	ands.w	r2, r8, #15
 800ba6c:	d00a      	beq.n	800ba84 <_strtod_l+0x56c>
 800ba6e:	4b13      	ldr	r3, [pc, #76]	; (800babc <_strtod_l+0x5a4>)
 800ba70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba74:	4650      	mov	r0, sl
 800ba76:	4659      	mov	r1, fp
 800ba78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7c:	f7f4 fee6 	bl	800084c <__aeabi_ddiv>
 800ba80:	4682      	mov	sl, r0
 800ba82:	468b      	mov	fp, r1
 800ba84:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ba88:	d0d7      	beq.n	800ba3a <_strtod_l+0x522>
 800ba8a:	f1b8 0f1f 	cmp.w	r8, #31
 800ba8e:	dd1f      	ble.n	800bad0 <_strtod_l+0x5b8>
 800ba90:	2500      	movs	r5, #0
 800ba92:	462e      	mov	r6, r5
 800ba94:	9507      	str	r5, [sp, #28]
 800ba96:	9505      	str	r5, [sp, #20]
 800ba98:	2322      	movs	r3, #34	; 0x22
 800ba9a:	f04f 0a00 	mov.w	sl, #0
 800ba9e:	f04f 0b00 	mov.w	fp, #0
 800baa2:	6023      	str	r3, [r4, #0]
 800baa4:	e786      	b.n	800b9b4 <_strtod_l+0x49c>
 800baa6:	bf00      	nop
 800baa8:	0800f3cd 	.word	0x0800f3cd
 800baac:	0800f410 	.word	0x0800f410
 800bab0:	0800f3c5 	.word	0x0800f3c5
 800bab4:	0800f554 	.word	0x0800f554
 800bab8:	0800f800 	.word	0x0800f800
 800babc:	0800f6e0 	.word	0x0800f6e0
 800bac0:	0800f6b8 	.word	0x0800f6b8
 800bac4:	7ff00000 	.word	0x7ff00000
 800bac8:	7ca00000 	.word	0x7ca00000
 800bacc:	7fefffff 	.word	0x7fefffff
 800bad0:	f018 0310 	ands.w	r3, r8, #16
 800bad4:	bf18      	it	ne
 800bad6:	236a      	movne	r3, #106	; 0x6a
 800bad8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800be88 <_strtod_l+0x970>
 800badc:	9304      	str	r3, [sp, #16]
 800bade:	4650      	mov	r0, sl
 800bae0:	4659      	mov	r1, fp
 800bae2:	2300      	movs	r3, #0
 800bae4:	f018 0f01 	tst.w	r8, #1
 800bae8:	d004      	beq.n	800baf4 <_strtod_l+0x5dc>
 800baea:	e9d9 2300 	ldrd	r2, r3, [r9]
 800baee:	f7f4 fd83 	bl	80005f8 <__aeabi_dmul>
 800baf2:	2301      	movs	r3, #1
 800baf4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800baf8:	f109 0908 	add.w	r9, r9, #8
 800bafc:	d1f2      	bne.n	800bae4 <_strtod_l+0x5cc>
 800bafe:	b10b      	cbz	r3, 800bb04 <_strtod_l+0x5ec>
 800bb00:	4682      	mov	sl, r0
 800bb02:	468b      	mov	fp, r1
 800bb04:	9b04      	ldr	r3, [sp, #16]
 800bb06:	b1c3      	cbz	r3, 800bb3a <_strtod_l+0x622>
 800bb08:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bb0c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	4659      	mov	r1, fp
 800bb14:	dd11      	ble.n	800bb3a <_strtod_l+0x622>
 800bb16:	2b1f      	cmp	r3, #31
 800bb18:	f340 8124 	ble.w	800bd64 <_strtod_l+0x84c>
 800bb1c:	2b34      	cmp	r3, #52	; 0x34
 800bb1e:	bfde      	ittt	le
 800bb20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bb24:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800bb28:	fa03 f202 	lslle.w	r2, r3, r2
 800bb2c:	f04f 0a00 	mov.w	sl, #0
 800bb30:	bfcc      	ite	gt
 800bb32:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bb36:	ea02 0b01 	andle.w	fp, r2, r1
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	4650      	mov	r0, sl
 800bb40:	4659      	mov	r1, fp
 800bb42:	f7f4 ffc1 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb46:	2800      	cmp	r0, #0
 800bb48:	d1a2      	bne.n	800ba90 <_strtod_l+0x578>
 800bb4a:	9b07      	ldr	r3, [sp, #28]
 800bb4c:	9300      	str	r3, [sp, #0]
 800bb4e:	9908      	ldr	r1, [sp, #32]
 800bb50:	462b      	mov	r3, r5
 800bb52:	463a      	mov	r2, r7
 800bb54:	4620      	mov	r0, r4
 800bb56:	f001 fe1f 	bl	800d798 <__s2b>
 800bb5a:	9007      	str	r0, [sp, #28]
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	f43f af1f 	beq.w	800b9a0 <_strtod_l+0x488>
 800bb62:	9b05      	ldr	r3, [sp, #20]
 800bb64:	1b9e      	subs	r6, r3, r6
 800bb66:	9b06      	ldr	r3, [sp, #24]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	bfb4      	ite	lt
 800bb6c:	4633      	movlt	r3, r6
 800bb6e:	2300      	movge	r3, #0
 800bb70:	930c      	str	r3, [sp, #48]	; 0x30
 800bb72:	9b06      	ldr	r3, [sp, #24]
 800bb74:	2500      	movs	r5, #0
 800bb76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bb7a:	9312      	str	r3, [sp, #72]	; 0x48
 800bb7c:	462e      	mov	r6, r5
 800bb7e:	9b07      	ldr	r3, [sp, #28]
 800bb80:	4620      	mov	r0, r4
 800bb82:	6859      	ldr	r1, [r3, #4]
 800bb84:	f001 fd60 	bl	800d648 <_Balloc>
 800bb88:	9005      	str	r0, [sp, #20]
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	f43f af0c 	beq.w	800b9a8 <_strtod_l+0x490>
 800bb90:	9b07      	ldr	r3, [sp, #28]
 800bb92:	691a      	ldr	r2, [r3, #16]
 800bb94:	3202      	adds	r2, #2
 800bb96:	f103 010c 	add.w	r1, r3, #12
 800bb9a:	0092      	lsls	r2, r2, #2
 800bb9c:	300c      	adds	r0, #12
 800bb9e:	f7fe fd9d 	bl	800a6dc <memcpy>
 800bba2:	ec4b ab10 	vmov	d0, sl, fp
 800bba6:	aa1a      	add	r2, sp, #104	; 0x68
 800bba8:	a919      	add	r1, sp, #100	; 0x64
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f002 f93a 	bl	800de24 <__d2b>
 800bbb0:	ec4b ab18 	vmov	d8, sl, fp
 800bbb4:	9018      	str	r0, [sp, #96]	; 0x60
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	f43f aef6 	beq.w	800b9a8 <_strtod_l+0x490>
 800bbbc:	2101      	movs	r1, #1
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f001 fe84 	bl	800d8cc <__i2b>
 800bbc4:	4606      	mov	r6, r0
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	f43f aeee 	beq.w	800b9a8 <_strtod_l+0x490>
 800bbcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bbce:	9904      	ldr	r1, [sp, #16]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	bfab      	itete	ge
 800bbd4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bbd6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bbd8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bbda:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800bbde:	bfac      	ite	ge
 800bbe0:	eb03 0902 	addge.w	r9, r3, r2
 800bbe4:	1ad7      	sublt	r7, r2, r3
 800bbe6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bbe8:	eba3 0801 	sub.w	r8, r3, r1
 800bbec:	4490      	add	r8, r2
 800bbee:	4ba1      	ldr	r3, [pc, #644]	; (800be74 <_strtod_l+0x95c>)
 800bbf0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bbf4:	4598      	cmp	r8, r3
 800bbf6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bbfa:	f280 80c7 	bge.w	800bd8c <_strtod_l+0x874>
 800bbfe:	eba3 0308 	sub.w	r3, r3, r8
 800bc02:	2b1f      	cmp	r3, #31
 800bc04:	eba2 0203 	sub.w	r2, r2, r3
 800bc08:	f04f 0101 	mov.w	r1, #1
 800bc0c:	f300 80b1 	bgt.w	800bd72 <_strtod_l+0x85a>
 800bc10:	fa01 f303 	lsl.w	r3, r1, r3
 800bc14:	930d      	str	r3, [sp, #52]	; 0x34
 800bc16:	2300      	movs	r3, #0
 800bc18:	9308      	str	r3, [sp, #32]
 800bc1a:	eb09 0802 	add.w	r8, r9, r2
 800bc1e:	9b04      	ldr	r3, [sp, #16]
 800bc20:	45c1      	cmp	r9, r8
 800bc22:	4417      	add	r7, r2
 800bc24:	441f      	add	r7, r3
 800bc26:	464b      	mov	r3, r9
 800bc28:	bfa8      	it	ge
 800bc2a:	4643      	movge	r3, r8
 800bc2c:	42bb      	cmp	r3, r7
 800bc2e:	bfa8      	it	ge
 800bc30:	463b      	movge	r3, r7
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	bfc2      	ittt	gt
 800bc36:	eba8 0803 	subgt.w	r8, r8, r3
 800bc3a:	1aff      	subgt	r7, r7, r3
 800bc3c:	eba9 0903 	subgt.w	r9, r9, r3
 800bc40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	dd17      	ble.n	800bc76 <_strtod_l+0x75e>
 800bc46:	4631      	mov	r1, r6
 800bc48:	461a      	mov	r2, r3
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f001 fefe 	bl	800da4c <__pow5mult>
 800bc50:	4606      	mov	r6, r0
 800bc52:	2800      	cmp	r0, #0
 800bc54:	f43f aea8 	beq.w	800b9a8 <_strtod_l+0x490>
 800bc58:	4601      	mov	r1, r0
 800bc5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f001 fe4b 	bl	800d8f8 <__multiply>
 800bc62:	900b      	str	r0, [sp, #44]	; 0x2c
 800bc64:	2800      	cmp	r0, #0
 800bc66:	f43f ae9f 	beq.w	800b9a8 <_strtod_l+0x490>
 800bc6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	f001 fd2b 	bl	800d6c8 <_Bfree>
 800bc72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc74:	9318      	str	r3, [sp, #96]	; 0x60
 800bc76:	f1b8 0f00 	cmp.w	r8, #0
 800bc7a:	f300 808c 	bgt.w	800bd96 <_strtod_l+0x87e>
 800bc7e:	9b06      	ldr	r3, [sp, #24]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	dd08      	ble.n	800bc96 <_strtod_l+0x77e>
 800bc84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bc86:	9905      	ldr	r1, [sp, #20]
 800bc88:	4620      	mov	r0, r4
 800bc8a:	f001 fedf 	bl	800da4c <__pow5mult>
 800bc8e:	9005      	str	r0, [sp, #20]
 800bc90:	2800      	cmp	r0, #0
 800bc92:	f43f ae89 	beq.w	800b9a8 <_strtod_l+0x490>
 800bc96:	2f00      	cmp	r7, #0
 800bc98:	dd08      	ble.n	800bcac <_strtod_l+0x794>
 800bc9a:	9905      	ldr	r1, [sp, #20]
 800bc9c:	463a      	mov	r2, r7
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f001 ff2e 	bl	800db00 <__lshift>
 800bca4:	9005      	str	r0, [sp, #20]
 800bca6:	2800      	cmp	r0, #0
 800bca8:	f43f ae7e 	beq.w	800b9a8 <_strtod_l+0x490>
 800bcac:	f1b9 0f00 	cmp.w	r9, #0
 800bcb0:	dd08      	ble.n	800bcc4 <_strtod_l+0x7ac>
 800bcb2:	4631      	mov	r1, r6
 800bcb4:	464a      	mov	r2, r9
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	f001 ff22 	bl	800db00 <__lshift>
 800bcbc:	4606      	mov	r6, r0
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	f43f ae72 	beq.w	800b9a8 <_strtod_l+0x490>
 800bcc4:	9a05      	ldr	r2, [sp, #20]
 800bcc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f001 ffa5 	bl	800dc18 <__mdiff>
 800bcce:	4605      	mov	r5, r0
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	f43f ae69 	beq.w	800b9a8 <_strtod_l+0x490>
 800bcd6:	68c3      	ldr	r3, [r0, #12]
 800bcd8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcda:	2300      	movs	r3, #0
 800bcdc:	60c3      	str	r3, [r0, #12]
 800bcde:	4631      	mov	r1, r6
 800bce0:	f001 ff7e 	bl	800dbe0 <__mcmp>
 800bce4:	2800      	cmp	r0, #0
 800bce6:	da60      	bge.n	800bdaa <_strtod_l+0x892>
 800bce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcea:	ea53 030a 	orrs.w	r3, r3, sl
 800bcee:	f040 8082 	bne.w	800bdf6 <_strtod_l+0x8de>
 800bcf2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d17d      	bne.n	800bdf6 <_strtod_l+0x8de>
 800bcfa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bcfe:	0d1b      	lsrs	r3, r3, #20
 800bd00:	051b      	lsls	r3, r3, #20
 800bd02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bd06:	d976      	bls.n	800bdf6 <_strtod_l+0x8de>
 800bd08:	696b      	ldr	r3, [r5, #20]
 800bd0a:	b913      	cbnz	r3, 800bd12 <_strtod_l+0x7fa>
 800bd0c:	692b      	ldr	r3, [r5, #16]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	dd71      	ble.n	800bdf6 <_strtod_l+0x8de>
 800bd12:	4629      	mov	r1, r5
 800bd14:	2201      	movs	r2, #1
 800bd16:	4620      	mov	r0, r4
 800bd18:	f001 fef2 	bl	800db00 <__lshift>
 800bd1c:	4631      	mov	r1, r6
 800bd1e:	4605      	mov	r5, r0
 800bd20:	f001 ff5e 	bl	800dbe0 <__mcmp>
 800bd24:	2800      	cmp	r0, #0
 800bd26:	dd66      	ble.n	800bdf6 <_strtod_l+0x8de>
 800bd28:	9904      	ldr	r1, [sp, #16]
 800bd2a:	4a53      	ldr	r2, [pc, #332]	; (800be78 <_strtod_l+0x960>)
 800bd2c:	465b      	mov	r3, fp
 800bd2e:	2900      	cmp	r1, #0
 800bd30:	f000 8081 	beq.w	800be36 <_strtod_l+0x91e>
 800bd34:	ea02 010b 	and.w	r1, r2, fp
 800bd38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bd3c:	dc7b      	bgt.n	800be36 <_strtod_l+0x91e>
 800bd3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bd42:	f77f aea9 	ble.w	800ba98 <_strtod_l+0x580>
 800bd46:	4b4d      	ldr	r3, [pc, #308]	; (800be7c <_strtod_l+0x964>)
 800bd48:	4650      	mov	r0, sl
 800bd4a:	4659      	mov	r1, fp
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f7f4 fc53 	bl	80005f8 <__aeabi_dmul>
 800bd52:	460b      	mov	r3, r1
 800bd54:	4303      	orrs	r3, r0
 800bd56:	bf08      	it	eq
 800bd58:	2322      	moveq	r3, #34	; 0x22
 800bd5a:	4682      	mov	sl, r0
 800bd5c:	468b      	mov	fp, r1
 800bd5e:	bf08      	it	eq
 800bd60:	6023      	streq	r3, [r4, #0]
 800bd62:	e62b      	b.n	800b9bc <_strtod_l+0x4a4>
 800bd64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd68:	fa02 f303 	lsl.w	r3, r2, r3
 800bd6c:	ea03 0a0a 	and.w	sl, r3, sl
 800bd70:	e6e3      	b.n	800bb3a <_strtod_l+0x622>
 800bd72:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800bd76:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800bd7a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800bd7e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800bd82:	fa01 f308 	lsl.w	r3, r1, r8
 800bd86:	9308      	str	r3, [sp, #32]
 800bd88:	910d      	str	r1, [sp, #52]	; 0x34
 800bd8a:	e746      	b.n	800bc1a <_strtod_l+0x702>
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	9308      	str	r3, [sp, #32]
 800bd90:	2301      	movs	r3, #1
 800bd92:	930d      	str	r3, [sp, #52]	; 0x34
 800bd94:	e741      	b.n	800bc1a <_strtod_l+0x702>
 800bd96:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd98:	4642      	mov	r2, r8
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f001 feb0 	bl	800db00 <__lshift>
 800bda0:	9018      	str	r0, [sp, #96]	; 0x60
 800bda2:	2800      	cmp	r0, #0
 800bda4:	f47f af6b 	bne.w	800bc7e <_strtod_l+0x766>
 800bda8:	e5fe      	b.n	800b9a8 <_strtod_l+0x490>
 800bdaa:	465f      	mov	r7, fp
 800bdac:	d16e      	bne.n	800be8c <_strtod_l+0x974>
 800bdae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bdb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdb4:	b342      	cbz	r2, 800be08 <_strtod_l+0x8f0>
 800bdb6:	4a32      	ldr	r2, [pc, #200]	; (800be80 <_strtod_l+0x968>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d128      	bne.n	800be0e <_strtod_l+0x8f6>
 800bdbc:	9b04      	ldr	r3, [sp, #16]
 800bdbe:	4651      	mov	r1, sl
 800bdc0:	b1eb      	cbz	r3, 800bdfe <_strtod_l+0x8e6>
 800bdc2:	4b2d      	ldr	r3, [pc, #180]	; (800be78 <_strtod_l+0x960>)
 800bdc4:	403b      	ands	r3, r7
 800bdc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bdca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bdce:	d819      	bhi.n	800be04 <_strtod_l+0x8ec>
 800bdd0:	0d1b      	lsrs	r3, r3, #20
 800bdd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bdd6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdda:	4299      	cmp	r1, r3
 800bddc:	d117      	bne.n	800be0e <_strtod_l+0x8f6>
 800bdde:	4b29      	ldr	r3, [pc, #164]	; (800be84 <_strtod_l+0x96c>)
 800bde0:	429f      	cmp	r7, r3
 800bde2:	d102      	bne.n	800bdea <_strtod_l+0x8d2>
 800bde4:	3101      	adds	r1, #1
 800bde6:	f43f addf 	beq.w	800b9a8 <_strtod_l+0x490>
 800bdea:	4b23      	ldr	r3, [pc, #140]	; (800be78 <_strtod_l+0x960>)
 800bdec:	403b      	ands	r3, r7
 800bdee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bdf2:	f04f 0a00 	mov.w	sl, #0
 800bdf6:	9b04      	ldr	r3, [sp, #16]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d1a4      	bne.n	800bd46 <_strtod_l+0x82e>
 800bdfc:	e5de      	b.n	800b9bc <_strtod_l+0x4a4>
 800bdfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be02:	e7ea      	b.n	800bdda <_strtod_l+0x8c2>
 800be04:	4613      	mov	r3, r2
 800be06:	e7e8      	b.n	800bdda <_strtod_l+0x8c2>
 800be08:	ea53 030a 	orrs.w	r3, r3, sl
 800be0c:	d08c      	beq.n	800bd28 <_strtod_l+0x810>
 800be0e:	9b08      	ldr	r3, [sp, #32]
 800be10:	b1db      	cbz	r3, 800be4a <_strtod_l+0x932>
 800be12:	423b      	tst	r3, r7
 800be14:	d0ef      	beq.n	800bdf6 <_strtod_l+0x8de>
 800be16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be18:	9a04      	ldr	r2, [sp, #16]
 800be1a:	4650      	mov	r0, sl
 800be1c:	4659      	mov	r1, fp
 800be1e:	b1c3      	cbz	r3, 800be52 <_strtod_l+0x93a>
 800be20:	f7ff fb5e 	bl	800b4e0 <sulp>
 800be24:	4602      	mov	r2, r0
 800be26:	460b      	mov	r3, r1
 800be28:	ec51 0b18 	vmov	r0, r1, d8
 800be2c:	f7f4 fa2e 	bl	800028c <__adddf3>
 800be30:	4682      	mov	sl, r0
 800be32:	468b      	mov	fp, r1
 800be34:	e7df      	b.n	800bdf6 <_strtod_l+0x8de>
 800be36:	4013      	ands	r3, r2
 800be38:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800be3c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800be40:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800be44:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800be48:	e7d5      	b.n	800bdf6 <_strtod_l+0x8de>
 800be4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be4c:	ea13 0f0a 	tst.w	r3, sl
 800be50:	e7e0      	b.n	800be14 <_strtod_l+0x8fc>
 800be52:	f7ff fb45 	bl	800b4e0 <sulp>
 800be56:	4602      	mov	r2, r0
 800be58:	460b      	mov	r3, r1
 800be5a:	ec51 0b18 	vmov	r0, r1, d8
 800be5e:	f7f4 fa13 	bl	8000288 <__aeabi_dsub>
 800be62:	2200      	movs	r2, #0
 800be64:	2300      	movs	r3, #0
 800be66:	4682      	mov	sl, r0
 800be68:	468b      	mov	fp, r1
 800be6a:	f7f4 fe2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800be6e:	2800      	cmp	r0, #0
 800be70:	d0c1      	beq.n	800bdf6 <_strtod_l+0x8de>
 800be72:	e611      	b.n	800ba98 <_strtod_l+0x580>
 800be74:	fffffc02 	.word	0xfffffc02
 800be78:	7ff00000 	.word	0x7ff00000
 800be7c:	39500000 	.word	0x39500000
 800be80:	000fffff 	.word	0x000fffff
 800be84:	7fefffff 	.word	0x7fefffff
 800be88:	0800f428 	.word	0x0800f428
 800be8c:	4631      	mov	r1, r6
 800be8e:	4628      	mov	r0, r5
 800be90:	f002 f824 	bl	800dedc <__ratio>
 800be94:	ec59 8b10 	vmov	r8, r9, d0
 800be98:	ee10 0a10 	vmov	r0, s0
 800be9c:	2200      	movs	r2, #0
 800be9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bea2:	4649      	mov	r1, r9
 800bea4:	f7f4 fe24 	bl	8000af0 <__aeabi_dcmple>
 800bea8:	2800      	cmp	r0, #0
 800beaa:	d07a      	beq.n	800bfa2 <_strtod_l+0xa8a>
 800beac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d04a      	beq.n	800bf48 <_strtod_l+0xa30>
 800beb2:	4b95      	ldr	r3, [pc, #596]	; (800c108 <_strtod_l+0xbf0>)
 800beb4:	2200      	movs	r2, #0
 800beb6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800beba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c108 <_strtod_l+0xbf0>
 800bebe:	f04f 0800 	mov.w	r8, #0
 800bec2:	4b92      	ldr	r3, [pc, #584]	; (800c10c <_strtod_l+0xbf4>)
 800bec4:	403b      	ands	r3, r7
 800bec6:	930d      	str	r3, [sp, #52]	; 0x34
 800bec8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800beca:	4b91      	ldr	r3, [pc, #580]	; (800c110 <_strtod_l+0xbf8>)
 800becc:	429a      	cmp	r2, r3
 800bece:	f040 80b0 	bne.w	800c032 <_strtod_l+0xb1a>
 800bed2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bed6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800beda:	ec4b ab10 	vmov	d0, sl, fp
 800bede:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bee2:	f001 ff23 	bl	800dd2c <__ulp>
 800bee6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800beea:	ec53 2b10 	vmov	r2, r3, d0
 800beee:	f7f4 fb83 	bl	80005f8 <__aeabi_dmul>
 800bef2:	4652      	mov	r2, sl
 800bef4:	465b      	mov	r3, fp
 800bef6:	f7f4 f9c9 	bl	800028c <__adddf3>
 800befa:	460b      	mov	r3, r1
 800befc:	4983      	ldr	r1, [pc, #524]	; (800c10c <_strtod_l+0xbf4>)
 800befe:	4a85      	ldr	r2, [pc, #532]	; (800c114 <_strtod_l+0xbfc>)
 800bf00:	4019      	ands	r1, r3
 800bf02:	4291      	cmp	r1, r2
 800bf04:	4682      	mov	sl, r0
 800bf06:	d960      	bls.n	800bfca <_strtod_l+0xab2>
 800bf08:	ee18 3a90 	vmov	r3, s17
 800bf0c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d104      	bne.n	800bf1e <_strtod_l+0xa06>
 800bf14:	ee18 3a10 	vmov	r3, s16
 800bf18:	3301      	adds	r3, #1
 800bf1a:	f43f ad45 	beq.w	800b9a8 <_strtod_l+0x490>
 800bf1e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c120 <_strtod_l+0xc08>
 800bf22:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bf26:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bf28:	4620      	mov	r0, r4
 800bf2a:	f001 fbcd 	bl	800d6c8 <_Bfree>
 800bf2e:	9905      	ldr	r1, [sp, #20]
 800bf30:	4620      	mov	r0, r4
 800bf32:	f001 fbc9 	bl	800d6c8 <_Bfree>
 800bf36:	4631      	mov	r1, r6
 800bf38:	4620      	mov	r0, r4
 800bf3a:	f001 fbc5 	bl	800d6c8 <_Bfree>
 800bf3e:	4629      	mov	r1, r5
 800bf40:	4620      	mov	r0, r4
 800bf42:	f001 fbc1 	bl	800d6c8 <_Bfree>
 800bf46:	e61a      	b.n	800bb7e <_strtod_l+0x666>
 800bf48:	f1ba 0f00 	cmp.w	sl, #0
 800bf4c:	d11b      	bne.n	800bf86 <_strtod_l+0xa6e>
 800bf4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf52:	b9f3      	cbnz	r3, 800bf92 <_strtod_l+0xa7a>
 800bf54:	4b6c      	ldr	r3, [pc, #432]	; (800c108 <_strtod_l+0xbf0>)
 800bf56:	2200      	movs	r2, #0
 800bf58:	4640      	mov	r0, r8
 800bf5a:	4649      	mov	r1, r9
 800bf5c:	f7f4 fdbe 	bl	8000adc <__aeabi_dcmplt>
 800bf60:	b9d0      	cbnz	r0, 800bf98 <_strtod_l+0xa80>
 800bf62:	4640      	mov	r0, r8
 800bf64:	4649      	mov	r1, r9
 800bf66:	4b6c      	ldr	r3, [pc, #432]	; (800c118 <_strtod_l+0xc00>)
 800bf68:	2200      	movs	r2, #0
 800bf6a:	f7f4 fb45 	bl	80005f8 <__aeabi_dmul>
 800bf6e:	4680      	mov	r8, r0
 800bf70:	4689      	mov	r9, r1
 800bf72:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bf76:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800bf7a:	9315      	str	r3, [sp, #84]	; 0x54
 800bf7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bf80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bf84:	e79d      	b.n	800bec2 <_strtod_l+0x9aa>
 800bf86:	f1ba 0f01 	cmp.w	sl, #1
 800bf8a:	d102      	bne.n	800bf92 <_strtod_l+0xa7a>
 800bf8c:	2f00      	cmp	r7, #0
 800bf8e:	f43f ad83 	beq.w	800ba98 <_strtod_l+0x580>
 800bf92:	4b62      	ldr	r3, [pc, #392]	; (800c11c <_strtod_l+0xc04>)
 800bf94:	2200      	movs	r2, #0
 800bf96:	e78e      	b.n	800beb6 <_strtod_l+0x99e>
 800bf98:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c118 <_strtod_l+0xc00>
 800bf9c:	f04f 0800 	mov.w	r8, #0
 800bfa0:	e7e7      	b.n	800bf72 <_strtod_l+0xa5a>
 800bfa2:	4b5d      	ldr	r3, [pc, #372]	; (800c118 <_strtod_l+0xc00>)
 800bfa4:	4640      	mov	r0, r8
 800bfa6:	4649      	mov	r1, r9
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	f7f4 fb25 	bl	80005f8 <__aeabi_dmul>
 800bfae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfb0:	4680      	mov	r8, r0
 800bfb2:	4689      	mov	r9, r1
 800bfb4:	b933      	cbnz	r3, 800bfc4 <_strtod_l+0xaac>
 800bfb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfba:	900e      	str	r0, [sp, #56]	; 0x38
 800bfbc:	930f      	str	r3, [sp, #60]	; 0x3c
 800bfbe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bfc2:	e7dd      	b.n	800bf80 <_strtod_l+0xa68>
 800bfc4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800bfc8:	e7f9      	b.n	800bfbe <_strtod_l+0xaa6>
 800bfca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bfce:	9b04      	ldr	r3, [sp, #16]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1a8      	bne.n	800bf26 <_strtod_l+0xa0e>
 800bfd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bfd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bfda:	0d1b      	lsrs	r3, r3, #20
 800bfdc:	051b      	lsls	r3, r3, #20
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d1a1      	bne.n	800bf26 <_strtod_l+0xa0e>
 800bfe2:	4640      	mov	r0, r8
 800bfe4:	4649      	mov	r1, r9
 800bfe6:	f7f4 fe67 	bl	8000cb8 <__aeabi_d2lz>
 800bfea:	f7f4 fad7 	bl	800059c <__aeabi_l2d>
 800bfee:	4602      	mov	r2, r0
 800bff0:	460b      	mov	r3, r1
 800bff2:	4640      	mov	r0, r8
 800bff4:	4649      	mov	r1, r9
 800bff6:	f7f4 f947 	bl	8000288 <__aeabi_dsub>
 800bffa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bffc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c000:	ea43 030a 	orr.w	r3, r3, sl
 800c004:	4313      	orrs	r3, r2
 800c006:	4680      	mov	r8, r0
 800c008:	4689      	mov	r9, r1
 800c00a:	d055      	beq.n	800c0b8 <_strtod_l+0xba0>
 800c00c:	a336      	add	r3, pc, #216	; (adr r3, 800c0e8 <_strtod_l+0xbd0>)
 800c00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c012:	f7f4 fd63 	bl	8000adc <__aeabi_dcmplt>
 800c016:	2800      	cmp	r0, #0
 800c018:	f47f acd0 	bne.w	800b9bc <_strtod_l+0x4a4>
 800c01c:	a334      	add	r3, pc, #208	; (adr r3, 800c0f0 <_strtod_l+0xbd8>)
 800c01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c022:	4640      	mov	r0, r8
 800c024:	4649      	mov	r1, r9
 800c026:	f7f4 fd77 	bl	8000b18 <__aeabi_dcmpgt>
 800c02a:	2800      	cmp	r0, #0
 800c02c:	f43f af7b 	beq.w	800bf26 <_strtod_l+0xa0e>
 800c030:	e4c4      	b.n	800b9bc <_strtod_l+0x4a4>
 800c032:	9b04      	ldr	r3, [sp, #16]
 800c034:	b333      	cbz	r3, 800c084 <_strtod_l+0xb6c>
 800c036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c038:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c03c:	d822      	bhi.n	800c084 <_strtod_l+0xb6c>
 800c03e:	a32e      	add	r3, pc, #184	; (adr r3, 800c0f8 <_strtod_l+0xbe0>)
 800c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c044:	4640      	mov	r0, r8
 800c046:	4649      	mov	r1, r9
 800c048:	f7f4 fd52 	bl	8000af0 <__aeabi_dcmple>
 800c04c:	b1a0      	cbz	r0, 800c078 <_strtod_l+0xb60>
 800c04e:	4649      	mov	r1, r9
 800c050:	4640      	mov	r0, r8
 800c052:	f7f4 fda9 	bl	8000ba8 <__aeabi_d2uiz>
 800c056:	2801      	cmp	r0, #1
 800c058:	bf38      	it	cc
 800c05a:	2001      	movcc	r0, #1
 800c05c:	f7f4 fa52 	bl	8000504 <__aeabi_ui2d>
 800c060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c062:	4680      	mov	r8, r0
 800c064:	4689      	mov	r9, r1
 800c066:	bb23      	cbnz	r3, 800c0b2 <_strtod_l+0xb9a>
 800c068:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c06c:	9010      	str	r0, [sp, #64]	; 0x40
 800c06e:	9311      	str	r3, [sp, #68]	; 0x44
 800c070:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c074:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c07a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c07c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c080:	1a9b      	subs	r3, r3, r2
 800c082:	9309      	str	r3, [sp, #36]	; 0x24
 800c084:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c088:	eeb0 0a48 	vmov.f32	s0, s16
 800c08c:	eef0 0a68 	vmov.f32	s1, s17
 800c090:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c094:	f001 fe4a 	bl	800dd2c <__ulp>
 800c098:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c09c:	ec53 2b10 	vmov	r2, r3, d0
 800c0a0:	f7f4 faaa 	bl	80005f8 <__aeabi_dmul>
 800c0a4:	ec53 2b18 	vmov	r2, r3, d8
 800c0a8:	f7f4 f8f0 	bl	800028c <__adddf3>
 800c0ac:	4682      	mov	sl, r0
 800c0ae:	468b      	mov	fp, r1
 800c0b0:	e78d      	b.n	800bfce <_strtod_l+0xab6>
 800c0b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c0b6:	e7db      	b.n	800c070 <_strtod_l+0xb58>
 800c0b8:	a311      	add	r3, pc, #68	; (adr r3, 800c100 <_strtod_l+0xbe8>)
 800c0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0be:	f7f4 fd0d 	bl	8000adc <__aeabi_dcmplt>
 800c0c2:	e7b2      	b.n	800c02a <_strtod_l+0xb12>
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	930a      	str	r3, [sp, #40]	; 0x28
 800c0c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c0ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c0cc:	6013      	str	r3, [r2, #0]
 800c0ce:	f7ff ba6b 	b.w	800b5a8 <_strtod_l+0x90>
 800c0d2:	2a65      	cmp	r2, #101	; 0x65
 800c0d4:	f43f ab5f 	beq.w	800b796 <_strtod_l+0x27e>
 800c0d8:	2a45      	cmp	r2, #69	; 0x45
 800c0da:	f43f ab5c 	beq.w	800b796 <_strtod_l+0x27e>
 800c0de:	2301      	movs	r3, #1
 800c0e0:	f7ff bb94 	b.w	800b80c <_strtod_l+0x2f4>
 800c0e4:	f3af 8000 	nop.w
 800c0e8:	94a03595 	.word	0x94a03595
 800c0ec:	3fdfffff 	.word	0x3fdfffff
 800c0f0:	35afe535 	.word	0x35afe535
 800c0f4:	3fe00000 	.word	0x3fe00000
 800c0f8:	ffc00000 	.word	0xffc00000
 800c0fc:	41dfffff 	.word	0x41dfffff
 800c100:	94a03595 	.word	0x94a03595
 800c104:	3fcfffff 	.word	0x3fcfffff
 800c108:	3ff00000 	.word	0x3ff00000
 800c10c:	7ff00000 	.word	0x7ff00000
 800c110:	7fe00000 	.word	0x7fe00000
 800c114:	7c9fffff 	.word	0x7c9fffff
 800c118:	3fe00000 	.word	0x3fe00000
 800c11c:	bff00000 	.word	0xbff00000
 800c120:	7fefffff 	.word	0x7fefffff

0800c124 <_strtod_r>:
 800c124:	4b01      	ldr	r3, [pc, #4]	; (800c12c <_strtod_r+0x8>)
 800c126:	f7ff b9f7 	b.w	800b518 <_strtod_l>
 800c12a:	bf00      	nop
 800c12c:	20000088 	.word	0x20000088

0800c130 <_strtol_l.constprop.0>:
 800c130:	2b01      	cmp	r3, #1
 800c132:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c136:	d001      	beq.n	800c13c <_strtol_l.constprop.0+0xc>
 800c138:	2b24      	cmp	r3, #36	; 0x24
 800c13a:	d906      	bls.n	800c14a <_strtol_l.constprop.0+0x1a>
 800c13c:	f7fe faa4 	bl	800a688 <__errno>
 800c140:	2316      	movs	r3, #22
 800c142:	6003      	str	r3, [r0, #0]
 800c144:	2000      	movs	r0, #0
 800c146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c14a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c230 <_strtol_l.constprop.0+0x100>
 800c14e:	460d      	mov	r5, r1
 800c150:	462e      	mov	r6, r5
 800c152:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c156:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c15a:	f017 0708 	ands.w	r7, r7, #8
 800c15e:	d1f7      	bne.n	800c150 <_strtol_l.constprop.0+0x20>
 800c160:	2c2d      	cmp	r4, #45	; 0x2d
 800c162:	d132      	bne.n	800c1ca <_strtol_l.constprop.0+0x9a>
 800c164:	782c      	ldrb	r4, [r5, #0]
 800c166:	2701      	movs	r7, #1
 800c168:	1cb5      	adds	r5, r6, #2
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d05b      	beq.n	800c226 <_strtol_l.constprop.0+0xf6>
 800c16e:	2b10      	cmp	r3, #16
 800c170:	d109      	bne.n	800c186 <_strtol_l.constprop.0+0x56>
 800c172:	2c30      	cmp	r4, #48	; 0x30
 800c174:	d107      	bne.n	800c186 <_strtol_l.constprop.0+0x56>
 800c176:	782c      	ldrb	r4, [r5, #0]
 800c178:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c17c:	2c58      	cmp	r4, #88	; 0x58
 800c17e:	d14d      	bne.n	800c21c <_strtol_l.constprop.0+0xec>
 800c180:	786c      	ldrb	r4, [r5, #1]
 800c182:	2310      	movs	r3, #16
 800c184:	3502      	adds	r5, #2
 800c186:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c18a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c18e:	f04f 0c00 	mov.w	ip, #0
 800c192:	fbb8 f9f3 	udiv	r9, r8, r3
 800c196:	4666      	mov	r6, ip
 800c198:	fb03 8a19 	mls	sl, r3, r9, r8
 800c19c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c1a0:	f1be 0f09 	cmp.w	lr, #9
 800c1a4:	d816      	bhi.n	800c1d4 <_strtol_l.constprop.0+0xa4>
 800c1a6:	4674      	mov	r4, lr
 800c1a8:	42a3      	cmp	r3, r4
 800c1aa:	dd24      	ble.n	800c1f6 <_strtol_l.constprop.0+0xc6>
 800c1ac:	f1bc 0f00 	cmp.w	ip, #0
 800c1b0:	db1e      	blt.n	800c1f0 <_strtol_l.constprop.0+0xc0>
 800c1b2:	45b1      	cmp	r9, r6
 800c1b4:	d31c      	bcc.n	800c1f0 <_strtol_l.constprop.0+0xc0>
 800c1b6:	d101      	bne.n	800c1bc <_strtol_l.constprop.0+0x8c>
 800c1b8:	45a2      	cmp	sl, r4
 800c1ba:	db19      	blt.n	800c1f0 <_strtol_l.constprop.0+0xc0>
 800c1bc:	fb06 4603 	mla	r6, r6, r3, r4
 800c1c0:	f04f 0c01 	mov.w	ip, #1
 800c1c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1c8:	e7e8      	b.n	800c19c <_strtol_l.constprop.0+0x6c>
 800c1ca:	2c2b      	cmp	r4, #43	; 0x2b
 800c1cc:	bf04      	itt	eq
 800c1ce:	782c      	ldrbeq	r4, [r5, #0]
 800c1d0:	1cb5      	addeq	r5, r6, #2
 800c1d2:	e7ca      	b.n	800c16a <_strtol_l.constprop.0+0x3a>
 800c1d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c1d8:	f1be 0f19 	cmp.w	lr, #25
 800c1dc:	d801      	bhi.n	800c1e2 <_strtol_l.constprop.0+0xb2>
 800c1de:	3c37      	subs	r4, #55	; 0x37
 800c1e0:	e7e2      	b.n	800c1a8 <_strtol_l.constprop.0+0x78>
 800c1e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c1e6:	f1be 0f19 	cmp.w	lr, #25
 800c1ea:	d804      	bhi.n	800c1f6 <_strtol_l.constprop.0+0xc6>
 800c1ec:	3c57      	subs	r4, #87	; 0x57
 800c1ee:	e7db      	b.n	800c1a8 <_strtol_l.constprop.0+0x78>
 800c1f0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c1f4:	e7e6      	b.n	800c1c4 <_strtol_l.constprop.0+0x94>
 800c1f6:	f1bc 0f00 	cmp.w	ip, #0
 800c1fa:	da05      	bge.n	800c208 <_strtol_l.constprop.0+0xd8>
 800c1fc:	2322      	movs	r3, #34	; 0x22
 800c1fe:	6003      	str	r3, [r0, #0]
 800c200:	4646      	mov	r6, r8
 800c202:	b942      	cbnz	r2, 800c216 <_strtol_l.constprop.0+0xe6>
 800c204:	4630      	mov	r0, r6
 800c206:	e79e      	b.n	800c146 <_strtol_l.constprop.0+0x16>
 800c208:	b107      	cbz	r7, 800c20c <_strtol_l.constprop.0+0xdc>
 800c20a:	4276      	negs	r6, r6
 800c20c:	2a00      	cmp	r2, #0
 800c20e:	d0f9      	beq.n	800c204 <_strtol_l.constprop.0+0xd4>
 800c210:	f1bc 0f00 	cmp.w	ip, #0
 800c214:	d000      	beq.n	800c218 <_strtol_l.constprop.0+0xe8>
 800c216:	1e69      	subs	r1, r5, #1
 800c218:	6011      	str	r1, [r2, #0]
 800c21a:	e7f3      	b.n	800c204 <_strtol_l.constprop.0+0xd4>
 800c21c:	2430      	movs	r4, #48	; 0x30
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1b1      	bne.n	800c186 <_strtol_l.constprop.0+0x56>
 800c222:	2308      	movs	r3, #8
 800c224:	e7af      	b.n	800c186 <_strtol_l.constprop.0+0x56>
 800c226:	2c30      	cmp	r4, #48	; 0x30
 800c228:	d0a5      	beq.n	800c176 <_strtol_l.constprop.0+0x46>
 800c22a:	230a      	movs	r3, #10
 800c22c:	e7ab      	b.n	800c186 <_strtol_l.constprop.0+0x56>
 800c22e:	bf00      	nop
 800c230:	0800f451 	.word	0x0800f451

0800c234 <_strtol_r>:
 800c234:	f7ff bf7c 	b.w	800c130 <_strtol_l.constprop.0>

0800c238 <quorem>:
 800c238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c23c:	6903      	ldr	r3, [r0, #16]
 800c23e:	690c      	ldr	r4, [r1, #16]
 800c240:	42a3      	cmp	r3, r4
 800c242:	4607      	mov	r7, r0
 800c244:	f2c0 8081 	blt.w	800c34a <quorem+0x112>
 800c248:	3c01      	subs	r4, #1
 800c24a:	f101 0814 	add.w	r8, r1, #20
 800c24e:	f100 0514 	add.w	r5, r0, #20
 800c252:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c256:	9301      	str	r3, [sp, #4]
 800c258:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c25c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c260:	3301      	adds	r3, #1
 800c262:	429a      	cmp	r2, r3
 800c264:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c268:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c26c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c270:	d331      	bcc.n	800c2d6 <quorem+0x9e>
 800c272:	f04f 0e00 	mov.w	lr, #0
 800c276:	4640      	mov	r0, r8
 800c278:	46ac      	mov	ip, r5
 800c27a:	46f2      	mov	sl, lr
 800c27c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c280:	b293      	uxth	r3, r2
 800c282:	fb06 e303 	mla	r3, r6, r3, lr
 800c286:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	ebaa 0303 	sub.w	r3, sl, r3
 800c290:	f8dc a000 	ldr.w	sl, [ip]
 800c294:	0c12      	lsrs	r2, r2, #16
 800c296:	fa13 f38a 	uxtah	r3, r3, sl
 800c29a:	fb06 e202 	mla	r2, r6, r2, lr
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	9b00      	ldr	r3, [sp, #0]
 800c2a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c2a6:	b292      	uxth	r2, r2
 800c2a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c2ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2b0:	f8bd 3000 	ldrh.w	r3, [sp]
 800c2b4:	4581      	cmp	r9, r0
 800c2b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2ba:	f84c 3b04 	str.w	r3, [ip], #4
 800c2be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c2c2:	d2db      	bcs.n	800c27c <quorem+0x44>
 800c2c4:	f855 300b 	ldr.w	r3, [r5, fp]
 800c2c8:	b92b      	cbnz	r3, 800c2d6 <quorem+0x9e>
 800c2ca:	9b01      	ldr	r3, [sp, #4]
 800c2cc:	3b04      	subs	r3, #4
 800c2ce:	429d      	cmp	r5, r3
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	d32e      	bcc.n	800c332 <quorem+0xfa>
 800c2d4:	613c      	str	r4, [r7, #16]
 800c2d6:	4638      	mov	r0, r7
 800c2d8:	f001 fc82 	bl	800dbe0 <__mcmp>
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	db24      	blt.n	800c32a <quorem+0xf2>
 800c2e0:	3601      	adds	r6, #1
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	f04f 0c00 	mov.w	ip, #0
 800c2e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800c2ec:	f8d0 e000 	ldr.w	lr, [r0]
 800c2f0:	b293      	uxth	r3, r2
 800c2f2:	ebac 0303 	sub.w	r3, ip, r3
 800c2f6:	0c12      	lsrs	r2, r2, #16
 800c2f8:	fa13 f38e 	uxtah	r3, r3, lr
 800c2fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c300:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c304:	b29b      	uxth	r3, r3
 800c306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c30a:	45c1      	cmp	r9, r8
 800c30c:	f840 3b04 	str.w	r3, [r0], #4
 800c310:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c314:	d2e8      	bcs.n	800c2e8 <quorem+0xb0>
 800c316:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c31a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c31e:	b922      	cbnz	r2, 800c32a <quorem+0xf2>
 800c320:	3b04      	subs	r3, #4
 800c322:	429d      	cmp	r5, r3
 800c324:	461a      	mov	r2, r3
 800c326:	d30a      	bcc.n	800c33e <quorem+0x106>
 800c328:	613c      	str	r4, [r7, #16]
 800c32a:	4630      	mov	r0, r6
 800c32c:	b003      	add	sp, #12
 800c32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c332:	6812      	ldr	r2, [r2, #0]
 800c334:	3b04      	subs	r3, #4
 800c336:	2a00      	cmp	r2, #0
 800c338:	d1cc      	bne.n	800c2d4 <quorem+0x9c>
 800c33a:	3c01      	subs	r4, #1
 800c33c:	e7c7      	b.n	800c2ce <quorem+0x96>
 800c33e:	6812      	ldr	r2, [r2, #0]
 800c340:	3b04      	subs	r3, #4
 800c342:	2a00      	cmp	r2, #0
 800c344:	d1f0      	bne.n	800c328 <quorem+0xf0>
 800c346:	3c01      	subs	r4, #1
 800c348:	e7eb      	b.n	800c322 <quorem+0xea>
 800c34a:	2000      	movs	r0, #0
 800c34c:	e7ee      	b.n	800c32c <quorem+0xf4>
	...

0800c350 <_dtoa_r>:
 800c350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c354:	ed2d 8b04 	vpush	{d8-d9}
 800c358:	ec57 6b10 	vmov	r6, r7, d0
 800c35c:	b093      	sub	sp, #76	; 0x4c
 800c35e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c360:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c364:	9106      	str	r1, [sp, #24]
 800c366:	ee10 aa10 	vmov	sl, s0
 800c36a:	4604      	mov	r4, r0
 800c36c:	9209      	str	r2, [sp, #36]	; 0x24
 800c36e:	930c      	str	r3, [sp, #48]	; 0x30
 800c370:	46bb      	mov	fp, r7
 800c372:	b975      	cbnz	r5, 800c392 <_dtoa_r+0x42>
 800c374:	2010      	movs	r0, #16
 800c376:	f001 f94d 	bl	800d614 <malloc>
 800c37a:	4602      	mov	r2, r0
 800c37c:	6260      	str	r0, [r4, #36]	; 0x24
 800c37e:	b920      	cbnz	r0, 800c38a <_dtoa_r+0x3a>
 800c380:	4ba7      	ldr	r3, [pc, #668]	; (800c620 <_dtoa_r+0x2d0>)
 800c382:	21ea      	movs	r1, #234	; 0xea
 800c384:	48a7      	ldr	r0, [pc, #668]	; (800c624 <_dtoa_r+0x2d4>)
 800c386:	f002 f8dd 	bl	800e544 <__assert_func>
 800c38a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c38e:	6005      	str	r5, [r0, #0]
 800c390:	60c5      	str	r5, [r0, #12]
 800c392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c394:	6819      	ldr	r1, [r3, #0]
 800c396:	b151      	cbz	r1, 800c3ae <_dtoa_r+0x5e>
 800c398:	685a      	ldr	r2, [r3, #4]
 800c39a:	604a      	str	r2, [r1, #4]
 800c39c:	2301      	movs	r3, #1
 800c39e:	4093      	lsls	r3, r2
 800c3a0:	608b      	str	r3, [r1, #8]
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	f001 f990 	bl	800d6c8 <_Bfree>
 800c3a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	601a      	str	r2, [r3, #0]
 800c3ae:	1e3b      	subs	r3, r7, #0
 800c3b0:	bfaa      	itet	ge
 800c3b2:	2300      	movge	r3, #0
 800c3b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c3b8:	f8c8 3000 	strge.w	r3, [r8]
 800c3bc:	4b9a      	ldr	r3, [pc, #616]	; (800c628 <_dtoa_r+0x2d8>)
 800c3be:	bfbc      	itt	lt
 800c3c0:	2201      	movlt	r2, #1
 800c3c2:	f8c8 2000 	strlt.w	r2, [r8]
 800c3c6:	ea33 030b 	bics.w	r3, r3, fp
 800c3ca:	d11b      	bne.n	800c404 <_dtoa_r+0xb4>
 800c3cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800c3d2:	6013      	str	r3, [r2, #0]
 800c3d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c3d8:	4333      	orrs	r3, r6
 800c3da:	f000 8592 	beq.w	800cf02 <_dtoa_r+0xbb2>
 800c3de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3e0:	b963      	cbnz	r3, 800c3fc <_dtoa_r+0xac>
 800c3e2:	4b92      	ldr	r3, [pc, #584]	; (800c62c <_dtoa_r+0x2dc>)
 800c3e4:	e022      	b.n	800c42c <_dtoa_r+0xdc>
 800c3e6:	4b92      	ldr	r3, [pc, #584]	; (800c630 <_dtoa_r+0x2e0>)
 800c3e8:	9301      	str	r3, [sp, #4]
 800c3ea:	3308      	adds	r3, #8
 800c3ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c3ee:	6013      	str	r3, [r2, #0]
 800c3f0:	9801      	ldr	r0, [sp, #4]
 800c3f2:	b013      	add	sp, #76	; 0x4c
 800c3f4:	ecbd 8b04 	vpop	{d8-d9}
 800c3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3fc:	4b8b      	ldr	r3, [pc, #556]	; (800c62c <_dtoa_r+0x2dc>)
 800c3fe:	9301      	str	r3, [sp, #4]
 800c400:	3303      	adds	r3, #3
 800c402:	e7f3      	b.n	800c3ec <_dtoa_r+0x9c>
 800c404:	2200      	movs	r2, #0
 800c406:	2300      	movs	r3, #0
 800c408:	4650      	mov	r0, sl
 800c40a:	4659      	mov	r1, fp
 800c40c:	f7f4 fb5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c410:	ec4b ab19 	vmov	d9, sl, fp
 800c414:	4680      	mov	r8, r0
 800c416:	b158      	cbz	r0, 800c430 <_dtoa_r+0xe0>
 800c418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c41a:	2301      	movs	r3, #1
 800c41c:	6013      	str	r3, [r2, #0]
 800c41e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c420:	2b00      	cmp	r3, #0
 800c422:	f000 856b 	beq.w	800cefc <_dtoa_r+0xbac>
 800c426:	4883      	ldr	r0, [pc, #524]	; (800c634 <_dtoa_r+0x2e4>)
 800c428:	6018      	str	r0, [r3, #0]
 800c42a:	1e43      	subs	r3, r0, #1
 800c42c:	9301      	str	r3, [sp, #4]
 800c42e:	e7df      	b.n	800c3f0 <_dtoa_r+0xa0>
 800c430:	ec4b ab10 	vmov	d0, sl, fp
 800c434:	aa10      	add	r2, sp, #64	; 0x40
 800c436:	a911      	add	r1, sp, #68	; 0x44
 800c438:	4620      	mov	r0, r4
 800c43a:	f001 fcf3 	bl	800de24 <__d2b>
 800c43e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c442:	ee08 0a10 	vmov	s16, r0
 800c446:	2d00      	cmp	r5, #0
 800c448:	f000 8084 	beq.w	800c554 <_dtoa_r+0x204>
 800c44c:	ee19 3a90 	vmov	r3, s19
 800c450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c454:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c458:	4656      	mov	r6, sl
 800c45a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c45e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c462:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c466:	4b74      	ldr	r3, [pc, #464]	; (800c638 <_dtoa_r+0x2e8>)
 800c468:	2200      	movs	r2, #0
 800c46a:	4630      	mov	r0, r6
 800c46c:	4639      	mov	r1, r7
 800c46e:	f7f3 ff0b 	bl	8000288 <__aeabi_dsub>
 800c472:	a365      	add	r3, pc, #404	; (adr r3, 800c608 <_dtoa_r+0x2b8>)
 800c474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c478:	f7f4 f8be 	bl	80005f8 <__aeabi_dmul>
 800c47c:	a364      	add	r3, pc, #400	; (adr r3, 800c610 <_dtoa_r+0x2c0>)
 800c47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c482:	f7f3 ff03 	bl	800028c <__adddf3>
 800c486:	4606      	mov	r6, r0
 800c488:	4628      	mov	r0, r5
 800c48a:	460f      	mov	r7, r1
 800c48c:	f7f4 f84a 	bl	8000524 <__aeabi_i2d>
 800c490:	a361      	add	r3, pc, #388	; (adr r3, 800c618 <_dtoa_r+0x2c8>)
 800c492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c496:	f7f4 f8af 	bl	80005f8 <__aeabi_dmul>
 800c49a:	4602      	mov	r2, r0
 800c49c:	460b      	mov	r3, r1
 800c49e:	4630      	mov	r0, r6
 800c4a0:	4639      	mov	r1, r7
 800c4a2:	f7f3 fef3 	bl	800028c <__adddf3>
 800c4a6:	4606      	mov	r6, r0
 800c4a8:	460f      	mov	r7, r1
 800c4aa:	f7f4 fb55 	bl	8000b58 <__aeabi_d2iz>
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	9000      	str	r0, [sp, #0]
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	4639      	mov	r1, r7
 800c4b8:	f7f4 fb10 	bl	8000adc <__aeabi_dcmplt>
 800c4bc:	b150      	cbz	r0, 800c4d4 <_dtoa_r+0x184>
 800c4be:	9800      	ldr	r0, [sp, #0]
 800c4c0:	f7f4 f830 	bl	8000524 <__aeabi_i2d>
 800c4c4:	4632      	mov	r2, r6
 800c4c6:	463b      	mov	r3, r7
 800c4c8:	f7f4 fafe 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4cc:	b910      	cbnz	r0, 800c4d4 <_dtoa_r+0x184>
 800c4ce:	9b00      	ldr	r3, [sp, #0]
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	9300      	str	r3, [sp, #0]
 800c4d4:	9b00      	ldr	r3, [sp, #0]
 800c4d6:	2b16      	cmp	r3, #22
 800c4d8:	d85a      	bhi.n	800c590 <_dtoa_r+0x240>
 800c4da:	9a00      	ldr	r2, [sp, #0]
 800c4dc:	4b57      	ldr	r3, [pc, #348]	; (800c63c <_dtoa_r+0x2ec>)
 800c4de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e6:	ec51 0b19 	vmov	r0, r1, d9
 800c4ea:	f7f4 faf7 	bl	8000adc <__aeabi_dcmplt>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d050      	beq.n	800c594 <_dtoa_r+0x244>
 800c4f2:	9b00      	ldr	r3, [sp, #0]
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4fe:	1b5d      	subs	r5, r3, r5
 800c500:	1e6b      	subs	r3, r5, #1
 800c502:	9305      	str	r3, [sp, #20]
 800c504:	bf45      	ittet	mi
 800c506:	f1c5 0301 	rsbmi	r3, r5, #1
 800c50a:	9304      	strmi	r3, [sp, #16]
 800c50c:	2300      	movpl	r3, #0
 800c50e:	2300      	movmi	r3, #0
 800c510:	bf4c      	ite	mi
 800c512:	9305      	strmi	r3, [sp, #20]
 800c514:	9304      	strpl	r3, [sp, #16]
 800c516:	9b00      	ldr	r3, [sp, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	db3d      	blt.n	800c598 <_dtoa_r+0x248>
 800c51c:	9b05      	ldr	r3, [sp, #20]
 800c51e:	9a00      	ldr	r2, [sp, #0]
 800c520:	920a      	str	r2, [sp, #40]	; 0x28
 800c522:	4413      	add	r3, r2
 800c524:	9305      	str	r3, [sp, #20]
 800c526:	2300      	movs	r3, #0
 800c528:	9307      	str	r3, [sp, #28]
 800c52a:	9b06      	ldr	r3, [sp, #24]
 800c52c:	2b09      	cmp	r3, #9
 800c52e:	f200 8089 	bhi.w	800c644 <_dtoa_r+0x2f4>
 800c532:	2b05      	cmp	r3, #5
 800c534:	bfc4      	itt	gt
 800c536:	3b04      	subgt	r3, #4
 800c538:	9306      	strgt	r3, [sp, #24]
 800c53a:	9b06      	ldr	r3, [sp, #24]
 800c53c:	f1a3 0302 	sub.w	r3, r3, #2
 800c540:	bfcc      	ite	gt
 800c542:	2500      	movgt	r5, #0
 800c544:	2501      	movle	r5, #1
 800c546:	2b03      	cmp	r3, #3
 800c548:	f200 8087 	bhi.w	800c65a <_dtoa_r+0x30a>
 800c54c:	e8df f003 	tbb	[pc, r3]
 800c550:	59383a2d 	.word	0x59383a2d
 800c554:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c558:	441d      	add	r5, r3
 800c55a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c55e:	2b20      	cmp	r3, #32
 800c560:	bfc1      	itttt	gt
 800c562:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c566:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c56a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c56e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c572:	bfda      	itte	le
 800c574:	f1c3 0320 	rsble	r3, r3, #32
 800c578:	fa06 f003 	lslle.w	r0, r6, r3
 800c57c:	4318      	orrgt	r0, r3
 800c57e:	f7f3 ffc1 	bl	8000504 <__aeabi_ui2d>
 800c582:	2301      	movs	r3, #1
 800c584:	4606      	mov	r6, r0
 800c586:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c58a:	3d01      	subs	r5, #1
 800c58c:	930e      	str	r3, [sp, #56]	; 0x38
 800c58e:	e76a      	b.n	800c466 <_dtoa_r+0x116>
 800c590:	2301      	movs	r3, #1
 800c592:	e7b2      	b.n	800c4fa <_dtoa_r+0x1aa>
 800c594:	900b      	str	r0, [sp, #44]	; 0x2c
 800c596:	e7b1      	b.n	800c4fc <_dtoa_r+0x1ac>
 800c598:	9b04      	ldr	r3, [sp, #16]
 800c59a:	9a00      	ldr	r2, [sp, #0]
 800c59c:	1a9b      	subs	r3, r3, r2
 800c59e:	9304      	str	r3, [sp, #16]
 800c5a0:	4253      	negs	r3, r2
 800c5a2:	9307      	str	r3, [sp, #28]
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c5a8:	e7bf      	b.n	800c52a <_dtoa_r+0x1da>
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	9308      	str	r3, [sp, #32]
 800c5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	dc55      	bgt.n	800c660 <_dtoa_r+0x310>
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	9209      	str	r2, [sp, #36]	; 0x24
 800c5be:	e00c      	b.n	800c5da <_dtoa_r+0x28a>
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e7f3      	b.n	800c5ac <_dtoa_r+0x25c>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5c8:	9308      	str	r3, [sp, #32]
 800c5ca:	9b00      	ldr	r3, [sp, #0]
 800c5cc:	4413      	add	r3, r2
 800c5ce:	9302      	str	r3, [sp, #8]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	9303      	str	r3, [sp, #12]
 800c5d6:	bfb8      	it	lt
 800c5d8:	2301      	movlt	r3, #1
 800c5da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c5dc:	2200      	movs	r2, #0
 800c5de:	6042      	str	r2, [r0, #4]
 800c5e0:	2204      	movs	r2, #4
 800c5e2:	f102 0614 	add.w	r6, r2, #20
 800c5e6:	429e      	cmp	r6, r3
 800c5e8:	6841      	ldr	r1, [r0, #4]
 800c5ea:	d93d      	bls.n	800c668 <_dtoa_r+0x318>
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	f001 f82b 	bl	800d648 <_Balloc>
 800c5f2:	9001      	str	r0, [sp, #4]
 800c5f4:	2800      	cmp	r0, #0
 800c5f6:	d13b      	bne.n	800c670 <_dtoa_r+0x320>
 800c5f8:	4b11      	ldr	r3, [pc, #68]	; (800c640 <_dtoa_r+0x2f0>)
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c600:	e6c0      	b.n	800c384 <_dtoa_r+0x34>
 800c602:	2301      	movs	r3, #1
 800c604:	e7df      	b.n	800c5c6 <_dtoa_r+0x276>
 800c606:	bf00      	nop
 800c608:	636f4361 	.word	0x636f4361
 800c60c:	3fd287a7 	.word	0x3fd287a7
 800c610:	8b60c8b3 	.word	0x8b60c8b3
 800c614:	3fc68a28 	.word	0x3fc68a28
 800c618:	509f79fb 	.word	0x509f79fb
 800c61c:	3fd34413 	.word	0x3fd34413
 800c620:	0800f55e 	.word	0x0800f55e
 800c624:	0800f575 	.word	0x0800f575
 800c628:	7ff00000 	.word	0x7ff00000
 800c62c:	0800f55a 	.word	0x0800f55a
 800c630:	0800f551 	.word	0x0800f551
 800c634:	0800f3d1 	.word	0x0800f3d1
 800c638:	3ff80000 	.word	0x3ff80000
 800c63c:	0800f6e0 	.word	0x0800f6e0
 800c640:	0800f5d0 	.word	0x0800f5d0
 800c644:	2501      	movs	r5, #1
 800c646:	2300      	movs	r3, #0
 800c648:	9306      	str	r3, [sp, #24]
 800c64a:	9508      	str	r5, [sp, #32]
 800c64c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c650:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c654:	2200      	movs	r2, #0
 800c656:	2312      	movs	r3, #18
 800c658:	e7b0      	b.n	800c5bc <_dtoa_r+0x26c>
 800c65a:	2301      	movs	r3, #1
 800c65c:	9308      	str	r3, [sp, #32]
 800c65e:	e7f5      	b.n	800c64c <_dtoa_r+0x2fc>
 800c660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c662:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c666:	e7b8      	b.n	800c5da <_dtoa_r+0x28a>
 800c668:	3101      	adds	r1, #1
 800c66a:	6041      	str	r1, [r0, #4]
 800c66c:	0052      	lsls	r2, r2, #1
 800c66e:	e7b8      	b.n	800c5e2 <_dtoa_r+0x292>
 800c670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c672:	9a01      	ldr	r2, [sp, #4]
 800c674:	601a      	str	r2, [r3, #0]
 800c676:	9b03      	ldr	r3, [sp, #12]
 800c678:	2b0e      	cmp	r3, #14
 800c67a:	f200 809d 	bhi.w	800c7b8 <_dtoa_r+0x468>
 800c67e:	2d00      	cmp	r5, #0
 800c680:	f000 809a 	beq.w	800c7b8 <_dtoa_r+0x468>
 800c684:	9b00      	ldr	r3, [sp, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	dd32      	ble.n	800c6f0 <_dtoa_r+0x3a0>
 800c68a:	4ab7      	ldr	r2, [pc, #732]	; (800c968 <_dtoa_r+0x618>)
 800c68c:	f003 030f 	and.w	r3, r3, #15
 800c690:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c694:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c698:	9b00      	ldr	r3, [sp, #0]
 800c69a:	05d8      	lsls	r0, r3, #23
 800c69c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c6a0:	d516      	bpl.n	800c6d0 <_dtoa_r+0x380>
 800c6a2:	4bb2      	ldr	r3, [pc, #712]	; (800c96c <_dtoa_r+0x61c>)
 800c6a4:	ec51 0b19 	vmov	r0, r1, d9
 800c6a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c6ac:	f7f4 f8ce 	bl	800084c <__aeabi_ddiv>
 800c6b0:	f007 070f 	and.w	r7, r7, #15
 800c6b4:	4682      	mov	sl, r0
 800c6b6:	468b      	mov	fp, r1
 800c6b8:	2503      	movs	r5, #3
 800c6ba:	4eac      	ldr	r6, [pc, #688]	; (800c96c <_dtoa_r+0x61c>)
 800c6bc:	b957      	cbnz	r7, 800c6d4 <_dtoa_r+0x384>
 800c6be:	4642      	mov	r2, r8
 800c6c0:	464b      	mov	r3, r9
 800c6c2:	4650      	mov	r0, sl
 800c6c4:	4659      	mov	r1, fp
 800c6c6:	f7f4 f8c1 	bl	800084c <__aeabi_ddiv>
 800c6ca:	4682      	mov	sl, r0
 800c6cc:	468b      	mov	fp, r1
 800c6ce:	e028      	b.n	800c722 <_dtoa_r+0x3d2>
 800c6d0:	2502      	movs	r5, #2
 800c6d2:	e7f2      	b.n	800c6ba <_dtoa_r+0x36a>
 800c6d4:	07f9      	lsls	r1, r7, #31
 800c6d6:	d508      	bpl.n	800c6ea <_dtoa_r+0x39a>
 800c6d8:	4640      	mov	r0, r8
 800c6da:	4649      	mov	r1, r9
 800c6dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c6e0:	f7f3 ff8a 	bl	80005f8 <__aeabi_dmul>
 800c6e4:	3501      	adds	r5, #1
 800c6e6:	4680      	mov	r8, r0
 800c6e8:	4689      	mov	r9, r1
 800c6ea:	107f      	asrs	r7, r7, #1
 800c6ec:	3608      	adds	r6, #8
 800c6ee:	e7e5      	b.n	800c6bc <_dtoa_r+0x36c>
 800c6f0:	f000 809b 	beq.w	800c82a <_dtoa_r+0x4da>
 800c6f4:	9b00      	ldr	r3, [sp, #0]
 800c6f6:	4f9d      	ldr	r7, [pc, #628]	; (800c96c <_dtoa_r+0x61c>)
 800c6f8:	425e      	negs	r6, r3
 800c6fa:	4b9b      	ldr	r3, [pc, #620]	; (800c968 <_dtoa_r+0x618>)
 800c6fc:	f006 020f 	and.w	r2, r6, #15
 800c700:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c708:	ec51 0b19 	vmov	r0, r1, d9
 800c70c:	f7f3 ff74 	bl	80005f8 <__aeabi_dmul>
 800c710:	1136      	asrs	r6, r6, #4
 800c712:	4682      	mov	sl, r0
 800c714:	468b      	mov	fp, r1
 800c716:	2300      	movs	r3, #0
 800c718:	2502      	movs	r5, #2
 800c71a:	2e00      	cmp	r6, #0
 800c71c:	d17a      	bne.n	800c814 <_dtoa_r+0x4c4>
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d1d3      	bne.n	800c6ca <_dtoa_r+0x37a>
 800c722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c724:	2b00      	cmp	r3, #0
 800c726:	f000 8082 	beq.w	800c82e <_dtoa_r+0x4de>
 800c72a:	4b91      	ldr	r3, [pc, #580]	; (800c970 <_dtoa_r+0x620>)
 800c72c:	2200      	movs	r2, #0
 800c72e:	4650      	mov	r0, sl
 800c730:	4659      	mov	r1, fp
 800c732:	f7f4 f9d3 	bl	8000adc <__aeabi_dcmplt>
 800c736:	2800      	cmp	r0, #0
 800c738:	d079      	beq.n	800c82e <_dtoa_r+0x4de>
 800c73a:	9b03      	ldr	r3, [sp, #12]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d076      	beq.n	800c82e <_dtoa_r+0x4de>
 800c740:	9b02      	ldr	r3, [sp, #8]
 800c742:	2b00      	cmp	r3, #0
 800c744:	dd36      	ble.n	800c7b4 <_dtoa_r+0x464>
 800c746:	9b00      	ldr	r3, [sp, #0]
 800c748:	4650      	mov	r0, sl
 800c74a:	4659      	mov	r1, fp
 800c74c:	1e5f      	subs	r7, r3, #1
 800c74e:	2200      	movs	r2, #0
 800c750:	4b88      	ldr	r3, [pc, #544]	; (800c974 <_dtoa_r+0x624>)
 800c752:	f7f3 ff51 	bl	80005f8 <__aeabi_dmul>
 800c756:	9e02      	ldr	r6, [sp, #8]
 800c758:	4682      	mov	sl, r0
 800c75a:	468b      	mov	fp, r1
 800c75c:	3501      	adds	r5, #1
 800c75e:	4628      	mov	r0, r5
 800c760:	f7f3 fee0 	bl	8000524 <__aeabi_i2d>
 800c764:	4652      	mov	r2, sl
 800c766:	465b      	mov	r3, fp
 800c768:	f7f3 ff46 	bl	80005f8 <__aeabi_dmul>
 800c76c:	4b82      	ldr	r3, [pc, #520]	; (800c978 <_dtoa_r+0x628>)
 800c76e:	2200      	movs	r2, #0
 800c770:	f7f3 fd8c 	bl	800028c <__adddf3>
 800c774:	46d0      	mov	r8, sl
 800c776:	46d9      	mov	r9, fp
 800c778:	4682      	mov	sl, r0
 800c77a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c77e:	2e00      	cmp	r6, #0
 800c780:	d158      	bne.n	800c834 <_dtoa_r+0x4e4>
 800c782:	4b7e      	ldr	r3, [pc, #504]	; (800c97c <_dtoa_r+0x62c>)
 800c784:	2200      	movs	r2, #0
 800c786:	4640      	mov	r0, r8
 800c788:	4649      	mov	r1, r9
 800c78a:	f7f3 fd7d 	bl	8000288 <__aeabi_dsub>
 800c78e:	4652      	mov	r2, sl
 800c790:	465b      	mov	r3, fp
 800c792:	4680      	mov	r8, r0
 800c794:	4689      	mov	r9, r1
 800c796:	f7f4 f9bf 	bl	8000b18 <__aeabi_dcmpgt>
 800c79a:	2800      	cmp	r0, #0
 800c79c:	f040 8295 	bne.w	800ccca <_dtoa_r+0x97a>
 800c7a0:	4652      	mov	r2, sl
 800c7a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c7a6:	4640      	mov	r0, r8
 800c7a8:	4649      	mov	r1, r9
 800c7aa:	f7f4 f997 	bl	8000adc <__aeabi_dcmplt>
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	f040 8289 	bne.w	800ccc6 <_dtoa_r+0x976>
 800c7b4:	ec5b ab19 	vmov	sl, fp, d9
 800c7b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f2c0 8148 	blt.w	800ca50 <_dtoa_r+0x700>
 800c7c0:	9a00      	ldr	r2, [sp, #0]
 800c7c2:	2a0e      	cmp	r2, #14
 800c7c4:	f300 8144 	bgt.w	800ca50 <_dtoa_r+0x700>
 800c7c8:	4b67      	ldr	r3, [pc, #412]	; (800c968 <_dtoa_r+0x618>)
 800c7ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	f280 80d5 	bge.w	800c984 <_dtoa_r+0x634>
 800c7da:	9b03      	ldr	r3, [sp, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f300 80d1 	bgt.w	800c984 <_dtoa_r+0x634>
 800c7e2:	f040 826f 	bne.w	800ccc4 <_dtoa_r+0x974>
 800c7e6:	4b65      	ldr	r3, [pc, #404]	; (800c97c <_dtoa_r+0x62c>)
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	4640      	mov	r0, r8
 800c7ec:	4649      	mov	r1, r9
 800c7ee:	f7f3 ff03 	bl	80005f8 <__aeabi_dmul>
 800c7f2:	4652      	mov	r2, sl
 800c7f4:	465b      	mov	r3, fp
 800c7f6:	f7f4 f985 	bl	8000b04 <__aeabi_dcmpge>
 800c7fa:	9e03      	ldr	r6, [sp, #12]
 800c7fc:	4637      	mov	r7, r6
 800c7fe:	2800      	cmp	r0, #0
 800c800:	f040 8245 	bne.w	800cc8e <_dtoa_r+0x93e>
 800c804:	9d01      	ldr	r5, [sp, #4]
 800c806:	2331      	movs	r3, #49	; 0x31
 800c808:	f805 3b01 	strb.w	r3, [r5], #1
 800c80c:	9b00      	ldr	r3, [sp, #0]
 800c80e:	3301      	adds	r3, #1
 800c810:	9300      	str	r3, [sp, #0]
 800c812:	e240      	b.n	800cc96 <_dtoa_r+0x946>
 800c814:	07f2      	lsls	r2, r6, #31
 800c816:	d505      	bpl.n	800c824 <_dtoa_r+0x4d4>
 800c818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c81c:	f7f3 feec 	bl	80005f8 <__aeabi_dmul>
 800c820:	3501      	adds	r5, #1
 800c822:	2301      	movs	r3, #1
 800c824:	1076      	asrs	r6, r6, #1
 800c826:	3708      	adds	r7, #8
 800c828:	e777      	b.n	800c71a <_dtoa_r+0x3ca>
 800c82a:	2502      	movs	r5, #2
 800c82c:	e779      	b.n	800c722 <_dtoa_r+0x3d2>
 800c82e:	9f00      	ldr	r7, [sp, #0]
 800c830:	9e03      	ldr	r6, [sp, #12]
 800c832:	e794      	b.n	800c75e <_dtoa_r+0x40e>
 800c834:	9901      	ldr	r1, [sp, #4]
 800c836:	4b4c      	ldr	r3, [pc, #304]	; (800c968 <_dtoa_r+0x618>)
 800c838:	4431      	add	r1, r6
 800c83a:	910d      	str	r1, [sp, #52]	; 0x34
 800c83c:	9908      	ldr	r1, [sp, #32]
 800c83e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c842:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c846:	2900      	cmp	r1, #0
 800c848:	d043      	beq.n	800c8d2 <_dtoa_r+0x582>
 800c84a:	494d      	ldr	r1, [pc, #308]	; (800c980 <_dtoa_r+0x630>)
 800c84c:	2000      	movs	r0, #0
 800c84e:	f7f3 fffd 	bl	800084c <__aeabi_ddiv>
 800c852:	4652      	mov	r2, sl
 800c854:	465b      	mov	r3, fp
 800c856:	f7f3 fd17 	bl	8000288 <__aeabi_dsub>
 800c85a:	9d01      	ldr	r5, [sp, #4]
 800c85c:	4682      	mov	sl, r0
 800c85e:	468b      	mov	fp, r1
 800c860:	4649      	mov	r1, r9
 800c862:	4640      	mov	r0, r8
 800c864:	f7f4 f978 	bl	8000b58 <__aeabi_d2iz>
 800c868:	4606      	mov	r6, r0
 800c86a:	f7f3 fe5b 	bl	8000524 <__aeabi_i2d>
 800c86e:	4602      	mov	r2, r0
 800c870:	460b      	mov	r3, r1
 800c872:	4640      	mov	r0, r8
 800c874:	4649      	mov	r1, r9
 800c876:	f7f3 fd07 	bl	8000288 <__aeabi_dsub>
 800c87a:	3630      	adds	r6, #48	; 0x30
 800c87c:	f805 6b01 	strb.w	r6, [r5], #1
 800c880:	4652      	mov	r2, sl
 800c882:	465b      	mov	r3, fp
 800c884:	4680      	mov	r8, r0
 800c886:	4689      	mov	r9, r1
 800c888:	f7f4 f928 	bl	8000adc <__aeabi_dcmplt>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d163      	bne.n	800c958 <_dtoa_r+0x608>
 800c890:	4642      	mov	r2, r8
 800c892:	464b      	mov	r3, r9
 800c894:	4936      	ldr	r1, [pc, #216]	; (800c970 <_dtoa_r+0x620>)
 800c896:	2000      	movs	r0, #0
 800c898:	f7f3 fcf6 	bl	8000288 <__aeabi_dsub>
 800c89c:	4652      	mov	r2, sl
 800c89e:	465b      	mov	r3, fp
 800c8a0:	f7f4 f91c 	bl	8000adc <__aeabi_dcmplt>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	f040 80b5 	bne.w	800ca14 <_dtoa_r+0x6c4>
 800c8aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8ac:	429d      	cmp	r5, r3
 800c8ae:	d081      	beq.n	800c7b4 <_dtoa_r+0x464>
 800c8b0:	4b30      	ldr	r3, [pc, #192]	; (800c974 <_dtoa_r+0x624>)
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	4650      	mov	r0, sl
 800c8b6:	4659      	mov	r1, fp
 800c8b8:	f7f3 fe9e 	bl	80005f8 <__aeabi_dmul>
 800c8bc:	4b2d      	ldr	r3, [pc, #180]	; (800c974 <_dtoa_r+0x624>)
 800c8be:	4682      	mov	sl, r0
 800c8c0:	468b      	mov	fp, r1
 800c8c2:	4640      	mov	r0, r8
 800c8c4:	4649      	mov	r1, r9
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f7f3 fe96 	bl	80005f8 <__aeabi_dmul>
 800c8cc:	4680      	mov	r8, r0
 800c8ce:	4689      	mov	r9, r1
 800c8d0:	e7c6      	b.n	800c860 <_dtoa_r+0x510>
 800c8d2:	4650      	mov	r0, sl
 800c8d4:	4659      	mov	r1, fp
 800c8d6:	f7f3 fe8f 	bl	80005f8 <__aeabi_dmul>
 800c8da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8dc:	9d01      	ldr	r5, [sp, #4]
 800c8de:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8e0:	4682      	mov	sl, r0
 800c8e2:	468b      	mov	fp, r1
 800c8e4:	4649      	mov	r1, r9
 800c8e6:	4640      	mov	r0, r8
 800c8e8:	f7f4 f936 	bl	8000b58 <__aeabi_d2iz>
 800c8ec:	4606      	mov	r6, r0
 800c8ee:	f7f3 fe19 	bl	8000524 <__aeabi_i2d>
 800c8f2:	3630      	adds	r6, #48	; 0x30
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	4640      	mov	r0, r8
 800c8fa:	4649      	mov	r1, r9
 800c8fc:	f7f3 fcc4 	bl	8000288 <__aeabi_dsub>
 800c900:	f805 6b01 	strb.w	r6, [r5], #1
 800c904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c906:	429d      	cmp	r5, r3
 800c908:	4680      	mov	r8, r0
 800c90a:	4689      	mov	r9, r1
 800c90c:	f04f 0200 	mov.w	r2, #0
 800c910:	d124      	bne.n	800c95c <_dtoa_r+0x60c>
 800c912:	4b1b      	ldr	r3, [pc, #108]	; (800c980 <_dtoa_r+0x630>)
 800c914:	4650      	mov	r0, sl
 800c916:	4659      	mov	r1, fp
 800c918:	f7f3 fcb8 	bl	800028c <__adddf3>
 800c91c:	4602      	mov	r2, r0
 800c91e:	460b      	mov	r3, r1
 800c920:	4640      	mov	r0, r8
 800c922:	4649      	mov	r1, r9
 800c924:	f7f4 f8f8 	bl	8000b18 <__aeabi_dcmpgt>
 800c928:	2800      	cmp	r0, #0
 800c92a:	d173      	bne.n	800ca14 <_dtoa_r+0x6c4>
 800c92c:	4652      	mov	r2, sl
 800c92e:	465b      	mov	r3, fp
 800c930:	4913      	ldr	r1, [pc, #76]	; (800c980 <_dtoa_r+0x630>)
 800c932:	2000      	movs	r0, #0
 800c934:	f7f3 fca8 	bl	8000288 <__aeabi_dsub>
 800c938:	4602      	mov	r2, r0
 800c93a:	460b      	mov	r3, r1
 800c93c:	4640      	mov	r0, r8
 800c93e:	4649      	mov	r1, r9
 800c940:	f7f4 f8cc 	bl	8000adc <__aeabi_dcmplt>
 800c944:	2800      	cmp	r0, #0
 800c946:	f43f af35 	beq.w	800c7b4 <_dtoa_r+0x464>
 800c94a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c94c:	1e6b      	subs	r3, r5, #1
 800c94e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c950:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c954:	2b30      	cmp	r3, #48	; 0x30
 800c956:	d0f8      	beq.n	800c94a <_dtoa_r+0x5fa>
 800c958:	9700      	str	r7, [sp, #0]
 800c95a:	e049      	b.n	800c9f0 <_dtoa_r+0x6a0>
 800c95c:	4b05      	ldr	r3, [pc, #20]	; (800c974 <_dtoa_r+0x624>)
 800c95e:	f7f3 fe4b 	bl	80005f8 <__aeabi_dmul>
 800c962:	4680      	mov	r8, r0
 800c964:	4689      	mov	r9, r1
 800c966:	e7bd      	b.n	800c8e4 <_dtoa_r+0x594>
 800c968:	0800f6e0 	.word	0x0800f6e0
 800c96c:	0800f6b8 	.word	0x0800f6b8
 800c970:	3ff00000 	.word	0x3ff00000
 800c974:	40240000 	.word	0x40240000
 800c978:	401c0000 	.word	0x401c0000
 800c97c:	40140000 	.word	0x40140000
 800c980:	3fe00000 	.word	0x3fe00000
 800c984:	9d01      	ldr	r5, [sp, #4]
 800c986:	4656      	mov	r6, sl
 800c988:	465f      	mov	r7, fp
 800c98a:	4642      	mov	r2, r8
 800c98c:	464b      	mov	r3, r9
 800c98e:	4630      	mov	r0, r6
 800c990:	4639      	mov	r1, r7
 800c992:	f7f3 ff5b 	bl	800084c <__aeabi_ddiv>
 800c996:	f7f4 f8df 	bl	8000b58 <__aeabi_d2iz>
 800c99a:	4682      	mov	sl, r0
 800c99c:	f7f3 fdc2 	bl	8000524 <__aeabi_i2d>
 800c9a0:	4642      	mov	r2, r8
 800c9a2:	464b      	mov	r3, r9
 800c9a4:	f7f3 fe28 	bl	80005f8 <__aeabi_dmul>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	4639      	mov	r1, r7
 800c9b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c9b4:	f7f3 fc68 	bl	8000288 <__aeabi_dsub>
 800c9b8:	f805 6b01 	strb.w	r6, [r5], #1
 800c9bc:	9e01      	ldr	r6, [sp, #4]
 800c9be:	9f03      	ldr	r7, [sp, #12]
 800c9c0:	1bae      	subs	r6, r5, r6
 800c9c2:	42b7      	cmp	r7, r6
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	d135      	bne.n	800ca36 <_dtoa_r+0x6e6>
 800c9ca:	f7f3 fc5f 	bl	800028c <__adddf3>
 800c9ce:	4642      	mov	r2, r8
 800c9d0:	464b      	mov	r3, r9
 800c9d2:	4606      	mov	r6, r0
 800c9d4:	460f      	mov	r7, r1
 800c9d6:	f7f4 f89f 	bl	8000b18 <__aeabi_dcmpgt>
 800c9da:	b9d0      	cbnz	r0, 800ca12 <_dtoa_r+0x6c2>
 800c9dc:	4642      	mov	r2, r8
 800c9de:	464b      	mov	r3, r9
 800c9e0:	4630      	mov	r0, r6
 800c9e2:	4639      	mov	r1, r7
 800c9e4:	f7f4 f870 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9e8:	b110      	cbz	r0, 800c9f0 <_dtoa_r+0x6a0>
 800c9ea:	f01a 0f01 	tst.w	sl, #1
 800c9ee:	d110      	bne.n	800ca12 <_dtoa_r+0x6c2>
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	ee18 1a10 	vmov	r1, s16
 800c9f6:	f000 fe67 	bl	800d6c8 <_Bfree>
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	9800      	ldr	r0, [sp, #0]
 800c9fe:	702b      	strb	r3, [r5, #0]
 800ca00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca02:	3001      	adds	r0, #1
 800ca04:	6018      	str	r0, [r3, #0]
 800ca06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f43f acf1 	beq.w	800c3f0 <_dtoa_r+0xa0>
 800ca0e:	601d      	str	r5, [r3, #0]
 800ca10:	e4ee      	b.n	800c3f0 <_dtoa_r+0xa0>
 800ca12:	9f00      	ldr	r7, [sp, #0]
 800ca14:	462b      	mov	r3, r5
 800ca16:	461d      	mov	r5, r3
 800ca18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca1c:	2a39      	cmp	r2, #57	; 0x39
 800ca1e:	d106      	bne.n	800ca2e <_dtoa_r+0x6de>
 800ca20:	9a01      	ldr	r2, [sp, #4]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d1f7      	bne.n	800ca16 <_dtoa_r+0x6c6>
 800ca26:	9901      	ldr	r1, [sp, #4]
 800ca28:	2230      	movs	r2, #48	; 0x30
 800ca2a:	3701      	adds	r7, #1
 800ca2c:	700a      	strb	r2, [r1, #0]
 800ca2e:	781a      	ldrb	r2, [r3, #0]
 800ca30:	3201      	adds	r2, #1
 800ca32:	701a      	strb	r2, [r3, #0]
 800ca34:	e790      	b.n	800c958 <_dtoa_r+0x608>
 800ca36:	4ba6      	ldr	r3, [pc, #664]	; (800ccd0 <_dtoa_r+0x980>)
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f7f3 fddd 	bl	80005f8 <__aeabi_dmul>
 800ca3e:	2200      	movs	r2, #0
 800ca40:	2300      	movs	r3, #0
 800ca42:	4606      	mov	r6, r0
 800ca44:	460f      	mov	r7, r1
 800ca46:	f7f4 f83f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	d09d      	beq.n	800c98a <_dtoa_r+0x63a>
 800ca4e:	e7cf      	b.n	800c9f0 <_dtoa_r+0x6a0>
 800ca50:	9a08      	ldr	r2, [sp, #32]
 800ca52:	2a00      	cmp	r2, #0
 800ca54:	f000 80d7 	beq.w	800cc06 <_dtoa_r+0x8b6>
 800ca58:	9a06      	ldr	r2, [sp, #24]
 800ca5a:	2a01      	cmp	r2, #1
 800ca5c:	f300 80ba 	bgt.w	800cbd4 <_dtoa_r+0x884>
 800ca60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca62:	2a00      	cmp	r2, #0
 800ca64:	f000 80b2 	beq.w	800cbcc <_dtoa_r+0x87c>
 800ca68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ca6c:	9e07      	ldr	r6, [sp, #28]
 800ca6e:	9d04      	ldr	r5, [sp, #16]
 800ca70:	9a04      	ldr	r2, [sp, #16]
 800ca72:	441a      	add	r2, r3
 800ca74:	9204      	str	r2, [sp, #16]
 800ca76:	9a05      	ldr	r2, [sp, #20]
 800ca78:	2101      	movs	r1, #1
 800ca7a:	441a      	add	r2, r3
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	9205      	str	r2, [sp, #20]
 800ca80:	f000 ff24 	bl	800d8cc <__i2b>
 800ca84:	4607      	mov	r7, r0
 800ca86:	2d00      	cmp	r5, #0
 800ca88:	dd0c      	ble.n	800caa4 <_dtoa_r+0x754>
 800ca8a:	9b05      	ldr	r3, [sp, #20]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	dd09      	ble.n	800caa4 <_dtoa_r+0x754>
 800ca90:	42ab      	cmp	r3, r5
 800ca92:	9a04      	ldr	r2, [sp, #16]
 800ca94:	bfa8      	it	ge
 800ca96:	462b      	movge	r3, r5
 800ca98:	1ad2      	subs	r2, r2, r3
 800ca9a:	9204      	str	r2, [sp, #16]
 800ca9c:	9a05      	ldr	r2, [sp, #20]
 800ca9e:	1aed      	subs	r5, r5, r3
 800caa0:	1ad3      	subs	r3, r2, r3
 800caa2:	9305      	str	r3, [sp, #20]
 800caa4:	9b07      	ldr	r3, [sp, #28]
 800caa6:	b31b      	cbz	r3, 800caf0 <_dtoa_r+0x7a0>
 800caa8:	9b08      	ldr	r3, [sp, #32]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	f000 80af 	beq.w	800cc0e <_dtoa_r+0x8be>
 800cab0:	2e00      	cmp	r6, #0
 800cab2:	dd13      	ble.n	800cadc <_dtoa_r+0x78c>
 800cab4:	4639      	mov	r1, r7
 800cab6:	4632      	mov	r2, r6
 800cab8:	4620      	mov	r0, r4
 800caba:	f000 ffc7 	bl	800da4c <__pow5mult>
 800cabe:	ee18 2a10 	vmov	r2, s16
 800cac2:	4601      	mov	r1, r0
 800cac4:	4607      	mov	r7, r0
 800cac6:	4620      	mov	r0, r4
 800cac8:	f000 ff16 	bl	800d8f8 <__multiply>
 800cacc:	ee18 1a10 	vmov	r1, s16
 800cad0:	4680      	mov	r8, r0
 800cad2:	4620      	mov	r0, r4
 800cad4:	f000 fdf8 	bl	800d6c8 <_Bfree>
 800cad8:	ee08 8a10 	vmov	s16, r8
 800cadc:	9b07      	ldr	r3, [sp, #28]
 800cade:	1b9a      	subs	r2, r3, r6
 800cae0:	d006      	beq.n	800caf0 <_dtoa_r+0x7a0>
 800cae2:	ee18 1a10 	vmov	r1, s16
 800cae6:	4620      	mov	r0, r4
 800cae8:	f000 ffb0 	bl	800da4c <__pow5mult>
 800caec:	ee08 0a10 	vmov	s16, r0
 800caf0:	2101      	movs	r1, #1
 800caf2:	4620      	mov	r0, r4
 800caf4:	f000 feea 	bl	800d8cc <__i2b>
 800caf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	4606      	mov	r6, r0
 800cafe:	f340 8088 	ble.w	800cc12 <_dtoa_r+0x8c2>
 800cb02:	461a      	mov	r2, r3
 800cb04:	4601      	mov	r1, r0
 800cb06:	4620      	mov	r0, r4
 800cb08:	f000 ffa0 	bl	800da4c <__pow5mult>
 800cb0c:	9b06      	ldr	r3, [sp, #24]
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	4606      	mov	r6, r0
 800cb12:	f340 8081 	ble.w	800cc18 <_dtoa_r+0x8c8>
 800cb16:	f04f 0800 	mov.w	r8, #0
 800cb1a:	6933      	ldr	r3, [r6, #16]
 800cb1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cb20:	6918      	ldr	r0, [r3, #16]
 800cb22:	f000 fe83 	bl	800d82c <__hi0bits>
 800cb26:	f1c0 0020 	rsb	r0, r0, #32
 800cb2a:	9b05      	ldr	r3, [sp, #20]
 800cb2c:	4418      	add	r0, r3
 800cb2e:	f010 001f 	ands.w	r0, r0, #31
 800cb32:	f000 8092 	beq.w	800cc5a <_dtoa_r+0x90a>
 800cb36:	f1c0 0320 	rsb	r3, r0, #32
 800cb3a:	2b04      	cmp	r3, #4
 800cb3c:	f340 808a 	ble.w	800cc54 <_dtoa_r+0x904>
 800cb40:	f1c0 001c 	rsb	r0, r0, #28
 800cb44:	9b04      	ldr	r3, [sp, #16]
 800cb46:	4403      	add	r3, r0
 800cb48:	9304      	str	r3, [sp, #16]
 800cb4a:	9b05      	ldr	r3, [sp, #20]
 800cb4c:	4403      	add	r3, r0
 800cb4e:	4405      	add	r5, r0
 800cb50:	9305      	str	r3, [sp, #20]
 800cb52:	9b04      	ldr	r3, [sp, #16]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	dd07      	ble.n	800cb68 <_dtoa_r+0x818>
 800cb58:	ee18 1a10 	vmov	r1, s16
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f000 ffce 	bl	800db00 <__lshift>
 800cb64:	ee08 0a10 	vmov	s16, r0
 800cb68:	9b05      	ldr	r3, [sp, #20]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	dd05      	ble.n	800cb7a <_dtoa_r+0x82a>
 800cb6e:	4631      	mov	r1, r6
 800cb70:	461a      	mov	r2, r3
 800cb72:	4620      	mov	r0, r4
 800cb74:	f000 ffc4 	bl	800db00 <__lshift>
 800cb78:	4606      	mov	r6, r0
 800cb7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d06e      	beq.n	800cc5e <_dtoa_r+0x90e>
 800cb80:	ee18 0a10 	vmov	r0, s16
 800cb84:	4631      	mov	r1, r6
 800cb86:	f001 f82b 	bl	800dbe0 <__mcmp>
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	da67      	bge.n	800cc5e <_dtoa_r+0x90e>
 800cb8e:	9b00      	ldr	r3, [sp, #0]
 800cb90:	3b01      	subs	r3, #1
 800cb92:	ee18 1a10 	vmov	r1, s16
 800cb96:	9300      	str	r3, [sp, #0]
 800cb98:	220a      	movs	r2, #10
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	f000 fdb5 	bl	800d70c <__multadd>
 800cba2:	9b08      	ldr	r3, [sp, #32]
 800cba4:	ee08 0a10 	vmov	s16, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	f000 81b1 	beq.w	800cf10 <_dtoa_r+0xbc0>
 800cbae:	2300      	movs	r3, #0
 800cbb0:	4639      	mov	r1, r7
 800cbb2:	220a      	movs	r2, #10
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f000 fda9 	bl	800d70c <__multadd>
 800cbba:	9b02      	ldr	r3, [sp, #8]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	4607      	mov	r7, r0
 800cbc0:	f300 808e 	bgt.w	800cce0 <_dtoa_r+0x990>
 800cbc4:	9b06      	ldr	r3, [sp, #24]
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	dc51      	bgt.n	800cc6e <_dtoa_r+0x91e>
 800cbca:	e089      	b.n	800cce0 <_dtoa_r+0x990>
 800cbcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cbce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cbd2:	e74b      	b.n	800ca6c <_dtoa_r+0x71c>
 800cbd4:	9b03      	ldr	r3, [sp, #12]
 800cbd6:	1e5e      	subs	r6, r3, #1
 800cbd8:	9b07      	ldr	r3, [sp, #28]
 800cbda:	42b3      	cmp	r3, r6
 800cbdc:	bfbf      	itttt	lt
 800cbde:	9b07      	ldrlt	r3, [sp, #28]
 800cbe0:	9607      	strlt	r6, [sp, #28]
 800cbe2:	1af2      	sublt	r2, r6, r3
 800cbe4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cbe6:	bfb6      	itet	lt
 800cbe8:	189b      	addlt	r3, r3, r2
 800cbea:	1b9e      	subge	r6, r3, r6
 800cbec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cbee:	9b03      	ldr	r3, [sp, #12]
 800cbf0:	bfb8      	it	lt
 800cbf2:	2600      	movlt	r6, #0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	bfb7      	itett	lt
 800cbf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cbfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cc00:	1a9d      	sublt	r5, r3, r2
 800cc02:	2300      	movlt	r3, #0
 800cc04:	e734      	b.n	800ca70 <_dtoa_r+0x720>
 800cc06:	9e07      	ldr	r6, [sp, #28]
 800cc08:	9d04      	ldr	r5, [sp, #16]
 800cc0a:	9f08      	ldr	r7, [sp, #32]
 800cc0c:	e73b      	b.n	800ca86 <_dtoa_r+0x736>
 800cc0e:	9a07      	ldr	r2, [sp, #28]
 800cc10:	e767      	b.n	800cae2 <_dtoa_r+0x792>
 800cc12:	9b06      	ldr	r3, [sp, #24]
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	dc18      	bgt.n	800cc4a <_dtoa_r+0x8fa>
 800cc18:	f1ba 0f00 	cmp.w	sl, #0
 800cc1c:	d115      	bne.n	800cc4a <_dtoa_r+0x8fa>
 800cc1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc22:	b993      	cbnz	r3, 800cc4a <_dtoa_r+0x8fa>
 800cc24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cc28:	0d1b      	lsrs	r3, r3, #20
 800cc2a:	051b      	lsls	r3, r3, #20
 800cc2c:	b183      	cbz	r3, 800cc50 <_dtoa_r+0x900>
 800cc2e:	9b04      	ldr	r3, [sp, #16]
 800cc30:	3301      	adds	r3, #1
 800cc32:	9304      	str	r3, [sp, #16]
 800cc34:	9b05      	ldr	r3, [sp, #20]
 800cc36:	3301      	adds	r3, #1
 800cc38:	9305      	str	r3, [sp, #20]
 800cc3a:	f04f 0801 	mov.w	r8, #1
 800cc3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	f47f af6a 	bne.w	800cb1a <_dtoa_r+0x7ca>
 800cc46:	2001      	movs	r0, #1
 800cc48:	e76f      	b.n	800cb2a <_dtoa_r+0x7da>
 800cc4a:	f04f 0800 	mov.w	r8, #0
 800cc4e:	e7f6      	b.n	800cc3e <_dtoa_r+0x8ee>
 800cc50:	4698      	mov	r8, r3
 800cc52:	e7f4      	b.n	800cc3e <_dtoa_r+0x8ee>
 800cc54:	f43f af7d 	beq.w	800cb52 <_dtoa_r+0x802>
 800cc58:	4618      	mov	r0, r3
 800cc5a:	301c      	adds	r0, #28
 800cc5c:	e772      	b.n	800cb44 <_dtoa_r+0x7f4>
 800cc5e:	9b03      	ldr	r3, [sp, #12]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	dc37      	bgt.n	800ccd4 <_dtoa_r+0x984>
 800cc64:	9b06      	ldr	r3, [sp, #24]
 800cc66:	2b02      	cmp	r3, #2
 800cc68:	dd34      	ble.n	800ccd4 <_dtoa_r+0x984>
 800cc6a:	9b03      	ldr	r3, [sp, #12]
 800cc6c:	9302      	str	r3, [sp, #8]
 800cc6e:	9b02      	ldr	r3, [sp, #8]
 800cc70:	b96b      	cbnz	r3, 800cc8e <_dtoa_r+0x93e>
 800cc72:	4631      	mov	r1, r6
 800cc74:	2205      	movs	r2, #5
 800cc76:	4620      	mov	r0, r4
 800cc78:	f000 fd48 	bl	800d70c <__multadd>
 800cc7c:	4601      	mov	r1, r0
 800cc7e:	4606      	mov	r6, r0
 800cc80:	ee18 0a10 	vmov	r0, s16
 800cc84:	f000 ffac 	bl	800dbe0 <__mcmp>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	f73f adbb 	bgt.w	800c804 <_dtoa_r+0x4b4>
 800cc8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc90:	9d01      	ldr	r5, [sp, #4]
 800cc92:	43db      	mvns	r3, r3
 800cc94:	9300      	str	r3, [sp, #0]
 800cc96:	f04f 0800 	mov.w	r8, #0
 800cc9a:	4631      	mov	r1, r6
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	f000 fd13 	bl	800d6c8 <_Bfree>
 800cca2:	2f00      	cmp	r7, #0
 800cca4:	f43f aea4 	beq.w	800c9f0 <_dtoa_r+0x6a0>
 800cca8:	f1b8 0f00 	cmp.w	r8, #0
 800ccac:	d005      	beq.n	800ccba <_dtoa_r+0x96a>
 800ccae:	45b8      	cmp	r8, r7
 800ccb0:	d003      	beq.n	800ccba <_dtoa_r+0x96a>
 800ccb2:	4641      	mov	r1, r8
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f000 fd07 	bl	800d6c8 <_Bfree>
 800ccba:	4639      	mov	r1, r7
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	f000 fd03 	bl	800d6c8 <_Bfree>
 800ccc2:	e695      	b.n	800c9f0 <_dtoa_r+0x6a0>
 800ccc4:	2600      	movs	r6, #0
 800ccc6:	4637      	mov	r7, r6
 800ccc8:	e7e1      	b.n	800cc8e <_dtoa_r+0x93e>
 800ccca:	9700      	str	r7, [sp, #0]
 800cccc:	4637      	mov	r7, r6
 800ccce:	e599      	b.n	800c804 <_dtoa_r+0x4b4>
 800ccd0:	40240000 	.word	0x40240000
 800ccd4:	9b08      	ldr	r3, [sp, #32]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f000 80ca 	beq.w	800ce70 <_dtoa_r+0xb20>
 800ccdc:	9b03      	ldr	r3, [sp, #12]
 800ccde:	9302      	str	r3, [sp, #8]
 800cce0:	2d00      	cmp	r5, #0
 800cce2:	dd05      	ble.n	800ccf0 <_dtoa_r+0x9a0>
 800cce4:	4639      	mov	r1, r7
 800cce6:	462a      	mov	r2, r5
 800cce8:	4620      	mov	r0, r4
 800ccea:	f000 ff09 	bl	800db00 <__lshift>
 800ccee:	4607      	mov	r7, r0
 800ccf0:	f1b8 0f00 	cmp.w	r8, #0
 800ccf4:	d05b      	beq.n	800cdae <_dtoa_r+0xa5e>
 800ccf6:	6879      	ldr	r1, [r7, #4]
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f000 fca5 	bl	800d648 <_Balloc>
 800ccfe:	4605      	mov	r5, r0
 800cd00:	b928      	cbnz	r0, 800cd0e <_dtoa_r+0x9be>
 800cd02:	4b87      	ldr	r3, [pc, #540]	; (800cf20 <_dtoa_r+0xbd0>)
 800cd04:	4602      	mov	r2, r0
 800cd06:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cd0a:	f7ff bb3b 	b.w	800c384 <_dtoa_r+0x34>
 800cd0e:	693a      	ldr	r2, [r7, #16]
 800cd10:	3202      	adds	r2, #2
 800cd12:	0092      	lsls	r2, r2, #2
 800cd14:	f107 010c 	add.w	r1, r7, #12
 800cd18:	300c      	adds	r0, #12
 800cd1a:	f7fd fcdf 	bl	800a6dc <memcpy>
 800cd1e:	2201      	movs	r2, #1
 800cd20:	4629      	mov	r1, r5
 800cd22:	4620      	mov	r0, r4
 800cd24:	f000 feec 	bl	800db00 <__lshift>
 800cd28:	9b01      	ldr	r3, [sp, #4]
 800cd2a:	f103 0901 	add.w	r9, r3, #1
 800cd2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cd32:	4413      	add	r3, r2
 800cd34:	9305      	str	r3, [sp, #20]
 800cd36:	f00a 0301 	and.w	r3, sl, #1
 800cd3a:	46b8      	mov	r8, r7
 800cd3c:	9304      	str	r3, [sp, #16]
 800cd3e:	4607      	mov	r7, r0
 800cd40:	4631      	mov	r1, r6
 800cd42:	ee18 0a10 	vmov	r0, s16
 800cd46:	f7ff fa77 	bl	800c238 <quorem>
 800cd4a:	4641      	mov	r1, r8
 800cd4c:	9002      	str	r0, [sp, #8]
 800cd4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cd52:	ee18 0a10 	vmov	r0, s16
 800cd56:	f000 ff43 	bl	800dbe0 <__mcmp>
 800cd5a:	463a      	mov	r2, r7
 800cd5c:	9003      	str	r0, [sp, #12]
 800cd5e:	4631      	mov	r1, r6
 800cd60:	4620      	mov	r0, r4
 800cd62:	f000 ff59 	bl	800dc18 <__mdiff>
 800cd66:	68c2      	ldr	r2, [r0, #12]
 800cd68:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800cd6c:	4605      	mov	r5, r0
 800cd6e:	bb02      	cbnz	r2, 800cdb2 <_dtoa_r+0xa62>
 800cd70:	4601      	mov	r1, r0
 800cd72:	ee18 0a10 	vmov	r0, s16
 800cd76:	f000 ff33 	bl	800dbe0 <__mcmp>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	4620      	mov	r0, r4
 800cd80:	9207      	str	r2, [sp, #28]
 800cd82:	f000 fca1 	bl	800d6c8 <_Bfree>
 800cd86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cd8a:	ea43 0102 	orr.w	r1, r3, r2
 800cd8e:	9b04      	ldr	r3, [sp, #16]
 800cd90:	430b      	orrs	r3, r1
 800cd92:	464d      	mov	r5, r9
 800cd94:	d10f      	bne.n	800cdb6 <_dtoa_r+0xa66>
 800cd96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cd9a:	d02a      	beq.n	800cdf2 <_dtoa_r+0xaa2>
 800cd9c:	9b03      	ldr	r3, [sp, #12]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	dd02      	ble.n	800cda8 <_dtoa_r+0xa58>
 800cda2:	9b02      	ldr	r3, [sp, #8]
 800cda4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cda8:	f88b a000 	strb.w	sl, [fp]
 800cdac:	e775      	b.n	800cc9a <_dtoa_r+0x94a>
 800cdae:	4638      	mov	r0, r7
 800cdb0:	e7ba      	b.n	800cd28 <_dtoa_r+0x9d8>
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	e7e2      	b.n	800cd7c <_dtoa_r+0xa2c>
 800cdb6:	9b03      	ldr	r3, [sp, #12]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	db04      	blt.n	800cdc6 <_dtoa_r+0xa76>
 800cdbc:	9906      	ldr	r1, [sp, #24]
 800cdbe:	430b      	orrs	r3, r1
 800cdc0:	9904      	ldr	r1, [sp, #16]
 800cdc2:	430b      	orrs	r3, r1
 800cdc4:	d122      	bne.n	800ce0c <_dtoa_r+0xabc>
 800cdc6:	2a00      	cmp	r2, #0
 800cdc8:	ddee      	ble.n	800cda8 <_dtoa_r+0xa58>
 800cdca:	ee18 1a10 	vmov	r1, s16
 800cdce:	2201      	movs	r2, #1
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	f000 fe95 	bl	800db00 <__lshift>
 800cdd6:	4631      	mov	r1, r6
 800cdd8:	ee08 0a10 	vmov	s16, r0
 800cddc:	f000 ff00 	bl	800dbe0 <__mcmp>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	dc03      	bgt.n	800cdec <_dtoa_r+0xa9c>
 800cde4:	d1e0      	bne.n	800cda8 <_dtoa_r+0xa58>
 800cde6:	f01a 0f01 	tst.w	sl, #1
 800cdea:	d0dd      	beq.n	800cda8 <_dtoa_r+0xa58>
 800cdec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cdf0:	d1d7      	bne.n	800cda2 <_dtoa_r+0xa52>
 800cdf2:	2339      	movs	r3, #57	; 0x39
 800cdf4:	f88b 3000 	strb.w	r3, [fp]
 800cdf8:	462b      	mov	r3, r5
 800cdfa:	461d      	mov	r5, r3
 800cdfc:	3b01      	subs	r3, #1
 800cdfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce02:	2a39      	cmp	r2, #57	; 0x39
 800ce04:	d071      	beq.n	800ceea <_dtoa_r+0xb9a>
 800ce06:	3201      	adds	r2, #1
 800ce08:	701a      	strb	r2, [r3, #0]
 800ce0a:	e746      	b.n	800cc9a <_dtoa_r+0x94a>
 800ce0c:	2a00      	cmp	r2, #0
 800ce0e:	dd07      	ble.n	800ce20 <_dtoa_r+0xad0>
 800ce10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ce14:	d0ed      	beq.n	800cdf2 <_dtoa_r+0xaa2>
 800ce16:	f10a 0301 	add.w	r3, sl, #1
 800ce1a:	f88b 3000 	strb.w	r3, [fp]
 800ce1e:	e73c      	b.n	800cc9a <_dtoa_r+0x94a>
 800ce20:	9b05      	ldr	r3, [sp, #20]
 800ce22:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ce26:	4599      	cmp	r9, r3
 800ce28:	d047      	beq.n	800ceba <_dtoa_r+0xb6a>
 800ce2a:	ee18 1a10 	vmov	r1, s16
 800ce2e:	2300      	movs	r3, #0
 800ce30:	220a      	movs	r2, #10
 800ce32:	4620      	mov	r0, r4
 800ce34:	f000 fc6a 	bl	800d70c <__multadd>
 800ce38:	45b8      	cmp	r8, r7
 800ce3a:	ee08 0a10 	vmov	s16, r0
 800ce3e:	f04f 0300 	mov.w	r3, #0
 800ce42:	f04f 020a 	mov.w	r2, #10
 800ce46:	4641      	mov	r1, r8
 800ce48:	4620      	mov	r0, r4
 800ce4a:	d106      	bne.n	800ce5a <_dtoa_r+0xb0a>
 800ce4c:	f000 fc5e 	bl	800d70c <__multadd>
 800ce50:	4680      	mov	r8, r0
 800ce52:	4607      	mov	r7, r0
 800ce54:	f109 0901 	add.w	r9, r9, #1
 800ce58:	e772      	b.n	800cd40 <_dtoa_r+0x9f0>
 800ce5a:	f000 fc57 	bl	800d70c <__multadd>
 800ce5e:	4639      	mov	r1, r7
 800ce60:	4680      	mov	r8, r0
 800ce62:	2300      	movs	r3, #0
 800ce64:	220a      	movs	r2, #10
 800ce66:	4620      	mov	r0, r4
 800ce68:	f000 fc50 	bl	800d70c <__multadd>
 800ce6c:	4607      	mov	r7, r0
 800ce6e:	e7f1      	b.n	800ce54 <_dtoa_r+0xb04>
 800ce70:	9b03      	ldr	r3, [sp, #12]
 800ce72:	9302      	str	r3, [sp, #8]
 800ce74:	9d01      	ldr	r5, [sp, #4]
 800ce76:	ee18 0a10 	vmov	r0, s16
 800ce7a:	4631      	mov	r1, r6
 800ce7c:	f7ff f9dc 	bl	800c238 <quorem>
 800ce80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ce84:	9b01      	ldr	r3, [sp, #4]
 800ce86:	f805 ab01 	strb.w	sl, [r5], #1
 800ce8a:	1aea      	subs	r2, r5, r3
 800ce8c:	9b02      	ldr	r3, [sp, #8]
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	dd09      	ble.n	800cea6 <_dtoa_r+0xb56>
 800ce92:	ee18 1a10 	vmov	r1, s16
 800ce96:	2300      	movs	r3, #0
 800ce98:	220a      	movs	r2, #10
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f000 fc36 	bl	800d70c <__multadd>
 800cea0:	ee08 0a10 	vmov	s16, r0
 800cea4:	e7e7      	b.n	800ce76 <_dtoa_r+0xb26>
 800cea6:	9b02      	ldr	r3, [sp, #8]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	bfc8      	it	gt
 800ceac:	461d      	movgt	r5, r3
 800ceae:	9b01      	ldr	r3, [sp, #4]
 800ceb0:	bfd8      	it	le
 800ceb2:	2501      	movle	r5, #1
 800ceb4:	441d      	add	r5, r3
 800ceb6:	f04f 0800 	mov.w	r8, #0
 800ceba:	ee18 1a10 	vmov	r1, s16
 800cebe:	2201      	movs	r2, #1
 800cec0:	4620      	mov	r0, r4
 800cec2:	f000 fe1d 	bl	800db00 <__lshift>
 800cec6:	4631      	mov	r1, r6
 800cec8:	ee08 0a10 	vmov	s16, r0
 800cecc:	f000 fe88 	bl	800dbe0 <__mcmp>
 800ced0:	2800      	cmp	r0, #0
 800ced2:	dc91      	bgt.n	800cdf8 <_dtoa_r+0xaa8>
 800ced4:	d102      	bne.n	800cedc <_dtoa_r+0xb8c>
 800ced6:	f01a 0f01 	tst.w	sl, #1
 800ceda:	d18d      	bne.n	800cdf8 <_dtoa_r+0xaa8>
 800cedc:	462b      	mov	r3, r5
 800cede:	461d      	mov	r5, r3
 800cee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cee4:	2a30      	cmp	r2, #48	; 0x30
 800cee6:	d0fa      	beq.n	800cede <_dtoa_r+0xb8e>
 800cee8:	e6d7      	b.n	800cc9a <_dtoa_r+0x94a>
 800ceea:	9a01      	ldr	r2, [sp, #4]
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d184      	bne.n	800cdfa <_dtoa_r+0xaaa>
 800cef0:	9b00      	ldr	r3, [sp, #0]
 800cef2:	3301      	adds	r3, #1
 800cef4:	9300      	str	r3, [sp, #0]
 800cef6:	2331      	movs	r3, #49	; 0x31
 800cef8:	7013      	strb	r3, [r2, #0]
 800cefa:	e6ce      	b.n	800cc9a <_dtoa_r+0x94a>
 800cefc:	4b09      	ldr	r3, [pc, #36]	; (800cf24 <_dtoa_r+0xbd4>)
 800cefe:	f7ff ba95 	b.w	800c42c <_dtoa_r+0xdc>
 800cf02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	f47f aa6e 	bne.w	800c3e6 <_dtoa_r+0x96>
 800cf0a:	4b07      	ldr	r3, [pc, #28]	; (800cf28 <_dtoa_r+0xbd8>)
 800cf0c:	f7ff ba8e 	b.w	800c42c <_dtoa_r+0xdc>
 800cf10:	9b02      	ldr	r3, [sp, #8]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	dcae      	bgt.n	800ce74 <_dtoa_r+0xb24>
 800cf16:	9b06      	ldr	r3, [sp, #24]
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	f73f aea8 	bgt.w	800cc6e <_dtoa_r+0x91e>
 800cf1e:	e7a9      	b.n	800ce74 <_dtoa_r+0xb24>
 800cf20:	0800f5d0 	.word	0x0800f5d0
 800cf24:	0800f3d0 	.word	0x0800f3d0
 800cf28:	0800f551 	.word	0x0800f551

0800cf2c <rshift>:
 800cf2c:	6903      	ldr	r3, [r0, #16]
 800cf2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cf32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf36:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cf3a:	f100 0414 	add.w	r4, r0, #20
 800cf3e:	dd45      	ble.n	800cfcc <rshift+0xa0>
 800cf40:	f011 011f 	ands.w	r1, r1, #31
 800cf44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cf48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cf4c:	d10c      	bne.n	800cf68 <rshift+0x3c>
 800cf4e:	f100 0710 	add.w	r7, r0, #16
 800cf52:	4629      	mov	r1, r5
 800cf54:	42b1      	cmp	r1, r6
 800cf56:	d334      	bcc.n	800cfc2 <rshift+0x96>
 800cf58:	1a9b      	subs	r3, r3, r2
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	1eea      	subs	r2, r5, #3
 800cf5e:	4296      	cmp	r6, r2
 800cf60:	bf38      	it	cc
 800cf62:	2300      	movcc	r3, #0
 800cf64:	4423      	add	r3, r4
 800cf66:	e015      	b.n	800cf94 <rshift+0x68>
 800cf68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cf6c:	f1c1 0820 	rsb	r8, r1, #32
 800cf70:	40cf      	lsrs	r7, r1
 800cf72:	f105 0e04 	add.w	lr, r5, #4
 800cf76:	46a1      	mov	r9, r4
 800cf78:	4576      	cmp	r6, lr
 800cf7a:	46f4      	mov	ip, lr
 800cf7c:	d815      	bhi.n	800cfaa <rshift+0x7e>
 800cf7e:	1a9a      	subs	r2, r3, r2
 800cf80:	0092      	lsls	r2, r2, #2
 800cf82:	3a04      	subs	r2, #4
 800cf84:	3501      	adds	r5, #1
 800cf86:	42ae      	cmp	r6, r5
 800cf88:	bf38      	it	cc
 800cf8a:	2200      	movcc	r2, #0
 800cf8c:	18a3      	adds	r3, r4, r2
 800cf8e:	50a7      	str	r7, [r4, r2]
 800cf90:	b107      	cbz	r7, 800cf94 <rshift+0x68>
 800cf92:	3304      	adds	r3, #4
 800cf94:	1b1a      	subs	r2, r3, r4
 800cf96:	42a3      	cmp	r3, r4
 800cf98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cf9c:	bf08      	it	eq
 800cf9e:	2300      	moveq	r3, #0
 800cfa0:	6102      	str	r2, [r0, #16]
 800cfa2:	bf08      	it	eq
 800cfa4:	6143      	streq	r3, [r0, #20]
 800cfa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfaa:	f8dc c000 	ldr.w	ip, [ip]
 800cfae:	fa0c fc08 	lsl.w	ip, ip, r8
 800cfb2:	ea4c 0707 	orr.w	r7, ip, r7
 800cfb6:	f849 7b04 	str.w	r7, [r9], #4
 800cfba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cfbe:	40cf      	lsrs	r7, r1
 800cfc0:	e7da      	b.n	800cf78 <rshift+0x4c>
 800cfc2:	f851 cb04 	ldr.w	ip, [r1], #4
 800cfc6:	f847 cf04 	str.w	ip, [r7, #4]!
 800cfca:	e7c3      	b.n	800cf54 <rshift+0x28>
 800cfcc:	4623      	mov	r3, r4
 800cfce:	e7e1      	b.n	800cf94 <rshift+0x68>

0800cfd0 <__hexdig_fun>:
 800cfd0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cfd4:	2b09      	cmp	r3, #9
 800cfd6:	d802      	bhi.n	800cfde <__hexdig_fun+0xe>
 800cfd8:	3820      	subs	r0, #32
 800cfda:	b2c0      	uxtb	r0, r0
 800cfdc:	4770      	bx	lr
 800cfde:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cfe2:	2b05      	cmp	r3, #5
 800cfe4:	d801      	bhi.n	800cfea <__hexdig_fun+0x1a>
 800cfe6:	3847      	subs	r0, #71	; 0x47
 800cfe8:	e7f7      	b.n	800cfda <__hexdig_fun+0xa>
 800cfea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cfee:	2b05      	cmp	r3, #5
 800cff0:	d801      	bhi.n	800cff6 <__hexdig_fun+0x26>
 800cff2:	3827      	subs	r0, #39	; 0x27
 800cff4:	e7f1      	b.n	800cfda <__hexdig_fun+0xa>
 800cff6:	2000      	movs	r0, #0
 800cff8:	4770      	bx	lr
	...

0800cffc <__gethex>:
 800cffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d000:	ed2d 8b02 	vpush	{d8}
 800d004:	b089      	sub	sp, #36	; 0x24
 800d006:	ee08 0a10 	vmov	s16, r0
 800d00a:	9304      	str	r3, [sp, #16]
 800d00c:	4bb4      	ldr	r3, [pc, #720]	; (800d2e0 <__gethex+0x2e4>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	9301      	str	r3, [sp, #4]
 800d012:	4618      	mov	r0, r3
 800d014:	468b      	mov	fp, r1
 800d016:	4690      	mov	r8, r2
 800d018:	f7f3 f8da 	bl	80001d0 <strlen>
 800d01c:	9b01      	ldr	r3, [sp, #4]
 800d01e:	f8db 2000 	ldr.w	r2, [fp]
 800d022:	4403      	add	r3, r0
 800d024:	4682      	mov	sl, r0
 800d026:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d02a:	9305      	str	r3, [sp, #20]
 800d02c:	1c93      	adds	r3, r2, #2
 800d02e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d032:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d036:	32fe      	adds	r2, #254	; 0xfe
 800d038:	18d1      	adds	r1, r2, r3
 800d03a:	461f      	mov	r7, r3
 800d03c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d040:	9100      	str	r1, [sp, #0]
 800d042:	2830      	cmp	r0, #48	; 0x30
 800d044:	d0f8      	beq.n	800d038 <__gethex+0x3c>
 800d046:	f7ff ffc3 	bl	800cfd0 <__hexdig_fun>
 800d04a:	4604      	mov	r4, r0
 800d04c:	2800      	cmp	r0, #0
 800d04e:	d13a      	bne.n	800d0c6 <__gethex+0xca>
 800d050:	9901      	ldr	r1, [sp, #4]
 800d052:	4652      	mov	r2, sl
 800d054:	4638      	mov	r0, r7
 800d056:	f001 fa53 	bl	800e500 <strncmp>
 800d05a:	4605      	mov	r5, r0
 800d05c:	2800      	cmp	r0, #0
 800d05e:	d168      	bne.n	800d132 <__gethex+0x136>
 800d060:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d064:	eb07 060a 	add.w	r6, r7, sl
 800d068:	f7ff ffb2 	bl	800cfd0 <__hexdig_fun>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d062      	beq.n	800d136 <__gethex+0x13a>
 800d070:	4633      	mov	r3, r6
 800d072:	7818      	ldrb	r0, [r3, #0]
 800d074:	2830      	cmp	r0, #48	; 0x30
 800d076:	461f      	mov	r7, r3
 800d078:	f103 0301 	add.w	r3, r3, #1
 800d07c:	d0f9      	beq.n	800d072 <__gethex+0x76>
 800d07e:	f7ff ffa7 	bl	800cfd0 <__hexdig_fun>
 800d082:	2301      	movs	r3, #1
 800d084:	fab0 f480 	clz	r4, r0
 800d088:	0964      	lsrs	r4, r4, #5
 800d08a:	4635      	mov	r5, r6
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	463a      	mov	r2, r7
 800d090:	4616      	mov	r6, r2
 800d092:	3201      	adds	r2, #1
 800d094:	7830      	ldrb	r0, [r6, #0]
 800d096:	f7ff ff9b 	bl	800cfd0 <__hexdig_fun>
 800d09a:	2800      	cmp	r0, #0
 800d09c:	d1f8      	bne.n	800d090 <__gethex+0x94>
 800d09e:	9901      	ldr	r1, [sp, #4]
 800d0a0:	4652      	mov	r2, sl
 800d0a2:	4630      	mov	r0, r6
 800d0a4:	f001 fa2c 	bl	800e500 <strncmp>
 800d0a8:	b980      	cbnz	r0, 800d0cc <__gethex+0xd0>
 800d0aa:	b94d      	cbnz	r5, 800d0c0 <__gethex+0xc4>
 800d0ac:	eb06 050a 	add.w	r5, r6, sl
 800d0b0:	462a      	mov	r2, r5
 800d0b2:	4616      	mov	r6, r2
 800d0b4:	3201      	adds	r2, #1
 800d0b6:	7830      	ldrb	r0, [r6, #0]
 800d0b8:	f7ff ff8a 	bl	800cfd0 <__hexdig_fun>
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	d1f8      	bne.n	800d0b2 <__gethex+0xb6>
 800d0c0:	1bad      	subs	r5, r5, r6
 800d0c2:	00ad      	lsls	r5, r5, #2
 800d0c4:	e004      	b.n	800d0d0 <__gethex+0xd4>
 800d0c6:	2400      	movs	r4, #0
 800d0c8:	4625      	mov	r5, r4
 800d0ca:	e7e0      	b.n	800d08e <__gethex+0x92>
 800d0cc:	2d00      	cmp	r5, #0
 800d0ce:	d1f7      	bne.n	800d0c0 <__gethex+0xc4>
 800d0d0:	7833      	ldrb	r3, [r6, #0]
 800d0d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d0d6:	2b50      	cmp	r3, #80	; 0x50
 800d0d8:	d13b      	bne.n	800d152 <__gethex+0x156>
 800d0da:	7873      	ldrb	r3, [r6, #1]
 800d0dc:	2b2b      	cmp	r3, #43	; 0x2b
 800d0de:	d02c      	beq.n	800d13a <__gethex+0x13e>
 800d0e0:	2b2d      	cmp	r3, #45	; 0x2d
 800d0e2:	d02e      	beq.n	800d142 <__gethex+0x146>
 800d0e4:	1c71      	adds	r1, r6, #1
 800d0e6:	f04f 0900 	mov.w	r9, #0
 800d0ea:	7808      	ldrb	r0, [r1, #0]
 800d0ec:	f7ff ff70 	bl	800cfd0 <__hexdig_fun>
 800d0f0:	1e43      	subs	r3, r0, #1
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	2b18      	cmp	r3, #24
 800d0f6:	d82c      	bhi.n	800d152 <__gethex+0x156>
 800d0f8:	f1a0 0210 	sub.w	r2, r0, #16
 800d0fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d100:	f7ff ff66 	bl	800cfd0 <__hexdig_fun>
 800d104:	1e43      	subs	r3, r0, #1
 800d106:	b2db      	uxtb	r3, r3
 800d108:	2b18      	cmp	r3, #24
 800d10a:	d91d      	bls.n	800d148 <__gethex+0x14c>
 800d10c:	f1b9 0f00 	cmp.w	r9, #0
 800d110:	d000      	beq.n	800d114 <__gethex+0x118>
 800d112:	4252      	negs	r2, r2
 800d114:	4415      	add	r5, r2
 800d116:	f8cb 1000 	str.w	r1, [fp]
 800d11a:	b1e4      	cbz	r4, 800d156 <__gethex+0x15a>
 800d11c:	9b00      	ldr	r3, [sp, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	bf14      	ite	ne
 800d122:	2700      	movne	r7, #0
 800d124:	2706      	moveq	r7, #6
 800d126:	4638      	mov	r0, r7
 800d128:	b009      	add	sp, #36	; 0x24
 800d12a:	ecbd 8b02 	vpop	{d8}
 800d12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d132:	463e      	mov	r6, r7
 800d134:	4625      	mov	r5, r4
 800d136:	2401      	movs	r4, #1
 800d138:	e7ca      	b.n	800d0d0 <__gethex+0xd4>
 800d13a:	f04f 0900 	mov.w	r9, #0
 800d13e:	1cb1      	adds	r1, r6, #2
 800d140:	e7d3      	b.n	800d0ea <__gethex+0xee>
 800d142:	f04f 0901 	mov.w	r9, #1
 800d146:	e7fa      	b.n	800d13e <__gethex+0x142>
 800d148:	230a      	movs	r3, #10
 800d14a:	fb03 0202 	mla	r2, r3, r2, r0
 800d14e:	3a10      	subs	r2, #16
 800d150:	e7d4      	b.n	800d0fc <__gethex+0x100>
 800d152:	4631      	mov	r1, r6
 800d154:	e7df      	b.n	800d116 <__gethex+0x11a>
 800d156:	1bf3      	subs	r3, r6, r7
 800d158:	3b01      	subs	r3, #1
 800d15a:	4621      	mov	r1, r4
 800d15c:	2b07      	cmp	r3, #7
 800d15e:	dc0b      	bgt.n	800d178 <__gethex+0x17c>
 800d160:	ee18 0a10 	vmov	r0, s16
 800d164:	f000 fa70 	bl	800d648 <_Balloc>
 800d168:	4604      	mov	r4, r0
 800d16a:	b940      	cbnz	r0, 800d17e <__gethex+0x182>
 800d16c:	4b5d      	ldr	r3, [pc, #372]	; (800d2e4 <__gethex+0x2e8>)
 800d16e:	4602      	mov	r2, r0
 800d170:	21de      	movs	r1, #222	; 0xde
 800d172:	485d      	ldr	r0, [pc, #372]	; (800d2e8 <__gethex+0x2ec>)
 800d174:	f001 f9e6 	bl	800e544 <__assert_func>
 800d178:	3101      	adds	r1, #1
 800d17a:	105b      	asrs	r3, r3, #1
 800d17c:	e7ee      	b.n	800d15c <__gethex+0x160>
 800d17e:	f100 0914 	add.w	r9, r0, #20
 800d182:	f04f 0b00 	mov.w	fp, #0
 800d186:	f1ca 0301 	rsb	r3, sl, #1
 800d18a:	f8cd 9008 	str.w	r9, [sp, #8]
 800d18e:	f8cd b000 	str.w	fp, [sp]
 800d192:	9306      	str	r3, [sp, #24]
 800d194:	42b7      	cmp	r7, r6
 800d196:	d340      	bcc.n	800d21a <__gethex+0x21e>
 800d198:	9802      	ldr	r0, [sp, #8]
 800d19a:	9b00      	ldr	r3, [sp, #0]
 800d19c:	f840 3b04 	str.w	r3, [r0], #4
 800d1a0:	eba0 0009 	sub.w	r0, r0, r9
 800d1a4:	1080      	asrs	r0, r0, #2
 800d1a6:	0146      	lsls	r6, r0, #5
 800d1a8:	6120      	str	r0, [r4, #16]
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f000 fb3e 	bl	800d82c <__hi0bits>
 800d1b0:	1a30      	subs	r0, r6, r0
 800d1b2:	f8d8 6000 	ldr.w	r6, [r8]
 800d1b6:	42b0      	cmp	r0, r6
 800d1b8:	dd63      	ble.n	800d282 <__gethex+0x286>
 800d1ba:	1b87      	subs	r7, r0, r6
 800d1bc:	4639      	mov	r1, r7
 800d1be:	4620      	mov	r0, r4
 800d1c0:	f000 fee2 	bl	800df88 <__any_on>
 800d1c4:	4682      	mov	sl, r0
 800d1c6:	b1a8      	cbz	r0, 800d1f4 <__gethex+0x1f8>
 800d1c8:	1e7b      	subs	r3, r7, #1
 800d1ca:	1159      	asrs	r1, r3, #5
 800d1cc:	f003 021f 	and.w	r2, r3, #31
 800d1d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d1d4:	f04f 0a01 	mov.w	sl, #1
 800d1d8:	fa0a f202 	lsl.w	r2, sl, r2
 800d1dc:	420a      	tst	r2, r1
 800d1de:	d009      	beq.n	800d1f4 <__gethex+0x1f8>
 800d1e0:	4553      	cmp	r3, sl
 800d1e2:	dd05      	ble.n	800d1f0 <__gethex+0x1f4>
 800d1e4:	1eb9      	subs	r1, r7, #2
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	f000 fece 	bl	800df88 <__any_on>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	d145      	bne.n	800d27c <__gethex+0x280>
 800d1f0:	f04f 0a02 	mov.w	sl, #2
 800d1f4:	4639      	mov	r1, r7
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	f7ff fe98 	bl	800cf2c <rshift>
 800d1fc:	443d      	add	r5, r7
 800d1fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d202:	42ab      	cmp	r3, r5
 800d204:	da4c      	bge.n	800d2a0 <__gethex+0x2a4>
 800d206:	ee18 0a10 	vmov	r0, s16
 800d20a:	4621      	mov	r1, r4
 800d20c:	f000 fa5c 	bl	800d6c8 <_Bfree>
 800d210:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d212:	2300      	movs	r3, #0
 800d214:	6013      	str	r3, [r2, #0]
 800d216:	27a3      	movs	r7, #163	; 0xa3
 800d218:	e785      	b.n	800d126 <__gethex+0x12a>
 800d21a:	1e73      	subs	r3, r6, #1
 800d21c:	9a05      	ldr	r2, [sp, #20]
 800d21e:	9303      	str	r3, [sp, #12]
 800d220:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d224:	4293      	cmp	r3, r2
 800d226:	d019      	beq.n	800d25c <__gethex+0x260>
 800d228:	f1bb 0f20 	cmp.w	fp, #32
 800d22c:	d107      	bne.n	800d23e <__gethex+0x242>
 800d22e:	9b02      	ldr	r3, [sp, #8]
 800d230:	9a00      	ldr	r2, [sp, #0]
 800d232:	f843 2b04 	str.w	r2, [r3], #4
 800d236:	9302      	str	r3, [sp, #8]
 800d238:	2300      	movs	r3, #0
 800d23a:	9300      	str	r3, [sp, #0]
 800d23c:	469b      	mov	fp, r3
 800d23e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d242:	f7ff fec5 	bl	800cfd0 <__hexdig_fun>
 800d246:	9b00      	ldr	r3, [sp, #0]
 800d248:	f000 000f 	and.w	r0, r0, #15
 800d24c:	fa00 f00b 	lsl.w	r0, r0, fp
 800d250:	4303      	orrs	r3, r0
 800d252:	9300      	str	r3, [sp, #0]
 800d254:	f10b 0b04 	add.w	fp, fp, #4
 800d258:	9b03      	ldr	r3, [sp, #12]
 800d25a:	e00d      	b.n	800d278 <__gethex+0x27c>
 800d25c:	9b03      	ldr	r3, [sp, #12]
 800d25e:	9a06      	ldr	r2, [sp, #24]
 800d260:	4413      	add	r3, r2
 800d262:	42bb      	cmp	r3, r7
 800d264:	d3e0      	bcc.n	800d228 <__gethex+0x22c>
 800d266:	4618      	mov	r0, r3
 800d268:	9901      	ldr	r1, [sp, #4]
 800d26a:	9307      	str	r3, [sp, #28]
 800d26c:	4652      	mov	r2, sl
 800d26e:	f001 f947 	bl	800e500 <strncmp>
 800d272:	9b07      	ldr	r3, [sp, #28]
 800d274:	2800      	cmp	r0, #0
 800d276:	d1d7      	bne.n	800d228 <__gethex+0x22c>
 800d278:	461e      	mov	r6, r3
 800d27a:	e78b      	b.n	800d194 <__gethex+0x198>
 800d27c:	f04f 0a03 	mov.w	sl, #3
 800d280:	e7b8      	b.n	800d1f4 <__gethex+0x1f8>
 800d282:	da0a      	bge.n	800d29a <__gethex+0x29e>
 800d284:	1a37      	subs	r7, r6, r0
 800d286:	4621      	mov	r1, r4
 800d288:	ee18 0a10 	vmov	r0, s16
 800d28c:	463a      	mov	r2, r7
 800d28e:	f000 fc37 	bl	800db00 <__lshift>
 800d292:	1bed      	subs	r5, r5, r7
 800d294:	4604      	mov	r4, r0
 800d296:	f100 0914 	add.w	r9, r0, #20
 800d29a:	f04f 0a00 	mov.w	sl, #0
 800d29e:	e7ae      	b.n	800d1fe <__gethex+0x202>
 800d2a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d2a4:	42a8      	cmp	r0, r5
 800d2a6:	dd72      	ble.n	800d38e <__gethex+0x392>
 800d2a8:	1b45      	subs	r5, r0, r5
 800d2aa:	42ae      	cmp	r6, r5
 800d2ac:	dc36      	bgt.n	800d31c <__gethex+0x320>
 800d2ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d2b2:	2b02      	cmp	r3, #2
 800d2b4:	d02a      	beq.n	800d30c <__gethex+0x310>
 800d2b6:	2b03      	cmp	r3, #3
 800d2b8:	d02c      	beq.n	800d314 <__gethex+0x318>
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	d11c      	bne.n	800d2f8 <__gethex+0x2fc>
 800d2be:	42ae      	cmp	r6, r5
 800d2c0:	d11a      	bne.n	800d2f8 <__gethex+0x2fc>
 800d2c2:	2e01      	cmp	r6, #1
 800d2c4:	d112      	bne.n	800d2ec <__gethex+0x2f0>
 800d2c6:	9a04      	ldr	r2, [sp, #16]
 800d2c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d2cc:	6013      	str	r3, [r2, #0]
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	6123      	str	r3, [r4, #16]
 800d2d2:	f8c9 3000 	str.w	r3, [r9]
 800d2d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d2d8:	2762      	movs	r7, #98	; 0x62
 800d2da:	601c      	str	r4, [r3, #0]
 800d2dc:	e723      	b.n	800d126 <__gethex+0x12a>
 800d2de:	bf00      	nop
 800d2e0:	0800f648 	.word	0x0800f648
 800d2e4:	0800f5d0 	.word	0x0800f5d0
 800d2e8:	0800f5e1 	.word	0x0800f5e1
 800d2ec:	1e71      	subs	r1, r6, #1
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	f000 fe4a 	bl	800df88 <__any_on>
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	d1e6      	bne.n	800d2c6 <__gethex+0x2ca>
 800d2f8:	ee18 0a10 	vmov	r0, s16
 800d2fc:	4621      	mov	r1, r4
 800d2fe:	f000 f9e3 	bl	800d6c8 <_Bfree>
 800d302:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d304:	2300      	movs	r3, #0
 800d306:	6013      	str	r3, [r2, #0]
 800d308:	2750      	movs	r7, #80	; 0x50
 800d30a:	e70c      	b.n	800d126 <__gethex+0x12a>
 800d30c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d1f2      	bne.n	800d2f8 <__gethex+0x2fc>
 800d312:	e7d8      	b.n	800d2c6 <__gethex+0x2ca>
 800d314:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d316:	2b00      	cmp	r3, #0
 800d318:	d1d5      	bne.n	800d2c6 <__gethex+0x2ca>
 800d31a:	e7ed      	b.n	800d2f8 <__gethex+0x2fc>
 800d31c:	1e6f      	subs	r7, r5, #1
 800d31e:	f1ba 0f00 	cmp.w	sl, #0
 800d322:	d131      	bne.n	800d388 <__gethex+0x38c>
 800d324:	b127      	cbz	r7, 800d330 <__gethex+0x334>
 800d326:	4639      	mov	r1, r7
 800d328:	4620      	mov	r0, r4
 800d32a:	f000 fe2d 	bl	800df88 <__any_on>
 800d32e:	4682      	mov	sl, r0
 800d330:	117b      	asrs	r3, r7, #5
 800d332:	2101      	movs	r1, #1
 800d334:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d338:	f007 071f 	and.w	r7, r7, #31
 800d33c:	fa01 f707 	lsl.w	r7, r1, r7
 800d340:	421f      	tst	r7, r3
 800d342:	4629      	mov	r1, r5
 800d344:	4620      	mov	r0, r4
 800d346:	bf18      	it	ne
 800d348:	f04a 0a02 	orrne.w	sl, sl, #2
 800d34c:	1b76      	subs	r6, r6, r5
 800d34e:	f7ff fded 	bl	800cf2c <rshift>
 800d352:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d356:	2702      	movs	r7, #2
 800d358:	f1ba 0f00 	cmp.w	sl, #0
 800d35c:	d048      	beq.n	800d3f0 <__gethex+0x3f4>
 800d35e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d362:	2b02      	cmp	r3, #2
 800d364:	d015      	beq.n	800d392 <__gethex+0x396>
 800d366:	2b03      	cmp	r3, #3
 800d368:	d017      	beq.n	800d39a <__gethex+0x39e>
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	d109      	bne.n	800d382 <__gethex+0x386>
 800d36e:	f01a 0f02 	tst.w	sl, #2
 800d372:	d006      	beq.n	800d382 <__gethex+0x386>
 800d374:	f8d9 0000 	ldr.w	r0, [r9]
 800d378:	ea4a 0a00 	orr.w	sl, sl, r0
 800d37c:	f01a 0f01 	tst.w	sl, #1
 800d380:	d10e      	bne.n	800d3a0 <__gethex+0x3a4>
 800d382:	f047 0710 	orr.w	r7, r7, #16
 800d386:	e033      	b.n	800d3f0 <__gethex+0x3f4>
 800d388:	f04f 0a01 	mov.w	sl, #1
 800d38c:	e7d0      	b.n	800d330 <__gethex+0x334>
 800d38e:	2701      	movs	r7, #1
 800d390:	e7e2      	b.n	800d358 <__gethex+0x35c>
 800d392:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d394:	f1c3 0301 	rsb	r3, r3, #1
 800d398:	9315      	str	r3, [sp, #84]	; 0x54
 800d39a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d0f0      	beq.n	800d382 <__gethex+0x386>
 800d3a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d3a4:	f104 0314 	add.w	r3, r4, #20
 800d3a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d3ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d3b0:	f04f 0c00 	mov.w	ip, #0
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ba:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800d3be:	d01c      	beq.n	800d3fa <__gethex+0x3fe>
 800d3c0:	3201      	adds	r2, #1
 800d3c2:	6002      	str	r2, [r0, #0]
 800d3c4:	2f02      	cmp	r7, #2
 800d3c6:	f104 0314 	add.w	r3, r4, #20
 800d3ca:	d13f      	bne.n	800d44c <__gethex+0x450>
 800d3cc:	f8d8 2000 	ldr.w	r2, [r8]
 800d3d0:	3a01      	subs	r2, #1
 800d3d2:	42b2      	cmp	r2, r6
 800d3d4:	d10a      	bne.n	800d3ec <__gethex+0x3f0>
 800d3d6:	1171      	asrs	r1, r6, #5
 800d3d8:	2201      	movs	r2, #1
 800d3da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d3de:	f006 061f 	and.w	r6, r6, #31
 800d3e2:	fa02 f606 	lsl.w	r6, r2, r6
 800d3e6:	421e      	tst	r6, r3
 800d3e8:	bf18      	it	ne
 800d3ea:	4617      	movne	r7, r2
 800d3ec:	f047 0720 	orr.w	r7, r7, #32
 800d3f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d3f2:	601c      	str	r4, [r3, #0]
 800d3f4:	9b04      	ldr	r3, [sp, #16]
 800d3f6:	601d      	str	r5, [r3, #0]
 800d3f8:	e695      	b.n	800d126 <__gethex+0x12a>
 800d3fa:	4299      	cmp	r1, r3
 800d3fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800d400:	d8d8      	bhi.n	800d3b4 <__gethex+0x3b8>
 800d402:	68a3      	ldr	r3, [r4, #8]
 800d404:	459b      	cmp	fp, r3
 800d406:	db19      	blt.n	800d43c <__gethex+0x440>
 800d408:	6861      	ldr	r1, [r4, #4]
 800d40a:	ee18 0a10 	vmov	r0, s16
 800d40e:	3101      	adds	r1, #1
 800d410:	f000 f91a 	bl	800d648 <_Balloc>
 800d414:	4681      	mov	r9, r0
 800d416:	b918      	cbnz	r0, 800d420 <__gethex+0x424>
 800d418:	4b1a      	ldr	r3, [pc, #104]	; (800d484 <__gethex+0x488>)
 800d41a:	4602      	mov	r2, r0
 800d41c:	2184      	movs	r1, #132	; 0x84
 800d41e:	e6a8      	b.n	800d172 <__gethex+0x176>
 800d420:	6922      	ldr	r2, [r4, #16]
 800d422:	3202      	adds	r2, #2
 800d424:	f104 010c 	add.w	r1, r4, #12
 800d428:	0092      	lsls	r2, r2, #2
 800d42a:	300c      	adds	r0, #12
 800d42c:	f7fd f956 	bl	800a6dc <memcpy>
 800d430:	4621      	mov	r1, r4
 800d432:	ee18 0a10 	vmov	r0, s16
 800d436:	f000 f947 	bl	800d6c8 <_Bfree>
 800d43a:	464c      	mov	r4, r9
 800d43c:	6923      	ldr	r3, [r4, #16]
 800d43e:	1c5a      	adds	r2, r3, #1
 800d440:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d444:	6122      	str	r2, [r4, #16]
 800d446:	2201      	movs	r2, #1
 800d448:	615a      	str	r2, [r3, #20]
 800d44a:	e7bb      	b.n	800d3c4 <__gethex+0x3c8>
 800d44c:	6922      	ldr	r2, [r4, #16]
 800d44e:	455a      	cmp	r2, fp
 800d450:	dd0b      	ble.n	800d46a <__gethex+0x46e>
 800d452:	2101      	movs	r1, #1
 800d454:	4620      	mov	r0, r4
 800d456:	f7ff fd69 	bl	800cf2c <rshift>
 800d45a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d45e:	3501      	adds	r5, #1
 800d460:	42ab      	cmp	r3, r5
 800d462:	f6ff aed0 	blt.w	800d206 <__gethex+0x20a>
 800d466:	2701      	movs	r7, #1
 800d468:	e7c0      	b.n	800d3ec <__gethex+0x3f0>
 800d46a:	f016 061f 	ands.w	r6, r6, #31
 800d46e:	d0fa      	beq.n	800d466 <__gethex+0x46a>
 800d470:	4453      	add	r3, sl
 800d472:	f1c6 0620 	rsb	r6, r6, #32
 800d476:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d47a:	f000 f9d7 	bl	800d82c <__hi0bits>
 800d47e:	42b0      	cmp	r0, r6
 800d480:	dbe7      	blt.n	800d452 <__gethex+0x456>
 800d482:	e7f0      	b.n	800d466 <__gethex+0x46a>
 800d484:	0800f5d0 	.word	0x0800f5d0

0800d488 <L_shift>:
 800d488:	f1c2 0208 	rsb	r2, r2, #8
 800d48c:	0092      	lsls	r2, r2, #2
 800d48e:	b570      	push	{r4, r5, r6, lr}
 800d490:	f1c2 0620 	rsb	r6, r2, #32
 800d494:	6843      	ldr	r3, [r0, #4]
 800d496:	6804      	ldr	r4, [r0, #0]
 800d498:	fa03 f506 	lsl.w	r5, r3, r6
 800d49c:	432c      	orrs	r4, r5
 800d49e:	40d3      	lsrs	r3, r2
 800d4a0:	6004      	str	r4, [r0, #0]
 800d4a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800d4a6:	4288      	cmp	r0, r1
 800d4a8:	d3f4      	bcc.n	800d494 <L_shift+0xc>
 800d4aa:	bd70      	pop	{r4, r5, r6, pc}

0800d4ac <__match>:
 800d4ac:	b530      	push	{r4, r5, lr}
 800d4ae:	6803      	ldr	r3, [r0, #0]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4b6:	b914      	cbnz	r4, 800d4be <__match+0x12>
 800d4b8:	6003      	str	r3, [r0, #0]
 800d4ba:	2001      	movs	r0, #1
 800d4bc:	bd30      	pop	{r4, r5, pc}
 800d4be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d4c6:	2d19      	cmp	r5, #25
 800d4c8:	bf98      	it	ls
 800d4ca:	3220      	addls	r2, #32
 800d4cc:	42a2      	cmp	r2, r4
 800d4ce:	d0f0      	beq.n	800d4b2 <__match+0x6>
 800d4d0:	2000      	movs	r0, #0
 800d4d2:	e7f3      	b.n	800d4bc <__match+0x10>

0800d4d4 <__hexnan>:
 800d4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d8:	680b      	ldr	r3, [r1, #0]
 800d4da:	115e      	asrs	r6, r3, #5
 800d4dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d4e0:	f013 031f 	ands.w	r3, r3, #31
 800d4e4:	b087      	sub	sp, #28
 800d4e6:	bf18      	it	ne
 800d4e8:	3604      	addne	r6, #4
 800d4ea:	2500      	movs	r5, #0
 800d4ec:	1f37      	subs	r7, r6, #4
 800d4ee:	4690      	mov	r8, r2
 800d4f0:	6802      	ldr	r2, [r0, #0]
 800d4f2:	9301      	str	r3, [sp, #4]
 800d4f4:	4682      	mov	sl, r0
 800d4f6:	f846 5c04 	str.w	r5, [r6, #-4]
 800d4fa:	46b9      	mov	r9, r7
 800d4fc:	463c      	mov	r4, r7
 800d4fe:	9502      	str	r5, [sp, #8]
 800d500:	46ab      	mov	fp, r5
 800d502:	7851      	ldrb	r1, [r2, #1]
 800d504:	1c53      	adds	r3, r2, #1
 800d506:	9303      	str	r3, [sp, #12]
 800d508:	b341      	cbz	r1, 800d55c <__hexnan+0x88>
 800d50a:	4608      	mov	r0, r1
 800d50c:	9205      	str	r2, [sp, #20]
 800d50e:	9104      	str	r1, [sp, #16]
 800d510:	f7ff fd5e 	bl	800cfd0 <__hexdig_fun>
 800d514:	2800      	cmp	r0, #0
 800d516:	d14f      	bne.n	800d5b8 <__hexnan+0xe4>
 800d518:	9904      	ldr	r1, [sp, #16]
 800d51a:	9a05      	ldr	r2, [sp, #20]
 800d51c:	2920      	cmp	r1, #32
 800d51e:	d818      	bhi.n	800d552 <__hexnan+0x7e>
 800d520:	9b02      	ldr	r3, [sp, #8]
 800d522:	459b      	cmp	fp, r3
 800d524:	dd13      	ble.n	800d54e <__hexnan+0x7a>
 800d526:	454c      	cmp	r4, r9
 800d528:	d206      	bcs.n	800d538 <__hexnan+0x64>
 800d52a:	2d07      	cmp	r5, #7
 800d52c:	dc04      	bgt.n	800d538 <__hexnan+0x64>
 800d52e:	462a      	mov	r2, r5
 800d530:	4649      	mov	r1, r9
 800d532:	4620      	mov	r0, r4
 800d534:	f7ff ffa8 	bl	800d488 <L_shift>
 800d538:	4544      	cmp	r4, r8
 800d53a:	d950      	bls.n	800d5de <__hexnan+0x10a>
 800d53c:	2300      	movs	r3, #0
 800d53e:	f1a4 0904 	sub.w	r9, r4, #4
 800d542:	f844 3c04 	str.w	r3, [r4, #-4]
 800d546:	f8cd b008 	str.w	fp, [sp, #8]
 800d54a:	464c      	mov	r4, r9
 800d54c:	461d      	mov	r5, r3
 800d54e:	9a03      	ldr	r2, [sp, #12]
 800d550:	e7d7      	b.n	800d502 <__hexnan+0x2e>
 800d552:	2929      	cmp	r1, #41	; 0x29
 800d554:	d156      	bne.n	800d604 <__hexnan+0x130>
 800d556:	3202      	adds	r2, #2
 800d558:	f8ca 2000 	str.w	r2, [sl]
 800d55c:	f1bb 0f00 	cmp.w	fp, #0
 800d560:	d050      	beq.n	800d604 <__hexnan+0x130>
 800d562:	454c      	cmp	r4, r9
 800d564:	d206      	bcs.n	800d574 <__hexnan+0xa0>
 800d566:	2d07      	cmp	r5, #7
 800d568:	dc04      	bgt.n	800d574 <__hexnan+0xa0>
 800d56a:	462a      	mov	r2, r5
 800d56c:	4649      	mov	r1, r9
 800d56e:	4620      	mov	r0, r4
 800d570:	f7ff ff8a 	bl	800d488 <L_shift>
 800d574:	4544      	cmp	r4, r8
 800d576:	d934      	bls.n	800d5e2 <__hexnan+0x10e>
 800d578:	f1a8 0204 	sub.w	r2, r8, #4
 800d57c:	4623      	mov	r3, r4
 800d57e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d582:	f842 1f04 	str.w	r1, [r2, #4]!
 800d586:	429f      	cmp	r7, r3
 800d588:	d2f9      	bcs.n	800d57e <__hexnan+0xaa>
 800d58a:	1b3b      	subs	r3, r7, r4
 800d58c:	f023 0303 	bic.w	r3, r3, #3
 800d590:	3304      	adds	r3, #4
 800d592:	3401      	adds	r4, #1
 800d594:	3e03      	subs	r6, #3
 800d596:	42b4      	cmp	r4, r6
 800d598:	bf88      	it	hi
 800d59a:	2304      	movhi	r3, #4
 800d59c:	4443      	add	r3, r8
 800d59e:	2200      	movs	r2, #0
 800d5a0:	f843 2b04 	str.w	r2, [r3], #4
 800d5a4:	429f      	cmp	r7, r3
 800d5a6:	d2fb      	bcs.n	800d5a0 <__hexnan+0xcc>
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	b91b      	cbnz	r3, 800d5b4 <__hexnan+0xe0>
 800d5ac:	4547      	cmp	r7, r8
 800d5ae:	d127      	bne.n	800d600 <__hexnan+0x12c>
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	603b      	str	r3, [r7, #0]
 800d5b4:	2005      	movs	r0, #5
 800d5b6:	e026      	b.n	800d606 <__hexnan+0x132>
 800d5b8:	3501      	adds	r5, #1
 800d5ba:	2d08      	cmp	r5, #8
 800d5bc:	f10b 0b01 	add.w	fp, fp, #1
 800d5c0:	dd06      	ble.n	800d5d0 <__hexnan+0xfc>
 800d5c2:	4544      	cmp	r4, r8
 800d5c4:	d9c3      	bls.n	800d54e <__hexnan+0x7a>
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d5cc:	2501      	movs	r5, #1
 800d5ce:	3c04      	subs	r4, #4
 800d5d0:	6822      	ldr	r2, [r4, #0]
 800d5d2:	f000 000f 	and.w	r0, r0, #15
 800d5d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d5da:	6022      	str	r2, [r4, #0]
 800d5dc:	e7b7      	b.n	800d54e <__hexnan+0x7a>
 800d5de:	2508      	movs	r5, #8
 800d5e0:	e7b5      	b.n	800d54e <__hexnan+0x7a>
 800d5e2:	9b01      	ldr	r3, [sp, #4]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d0df      	beq.n	800d5a8 <__hexnan+0xd4>
 800d5e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5ec:	f1c3 0320 	rsb	r3, r3, #32
 800d5f0:	fa22 f303 	lsr.w	r3, r2, r3
 800d5f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d5f8:	401a      	ands	r2, r3
 800d5fa:	f846 2c04 	str.w	r2, [r6, #-4]
 800d5fe:	e7d3      	b.n	800d5a8 <__hexnan+0xd4>
 800d600:	3f04      	subs	r7, #4
 800d602:	e7d1      	b.n	800d5a8 <__hexnan+0xd4>
 800d604:	2004      	movs	r0, #4
 800d606:	b007      	add	sp, #28
 800d608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d60c <_localeconv_r>:
 800d60c:	4800      	ldr	r0, [pc, #0]	; (800d610 <_localeconv_r+0x4>)
 800d60e:	4770      	bx	lr
 800d610:	20000178 	.word	0x20000178

0800d614 <malloc>:
 800d614:	4b02      	ldr	r3, [pc, #8]	; (800d620 <malloc+0xc>)
 800d616:	4601      	mov	r1, r0
 800d618:	6818      	ldr	r0, [r3, #0]
 800d61a:	f000 bd59 	b.w	800e0d0 <_malloc_r>
 800d61e:	bf00      	nop
 800d620:	20000020 	.word	0x20000020

0800d624 <__ascii_mbtowc>:
 800d624:	b082      	sub	sp, #8
 800d626:	b901      	cbnz	r1, 800d62a <__ascii_mbtowc+0x6>
 800d628:	a901      	add	r1, sp, #4
 800d62a:	b142      	cbz	r2, 800d63e <__ascii_mbtowc+0x1a>
 800d62c:	b14b      	cbz	r3, 800d642 <__ascii_mbtowc+0x1e>
 800d62e:	7813      	ldrb	r3, [r2, #0]
 800d630:	600b      	str	r3, [r1, #0]
 800d632:	7812      	ldrb	r2, [r2, #0]
 800d634:	1e10      	subs	r0, r2, #0
 800d636:	bf18      	it	ne
 800d638:	2001      	movne	r0, #1
 800d63a:	b002      	add	sp, #8
 800d63c:	4770      	bx	lr
 800d63e:	4610      	mov	r0, r2
 800d640:	e7fb      	b.n	800d63a <__ascii_mbtowc+0x16>
 800d642:	f06f 0001 	mvn.w	r0, #1
 800d646:	e7f8      	b.n	800d63a <__ascii_mbtowc+0x16>

0800d648 <_Balloc>:
 800d648:	b570      	push	{r4, r5, r6, lr}
 800d64a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d64c:	4604      	mov	r4, r0
 800d64e:	460d      	mov	r5, r1
 800d650:	b976      	cbnz	r6, 800d670 <_Balloc+0x28>
 800d652:	2010      	movs	r0, #16
 800d654:	f7ff ffde 	bl	800d614 <malloc>
 800d658:	4602      	mov	r2, r0
 800d65a:	6260      	str	r0, [r4, #36]	; 0x24
 800d65c:	b920      	cbnz	r0, 800d668 <_Balloc+0x20>
 800d65e:	4b18      	ldr	r3, [pc, #96]	; (800d6c0 <_Balloc+0x78>)
 800d660:	4818      	ldr	r0, [pc, #96]	; (800d6c4 <_Balloc+0x7c>)
 800d662:	2166      	movs	r1, #102	; 0x66
 800d664:	f000 ff6e 	bl	800e544 <__assert_func>
 800d668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d66c:	6006      	str	r6, [r0, #0]
 800d66e:	60c6      	str	r6, [r0, #12]
 800d670:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d672:	68f3      	ldr	r3, [r6, #12]
 800d674:	b183      	cbz	r3, 800d698 <_Balloc+0x50>
 800d676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d678:	68db      	ldr	r3, [r3, #12]
 800d67a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d67e:	b9b8      	cbnz	r0, 800d6b0 <_Balloc+0x68>
 800d680:	2101      	movs	r1, #1
 800d682:	fa01 f605 	lsl.w	r6, r1, r5
 800d686:	1d72      	adds	r2, r6, #5
 800d688:	0092      	lsls	r2, r2, #2
 800d68a:	4620      	mov	r0, r4
 800d68c:	f000 fc9d 	bl	800dfca <_calloc_r>
 800d690:	b160      	cbz	r0, 800d6ac <_Balloc+0x64>
 800d692:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d696:	e00e      	b.n	800d6b6 <_Balloc+0x6e>
 800d698:	2221      	movs	r2, #33	; 0x21
 800d69a:	2104      	movs	r1, #4
 800d69c:	4620      	mov	r0, r4
 800d69e:	f000 fc94 	bl	800dfca <_calloc_r>
 800d6a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6a4:	60f0      	str	r0, [r6, #12]
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d1e4      	bne.n	800d676 <_Balloc+0x2e>
 800d6ac:	2000      	movs	r0, #0
 800d6ae:	bd70      	pop	{r4, r5, r6, pc}
 800d6b0:	6802      	ldr	r2, [r0, #0]
 800d6b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d6bc:	e7f7      	b.n	800d6ae <_Balloc+0x66>
 800d6be:	bf00      	nop
 800d6c0:	0800f55e 	.word	0x0800f55e
 800d6c4:	0800f65c 	.word	0x0800f65c

0800d6c8 <_Bfree>:
 800d6c8:	b570      	push	{r4, r5, r6, lr}
 800d6ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d6cc:	4605      	mov	r5, r0
 800d6ce:	460c      	mov	r4, r1
 800d6d0:	b976      	cbnz	r6, 800d6f0 <_Bfree+0x28>
 800d6d2:	2010      	movs	r0, #16
 800d6d4:	f7ff ff9e 	bl	800d614 <malloc>
 800d6d8:	4602      	mov	r2, r0
 800d6da:	6268      	str	r0, [r5, #36]	; 0x24
 800d6dc:	b920      	cbnz	r0, 800d6e8 <_Bfree+0x20>
 800d6de:	4b09      	ldr	r3, [pc, #36]	; (800d704 <_Bfree+0x3c>)
 800d6e0:	4809      	ldr	r0, [pc, #36]	; (800d708 <_Bfree+0x40>)
 800d6e2:	218a      	movs	r1, #138	; 0x8a
 800d6e4:	f000 ff2e 	bl	800e544 <__assert_func>
 800d6e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6ec:	6006      	str	r6, [r0, #0]
 800d6ee:	60c6      	str	r6, [r0, #12]
 800d6f0:	b13c      	cbz	r4, 800d702 <_Bfree+0x3a>
 800d6f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d6f4:	6862      	ldr	r2, [r4, #4]
 800d6f6:	68db      	ldr	r3, [r3, #12]
 800d6f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d6fc:	6021      	str	r1, [r4, #0]
 800d6fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d702:	bd70      	pop	{r4, r5, r6, pc}
 800d704:	0800f55e 	.word	0x0800f55e
 800d708:	0800f65c 	.word	0x0800f65c

0800d70c <__multadd>:
 800d70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d710:	690d      	ldr	r5, [r1, #16]
 800d712:	4607      	mov	r7, r0
 800d714:	460c      	mov	r4, r1
 800d716:	461e      	mov	r6, r3
 800d718:	f101 0c14 	add.w	ip, r1, #20
 800d71c:	2000      	movs	r0, #0
 800d71e:	f8dc 3000 	ldr.w	r3, [ip]
 800d722:	b299      	uxth	r1, r3
 800d724:	fb02 6101 	mla	r1, r2, r1, r6
 800d728:	0c1e      	lsrs	r6, r3, #16
 800d72a:	0c0b      	lsrs	r3, r1, #16
 800d72c:	fb02 3306 	mla	r3, r2, r6, r3
 800d730:	b289      	uxth	r1, r1
 800d732:	3001      	adds	r0, #1
 800d734:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d738:	4285      	cmp	r5, r0
 800d73a:	f84c 1b04 	str.w	r1, [ip], #4
 800d73e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d742:	dcec      	bgt.n	800d71e <__multadd+0x12>
 800d744:	b30e      	cbz	r6, 800d78a <__multadd+0x7e>
 800d746:	68a3      	ldr	r3, [r4, #8]
 800d748:	42ab      	cmp	r3, r5
 800d74a:	dc19      	bgt.n	800d780 <__multadd+0x74>
 800d74c:	6861      	ldr	r1, [r4, #4]
 800d74e:	4638      	mov	r0, r7
 800d750:	3101      	adds	r1, #1
 800d752:	f7ff ff79 	bl	800d648 <_Balloc>
 800d756:	4680      	mov	r8, r0
 800d758:	b928      	cbnz	r0, 800d766 <__multadd+0x5a>
 800d75a:	4602      	mov	r2, r0
 800d75c:	4b0c      	ldr	r3, [pc, #48]	; (800d790 <__multadd+0x84>)
 800d75e:	480d      	ldr	r0, [pc, #52]	; (800d794 <__multadd+0x88>)
 800d760:	21b5      	movs	r1, #181	; 0xb5
 800d762:	f000 feef 	bl	800e544 <__assert_func>
 800d766:	6922      	ldr	r2, [r4, #16]
 800d768:	3202      	adds	r2, #2
 800d76a:	f104 010c 	add.w	r1, r4, #12
 800d76e:	0092      	lsls	r2, r2, #2
 800d770:	300c      	adds	r0, #12
 800d772:	f7fc ffb3 	bl	800a6dc <memcpy>
 800d776:	4621      	mov	r1, r4
 800d778:	4638      	mov	r0, r7
 800d77a:	f7ff ffa5 	bl	800d6c8 <_Bfree>
 800d77e:	4644      	mov	r4, r8
 800d780:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d784:	3501      	adds	r5, #1
 800d786:	615e      	str	r6, [r3, #20]
 800d788:	6125      	str	r5, [r4, #16]
 800d78a:	4620      	mov	r0, r4
 800d78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d790:	0800f5d0 	.word	0x0800f5d0
 800d794:	0800f65c 	.word	0x0800f65c

0800d798 <__s2b>:
 800d798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d79c:	460c      	mov	r4, r1
 800d79e:	4615      	mov	r5, r2
 800d7a0:	461f      	mov	r7, r3
 800d7a2:	2209      	movs	r2, #9
 800d7a4:	3308      	adds	r3, #8
 800d7a6:	4606      	mov	r6, r0
 800d7a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7ac:	2100      	movs	r1, #0
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	db09      	blt.n	800d7c8 <__s2b+0x30>
 800d7b4:	4630      	mov	r0, r6
 800d7b6:	f7ff ff47 	bl	800d648 <_Balloc>
 800d7ba:	b940      	cbnz	r0, 800d7ce <__s2b+0x36>
 800d7bc:	4602      	mov	r2, r0
 800d7be:	4b19      	ldr	r3, [pc, #100]	; (800d824 <__s2b+0x8c>)
 800d7c0:	4819      	ldr	r0, [pc, #100]	; (800d828 <__s2b+0x90>)
 800d7c2:	21ce      	movs	r1, #206	; 0xce
 800d7c4:	f000 febe 	bl	800e544 <__assert_func>
 800d7c8:	0052      	lsls	r2, r2, #1
 800d7ca:	3101      	adds	r1, #1
 800d7cc:	e7f0      	b.n	800d7b0 <__s2b+0x18>
 800d7ce:	9b08      	ldr	r3, [sp, #32]
 800d7d0:	6143      	str	r3, [r0, #20]
 800d7d2:	2d09      	cmp	r5, #9
 800d7d4:	f04f 0301 	mov.w	r3, #1
 800d7d8:	6103      	str	r3, [r0, #16]
 800d7da:	dd16      	ble.n	800d80a <__s2b+0x72>
 800d7dc:	f104 0909 	add.w	r9, r4, #9
 800d7e0:	46c8      	mov	r8, r9
 800d7e2:	442c      	add	r4, r5
 800d7e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d7e8:	4601      	mov	r1, r0
 800d7ea:	3b30      	subs	r3, #48	; 0x30
 800d7ec:	220a      	movs	r2, #10
 800d7ee:	4630      	mov	r0, r6
 800d7f0:	f7ff ff8c 	bl	800d70c <__multadd>
 800d7f4:	45a0      	cmp	r8, r4
 800d7f6:	d1f5      	bne.n	800d7e4 <__s2b+0x4c>
 800d7f8:	f1a5 0408 	sub.w	r4, r5, #8
 800d7fc:	444c      	add	r4, r9
 800d7fe:	1b2d      	subs	r5, r5, r4
 800d800:	1963      	adds	r3, r4, r5
 800d802:	42bb      	cmp	r3, r7
 800d804:	db04      	blt.n	800d810 <__s2b+0x78>
 800d806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d80a:	340a      	adds	r4, #10
 800d80c:	2509      	movs	r5, #9
 800d80e:	e7f6      	b.n	800d7fe <__s2b+0x66>
 800d810:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d814:	4601      	mov	r1, r0
 800d816:	3b30      	subs	r3, #48	; 0x30
 800d818:	220a      	movs	r2, #10
 800d81a:	4630      	mov	r0, r6
 800d81c:	f7ff ff76 	bl	800d70c <__multadd>
 800d820:	e7ee      	b.n	800d800 <__s2b+0x68>
 800d822:	bf00      	nop
 800d824:	0800f5d0 	.word	0x0800f5d0
 800d828:	0800f65c 	.word	0x0800f65c

0800d82c <__hi0bits>:
 800d82c:	0c03      	lsrs	r3, r0, #16
 800d82e:	041b      	lsls	r3, r3, #16
 800d830:	b9d3      	cbnz	r3, 800d868 <__hi0bits+0x3c>
 800d832:	0400      	lsls	r0, r0, #16
 800d834:	2310      	movs	r3, #16
 800d836:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d83a:	bf04      	itt	eq
 800d83c:	0200      	lsleq	r0, r0, #8
 800d83e:	3308      	addeq	r3, #8
 800d840:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d844:	bf04      	itt	eq
 800d846:	0100      	lsleq	r0, r0, #4
 800d848:	3304      	addeq	r3, #4
 800d84a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d84e:	bf04      	itt	eq
 800d850:	0080      	lsleq	r0, r0, #2
 800d852:	3302      	addeq	r3, #2
 800d854:	2800      	cmp	r0, #0
 800d856:	db05      	blt.n	800d864 <__hi0bits+0x38>
 800d858:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d85c:	f103 0301 	add.w	r3, r3, #1
 800d860:	bf08      	it	eq
 800d862:	2320      	moveq	r3, #32
 800d864:	4618      	mov	r0, r3
 800d866:	4770      	bx	lr
 800d868:	2300      	movs	r3, #0
 800d86a:	e7e4      	b.n	800d836 <__hi0bits+0xa>

0800d86c <__lo0bits>:
 800d86c:	6803      	ldr	r3, [r0, #0]
 800d86e:	f013 0207 	ands.w	r2, r3, #7
 800d872:	4601      	mov	r1, r0
 800d874:	d00b      	beq.n	800d88e <__lo0bits+0x22>
 800d876:	07da      	lsls	r2, r3, #31
 800d878:	d423      	bmi.n	800d8c2 <__lo0bits+0x56>
 800d87a:	0798      	lsls	r0, r3, #30
 800d87c:	bf49      	itett	mi
 800d87e:	085b      	lsrmi	r3, r3, #1
 800d880:	089b      	lsrpl	r3, r3, #2
 800d882:	2001      	movmi	r0, #1
 800d884:	600b      	strmi	r3, [r1, #0]
 800d886:	bf5c      	itt	pl
 800d888:	600b      	strpl	r3, [r1, #0]
 800d88a:	2002      	movpl	r0, #2
 800d88c:	4770      	bx	lr
 800d88e:	b298      	uxth	r0, r3
 800d890:	b9a8      	cbnz	r0, 800d8be <__lo0bits+0x52>
 800d892:	0c1b      	lsrs	r3, r3, #16
 800d894:	2010      	movs	r0, #16
 800d896:	b2da      	uxtb	r2, r3
 800d898:	b90a      	cbnz	r2, 800d89e <__lo0bits+0x32>
 800d89a:	3008      	adds	r0, #8
 800d89c:	0a1b      	lsrs	r3, r3, #8
 800d89e:	071a      	lsls	r2, r3, #28
 800d8a0:	bf04      	itt	eq
 800d8a2:	091b      	lsreq	r3, r3, #4
 800d8a4:	3004      	addeq	r0, #4
 800d8a6:	079a      	lsls	r2, r3, #30
 800d8a8:	bf04      	itt	eq
 800d8aa:	089b      	lsreq	r3, r3, #2
 800d8ac:	3002      	addeq	r0, #2
 800d8ae:	07da      	lsls	r2, r3, #31
 800d8b0:	d403      	bmi.n	800d8ba <__lo0bits+0x4e>
 800d8b2:	085b      	lsrs	r3, r3, #1
 800d8b4:	f100 0001 	add.w	r0, r0, #1
 800d8b8:	d005      	beq.n	800d8c6 <__lo0bits+0x5a>
 800d8ba:	600b      	str	r3, [r1, #0]
 800d8bc:	4770      	bx	lr
 800d8be:	4610      	mov	r0, r2
 800d8c0:	e7e9      	b.n	800d896 <__lo0bits+0x2a>
 800d8c2:	2000      	movs	r0, #0
 800d8c4:	4770      	bx	lr
 800d8c6:	2020      	movs	r0, #32
 800d8c8:	4770      	bx	lr
	...

0800d8cc <__i2b>:
 800d8cc:	b510      	push	{r4, lr}
 800d8ce:	460c      	mov	r4, r1
 800d8d0:	2101      	movs	r1, #1
 800d8d2:	f7ff feb9 	bl	800d648 <_Balloc>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	b928      	cbnz	r0, 800d8e6 <__i2b+0x1a>
 800d8da:	4b05      	ldr	r3, [pc, #20]	; (800d8f0 <__i2b+0x24>)
 800d8dc:	4805      	ldr	r0, [pc, #20]	; (800d8f4 <__i2b+0x28>)
 800d8de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d8e2:	f000 fe2f 	bl	800e544 <__assert_func>
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	6144      	str	r4, [r0, #20]
 800d8ea:	6103      	str	r3, [r0, #16]
 800d8ec:	bd10      	pop	{r4, pc}
 800d8ee:	bf00      	nop
 800d8f0:	0800f5d0 	.word	0x0800f5d0
 800d8f4:	0800f65c 	.word	0x0800f65c

0800d8f8 <__multiply>:
 800d8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8fc:	4691      	mov	r9, r2
 800d8fe:	690a      	ldr	r2, [r1, #16]
 800d900:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d904:	429a      	cmp	r2, r3
 800d906:	bfb8      	it	lt
 800d908:	460b      	movlt	r3, r1
 800d90a:	460c      	mov	r4, r1
 800d90c:	bfbc      	itt	lt
 800d90e:	464c      	movlt	r4, r9
 800d910:	4699      	movlt	r9, r3
 800d912:	6927      	ldr	r7, [r4, #16]
 800d914:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d918:	68a3      	ldr	r3, [r4, #8]
 800d91a:	6861      	ldr	r1, [r4, #4]
 800d91c:	eb07 060a 	add.w	r6, r7, sl
 800d920:	42b3      	cmp	r3, r6
 800d922:	b085      	sub	sp, #20
 800d924:	bfb8      	it	lt
 800d926:	3101      	addlt	r1, #1
 800d928:	f7ff fe8e 	bl	800d648 <_Balloc>
 800d92c:	b930      	cbnz	r0, 800d93c <__multiply+0x44>
 800d92e:	4602      	mov	r2, r0
 800d930:	4b44      	ldr	r3, [pc, #272]	; (800da44 <__multiply+0x14c>)
 800d932:	4845      	ldr	r0, [pc, #276]	; (800da48 <__multiply+0x150>)
 800d934:	f240 115d 	movw	r1, #349	; 0x15d
 800d938:	f000 fe04 	bl	800e544 <__assert_func>
 800d93c:	f100 0514 	add.w	r5, r0, #20
 800d940:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d944:	462b      	mov	r3, r5
 800d946:	2200      	movs	r2, #0
 800d948:	4543      	cmp	r3, r8
 800d94a:	d321      	bcc.n	800d990 <__multiply+0x98>
 800d94c:	f104 0314 	add.w	r3, r4, #20
 800d950:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d954:	f109 0314 	add.w	r3, r9, #20
 800d958:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d95c:	9202      	str	r2, [sp, #8]
 800d95e:	1b3a      	subs	r2, r7, r4
 800d960:	3a15      	subs	r2, #21
 800d962:	f022 0203 	bic.w	r2, r2, #3
 800d966:	3204      	adds	r2, #4
 800d968:	f104 0115 	add.w	r1, r4, #21
 800d96c:	428f      	cmp	r7, r1
 800d96e:	bf38      	it	cc
 800d970:	2204      	movcc	r2, #4
 800d972:	9201      	str	r2, [sp, #4]
 800d974:	9a02      	ldr	r2, [sp, #8]
 800d976:	9303      	str	r3, [sp, #12]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d80c      	bhi.n	800d996 <__multiply+0x9e>
 800d97c:	2e00      	cmp	r6, #0
 800d97e:	dd03      	ble.n	800d988 <__multiply+0x90>
 800d980:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d984:	2b00      	cmp	r3, #0
 800d986:	d05a      	beq.n	800da3e <__multiply+0x146>
 800d988:	6106      	str	r6, [r0, #16]
 800d98a:	b005      	add	sp, #20
 800d98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d990:	f843 2b04 	str.w	r2, [r3], #4
 800d994:	e7d8      	b.n	800d948 <__multiply+0x50>
 800d996:	f8b3 a000 	ldrh.w	sl, [r3]
 800d99a:	f1ba 0f00 	cmp.w	sl, #0
 800d99e:	d024      	beq.n	800d9ea <__multiply+0xf2>
 800d9a0:	f104 0e14 	add.w	lr, r4, #20
 800d9a4:	46a9      	mov	r9, r5
 800d9a6:	f04f 0c00 	mov.w	ip, #0
 800d9aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d9ae:	f8d9 1000 	ldr.w	r1, [r9]
 800d9b2:	fa1f fb82 	uxth.w	fp, r2
 800d9b6:	b289      	uxth	r1, r1
 800d9b8:	fb0a 110b 	mla	r1, sl, fp, r1
 800d9bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d9c0:	f8d9 2000 	ldr.w	r2, [r9]
 800d9c4:	4461      	add	r1, ip
 800d9c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d9ca:	fb0a c20b 	mla	r2, sl, fp, ip
 800d9ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d9d2:	b289      	uxth	r1, r1
 800d9d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d9d8:	4577      	cmp	r7, lr
 800d9da:	f849 1b04 	str.w	r1, [r9], #4
 800d9de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d9e2:	d8e2      	bhi.n	800d9aa <__multiply+0xb2>
 800d9e4:	9a01      	ldr	r2, [sp, #4]
 800d9e6:	f845 c002 	str.w	ip, [r5, r2]
 800d9ea:	9a03      	ldr	r2, [sp, #12]
 800d9ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d9f0:	3304      	adds	r3, #4
 800d9f2:	f1b9 0f00 	cmp.w	r9, #0
 800d9f6:	d020      	beq.n	800da3a <__multiply+0x142>
 800d9f8:	6829      	ldr	r1, [r5, #0]
 800d9fa:	f104 0c14 	add.w	ip, r4, #20
 800d9fe:	46ae      	mov	lr, r5
 800da00:	f04f 0a00 	mov.w	sl, #0
 800da04:	f8bc b000 	ldrh.w	fp, [ip]
 800da08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800da0c:	fb09 220b 	mla	r2, r9, fp, r2
 800da10:	4492      	add	sl, r2
 800da12:	b289      	uxth	r1, r1
 800da14:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800da18:	f84e 1b04 	str.w	r1, [lr], #4
 800da1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800da20:	f8be 1000 	ldrh.w	r1, [lr]
 800da24:	0c12      	lsrs	r2, r2, #16
 800da26:	fb09 1102 	mla	r1, r9, r2, r1
 800da2a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800da2e:	4567      	cmp	r7, ip
 800da30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800da34:	d8e6      	bhi.n	800da04 <__multiply+0x10c>
 800da36:	9a01      	ldr	r2, [sp, #4]
 800da38:	50a9      	str	r1, [r5, r2]
 800da3a:	3504      	adds	r5, #4
 800da3c:	e79a      	b.n	800d974 <__multiply+0x7c>
 800da3e:	3e01      	subs	r6, #1
 800da40:	e79c      	b.n	800d97c <__multiply+0x84>
 800da42:	bf00      	nop
 800da44:	0800f5d0 	.word	0x0800f5d0
 800da48:	0800f65c 	.word	0x0800f65c

0800da4c <__pow5mult>:
 800da4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da50:	4615      	mov	r5, r2
 800da52:	f012 0203 	ands.w	r2, r2, #3
 800da56:	4606      	mov	r6, r0
 800da58:	460f      	mov	r7, r1
 800da5a:	d007      	beq.n	800da6c <__pow5mult+0x20>
 800da5c:	4c25      	ldr	r4, [pc, #148]	; (800daf4 <__pow5mult+0xa8>)
 800da5e:	3a01      	subs	r2, #1
 800da60:	2300      	movs	r3, #0
 800da62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da66:	f7ff fe51 	bl	800d70c <__multadd>
 800da6a:	4607      	mov	r7, r0
 800da6c:	10ad      	asrs	r5, r5, #2
 800da6e:	d03d      	beq.n	800daec <__pow5mult+0xa0>
 800da70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800da72:	b97c      	cbnz	r4, 800da94 <__pow5mult+0x48>
 800da74:	2010      	movs	r0, #16
 800da76:	f7ff fdcd 	bl	800d614 <malloc>
 800da7a:	4602      	mov	r2, r0
 800da7c:	6270      	str	r0, [r6, #36]	; 0x24
 800da7e:	b928      	cbnz	r0, 800da8c <__pow5mult+0x40>
 800da80:	4b1d      	ldr	r3, [pc, #116]	; (800daf8 <__pow5mult+0xac>)
 800da82:	481e      	ldr	r0, [pc, #120]	; (800dafc <__pow5mult+0xb0>)
 800da84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800da88:	f000 fd5c 	bl	800e544 <__assert_func>
 800da8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da90:	6004      	str	r4, [r0, #0]
 800da92:	60c4      	str	r4, [r0, #12]
 800da94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800da98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da9c:	b94c      	cbnz	r4, 800dab2 <__pow5mult+0x66>
 800da9e:	f240 2171 	movw	r1, #625	; 0x271
 800daa2:	4630      	mov	r0, r6
 800daa4:	f7ff ff12 	bl	800d8cc <__i2b>
 800daa8:	2300      	movs	r3, #0
 800daaa:	f8c8 0008 	str.w	r0, [r8, #8]
 800daae:	4604      	mov	r4, r0
 800dab0:	6003      	str	r3, [r0, #0]
 800dab2:	f04f 0900 	mov.w	r9, #0
 800dab6:	07eb      	lsls	r3, r5, #31
 800dab8:	d50a      	bpl.n	800dad0 <__pow5mult+0x84>
 800daba:	4639      	mov	r1, r7
 800dabc:	4622      	mov	r2, r4
 800dabe:	4630      	mov	r0, r6
 800dac0:	f7ff ff1a 	bl	800d8f8 <__multiply>
 800dac4:	4639      	mov	r1, r7
 800dac6:	4680      	mov	r8, r0
 800dac8:	4630      	mov	r0, r6
 800daca:	f7ff fdfd 	bl	800d6c8 <_Bfree>
 800dace:	4647      	mov	r7, r8
 800dad0:	106d      	asrs	r5, r5, #1
 800dad2:	d00b      	beq.n	800daec <__pow5mult+0xa0>
 800dad4:	6820      	ldr	r0, [r4, #0]
 800dad6:	b938      	cbnz	r0, 800dae8 <__pow5mult+0x9c>
 800dad8:	4622      	mov	r2, r4
 800dada:	4621      	mov	r1, r4
 800dadc:	4630      	mov	r0, r6
 800dade:	f7ff ff0b 	bl	800d8f8 <__multiply>
 800dae2:	6020      	str	r0, [r4, #0]
 800dae4:	f8c0 9000 	str.w	r9, [r0]
 800dae8:	4604      	mov	r4, r0
 800daea:	e7e4      	b.n	800dab6 <__pow5mult+0x6a>
 800daec:	4638      	mov	r0, r7
 800daee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daf2:	bf00      	nop
 800daf4:	0800f7a8 	.word	0x0800f7a8
 800daf8:	0800f55e 	.word	0x0800f55e
 800dafc:	0800f65c 	.word	0x0800f65c

0800db00 <__lshift>:
 800db00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db04:	460c      	mov	r4, r1
 800db06:	6849      	ldr	r1, [r1, #4]
 800db08:	6923      	ldr	r3, [r4, #16]
 800db0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db0e:	68a3      	ldr	r3, [r4, #8]
 800db10:	4607      	mov	r7, r0
 800db12:	4691      	mov	r9, r2
 800db14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db18:	f108 0601 	add.w	r6, r8, #1
 800db1c:	42b3      	cmp	r3, r6
 800db1e:	db0b      	blt.n	800db38 <__lshift+0x38>
 800db20:	4638      	mov	r0, r7
 800db22:	f7ff fd91 	bl	800d648 <_Balloc>
 800db26:	4605      	mov	r5, r0
 800db28:	b948      	cbnz	r0, 800db3e <__lshift+0x3e>
 800db2a:	4602      	mov	r2, r0
 800db2c:	4b2a      	ldr	r3, [pc, #168]	; (800dbd8 <__lshift+0xd8>)
 800db2e:	482b      	ldr	r0, [pc, #172]	; (800dbdc <__lshift+0xdc>)
 800db30:	f240 11d9 	movw	r1, #473	; 0x1d9
 800db34:	f000 fd06 	bl	800e544 <__assert_func>
 800db38:	3101      	adds	r1, #1
 800db3a:	005b      	lsls	r3, r3, #1
 800db3c:	e7ee      	b.n	800db1c <__lshift+0x1c>
 800db3e:	2300      	movs	r3, #0
 800db40:	f100 0114 	add.w	r1, r0, #20
 800db44:	f100 0210 	add.w	r2, r0, #16
 800db48:	4618      	mov	r0, r3
 800db4a:	4553      	cmp	r3, sl
 800db4c:	db37      	blt.n	800dbbe <__lshift+0xbe>
 800db4e:	6920      	ldr	r0, [r4, #16]
 800db50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db54:	f104 0314 	add.w	r3, r4, #20
 800db58:	f019 091f 	ands.w	r9, r9, #31
 800db5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800db64:	d02f      	beq.n	800dbc6 <__lshift+0xc6>
 800db66:	f1c9 0e20 	rsb	lr, r9, #32
 800db6a:	468a      	mov	sl, r1
 800db6c:	f04f 0c00 	mov.w	ip, #0
 800db70:	681a      	ldr	r2, [r3, #0]
 800db72:	fa02 f209 	lsl.w	r2, r2, r9
 800db76:	ea42 020c 	orr.w	r2, r2, ip
 800db7a:	f84a 2b04 	str.w	r2, [sl], #4
 800db7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800db82:	4298      	cmp	r0, r3
 800db84:	fa22 fc0e 	lsr.w	ip, r2, lr
 800db88:	d8f2      	bhi.n	800db70 <__lshift+0x70>
 800db8a:	1b03      	subs	r3, r0, r4
 800db8c:	3b15      	subs	r3, #21
 800db8e:	f023 0303 	bic.w	r3, r3, #3
 800db92:	3304      	adds	r3, #4
 800db94:	f104 0215 	add.w	r2, r4, #21
 800db98:	4290      	cmp	r0, r2
 800db9a:	bf38      	it	cc
 800db9c:	2304      	movcc	r3, #4
 800db9e:	f841 c003 	str.w	ip, [r1, r3]
 800dba2:	f1bc 0f00 	cmp.w	ip, #0
 800dba6:	d001      	beq.n	800dbac <__lshift+0xac>
 800dba8:	f108 0602 	add.w	r6, r8, #2
 800dbac:	3e01      	subs	r6, #1
 800dbae:	4638      	mov	r0, r7
 800dbb0:	612e      	str	r6, [r5, #16]
 800dbb2:	4621      	mov	r1, r4
 800dbb4:	f7ff fd88 	bl	800d6c8 <_Bfree>
 800dbb8:	4628      	mov	r0, r5
 800dbba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbbe:	f842 0f04 	str.w	r0, [r2, #4]!
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	e7c1      	b.n	800db4a <__lshift+0x4a>
 800dbc6:	3904      	subs	r1, #4
 800dbc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbcc:	f841 2f04 	str.w	r2, [r1, #4]!
 800dbd0:	4298      	cmp	r0, r3
 800dbd2:	d8f9      	bhi.n	800dbc8 <__lshift+0xc8>
 800dbd4:	e7ea      	b.n	800dbac <__lshift+0xac>
 800dbd6:	bf00      	nop
 800dbd8:	0800f5d0 	.word	0x0800f5d0
 800dbdc:	0800f65c 	.word	0x0800f65c

0800dbe0 <__mcmp>:
 800dbe0:	b530      	push	{r4, r5, lr}
 800dbe2:	6902      	ldr	r2, [r0, #16]
 800dbe4:	690c      	ldr	r4, [r1, #16]
 800dbe6:	1b12      	subs	r2, r2, r4
 800dbe8:	d10e      	bne.n	800dc08 <__mcmp+0x28>
 800dbea:	f100 0314 	add.w	r3, r0, #20
 800dbee:	3114      	adds	r1, #20
 800dbf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dbf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dbf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dbfc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dc00:	42a5      	cmp	r5, r4
 800dc02:	d003      	beq.n	800dc0c <__mcmp+0x2c>
 800dc04:	d305      	bcc.n	800dc12 <__mcmp+0x32>
 800dc06:	2201      	movs	r2, #1
 800dc08:	4610      	mov	r0, r2
 800dc0a:	bd30      	pop	{r4, r5, pc}
 800dc0c:	4283      	cmp	r3, r0
 800dc0e:	d3f3      	bcc.n	800dbf8 <__mcmp+0x18>
 800dc10:	e7fa      	b.n	800dc08 <__mcmp+0x28>
 800dc12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc16:	e7f7      	b.n	800dc08 <__mcmp+0x28>

0800dc18 <__mdiff>:
 800dc18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc1c:	460c      	mov	r4, r1
 800dc1e:	4606      	mov	r6, r0
 800dc20:	4611      	mov	r1, r2
 800dc22:	4620      	mov	r0, r4
 800dc24:	4690      	mov	r8, r2
 800dc26:	f7ff ffdb 	bl	800dbe0 <__mcmp>
 800dc2a:	1e05      	subs	r5, r0, #0
 800dc2c:	d110      	bne.n	800dc50 <__mdiff+0x38>
 800dc2e:	4629      	mov	r1, r5
 800dc30:	4630      	mov	r0, r6
 800dc32:	f7ff fd09 	bl	800d648 <_Balloc>
 800dc36:	b930      	cbnz	r0, 800dc46 <__mdiff+0x2e>
 800dc38:	4b3a      	ldr	r3, [pc, #232]	; (800dd24 <__mdiff+0x10c>)
 800dc3a:	4602      	mov	r2, r0
 800dc3c:	f240 2132 	movw	r1, #562	; 0x232
 800dc40:	4839      	ldr	r0, [pc, #228]	; (800dd28 <__mdiff+0x110>)
 800dc42:	f000 fc7f 	bl	800e544 <__assert_func>
 800dc46:	2301      	movs	r3, #1
 800dc48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc50:	bfa4      	itt	ge
 800dc52:	4643      	movge	r3, r8
 800dc54:	46a0      	movge	r8, r4
 800dc56:	4630      	mov	r0, r6
 800dc58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dc5c:	bfa6      	itte	ge
 800dc5e:	461c      	movge	r4, r3
 800dc60:	2500      	movge	r5, #0
 800dc62:	2501      	movlt	r5, #1
 800dc64:	f7ff fcf0 	bl	800d648 <_Balloc>
 800dc68:	b920      	cbnz	r0, 800dc74 <__mdiff+0x5c>
 800dc6a:	4b2e      	ldr	r3, [pc, #184]	; (800dd24 <__mdiff+0x10c>)
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dc72:	e7e5      	b.n	800dc40 <__mdiff+0x28>
 800dc74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dc78:	6926      	ldr	r6, [r4, #16]
 800dc7a:	60c5      	str	r5, [r0, #12]
 800dc7c:	f104 0914 	add.w	r9, r4, #20
 800dc80:	f108 0514 	add.w	r5, r8, #20
 800dc84:	f100 0e14 	add.w	lr, r0, #20
 800dc88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dc8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dc90:	f108 0210 	add.w	r2, r8, #16
 800dc94:	46f2      	mov	sl, lr
 800dc96:	2100      	movs	r1, #0
 800dc98:	f859 3b04 	ldr.w	r3, [r9], #4
 800dc9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dca0:	fa1f f883 	uxth.w	r8, r3
 800dca4:	fa11 f18b 	uxtah	r1, r1, fp
 800dca8:	0c1b      	lsrs	r3, r3, #16
 800dcaa:	eba1 0808 	sub.w	r8, r1, r8
 800dcae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dcb2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dcb6:	fa1f f888 	uxth.w	r8, r8
 800dcba:	1419      	asrs	r1, r3, #16
 800dcbc:	454e      	cmp	r6, r9
 800dcbe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dcc2:	f84a 3b04 	str.w	r3, [sl], #4
 800dcc6:	d8e7      	bhi.n	800dc98 <__mdiff+0x80>
 800dcc8:	1b33      	subs	r3, r6, r4
 800dcca:	3b15      	subs	r3, #21
 800dccc:	f023 0303 	bic.w	r3, r3, #3
 800dcd0:	3304      	adds	r3, #4
 800dcd2:	3415      	adds	r4, #21
 800dcd4:	42a6      	cmp	r6, r4
 800dcd6:	bf38      	it	cc
 800dcd8:	2304      	movcc	r3, #4
 800dcda:	441d      	add	r5, r3
 800dcdc:	4473      	add	r3, lr
 800dcde:	469e      	mov	lr, r3
 800dce0:	462e      	mov	r6, r5
 800dce2:	4566      	cmp	r6, ip
 800dce4:	d30e      	bcc.n	800dd04 <__mdiff+0xec>
 800dce6:	f10c 0203 	add.w	r2, ip, #3
 800dcea:	1b52      	subs	r2, r2, r5
 800dcec:	f022 0203 	bic.w	r2, r2, #3
 800dcf0:	3d03      	subs	r5, #3
 800dcf2:	45ac      	cmp	ip, r5
 800dcf4:	bf38      	it	cc
 800dcf6:	2200      	movcc	r2, #0
 800dcf8:	441a      	add	r2, r3
 800dcfa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dcfe:	b17b      	cbz	r3, 800dd20 <__mdiff+0x108>
 800dd00:	6107      	str	r7, [r0, #16]
 800dd02:	e7a3      	b.n	800dc4c <__mdiff+0x34>
 800dd04:	f856 8b04 	ldr.w	r8, [r6], #4
 800dd08:	fa11 f288 	uxtah	r2, r1, r8
 800dd0c:	1414      	asrs	r4, r2, #16
 800dd0e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dd12:	b292      	uxth	r2, r2
 800dd14:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dd18:	f84e 2b04 	str.w	r2, [lr], #4
 800dd1c:	1421      	asrs	r1, r4, #16
 800dd1e:	e7e0      	b.n	800dce2 <__mdiff+0xca>
 800dd20:	3f01      	subs	r7, #1
 800dd22:	e7ea      	b.n	800dcfa <__mdiff+0xe2>
 800dd24:	0800f5d0 	.word	0x0800f5d0
 800dd28:	0800f65c 	.word	0x0800f65c

0800dd2c <__ulp>:
 800dd2c:	b082      	sub	sp, #8
 800dd2e:	ed8d 0b00 	vstr	d0, [sp]
 800dd32:	9b01      	ldr	r3, [sp, #4]
 800dd34:	4912      	ldr	r1, [pc, #72]	; (800dd80 <__ulp+0x54>)
 800dd36:	4019      	ands	r1, r3
 800dd38:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dd3c:	2900      	cmp	r1, #0
 800dd3e:	dd05      	ble.n	800dd4c <__ulp+0x20>
 800dd40:	2200      	movs	r2, #0
 800dd42:	460b      	mov	r3, r1
 800dd44:	ec43 2b10 	vmov	d0, r2, r3
 800dd48:	b002      	add	sp, #8
 800dd4a:	4770      	bx	lr
 800dd4c:	4249      	negs	r1, r1
 800dd4e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800dd52:	ea4f 5021 	mov.w	r0, r1, asr #20
 800dd56:	f04f 0200 	mov.w	r2, #0
 800dd5a:	f04f 0300 	mov.w	r3, #0
 800dd5e:	da04      	bge.n	800dd6a <__ulp+0x3e>
 800dd60:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dd64:	fa41 f300 	asr.w	r3, r1, r0
 800dd68:	e7ec      	b.n	800dd44 <__ulp+0x18>
 800dd6a:	f1a0 0114 	sub.w	r1, r0, #20
 800dd6e:	291e      	cmp	r1, #30
 800dd70:	bfda      	itte	le
 800dd72:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dd76:	fa20 f101 	lsrle.w	r1, r0, r1
 800dd7a:	2101      	movgt	r1, #1
 800dd7c:	460a      	mov	r2, r1
 800dd7e:	e7e1      	b.n	800dd44 <__ulp+0x18>
 800dd80:	7ff00000 	.word	0x7ff00000

0800dd84 <__b2d>:
 800dd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd86:	6905      	ldr	r5, [r0, #16]
 800dd88:	f100 0714 	add.w	r7, r0, #20
 800dd8c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800dd90:	1f2e      	subs	r6, r5, #4
 800dd92:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800dd96:	4620      	mov	r0, r4
 800dd98:	f7ff fd48 	bl	800d82c <__hi0bits>
 800dd9c:	f1c0 0320 	rsb	r3, r0, #32
 800dda0:	280a      	cmp	r0, #10
 800dda2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800de20 <__b2d+0x9c>
 800dda6:	600b      	str	r3, [r1, #0]
 800dda8:	dc14      	bgt.n	800ddd4 <__b2d+0x50>
 800ddaa:	f1c0 0e0b 	rsb	lr, r0, #11
 800ddae:	fa24 f10e 	lsr.w	r1, r4, lr
 800ddb2:	42b7      	cmp	r7, r6
 800ddb4:	ea41 030c 	orr.w	r3, r1, ip
 800ddb8:	bf34      	ite	cc
 800ddba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ddbe:	2100      	movcs	r1, #0
 800ddc0:	3015      	adds	r0, #21
 800ddc2:	fa04 f000 	lsl.w	r0, r4, r0
 800ddc6:	fa21 f10e 	lsr.w	r1, r1, lr
 800ddca:	ea40 0201 	orr.w	r2, r0, r1
 800ddce:	ec43 2b10 	vmov	d0, r2, r3
 800ddd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddd4:	42b7      	cmp	r7, r6
 800ddd6:	bf3a      	itte	cc
 800ddd8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dddc:	f1a5 0608 	subcc.w	r6, r5, #8
 800dde0:	2100      	movcs	r1, #0
 800dde2:	380b      	subs	r0, #11
 800dde4:	d017      	beq.n	800de16 <__b2d+0x92>
 800dde6:	f1c0 0c20 	rsb	ip, r0, #32
 800ddea:	fa04 f500 	lsl.w	r5, r4, r0
 800ddee:	42be      	cmp	r6, r7
 800ddf0:	fa21 f40c 	lsr.w	r4, r1, ip
 800ddf4:	ea45 0504 	orr.w	r5, r5, r4
 800ddf8:	bf8c      	ite	hi
 800ddfa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ddfe:	2400      	movls	r4, #0
 800de00:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800de04:	fa01 f000 	lsl.w	r0, r1, r0
 800de08:	fa24 f40c 	lsr.w	r4, r4, ip
 800de0c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800de10:	ea40 0204 	orr.w	r2, r0, r4
 800de14:	e7db      	b.n	800ddce <__b2d+0x4a>
 800de16:	ea44 030c 	orr.w	r3, r4, ip
 800de1a:	460a      	mov	r2, r1
 800de1c:	e7d7      	b.n	800ddce <__b2d+0x4a>
 800de1e:	bf00      	nop
 800de20:	3ff00000 	.word	0x3ff00000

0800de24 <__d2b>:
 800de24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de28:	4689      	mov	r9, r1
 800de2a:	2101      	movs	r1, #1
 800de2c:	ec57 6b10 	vmov	r6, r7, d0
 800de30:	4690      	mov	r8, r2
 800de32:	f7ff fc09 	bl	800d648 <_Balloc>
 800de36:	4604      	mov	r4, r0
 800de38:	b930      	cbnz	r0, 800de48 <__d2b+0x24>
 800de3a:	4602      	mov	r2, r0
 800de3c:	4b25      	ldr	r3, [pc, #148]	; (800ded4 <__d2b+0xb0>)
 800de3e:	4826      	ldr	r0, [pc, #152]	; (800ded8 <__d2b+0xb4>)
 800de40:	f240 310a 	movw	r1, #778	; 0x30a
 800de44:	f000 fb7e 	bl	800e544 <__assert_func>
 800de48:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800de4c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800de50:	bb35      	cbnz	r5, 800dea0 <__d2b+0x7c>
 800de52:	2e00      	cmp	r6, #0
 800de54:	9301      	str	r3, [sp, #4]
 800de56:	d028      	beq.n	800deaa <__d2b+0x86>
 800de58:	4668      	mov	r0, sp
 800de5a:	9600      	str	r6, [sp, #0]
 800de5c:	f7ff fd06 	bl	800d86c <__lo0bits>
 800de60:	9900      	ldr	r1, [sp, #0]
 800de62:	b300      	cbz	r0, 800dea6 <__d2b+0x82>
 800de64:	9a01      	ldr	r2, [sp, #4]
 800de66:	f1c0 0320 	rsb	r3, r0, #32
 800de6a:	fa02 f303 	lsl.w	r3, r2, r3
 800de6e:	430b      	orrs	r3, r1
 800de70:	40c2      	lsrs	r2, r0
 800de72:	6163      	str	r3, [r4, #20]
 800de74:	9201      	str	r2, [sp, #4]
 800de76:	9b01      	ldr	r3, [sp, #4]
 800de78:	61a3      	str	r3, [r4, #24]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	bf14      	ite	ne
 800de7e:	2202      	movne	r2, #2
 800de80:	2201      	moveq	r2, #1
 800de82:	6122      	str	r2, [r4, #16]
 800de84:	b1d5      	cbz	r5, 800debc <__d2b+0x98>
 800de86:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800de8a:	4405      	add	r5, r0
 800de8c:	f8c9 5000 	str.w	r5, [r9]
 800de90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800de94:	f8c8 0000 	str.w	r0, [r8]
 800de98:	4620      	mov	r0, r4
 800de9a:	b003      	add	sp, #12
 800de9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dea0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dea4:	e7d5      	b.n	800de52 <__d2b+0x2e>
 800dea6:	6161      	str	r1, [r4, #20]
 800dea8:	e7e5      	b.n	800de76 <__d2b+0x52>
 800deaa:	a801      	add	r0, sp, #4
 800deac:	f7ff fcde 	bl	800d86c <__lo0bits>
 800deb0:	9b01      	ldr	r3, [sp, #4]
 800deb2:	6163      	str	r3, [r4, #20]
 800deb4:	2201      	movs	r2, #1
 800deb6:	6122      	str	r2, [r4, #16]
 800deb8:	3020      	adds	r0, #32
 800deba:	e7e3      	b.n	800de84 <__d2b+0x60>
 800debc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dec0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dec4:	f8c9 0000 	str.w	r0, [r9]
 800dec8:	6918      	ldr	r0, [r3, #16]
 800deca:	f7ff fcaf 	bl	800d82c <__hi0bits>
 800dece:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ded2:	e7df      	b.n	800de94 <__d2b+0x70>
 800ded4:	0800f5d0 	.word	0x0800f5d0
 800ded8:	0800f65c 	.word	0x0800f65c

0800dedc <__ratio>:
 800dedc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee0:	4688      	mov	r8, r1
 800dee2:	4669      	mov	r1, sp
 800dee4:	4681      	mov	r9, r0
 800dee6:	f7ff ff4d 	bl	800dd84 <__b2d>
 800deea:	a901      	add	r1, sp, #4
 800deec:	4640      	mov	r0, r8
 800deee:	ec55 4b10 	vmov	r4, r5, d0
 800def2:	f7ff ff47 	bl	800dd84 <__b2d>
 800def6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800defa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800defe:	eba3 0c02 	sub.w	ip, r3, r2
 800df02:	e9dd 3200 	ldrd	r3, r2, [sp]
 800df06:	1a9b      	subs	r3, r3, r2
 800df08:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800df0c:	ec51 0b10 	vmov	r0, r1, d0
 800df10:	2b00      	cmp	r3, #0
 800df12:	bfd6      	itet	le
 800df14:	460a      	movle	r2, r1
 800df16:	462a      	movgt	r2, r5
 800df18:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800df1c:	468b      	mov	fp, r1
 800df1e:	462f      	mov	r7, r5
 800df20:	bfd4      	ite	le
 800df22:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800df26:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800df2a:	4620      	mov	r0, r4
 800df2c:	ee10 2a10 	vmov	r2, s0
 800df30:	465b      	mov	r3, fp
 800df32:	4639      	mov	r1, r7
 800df34:	f7f2 fc8a 	bl	800084c <__aeabi_ddiv>
 800df38:	ec41 0b10 	vmov	d0, r0, r1
 800df3c:	b003      	add	sp, #12
 800df3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800df42 <__copybits>:
 800df42:	3901      	subs	r1, #1
 800df44:	b570      	push	{r4, r5, r6, lr}
 800df46:	1149      	asrs	r1, r1, #5
 800df48:	6914      	ldr	r4, [r2, #16]
 800df4a:	3101      	adds	r1, #1
 800df4c:	f102 0314 	add.w	r3, r2, #20
 800df50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800df54:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800df58:	1f05      	subs	r5, r0, #4
 800df5a:	42a3      	cmp	r3, r4
 800df5c:	d30c      	bcc.n	800df78 <__copybits+0x36>
 800df5e:	1aa3      	subs	r3, r4, r2
 800df60:	3b11      	subs	r3, #17
 800df62:	f023 0303 	bic.w	r3, r3, #3
 800df66:	3211      	adds	r2, #17
 800df68:	42a2      	cmp	r2, r4
 800df6a:	bf88      	it	hi
 800df6c:	2300      	movhi	r3, #0
 800df6e:	4418      	add	r0, r3
 800df70:	2300      	movs	r3, #0
 800df72:	4288      	cmp	r0, r1
 800df74:	d305      	bcc.n	800df82 <__copybits+0x40>
 800df76:	bd70      	pop	{r4, r5, r6, pc}
 800df78:	f853 6b04 	ldr.w	r6, [r3], #4
 800df7c:	f845 6f04 	str.w	r6, [r5, #4]!
 800df80:	e7eb      	b.n	800df5a <__copybits+0x18>
 800df82:	f840 3b04 	str.w	r3, [r0], #4
 800df86:	e7f4      	b.n	800df72 <__copybits+0x30>

0800df88 <__any_on>:
 800df88:	f100 0214 	add.w	r2, r0, #20
 800df8c:	6900      	ldr	r0, [r0, #16]
 800df8e:	114b      	asrs	r3, r1, #5
 800df90:	4298      	cmp	r0, r3
 800df92:	b510      	push	{r4, lr}
 800df94:	db11      	blt.n	800dfba <__any_on+0x32>
 800df96:	dd0a      	ble.n	800dfae <__any_on+0x26>
 800df98:	f011 011f 	ands.w	r1, r1, #31
 800df9c:	d007      	beq.n	800dfae <__any_on+0x26>
 800df9e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dfa2:	fa24 f001 	lsr.w	r0, r4, r1
 800dfa6:	fa00 f101 	lsl.w	r1, r0, r1
 800dfaa:	428c      	cmp	r4, r1
 800dfac:	d10b      	bne.n	800dfc6 <__any_on+0x3e>
 800dfae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	d803      	bhi.n	800dfbe <__any_on+0x36>
 800dfb6:	2000      	movs	r0, #0
 800dfb8:	bd10      	pop	{r4, pc}
 800dfba:	4603      	mov	r3, r0
 800dfbc:	e7f7      	b.n	800dfae <__any_on+0x26>
 800dfbe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dfc2:	2900      	cmp	r1, #0
 800dfc4:	d0f5      	beq.n	800dfb2 <__any_on+0x2a>
 800dfc6:	2001      	movs	r0, #1
 800dfc8:	e7f6      	b.n	800dfb8 <__any_on+0x30>

0800dfca <_calloc_r>:
 800dfca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfcc:	fba1 2402 	umull	r2, r4, r1, r2
 800dfd0:	b94c      	cbnz	r4, 800dfe6 <_calloc_r+0x1c>
 800dfd2:	4611      	mov	r1, r2
 800dfd4:	9201      	str	r2, [sp, #4]
 800dfd6:	f000 f87b 	bl	800e0d0 <_malloc_r>
 800dfda:	9a01      	ldr	r2, [sp, #4]
 800dfdc:	4605      	mov	r5, r0
 800dfde:	b930      	cbnz	r0, 800dfee <_calloc_r+0x24>
 800dfe0:	4628      	mov	r0, r5
 800dfe2:	b003      	add	sp, #12
 800dfe4:	bd30      	pop	{r4, r5, pc}
 800dfe6:	220c      	movs	r2, #12
 800dfe8:	6002      	str	r2, [r0, #0]
 800dfea:	2500      	movs	r5, #0
 800dfec:	e7f8      	b.n	800dfe0 <_calloc_r+0x16>
 800dfee:	4621      	mov	r1, r4
 800dff0:	f7fc fb82 	bl	800a6f8 <memset>
 800dff4:	e7f4      	b.n	800dfe0 <_calloc_r+0x16>
	...

0800dff8 <_free_r>:
 800dff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dffa:	2900      	cmp	r1, #0
 800dffc:	d044      	beq.n	800e088 <_free_r+0x90>
 800dffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e002:	9001      	str	r0, [sp, #4]
 800e004:	2b00      	cmp	r3, #0
 800e006:	f1a1 0404 	sub.w	r4, r1, #4
 800e00a:	bfb8      	it	lt
 800e00c:	18e4      	addlt	r4, r4, r3
 800e00e:	f000 fae3 	bl	800e5d8 <__malloc_lock>
 800e012:	4a1e      	ldr	r2, [pc, #120]	; (800e08c <_free_r+0x94>)
 800e014:	9801      	ldr	r0, [sp, #4]
 800e016:	6813      	ldr	r3, [r2, #0]
 800e018:	b933      	cbnz	r3, 800e028 <_free_r+0x30>
 800e01a:	6063      	str	r3, [r4, #4]
 800e01c:	6014      	str	r4, [r2, #0]
 800e01e:	b003      	add	sp, #12
 800e020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e024:	f000 bade 	b.w	800e5e4 <__malloc_unlock>
 800e028:	42a3      	cmp	r3, r4
 800e02a:	d908      	bls.n	800e03e <_free_r+0x46>
 800e02c:	6825      	ldr	r5, [r4, #0]
 800e02e:	1961      	adds	r1, r4, r5
 800e030:	428b      	cmp	r3, r1
 800e032:	bf01      	itttt	eq
 800e034:	6819      	ldreq	r1, [r3, #0]
 800e036:	685b      	ldreq	r3, [r3, #4]
 800e038:	1949      	addeq	r1, r1, r5
 800e03a:	6021      	streq	r1, [r4, #0]
 800e03c:	e7ed      	b.n	800e01a <_free_r+0x22>
 800e03e:	461a      	mov	r2, r3
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	b10b      	cbz	r3, 800e048 <_free_r+0x50>
 800e044:	42a3      	cmp	r3, r4
 800e046:	d9fa      	bls.n	800e03e <_free_r+0x46>
 800e048:	6811      	ldr	r1, [r2, #0]
 800e04a:	1855      	adds	r5, r2, r1
 800e04c:	42a5      	cmp	r5, r4
 800e04e:	d10b      	bne.n	800e068 <_free_r+0x70>
 800e050:	6824      	ldr	r4, [r4, #0]
 800e052:	4421      	add	r1, r4
 800e054:	1854      	adds	r4, r2, r1
 800e056:	42a3      	cmp	r3, r4
 800e058:	6011      	str	r1, [r2, #0]
 800e05a:	d1e0      	bne.n	800e01e <_free_r+0x26>
 800e05c:	681c      	ldr	r4, [r3, #0]
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	6053      	str	r3, [r2, #4]
 800e062:	4421      	add	r1, r4
 800e064:	6011      	str	r1, [r2, #0]
 800e066:	e7da      	b.n	800e01e <_free_r+0x26>
 800e068:	d902      	bls.n	800e070 <_free_r+0x78>
 800e06a:	230c      	movs	r3, #12
 800e06c:	6003      	str	r3, [r0, #0]
 800e06e:	e7d6      	b.n	800e01e <_free_r+0x26>
 800e070:	6825      	ldr	r5, [r4, #0]
 800e072:	1961      	adds	r1, r4, r5
 800e074:	428b      	cmp	r3, r1
 800e076:	bf04      	itt	eq
 800e078:	6819      	ldreq	r1, [r3, #0]
 800e07a:	685b      	ldreq	r3, [r3, #4]
 800e07c:	6063      	str	r3, [r4, #4]
 800e07e:	bf04      	itt	eq
 800e080:	1949      	addeq	r1, r1, r5
 800e082:	6021      	streq	r1, [r4, #0]
 800e084:	6054      	str	r4, [r2, #4]
 800e086:	e7ca      	b.n	800e01e <_free_r+0x26>
 800e088:	b003      	add	sp, #12
 800e08a:	bd30      	pop	{r4, r5, pc}
 800e08c:	20000f1c 	.word	0x20000f1c

0800e090 <sbrk_aligned>:
 800e090:	b570      	push	{r4, r5, r6, lr}
 800e092:	4e0e      	ldr	r6, [pc, #56]	; (800e0cc <sbrk_aligned+0x3c>)
 800e094:	460c      	mov	r4, r1
 800e096:	6831      	ldr	r1, [r6, #0]
 800e098:	4605      	mov	r5, r0
 800e09a:	b911      	cbnz	r1, 800e0a2 <sbrk_aligned+0x12>
 800e09c:	f000 fa20 	bl	800e4e0 <_sbrk_r>
 800e0a0:	6030      	str	r0, [r6, #0]
 800e0a2:	4621      	mov	r1, r4
 800e0a4:	4628      	mov	r0, r5
 800e0a6:	f000 fa1b 	bl	800e4e0 <_sbrk_r>
 800e0aa:	1c43      	adds	r3, r0, #1
 800e0ac:	d00a      	beq.n	800e0c4 <sbrk_aligned+0x34>
 800e0ae:	1cc4      	adds	r4, r0, #3
 800e0b0:	f024 0403 	bic.w	r4, r4, #3
 800e0b4:	42a0      	cmp	r0, r4
 800e0b6:	d007      	beq.n	800e0c8 <sbrk_aligned+0x38>
 800e0b8:	1a21      	subs	r1, r4, r0
 800e0ba:	4628      	mov	r0, r5
 800e0bc:	f000 fa10 	bl	800e4e0 <_sbrk_r>
 800e0c0:	3001      	adds	r0, #1
 800e0c2:	d101      	bne.n	800e0c8 <sbrk_aligned+0x38>
 800e0c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e0c8:	4620      	mov	r0, r4
 800e0ca:	bd70      	pop	{r4, r5, r6, pc}
 800e0cc:	20000f20 	.word	0x20000f20

0800e0d0 <_malloc_r>:
 800e0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0d4:	1ccd      	adds	r5, r1, #3
 800e0d6:	f025 0503 	bic.w	r5, r5, #3
 800e0da:	3508      	adds	r5, #8
 800e0dc:	2d0c      	cmp	r5, #12
 800e0de:	bf38      	it	cc
 800e0e0:	250c      	movcc	r5, #12
 800e0e2:	2d00      	cmp	r5, #0
 800e0e4:	4607      	mov	r7, r0
 800e0e6:	db01      	blt.n	800e0ec <_malloc_r+0x1c>
 800e0e8:	42a9      	cmp	r1, r5
 800e0ea:	d905      	bls.n	800e0f8 <_malloc_r+0x28>
 800e0ec:	230c      	movs	r3, #12
 800e0ee:	603b      	str	r3, [r7, #0]
 800e0f0:	2600      	movs	r6, #0
 800e0f2:	4630      	mov	r0, r6
 800e0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0f8:	4e2e      	ldr	r6, [pc, #184]	; (800e1b4 <_malloc_r+0xe4>)
 800e0fa:	f000 fa6d 	bl	800e5d8 <__malloc_lock>
 800e0fe:	6833      	ldr	r3, [r6, #0]
 800e100:	461c      	mov	r4, r3
 800e102:	bb34      	cbnz	r4, 800e152 <_malloc_r+0x82>
 800e104:	4629      	mov	r1, r5
 800e106:	4638      	mov	r0, r7
 800e108:	f7ff ffc2 	bl	800e090 <sbrk_aligned>
 800e10c:	1c43      	adds	r3, r0, #1
 800e10e:	4604      	mov	r4, r0
 800e110:	d14d      	bne.n	800e1ae <_malloc_r+0xde>
 800e112:	6834      	ldr	r4, [r6, #0]
 800e114:	4626      	mov	r6, r4
 800e116:	2e00      	cmp	r6, #0
 800e118:	d140      	bne.n	800e19c <_malloc_r+0xcc>
 800e11a:	6823      	ldr	r3, [r4, #0]
 800e11c:	4631      	mov	r1, r6
 800e11e:	4638      	mov	r0, r7
 800e120:	eb04 0803 	add.w	r8, r4, r3
 800e124:	f000 f9dc 	bl	800e4e0 <_sbrk_r>
 800e128:	4580      	cmp	r8, r0
 800e12a:	d13a      	bne.n	800e1a2 <_malloc_r+0xd2>
 800e12c:	6821      	ldr	r1, [r4, #0]
 800e12e:	3503      	adds	r5, #3
 800e130:	1a6d      	subs	r5, r5, r1
 800e132:	f025 0503 	bic.w	r5, r5, #3
 800e136:	3508      	adds	r5, #8
 800e138:	2d0c      	cmp	r5, #12
 800e13a:	bf38      	it	cc
 800e13c:	250c      	movcc	r5, #12
 800e13e:	4629      	mov	r1, r5
 800e140:	4638      	mov	r0, r7
 800e142:	f7ff ffa5 	bl	800e090 <sbrk_aligned>
 800e146:	3001      	adds	r0, #1
 800e148:	d02b      	beq.n	800e1a2 <_malloc_r+0xd2>
 800e14a:	6823      	ldr	r3, [r4, #0]
 800e14c:	442b      	add	r3, r5
 800e14e:	6023      	str	r3, [r4, #0]
 800e150:	e00e      	b.n	800e170 <_malloc_r+0xa0>
 800e152:	6822      	ldr	r2, [r4, #0]
 800e154:	1b52      	subs	r2, r2, r5
 800e156:	d41e      	bmi.n	800e196 <_malloc_r+0xc6>
 800e158:	2a0b      	cmp	r2, #11
 800e15a:	d916      	bls.n	800e18a <_malloc_r+0xba>
 800e15c:	1961      	adds	r1, r4, r5
 800e15e:	42a3      	cmp	r3, r4
 800e160:	6025      	str	r5, [r4, #0]
 800e162:	bf18      	it	ne
 800e164:	6059      	strne	r1, [r3, #4]
 800e166:	6863      	ldr	r3, [r4, #4]
 800e168:	bf08      	it	eq
 800e16a:	6031      	streq	r1, [r6, #0]
 800e16c:	5162      	str	r2, [r4, r5]
 800e16e:	604b      	str	r3, [r1, #4]
 800e170:	4638      	mov	r0, r7
 800e172:	f104 060b 	add.w	r6, r4, #11
 800e176:	f000 fa35 	bl	800e5e4 <__malloc_unlock>
 800e17a:	f026 0607 	bic.w	r6, r6, #7
 800e17e:	1d23      	adds	r3, r4, #4
 800e180:	1af2      	subs	r2, r6, r3
 800e182:	d0b6      	beq.n	800e0f2 <_malloc_r+0x22>
 800e184:	1b9b      	subs	r3, r3, r6
 800e186:	50a3      	str	r3, [r4, r2]
 800e188:	e7b3      	b.n	800e0f2 <_malloc_r+0x22>
 800e18a:	6862      	ldr	r2, [r4, #4]
 800e18c:	42a3      	cmp	r3, r4
 800e18e:	bf0c      	ite	eq
 800e190:	6032      	streq	r2, [r6, #0]
 800e192:	605a      	strne	r2, [r3, #4]
 800e194:	e7ec      	b.n	800e170 <_malloc_r+0xa0>
 800e196:	4623      	mov	r3, r4
 800e198:	6864      	ldr	r4, [r4, #4]
 800e19a:	e7b2      	b.n	800e102 <_malloc_r+0x32>
 800e19c:	4634      	mov	r4, r6
 800e19e:	6876      	ldr	r6, [r6, #4]
 800e1a0:	e7b9      	b.n	800e116 <_malloc_r+0x46>
 800e1a2:	230c      	movs	r3, #12
 800e1a4:	603b      	str	r3, [r7, #0]
 800e1a6:	4638      	mov	r0, r7
 800e1a8:	f000 fa1c 	bl	800e5e4 <__malloc_unlock>
 800e1ac:	e7a1      	b.n	800e0f2 <_malloc_r+0x22>
 800e1ae:	6025      	str	r5, [r4, #0]
 800e1b0:	e7de      	b.n	800e170 <_malloc_r+0xa0>
 800e1b2:	bf00      	nop
 800e1b4:	20000f1c 	.word	0x20000f1c

0800e1b8 <_realloc_r>:
 800e1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1bc:	4680      	mov	r8, r0
 800e1be:	4614      	mov	r4, r2
 800e1c0:	460e      	mov	r6, r1
 800e1c2:	b921      	cbnz	r1, 800e1ce <_realloc_r+0x16>
 800e1c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c8:	4611      	mov	r1, r2
 800e1ca:	f7ff bf81 	b.w	800e0d0 <_malloc_r>
 800e1ce:	b92a      	cbnz	r2, 800e1dc <_realloc_r+0x24>
 800e1d0:	f7ff ff12 	bl	800dff8 <_free_r>
 800e1d4:	4625      	mov	r5, r4
 800e1d6:	4628      	mov	r0, r5
 800e1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1dc:	f000 fa08 	bl	800e5f0 <_malloc_usable_size_r>
 800e1e0:	4284      	cmp	r4, r0
 800e1e2:	4607      	mov	r7, r0
 800e1e4:	d802      	bhi.n	800e1ec <_realloc_r+0x34>
 800e1e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e1ea:	d812      	bhi.n	800e212 <_realloc_r+0x5a>
 800e1ec:	4621      	mov	r1, r4
 800e1ee:	4640      	mov	r0, r8
 800e1f0:	f7ff ff6e 	bl	800e0d0 <_malloc_r>
 800e1f4:	4605      	mov	r5, r0
 800e1f6:	2800      	cmp	r0, #0
 800e1f8:	d0ed      	beq.n	800e1d6 <_realloc_r+0x1e>
 800e1fa:	42bc      	cmp	r4, r7
 800e1fc:	4622      	mov	r2, r4
 800e1fe:	4631      	mov	r1, r6
 800e200:	bf28      	it	cs
 800e202:	463a      	movcs	r2, r7
 800e204:	f7fc fa6a 	bl	800a6dc <memcpy>
 800e208:	4631      	mov	r1, r6
 800e20a:	4640      	mov	r0, r8
 800e20c:	f7ff fef4 	bl	800dff8 <_free_r>
 800e210:	e7e1      	b.n	800e1d6 <_realloc_r+0x1e>
 800e212:	4635      	mov	r5, r6
 800e214:	e7df      	b.n	800e1d6 <_realloc_r+0x1e>

0800e216 <__ssputs_r>:
 800e216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e21a:	688e      	ldr	r6, [r1, #8]
 800e21c:	429e      	cmp	r6, r3
 800e21e:	4682      	mov	sl, r0
 800e220:	460c      	mov	r4, r1
 800e222:	4690      	mov	r8, r2
 800e224:	461f      	mov	r7, r3
 800e226:	d838      	bhi.n	800e29a <__ssputs_r+0x84>
 800e228:	898a      	ldrh	r2, [r1, #12]
 800e22a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e22e:	d032      	beq.n	800e296 <__ssputs_r+0x80>
 800e230:	6825      	ldr	r5, [r4, #0]
 800e232:	6909      	ldr	r1, [r1, #16]
 800e234:	eba5 0901 	sub.w	r9, r5, r1
 800e238:	6965      	ldr	r5, [r4, #20]
 800e23a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e23e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e242:	3301      	adds	r3, #1
 800e244:	444b      	add	r3, r9
 800e246:	106d      	asrs	r5, r5, #1
 800e248:	429d      	cmp	r5, r3
 800e24a:	bf38      	it	cc
 800e24c:	461d      	movcc	r5, r3
 800e24e:	0553      	lsls	r3, r2, #21
 800e250:	d531      	bpl.n	800e2b6 <__ssputs_r+0xa0>
 800e252:	4629      	mov	r1, r5
 800e254:	f7ff ff3c 	bl	800e0d0 <_malloc_r>
 800e258:	4606      	mov	r6, r0
 800e25a:	b950      	cbnz	r0, 800e272 <__ssputs_r+0x5c>
 800e25c:	230c      	movs	r3, #12
 800e25e:	f8ca 3000 	str.w	r3, [sl]
 800e262:	89a3      	ldrh	r3, [r4, #12]
 800e264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e268:	81a3      	strh	r3, [r4, #12]
 800e26a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e272:	6921      	ldr	r1, [r4, #16]
 800e274:	464a      	mov	r2, r9
 800e276:	f7fc fa31 	bl	800a6dc <memcpy>
 800e27a:	89a3      	ldrh	r3, [r4, #12]
 800e27c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e284:	81a3      	strh	r3, [r4, #12]
 800e286:	6126      	str	r6, [r4, #16]
 800e288:	6165      	str	r5, [r4, #20]
 800e28a:	444e      	add	r6, r9
 800e28c:	eba5 0509 	sub.w	r5, r5, r9
 800e290:	6026      	str	r6, [r4, #0]
 800e292:	60a5      	str	r5, [r4, #8]
 800e294:	463e      	mov	r6, r7
 800e296:	42be      	cmp	r6, r7
 800e298:	d900      	bls.n	800e29c <__ssputs_r+0x86>
 800e29a:	463e      	mov	r6, r7
 800e29c:	6820      	ldr	r0, [r4, #0]
 800e29e:	4632      	mov	r2, r6
 800e2a0:	4641      	mov	r1, r8
 800e2a2:	f000 f97f 	bl	800e5a4 <memmove>
 800e2a6:	68a3      	ldr	r3, [r4, #8]
 800e2a8:	1b9b      	subs	r3, r3, r6
 800e2aa:	60a3      	str	r3, [r4, #8]
 800e2ac:	6823      	ldr	r3, [r4, #0]
 800e2ae:	4433      	add	r3, r6
 800e2b0:	6023      	str	r3, [r4, #0]
 800e2b2:	2000      	movs	r0, #0
 800e2b4:	e7db      	b.n	800e26e <__ssputs_r+0x58>
 800e2b6:	462a      	mov	r2, r5
 800e2b8:	f7ff ff7e 	bl	800e1b8 <_realloc_r>
 800e2bc:	4606      	mov	r6, r0
 800e2be:	2800      	cmp	r0, #0
 800e2c0:	d1e1      	bne.n	800e286 <__ssputs_r+0x70>
 800e2c2:	6921      	ldr	r1, [r4, #16]
 800e2c4:	4650      	mov	r0, sl
 800e2c6:	f7ff fe97 	bl	800dff8 <_free_r>
 800e2ca:	e7c7      	b.n	800e25c <__ssputs_r+0x46>

0800e2cc <_svfiprintf_r>:
 800e2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d0:	4698      	mov	r8, r3
 800e2d2:	898b      	ldrh	r3, [r1, #12]
 800e2d4:	061b      	lsls	r3, r3, #24
 800e2d6:	b09d      	sub	sp, #116	; 0x74
 800e2d8:	4607      	mov	r7, r0
 800e2da:	460d      	mov	r5, r1
 800e2dc:	4614      	mov	r4, r2
 800e2de:	d50e      	bpl.n	800e2fe <_svfiprintf_r+0x32>
 800e2e0:	690b      	ldr	r3, [r1, #16]
 800e2e2:	b963      	cbnz	r3, 800e2fe <_svfiprintf_r+0x32>
 800e2e4:	2140      	movs	r1, #64	; 0x40
 800e2e6:	f7ff fef3 	bl	800e0d0 <_malloc_r>
 800e2ea:	6028      	str	r0, [r5, #0]
 800e2ec:	6128      	str	r0, [r5, #16]
 800e2ee:	b920      	cbnz	r0, 800e2fa <_svfiprintf_r+0x2e>
 800e2f0:	230c      	movs	r3, #12
 800e2f2:	603b      	str	r3, [r7, #0]
 800e2f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e2f8:	e0d1      	b.n	800e49e <_svfiprintf_r+0x1d2>
 800e2fa:	2340      	movs	r3, #64	; 0x40
 800e2fc:	616b      	str	r3, [r5, #20]
 800e2fe:	2300      	movs	r3, #0
 800e300:	9309      	str	r3, [sp, #36]	; 0x24
 800e302:	2320      	movs	r3, #32
 800e304:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e308:	f8cd 800c 	str.w	r8, [sp, #12]
 800e30c:	2330      	movs	r3, #48	; 0x30
 800e30e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e4b8 <_svfiprintf_r+0x1ec>
 800e312:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e316:	f04f 0901 	mov.w	r9, #1
 800e31a:	4623      	mov	r3, r4
 800e31c:	469a      	mov	sl, r3
 800e31e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e322:	b10a      	cbz	r2, 800e328 <_svfiprintf_r+0x5c>
 800e324:	2a25      	cmp	r2, #37	; 0x25
 800e326:	d1f9      	bne.n	800e31c <_svfiprintf_r+0x50>
 800e328:	ebba 0b04 	subs.w	fp, sl, r4
 800e32c:	d00b      	beq.n	800e346 <_svfiprintf_r+0x7a>
 800e32e:	465b      	mov	r3, fp
 800e330:	4622      	mov	r2, r4
 800e332:	4629      	mov	r1, r5
 800e334:	4638      	mov	r0, r7
 800e336:	f7ff ff6e 	bl	800e216 <__ssputs_r>
 800e33a:	3001      	adds	r0, #1
 800e33c:	f000 80aa 	beq.w	800e494 <_svfiprintf_r+0x1c8>
 800e340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e342:	445a      	add	r2, fp
 800e344:	9209      	str	r2, [sp, #36]	; 0x24
 800e346:	f89a 3000 	ldrb.w	r3, [sl]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	f000 80a2 	beq.w	800e494 <_svfiprintf_r+0x1c8>
 800e350:	2300      	movs	r3, #0
 800e352:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e356:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e35a:	f10a 0a01 	add.w	sl, sl, #1
 800e35e:	9304      	str	r3, [sp, #16]
 800e360:	9307      	str	r3, [sp, #28]
 800e362:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e366:	931a      	str	r3, [sp, #104]	; 0x68
 800e368:	4654      	mov	r4, sl
 800e36a:	2205      	movs	r2, #5
 800e36c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e370:	4851      	ldr	r0, [pc, #324]	; (800e4b8 <_svfiprintf_r+0x1ec>)
 800e372:	f7f1 ff35 	bl	80001e0 <memchr>
 800e376:	9a04      	ldr	r2, [sp, #16]
 800e378:	b9d8      	cbnz	r0, 800e3b2 <_svfiprintf_r+0xe6>
 800e37a:	06d0      	lsls	r0, r2, #27
 800e37c:	bf44      	itt	mi
 800e37e:	2320      	movmi	r3, #32
 800e380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e384:	0711      	lsls	r1, r2, #28
 800e386:	bf44      	itt	mi
 800e388:	232b      	movmi	r3, #43	; 0x2b
 800e38a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e38e:	f89a 3000 	ldrb.w	r3, [sl]
 800e392:	2b2a      	cmp	r3, #42	; 0x2a
 800e394:	d015      	beq.n	800e3c2 <_svfiprintf_r+0xf6>
 800e396:	9a07      	ldr	r2, [sp, #28]
 800e398:	4654      	mov	r4, sl
 800e39a:	2000      	movs	r0, #0
 800e39c:	f04f 0c0a 	mov.w	ip, #10
 800e3a0:	4621      	mov	r1, r4
 800e3a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3a6:	3b30      	subs	r3, #48	; 0x30
 800e3a8:	2b09      	cmp	r3, #9
 800e3aa:	d94e      	bls.n	800e44a <_svfiprintf_r+0x17e>
 800e3ac:	b1b0      	cbz	r0, 800e3dc <_svfiprintf_r+0x110>
 800e3ae:	9207      	str	r2, [sp, #28]
 800e3b0:	e014      	b.n	800e3dc <_svfiprintf_r+0x110>
 800e3b2:	eba0 0308 	sub.w	r3, r0, r8
 800e3b6:	fa09 f303 	lsl.w	r3, r9, r3
 800e3ba:	4313      	orrs	r3, r2
 800e3bc:	9304      	str	r3, [sp, #16]
 800e3be:	46a2      	mov	sl, r4
 800e3c0:	e7d2      	b.n	800e368 <_svfiprintf_r+0x9c>
 800e3c2:	9b03      	ldr	r3, [sp, #12]
 800e3c4:	1d19      	adds	r1, r3, #4
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	9103      	str	r1, [sp, #12]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	bfbb      	ittet	lt
 800e3ce:	425b      	neglt	r3, r3
 800e3d0:	f042 0202 	orrlt.w	r2, r2, #2
 800e3d4:	9307      	strge	r3, [sp, #28]
 800e3d6:	9307      	strlt	r3, [sp, #28]
 800e3d8:	bfb8      	it	lt
 800e3da:	9204      	strlt	r2, [sp, #16]
 800e3dc:	7823      	ldrb	r3, [r4, #0]
 800e3de:	2b2e      	cmp	r3, #46	; 0x2e
 800e3e0:	d10c      	bne.n	800e3fc <_svfiprintf_r+0x130>
 800e3e2:	7863      	ldrb	r3, [r4, #1]
 800e3e4:	2b2a      	cmp	r3, #42	; 0x2a
 800e3e6:	d135      	bne.n	800e454 <_svfiprintf_r+0x188>
 800e3e8:	9b03      	ldr	r3, [sp, #12]
 800e3ea:	1d1a      	adds	r2, r3, #4
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	9203      	str	r2, [sp, #12]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	bfb8      	it	lt
 800e3f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e3f8:	3402      	adds	r4, #2
 800e3fa:	9305      	str	r3, [sp, #20]
 800e3fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e4c8 <_svfiprintf_r+0x1fc>
 800e400:	7821      	ldrb	r1, [r4, #0]
 800e402:	2203      	movs	r2, #3
 800e404:	4650      	mov	r0, sl
 800e406:	f7f1 feeb 	bl	80001e0 <memchr>
 800e40a:	b140      	cbz	r0, 800e41e <_svfiprintf_r+0x152>
 800e40c:	2340      	movs	r3, #64	; 0x40
 800e40e:	eba0 000a 	sub.w	r0, r0, sl
 800e412:	fa03 f000 	lsl.w	r0, r3, r0
 800e416:	9b04      	ldr	r3, [sp, #16]
 800e418:	4303      	orrs	r3, r0
 800e41a:	3401      	adds	r4, #1
 800e41c:	9304      	str	r3, [sp, #16]
 800e41e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e422:	4826      	ldr	r0, [pc, #152]	; (800e4bc <_svfiprintf_r+0x1f0>)
 800e424:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e428:	2206      	movs	r2, #6
 800e42a:	f7f1 fed9 	bl	80001e0 <memchr>
 800e42e:	2800      	cmp	r0, #0
 800e430:	d038      	beq.n	800e4a4 <_svfiprintf_r+0x1d8>
 800e432:	4b23      	ldr	r3, [pc, #140]	; (800e4c0 <_svfiprintf_r+0x1f4>)
 800e434:	bb1b      	cbnz	r3, 800e47e <_svfiprintf_r+0x1b2>
 800e436:	9b03      	ldr	r3, [sp, #12]
 800e438:	3307      	adds	r3, #7
 800e43a:	f023 0307 	bic.w	r3, r3, #7
 800e43e:	3308      	adds	r3, #8
 800e440:	9303      	str	r3, [sp, #12]
 800e442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e444:	4433      	add	r3, r6
 800e446:	9309      	str	r3, [sp, #36]	; 0x24
 800e448:	e767      	b.n	800e31a <_svfiprintf_r+0x4e>
 800e44a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e44e:	460c      	mov	r4, r1
 800e450:	2001      	movs	r0, #1
 800e452:	e7a5      	b.n	800e3a0 <_svfiprintf_r+0xd4>
 800e454:	2300      	movs	r3, #0
 800e456:	3401      	adds	r4, #1
 800e458:	9305      	str	r3, [sp, #20]
 800e45a:	4619      	mov	r1, r3
 800e45c:	f04f 0c0a 	mov.w	ip, #10
 800e460:	4620      	mov	r0, r4
 800e462:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e466:	3a30      	subs	r2, #48	; 0x30
 800e468:	2a09      	cmp	r2, #9
 800e46a:	d903      	bls.n	800e474 <_svfiprintf_r+0x1a8>
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d0c5      	beq.n	800e3fc <_svfiprintf_r+0x130>
 800e470:	9105      	str	r1, [sp, #20]
 800e472:	e7c3      	b.n	800e3fc <_svfiprintf_r+0x130>
 800e474:	fb0c 2101 	mla	r1, ip, r1, r2
 800e478:	4604      	mov	r4, r0
 800e47a:	2301      	movs	r3, #1
 800e47c:	e7f0      	b.n	800e460 <_svfiprintf_r+0x194>
 800e47e:	ab03      	add	r3, sp, #12
 800e480:	9300      	str	r3, [sp, #0]
 800e482:	462a      	mov	r2, r5
 800e484:	4b0f      	ldr	r3, [pc, #60]	; (800e4c4 <_svfiprintf_r+0x1f8>)
 800e486:	a904      	add	r1, sp, #16
 800e488:	4638      	mov	r0, r7
 800e48a:	f7fc f9dd 	bl	800a848 <_printf_float>
 800e48e:	1c42      	adds	r2, r0, #1
 800e490:	4606      	mov	r6, r0
 800e492:	d1d6      	bne.n	800e442 <_svfiprintf_r+0x176>
 800e494:	89ab      	ldrh	r3, [r5, #12]
 800e496:	065b      	lsls	r3, r3, #25
 800e498:	f53f af2c 	bmi.w	800e2f4 <_svfiprintf_r+0x28>
 800e49c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e49e:	b01d      	add	sp, #116	; 0x74
 800e4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4a4:	ab03      	add	r3, sp, #12
 800e4a6:	9300      	str	r3, [sp, #0]
 800e4a8:	462a      	mov	r2, r5
 800e4aa:	4b06      	ldr	r3, [pc, #24]	; (800e4c4 <_svfiprintf_r+0x1f8>)
 800e4ac:	a904      	add	r1, sp, #16
 800e4ae:	4638      	mov	r0, r7
 800e4b0:	f7fc fc6e 	bl	800ad90 <_printf_i>
 800e4b4:	e7eb      	b.n	800e48e <_svfiprintf_r+0x1c2>
 800e4b6:	bf00      	nop
 800e4b8:	0800f7b4 	.word	0x0800f7b4
 800e4bc:	0800f7be 	.word	0x0800f7be
 800e4c0:	0800a849 	.word	0x0800a849
 800e4c4:	0800e217 	.word	0x0800e217
 800e4c8:	0800f7ba 	.word	0x0800f7ba
 800e4cc:	00000000 	.word	0x00000000

0800e4d0 <nan>:
 800e4d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e4d8 <nan+0x8>
 800e4d4:	4770      	bx	lr
 800e4d6:	bf00      	nop
 800e4d8:	00000000 	.word	0x00000000
 800e4dc:	7ff80000 	.word	0x7ff80000

0800e4e0 <_sbrk_r>:
 800e4e0:	b538      	push	{r3, r4, r5, lr}
 800e4e2:	4d06      	ldr	r5, [pc, #24]	; (800e4fc <_sbrk_r+0x1c>)
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	4604      	mov	r4, r0
 800e4e8:	4608      	mov	r0, r1
 800e4ea:	602b      	str	r3, [r5, #0]
 800e4ec:	f7f6 ffda 	bl	80054a4 <_sbrk>
 800e4f0:	1c43      	adds	r3, r0, #1
 800e4f2:	d102      	bne.n	800e4fa <_sbrk_r+0x1a>
 800e4f4:	682b      	ldr	r3, [r5, #0]
 800e4f6:	b103      	cbz	r3, 800e4fa <_sbrk_r+0x1a>
 800e4f8:	6023      	str	r3, [r4, #0]
 800e4fa:	bd38      	pop	{r3, r4, r5, pc}
 800e4fc:	20000f24 	.word	0x20000f24

0800e500 <strncmp>:
 800e500:	b510      	push	{r4, lr}
 800e502:	b17a      	cbz	r2, 800e524 <strncmp+0x24>
 800e504:	4603      	mov	r3, r0
 800e506:	3901      	subs	r1, #1
 800e508:	1884      	adds	r4, r0, r2
 800e50a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e50e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e512:	4290      	cmp	r0, r2
 800e514:	d101      	bne.n	800e51a <strncmp+0x1a>
 800e516:	42a3      	cmp	r3, r4
 800e518:	d101      	bne.n	800e51e <strncmp+0x1e>
 800e51a:	1a80      	subs	r0, r0, r2
 800e51c:	bd10      	pop	{r4, pc}
 800e51e:	2800      	cmp	r0, #0
 800e520:	d1f3      	bne.n	800e50a <strncmp+0xa>
 800e522:	e7fa      	b.n	800e51a <strncmp+0x1a>
 800e524:	4610      	mov	r0, r2
 800e526:	e7f9      	b.n	800e51c <strncmp+0x1c>

0800e528 <__ascii_wctomb>:
 800e528:	b149      	cbz	r1, 800e53e <__ascii_wctomb+0x16>
 800e52a:	2aff      	cmp	r2, #255	; 0xff
 800e52c:	bf85      	ittet	hi
 800e52e:	238a      	movhi	r3, #138	; 0x8a
 800e530:	6003      	strhi	r3, [r0, #0]
 800e532:	700a      	strbls	r2, [r1, #0]
 800e534:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e538:	bf98      	it	ls
 800e53a:	2001      	movls	r0, #1
 800e53c:	4770      	bx	lr
 800e53e:	4608      	mov	r0, r1
 800e540:	4770      	bx	lr
	...

0800e544 <__assert_func>:
 800e544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e546:	4614      	mov	r4, r2
 800e548:	461a      	mov	r2, r3
 800e54a:	4b09      	ldr	r3, [pc, #36]	; (800e570 <__assert_func+0x2c>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	4605      	mov	r5, r0
 800e550:	68d8      	ldr	r0, [r3, #12]
 800e552:	b14c      	cbz	r4, 800e568 <__assert_func+0x24>
 800e554:	4b07      	ldr	r3, [pc, #28]	; (800e574 <__assert_func+0x30>)
 800e556:	9100      	str	r1, [sp, #0]
 800e558:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e55c:	4906      	ldr	r1, [pc, #24]	; (800e578 <__assert_func+0x34>)
 800e55e:	462b      	mov	r3, r5
 800e560:	f000 f80e 	bl	800e580 <fiprintf>
 800e564:	f7fc f889 	bl	800a67a <abort>
 800e568:	4b04      	ldr	r3, [pc, #16]	; (800e57c <__assert_func+0x38>)
 800e56a:	461c      	mov	r4, r3
 800e56c:	e7f3      	b.n	800e556 <__assert_func+0x12>
 800e56e:	bf00      	nop
 800e570:	20000020 	.word	0x20000020
 800e574:	0800f7c5 	.word	0x0800f7c5
 800e578:	0800f7d2 	.word	0x0800f7d2
 800e57c:	0800f800 	.word	0x0800f800

0800e580 <fiprintf>:
 800e580:	b40e      	push	{r1, r2, r3}
 800e582:	b503      	push	{r0, r1, lr}
 800e584:	4601      	mov	r1, r0
 800e586:	ab03      	add	r3, sp, #12
 800e588:	4805      	ldr	r0, [pc, #20]	; (800e5a0 <fiprintf+0x20>)
 800e58a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e58e:	6800      	ldr	r0, [r0, #0]
 800e590:	9301      	str	r3, [sp, #4]
 800e592:	f000 f85f 	bl	800e654 <_vfiprintf_r>
 800e596:	b002      	add	sp, #8
 800e598:	f85d eb04 	ldr.w	lr, [sp], #4
 800e59c:	b003      	add	sp, #12
 800e59e:	4770      	bx	lr
 800e5a0:	20000020 	.word	0x20000020

0800e5a4 <memmove>:
 800e5a4:	4288      	cmp	r0, r1
 800e5a6:	b510      	push	{r4, lr}
 800e5a8:	eb01 0402 	add.w	r4, r1, r2
 800e5ac:	d902      	bls.n	800e5b4 <memmove+0x10>
 800e5ae:	4284      	cmp	r4, r0
 800e5b0:	4623      	mov	r3, r4
 800e5b2:	d807      	bhi.n	800e5c4 <memmove+0x20>
 800e5b4:	1e43      	subs	r3, r0, #1
 800e5b6:	42a1      	cmp	r1, r4
 800e5b8:	d008      	beq.n	800e5cc <memmove+0x28>
 800e5ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e5c2:	e7f8      	b.n	800e5b6 <memmove+0x12>
 800e5c4:	4402      	add	r2, r0
 800e5c6:	4601      	mov	r1, r0
 800e5c8:	428a      	cmp	r2, r1
 800e5ca:	d100      	bne.n	800e5ce <memmove+0x2a>
 800e5cc:	bd10      	pop	{r4, pc}
 800e5ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e5d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e5d6:	e7f7      	b.n	800e5c8 <memmove+0x24>

0800e5d8 <__malloc_lock>:
 800e5d8:	4801      	ldr	r0, [pc, #4]	; (800e5e0 <__malloc_lock+0x8>)
 800e5da:	f000 bbe3 	b.w	800eda4 <__retarget_lock_acquire_recursive>
 800e5de:	bf00      	nop
 800e5e0:	20000f28 	.word	0x20000f28

0800e5e4 <__malloc_unlock>:
 800e5e4:	4801      	ldr	r0, [pc, #4]	; (800e5ec <__malloc_unlock+0x8>)
 800e5e6:	f000 bbde 	b.w	800eda6 <__retarget_lock_release_recursive>
 800e5ea:	bf00      	nop
 800e5ec:	20000f28 	.word	0x20000f28

0800e5f0 <_malloc_usable_size_r>:
 800e5f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5f4:	1f18      	subs	r0, r3, #4
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	bfbc      	itt	lt
 800e5fa:	580b      	ldrlt	r3, [r1, r0]
 800e5fc:	18c0      	addlt	r0, r0, r3
 800e5fe:	4770      	bx	lr

0800e600 <__sfputc_r>:
 800e600:	6893      	ldr	r3, [r2, #8]
 800e602:	3b01      	subs	r3, #1
 800e604:	2b00      	cmp	r3, #0
 800e606:	b410      	push	{r4}
 800e608:	6093      	str	r3, [r2, #8]
 800e60a:	da08      	bge.n	800e61e <__sfputc_r+0x1e>
 800e60c:	6994      	ldr	r4, [r2, #24]
 800e60e:	42a3      	cmp	r3, r4
 800e610:	db01      	blt.n	800e616 <__sfputc_r+0x16>
 800e612:	290a      	cmp	r1, #10
 800e614:	d103      	bne.n	800e61e <__sfputc_r+0x1e>
 800e616:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e61a:	f000 b94b 	b.w	800e8b4 <__swbuf_r>
 800e61e:	6813      	ldr	r3, [r2, #0]
 800e620:	1c58      	adds	r0, r3, #1
 800e622:	6010      	str	r0, [r2, #0]
 800e624:	7019      	strb	r1, [r3, #0]
 800e626:	4608      	mov	r0, r1
 800e628:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e62c:	4770      	bx	lr

0800e62e <__sfputs_r>:
 800e62e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e630:	4606      	mov	r6, r0
 800e632:	460f      	mov	r7, r1
 800e634:	4614      	mov	r4, r2
 800e636:	18d5      	adds	r5, r2, r3
 800e638:	42ac      	cmp	r4, r5
 800e63a:	d101      	bne.n	800e640 <__sfputs_r+0x12>
 800e63c:	2000      	movs	r0, #0
 800e63e:	e007      	b.n	800e650 <__sfputs_r+0x22>
 800e640:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e644:	463a      	mov	r2, r7
 800e646:	4630      	mov	r0, r6
 800e648:	f7ff ffda 	bl	800e600 <__sfputc_r>
 800e64c:	1c43      	adds	r3, r0, #1
 800e64e:	d1f3      	bne.n	800e638 <__sfputs_r+0xa>
 800e650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e654 <_vfiprintf_r>:
 800e654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e658:	460d      	mov	r5, r1
 800e65a:	b09d      	sub	sp, #116	; 0x74
 800e65c:	4614      	mov	r4, r2
 800e65e:	4698      	mov	r8, r3
 800e660:	4606      	mov	r6, r0
 800e662:	b118      	cbz	r0, 800e66c <_vfiprintf_r+0x18>
 800e664:	6983      	ldr	r3, [r0, #24]
 800e666:	b90b      	cbnz	r3, 800e66c <_vfiprintf_r+0x18>
 800e668:	f000 fafe 	bl	800ec68 <__sinit>
 800e66c:	4b89      	ldr	r3, [pc, #548]	; (800e894 <_vfiprintf_r+0x240>)
 800e66e:	429d      	cmp	r5, r3
 800e670:	d11b      	bne.n	800e6aa <_vfiprintf_r+0x56>
 800e672:	6875      	ldr	r5, [r6, #4]
 800e674:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e676:	07d9      	lsls	r1, r3, #31
 800e678:	d405      	bmi.n	800e686 <_vfiprintf_r+0x32>
 800e67a:	89ab      	ldrh	r3, [r5, #12]
 800e67c:	059a      	lsls	r2, r3, #22
 800e67e:	d402      	bmi.n	800e686 <_vfiprintf_r+0x32>
 800e680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e682:	f000 fb8f 	bl	800eda4 <__retarget_lock_acquire_recursive>
 800e686:	89ab      	ldrh	r3, [r5, #12]
 800e688:	071b      	lsls	r3, r3, #28
 800e68a:	d501      	bpl.n	800e690 <_vfiprintf_r+0x3c>
 800e68c:	692b      	ldr	r3, [r5, #16]
 800e68e:	b9eb      	cbnz	r3, 800e6cc <_vfiprintf_r+0x78>
 800e690:	4629      	mov	r1, r5
 800e692:	4630      	mov	r0, r6
 800e694:	f000 f960 	bl	800e958 <__swsetup_r>
 800e698:	b1c0      	cbz	r0, 800e6cc <_vfiprintf_r+0x78>
 800e69a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e69c:	07dc      	lsls	r4, r3, #31
 800e69e:	d50e      	bpl.n	800e6be <_vfiprintf_r+0x6a>
 800e6a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e6a4:	b01d      	add	sp, #116	; 0x74
 800e6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6aa:	4b7b      	ldr	r3, [pc, #492]	; (800e898 <_vfiprintf_r+0x244>)
 800e6ac:	429d      	cmp	r5, r3
 800e6ae:	d101      	bne.n	800e6b4 <_vfiprintf_r+0x60>
 800e6b0:	68b5      	ldr	r5, [r6, #8]
 800e6b2:	e7df      	b.n	800e674 <_vfiprintf_r+0x20>
 800e6b4:	4b79      	ldr	r3, [pc, #484]	; (800e89c <_vfiprintf_r+0x248>)
 800e6b6:	429d      	cmp	r5, r3
 800e6b8:	bf08      	it	eq
 800e6ba:	68f5      	ldreq	r5, [r6, #12]
 800e6bc:	e7da      	b.n	800e674 <_vfiprintf_r+0x20>
 800e6be:	89ab      	ldrh	r3, [r5, #12]
 800e6c0:	0598      	lsls	r0, r3, #22
 800e6c2:	d4ed      	bmi.n	800e6a0 <_vfiprintf_r+0x4c>
 800e6c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6c6:	f000 fb6e 	bl	800eda6 <__retarget_lock_release_recursive>
 800e6ca:	e7e9      	b.n	800e6a0 <_vfiprintf_r+0x4c>
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	9309      	str	r3, [sp, #36]	; 0x24
 800e6d0:	2320      	movs	r3, #32
 800e6d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e6d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6da:	2330      	movs	r3, #48	; 0x30
 800e6dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e8a0 <_vfiprintf_r+0x24c>
 800e6e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e6e4:	f04f 0901 	mov.w	r9, #1
 800e6e8:	4623      	mov	r3, r4
 800e6ea:	469a      	mov	sl, r3
 800e6ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6f0:	b10a      	cbz	r2, 800e6f6 <_vfiprintf_r+0xa2>
 800e6f2:	2a25      	cmp	r2, #37	; 0x25
 800e6f4:	d1f9      	bne.n	800e6ea <_vfiprintf_r+0x96>
 800e6f6:	ebba 0b04 	subs.w	fp, sl, r4
 800e6fa:	d00b      	beq.n	800e714 <_vfiprintf_r+0xc0>
 800e6fc:	465b      	mov	r3, fp
 800e6fe:	4622      	mov	r2, r4
 800e700:	4629      	mov	r1, r5
 800e702:	4630      	mov	r0, r6
 800e704:	f7ff ff93 	bl	800e62e <__sfputs_r>
 800e708:	3001      	adds	r0, #1
 800e70a:	f000 80aa 	beq.w	800e862 <_vfiprintf_r+0x20e>
 800e70e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e710:	445a      	add	r2, fp
 800e712:	9209      	str	r2, [sp, #36]	; 0x24
 800e714:	f89a 3000 	ldrb.w	r3, [sl]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	f000 80a2 	beq.w	800e862 <_vfiprintf_r+0x20e>
 800e71e:	2300      	movs	r3, #0
 800e720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e724:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e728:	f10a 0a01 	add.w	sl, sl, #1
 800e72c:	9304      	str	r3, [sp, #16]
 800e72e:	9307      	str	r3, [sp, #28]
 800e730:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e734:	931a      	str	r3, [sp, #104]	; 0x68
 800e736:	4654      	mov	r4, sl
 800e738:	2205      	movs	r2, #5
 800e73a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e73e:	4858      	ldr	r0, [pc, #352]	; (800e8a0 <_vfiprintf_r+0x24c>)
 800e740:	f7f1 fd4e 	bl	80001e0 <memchr>
 800e744:	9a04      	ldr	r2, [sp, #16]
 800e746:	b9d8      	cbnz	r0, 800e780 <_vfiprintf_r+0x12c>
 800e748:	06d1      	lsls	r1, r2, #27
 800e74a:	bf44      	itt	mi
 800e74c:	2320      	movmi	r3, #32
 800e74e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e752:	0713      	lsls	r3, r2, #28
 800e754:	bf44      	itt	mi
 800e756:	232b      	movmi	r3, #43	; 0x2b
 800e758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e75c:	f89a 3000 	ldrb.w	r3, [sl]
 800e760:	2b2a      	cmp	r3, #42	; 0x2a
 800e762:	d015      	beq.n	800e790 <_vfiprintf_r+0x13c>
 800e764:	9a07      	ldr	r2, [sp, #28]
 800e766:	4654      	mov	r4, sl
 800e768:	2000      	movs	r0, #0
 800e76a:	f04f 0c0a 	mov.w	ip, #10
 800e76e:	4621      	mov	r1, r4
 800e770:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e774:	3b30      	subs	r3, #48	; 0x30
 800e776:	2b09      	cmp	r3, #9
 800e778:	d94e      	bls.n	800e818 <_vfiprintf_r+0x1c4>
 800e77a:	b1b0      	cbz	r0, 800e7aa <_vfiprintf_r+0x156>
 800e77c:	9207      	str	r2, [sp, #28]
 800e77e:	e014      	b.n	800e7aa <_vfiprintf_r+0x156>
 800e780:	eba0 0308 	sub.w	r3, r0, r8
 800e784:	fa09 f303 	lsl.w	r3, r9, r3
 800e788:	4313      	orrs	r3, r2
 800e78a:	9304      	str	r3, [sp, #16]
 800e78c:	46a2      	mov	sl, r4
 800e78e:	e7d2      	b.n	800e736 <_vfiprintf_r+0xe2>
 800e790:	9b03      	ldr	r3, [sp, #12]
 800e792:	1d19      	adds	r1, r3, #4
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	9103      	str	r1, [sp, #12]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	bfbb      	ittet	lt
 800e79c:	425b      	neglt	r3, r3
 800e79e:	f042 0202 	orrlt.w	r2, r2, #2
 800e7a2:	9307      	strge	r3, [sp, #28]
 800e7a4:	9307      	strlt	r3, [sp, #28]
 800e7a6:	bfb8      	it	lt
 800e7a8:	9204      	strlt	r2, [sp, #16]
 800e7aa:	7823      	ldrb	r3, [r4, #0]
 800e7ac:	2b2e      	cmp	r3, #46	; 0x2e
 800e7ae:	d10c      	bne.n	800e7ca <_vfiprintf_r+0x176>
 800e7b0:	7863      	ldrb	r3, [r4, #1]
 800e7b2:	2b2a      	cmp	r3, #42	; 0x2a
 800e7b4:	d135      	bne.n	800e822 <_vfiprintf_r+0x1ce>
 800e7b6:	9b03      	ldr	r3, [sp, #12]
 800e7b8:	1d1a      	adds	r2, r3, #4
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	9203      	str	r2, [sp, #12]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	bfb8      	it	lt
 800e7c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e7c6:	3402      	adds	r4, #2
 800e7c8:	9305      	str	r3, [sp, #20]
 800e7ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e8b0 <_vfiprintf_r+0x25c>
 800e7ce:	7821      	ldrb	r1, [r4, #0]
 800e7d0:	2203      	movs	r2, #3
 800e7d2:	4650      	mov	r0, sl
 800e7d4:	f7f1 fd04 	bl	80001e0 <memchr>
 800e7d8:	b140      	cbz	r0, 800e7ec <_vfiprintf_r+0x198>
 800e7da:	2340      	movs	r3, #64	; 0x40
 800e7dc:	eba0 000a 	sub.w	r0, r0, sl
 800e7e0:	fa03 f000 	lsl.w	r0, r3, r0
 800e7e4:	9b04      	ldr	r3, [sp, #16]
 800e7e6:	4303      	orrs	r3, r0
 800e7e8:	3401      	adds	r4, #1
 800e7ea:	9304      	str	r3, [sp, #16]
 800e7ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7f0:	482c      	ldr	r0, [pc, #176]	; (800e8a4 <_vfiprintf_r+0x250>)
 800e7f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e7f6:	2206      	movs	r2, #6
 800e7f8:	f7f1 fcf2 	bl	80001e0 <memchr>
 800e7fc:	2800      	cmp	r0, #0
 800e7fe:	d03f      	beq.n	800e880 <_vfiprintf_r+0x22c>
 800e800:	4b29      	ldr	r3, [pc, #164]	; (800e8a8 <_vfiprintf_r+0x254>)
 800e802:	bb1b      	cbnz	r3, 800e84c <_vfiprintf_r+0x1f8>
 800e804:	9b03      	ldr	r3, [sp, #12]
 800e806:	3307      	adds	r3, #7
 800e808:	f023 0307 	bic.w	r3, r3, #7
 800e80c:	3308      	adds	r3, #8
 800e80e:	9303      	str	r3, [sp, #12]
 800e810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e812:	443b      	add	r3, r7
 800e814:	9309      	str	r3, [sp, #36]	; 0x24
 800e816:	e767      	b.n	800e6e8 <_vfiprintf_r+0x94>
 800e818:	fb0c 3202 	mla	r2, ip, r2, r3
 800e81c:	460c      	mov	r4, r1
 800e81e:	2001      	movs	r0, #1
 800e820:	e7a5      	b.n	800e76e <_vfiprintf_r+0x11a>
 800e822:	2300      	movs	r3, #0
 800e824:	3401      	adds	r4, #1
 800e826:	9305      	str	r3, [sp, #20]
 800e828:	4619      	mov	r1, r3
 800e82a:	f04f 0c0a 	mov.w	ip, #10
 800e82e:	4620      	mov	r0, r4
 800e830:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e834:	3a30      	subs	r2, #48	; 0x30
 800e836:	2a09      	cmp	r2, #9
 800e838:	d903      	bls.n	800e842 <_vfiprintf_r+0x1ee>
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d0c5      	beq.n	800e7ca <_vfiprintf_r+0x176>
 800e83e:	9105      	str	r1, [sp, #20]
 800e840:	e7c3      	b.n	800e7ca <_vfiprintf_r+0x176>
 800e842:	fb0c 2101 	mla	r1, ip, r1, r2
 800e846:	4604      	mov	r4, r0
 800e848:	2301      	movs	r3, #1
 800e84a:	e7f0      	b.n	800e82e <_vfiprintf_r+0x1da>
 800e84c:	ab03      	add	r3, sp, #12
 800e84e:	9300      	str	r3, [sp, #0]
 800e850:	462a      	mov	r2, r5
 800e852:	4b16      	ldr	r3, [pc, #88]	; (800e8ac <_vfiprintf_r+0x258>)
 800e854:	a904      	add	r1, sp, #16
 800e856:	4630      	mov	r0, r6
 800e858:	f7fb fff6 	bl	800a848 <_printf_float>
 800e85c:	4607      	mov	r7, r0
 800e85e:	1c78      	adds	r0, r7, #1
 800e860:	d1d6      	bne.n	800e810 <_vfiprintf_r+0x1bc>
 800e862:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e864:	07d9      	lsls	r1, r3, #31
 800e866:	d405      	bmi.n	800e874 <_vfiprintf_r+0x220>
 800e868:	89ab      	ldrh	r3, [r5, #12]
 800e86a:	059a      	lsls	r2, r3, #22
 800e86c:	d402      	bmi.n	800e874 <_vfiprintf_r+0x220>
 800e86e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e870:	f000 fa99 	bl	800eda6 <__retarget_lock_release_recursive>
 800e874:	89ab      	ldrh	r3, [r5, #12]
 800e876:	065b      	lsls	r3, r3, #25
 800e878:	f53f af12 	bmi.w	800e6a0 <_vfiprintf_r+0x4c>
 800e87c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e87e:	e711      	b.n	800e6a4 <_vfiprintf_r+0x50>
 800e880:	ab03      	add	r3, sp, #12
 800e882:	9300      	str	r3, [sp, #0]
 800e884:	462a      	mov	r2, r5
 800e886:	4b09      	ldr	r3, [pc, #36]	; (800e8ac <_vfiprintf_r+0x258>)
 800e888:	a904      	add	r1, sp, #16
 800e88a:	4630      	mov	r0, r6
 800e88c:	f7fc fa80 	bl	800ad90 <_printf_i>
 800e890:	e7e4      	b.n	800e85c <_vfiprintf_r+0x208>
 800e892:	bf00      	nop
 800e894:	0800f824 	.word	0x0800f824
 800e898:	0800f844 	.word	0x0800f844
 800e89c:	0800f804 	.word	0x0800f804
 800e8a0:	0800f7b4 	.word	0x0800f7b4
 800e8a4:	0800f7be 	.word	0x0800f7be
 800e8a8:	0800a849 	.word	0x0800a849
 800e8ac:	0800e62f 	.word	0x0800e62f
 800e8b0:	0800f7ba 	.word	0x0800f7ba

0800e8b4 <__swbuf_r>:
 800e8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8b6:	460e      	mov	r6, r1
 800e8b8:	4614      	mov	r4, r2
 800e8ba:	4605      	mov	r5, r0
 800e8bc:	b118      	cbz	r0, 800e8c6 <__swbuf_r+0x12>
 800e8be:	6983      	ldr	r3, [r0, #24]
 800e8c0:	b90b      	cbnz	r3, 800e8c6 <__swbuf_r+0x12>
 800e8c2:	f000 f9d1 	bl	800ec68 <__sinit>
 800e8c6:	4b21      	ldr	r3, [pc, #132]	; (800e94c <__swbuf_r+0x98>)
 800e8c8:	429c      	cmp	r4, r3
 800e8ca:	d12b      	bne.n	800e924 <__swbuf_r+0x70>
 800e8cc:	686c      	ldr	r4, [r5, #4]
 800e8ce:	69a3      	ldr	r3, [r4, #24]
 800e8d0:	60a3      	str	r3, [r4, #8]
 800e8d2:	89a3      	ldrh	r3, [r4, #12]
 800e8d4:	071a      	lsls	r2, r3, #28
 800e8d6:	d52f      	bpl.n	800e938 <__swbuf_r+0x84>
 800e8d8:	6923      	ldr	r3, [r4, #16]
 800e8da:	b36b      	cbz	r3, 800e938 <__swbuf_r+0x84>
 800e8dc:	6923      	ldr	r3, [r4, #16]
 800e8de:	6820      	ldr	r0, [r4, #0]
 800e8e0:	1ac0      	subs	r0, r0, r3
 800e8e2:	6963      	ldr	r3, [r4, #20]
 800e8e4:	b2f6      	uxtb	r6, r6
 800e8e6:	4283      	cmp	r3, r0
 800e8e8:	4637      	mov	r7, r6
 800e8ea:	dc04      	bgt.n	800e8f6 <__swbuf_r+0x42>
 800e8ec:	4621      	mov	r1, r4
 800e8ee:	4628      	mov	r0, r5
 800e8f0:	f000 f926 	bl	800eb40 <_fflush_r>
 800e8f4:	bb30      	cbnz	r0, 800e944 <__swbuf_r+0x90>
 800e8f6:	68a3      	ldr	r3, [r4, #8]
 800e8f8:	3b01      	subs	r3, #1
 800e8fa:	60a3      	str	r3, [r4, #8]
 800e8fc:	6823      	ldr	r3, [r4, #0]
 800e8fe:	1c5a      	adds	r2, r3, #1
 800e900:	6022      	str	r2, [r4, #0]
 800e902:	701e      	strb	r6, [r3, #0]
 800e904:	6963      	ldr	r3, [r4, #20]
 800e906:	3001      	adds	r0, #1
 800e908:	4283      	cmp	r3, r0
 800e90a:	d004      	beq.n	800e916 <__swbuf_r+0x62>
 800e90c:	89a3      	ldrh	r3, [r4, #12]
 800e90e:	07db      	lsls	r3, r3, #31
 800e910:	d506      	bpl.n	800e920 <__swbuf_r+0x6c>
 800e912:	2e0a      	cmp	r6, #10
 800e914:	d104      	bne.n	800e920 <__swbuf_r+0x6c>
 800e916:	4621      	mov	r1, r4
 800e918:	4628      	mov	r0, r5
 800e91a:	f000 f911 	bl	800eb40 <_fflush_r>
 800e91e:	b988      	cbnz	r0, 800e944 <__swbuf_r+0x90>
 800e920:	4638      	mov	r0, r7
 800e922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e924:	4b0a      	ldr	r3, [pc, #40]	; (800e950 <__swbuf_r+0x9c>)
 800e926:	429c      	cmp	r4, r3
 800e928:	d101      	bne.n	800e92e <__swbuf_r+0x7a>
 800e92a:	68ac      	ldr	r4, [r5, #8]
 800e92c:	e7cf      	b.n	800e8ce <__swbuf_r+0x1a>
 800e92e:	4b09      	ldr	r3, [pc, #36]	; (800e954 <__swbuf_r+0xa0>)
 800e930:	429c      	cmp	r4, r3
 800e932:	bf08      	it	eq
 800e934:	68ec      	ldreq	r4, [r5, #12]
 800e936:	e7ca      	b.n	800e8ce <__swbuf_r+0x1a>
 800e938:	4621      	mov	r1, r4
 800e93a:	4628      	mov	r0, r5
 800e93c:	f000 f80c 	bl	800e958 <__swsetup_r>
 800e940:	2800      	cmp	r0, #0
 800e942:	d0cb      	beq.n	800e8dc <__swbuf_r+0x28>
 800e944:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e948:	e7ea      	b.n	800e920 <__swbuf_r+0x6c>
 800e94a:	bf00      	nop
 800e94c:	0800f824 	.word	0x0800f824
 800e950:	0800f844 	.word	0x0800f844
 800e954:	0800f804 	.word	0x0800f804

0800e958 <__swsetup_r>:
 800e958:	4b32      	ldr	r3, [pc, #200]	; (800ea24 <__swsetup_r+0xcc>)
 800e95a:	b570      	push	{r4, r5, r6, lr}
 800e95c:	681d      	ldr	r5, [r3, #0]
 800e95e:	4606      	mov	r6, r0
 800e960:	460c      	mov	r4, r1
 800e962:	b125      	cbz	r5, 800e96e <__swsetup_r+0x16>
 800e964:	69ab      	ldr	r3, [r5, #24]
 800e966:	b913      	cbnz	r3, 800e96e <__swsetup_r+0x16>
 800e968:	4628      	mov	r0, r5
 800e96a:	f000 f97d 	bl	800ec68 <__sinit>
 800e96e:	4b2e      	ldr	r3, [pc, #184]	; (800ea28 <__swsetup_r+0xd0>)
 800e970:	429c      	cmp	r4, r3
 800e972:	d10f      	bne.n	800e994 <__swsetup_r+0x3c>
 800e974:	686c      	ldr	r4, [r5, #4]
 800e976:	89a3      	ldrh	r3, [r4, #12]
 800e978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e97c:	0719      	lsls	r1, r3, #28
 800e97e:	d42c      	bmi.n	800e9da <__swsetup_r+0x82>
 800e980:	06dd      	lsls	r5, r3, #27
 800e982:	d411      	bmi.n	800e9a8 <__swsetup_r+0x50>
 800e984:	2309      	movs	r3, #9
 800e986:	6033      	str	r3, [r6, #0]
 800e988:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e98c:	81a3      	strh	r3, [r4, #12]
 800e98e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e992:	e03e      	b.n	800ea12 <__swsetup_r+0xba>
 800e994:	4b25      	ldr	r3, [pc, #148]	; (800ea2c <__swsetup_r+0xd4>)
 800e996:	429c      	cmp	r4, r3
 800e998:	d101      	bne.n	800e99e <__swsetup_r+0x46>
 800e99a:	68ac      	ldr	r4, [r5, #8]
 800e99c:	e7eb      	b.n	800e976 <__swsetup_r+0x1e>
 800e99e:	4b24      	ldr	r3, [pc, #144]	; (800ea30 <__swsetup_r+0xd8>)
 800e9a0:	429c      	cmp	r4, r3
 800e9a2:	bf08      	it	eq
 800e9a4:	68ec      	ldreq	r4, [r5, #12]
 800e9a6:	e7e6      	b.n	800e976 <__swsetup_r+0x1e>
 800e9a8:	0758      	lsls	r0, r3, #29
 800e9aa:	d512      	bpl.n	800e9d2 <__swsetup_r+0x7a>
 800e9ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9ae:	b141      	cbz	r1, 800e9c2 <__swsetup_r+0x6a>
 800e9b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9b4:	4299      	cmp	r1, r3
 800e9b6:	d002      	beq.n	800e9be <__swsetup_r+0x66>
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	f7ff fb1d 	bl	800dff8 <_free_r>
 800e9be:	2300      	movs	r3, #0
 800e9c0:	6363      	str	r3, [r4, #52]	; 0x34
 800e9c2:	89a3      	ldrh	r3, [r4, #12]
 800e9c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e9c8:	81a3      	strh	r3, [r4, #12]
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	6063      	str	r3, [r4, #4]
 800e9ce:	6923      	ldr	r3, [r4, #16]
 800e9d0:	6023      	str	r3, [r4, #0]
 800e9d2:	89a3      	ldrh	r3, [r4, #12]
 800e9d4:	f043 0308 	orr.w	r3, r3, #8
 800e9d8:	81a3      	strh	r3, [r4, #12]
 800e9da:	6923      	ldr	r3, [r4, #16]
 800e9dc:	b94b      	cbnz	r3, 800e9f2 <__swsetup_r+0x9a>
 800e9de:	89a3      	ldrh	r3, [r4, #12]
 800e9e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e9e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9e8:	d003      	beq.n	800e9f2 <__swsetup_r+0x9a>
 800e9ea:	4621      	mov	r1, r4
 800e9ec:	4630      	mov	r0, r6
 800e9ee:	f000 fa01 	bl	800edf4 <__smakebuf_r>
 800e9f2:	89a0      	ldrh	r0, [r4, #12]
 800e9f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e9f8:	f010 0301 	ands.w	r3, r0, #1
 800e9fc:	d00a      	beq.n	800ea14 <__swsetup_r+0xbc>
 800e9fe:	2300      	movs	r3, #0
 800ea00:	60a3      	str	r3, [r4, #8]
 800ea02:	6963      	ldr	r3, [r4, #20]
 800ea04:	425b      	negs	r3, r3
 800ea06:	61a3      	str	r3, [r4, #24]
 800ea08:	6923      	ldr	r3, [r4, #16]
 800ea0a:	b943      	cbnz	r3, 800ea1e <__swsetup_r+0xc6>
 800ea0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ea10:	d1ba      	bne.n	800e988 <__swsetup_r+0x30>
 800ea12:	bd70      	pop	{r4, r5, r6, pc}
 800ea14:	0781      	lsls	r1, r0, #30
 800ea16:	bf58      	it	pl
 800ea18:	6963      	ldrpl	r3, [r4, #20]
 800ea1a:	60a3      	str	r3, [r4, #8]
 800ea1c:	e7f4      	b.n	800ea08 <__swsetup_r+0xb0>
 800ea1e:	2000      	movs	r0, #0
 800ea20:	e7f7      	b.n	800ea12 <__swsetup_r+0xba>
 800ea22:	bf00      	nop
 800ea24:	20000020 	.word	0x20000020
 800ea28:	0800f824 	.word	0x0800f824
 800ea2c:	0800f844 	.word	0x0800f844
 800ea30:	0800f804 	.word	0x0800f804

0800ea34 <__sflush_r>:
 800ea34:	898a      	ldrh	r2, [r1, #12]
 800ea36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea3a:	4605      	mov	r5, r0
 800ea3c:	0710      	lsls	r0, r2, #28
 800ea3e:	460c      	mov	r4, r1
 800ea40:	d458      	bmi.n	800eaf4 <__sflush_r+0xc0>
 800ea42:	684b      	ldr	r3, [r1, #4]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	dc05      	bgt.n	800ea54 <__sflush_r+0x20>
 800ea48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	dc02      	bgt.n	800ea54 <__sflush_r+0x20>
 800ea4e:	2000      	movs	r0, #0
 800ea50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea56:	2e00      	cmp	r6, #0
 800ea58:	d0f9      	beq.n	800ea4e <__sflush_r+0x1a>
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ea60:	682f      	ldr	r7, [r5, #0]
 800ea62:	602b      	str	r3, [r5, #0]
 800ea64:	d032      	beq.n	800eacc <__sflush_r+0x98>
 800ea66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ea68:	89a3      	ldrh	r3, [r4, #12]
 800ea6a:	075a      	lsls	r2, r3, #29
 800ea6c:	d505      	bpl.n	800ea7a <__sflush_r+0x46>
 800ea6e:	6863      	ldr	r3, [r4, #4]
 800ea70:	1ac0      	subs	r0, r0, r3
 800ea72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea74:	b10b      	cbz	r3, 800ea7a <__sflush_r+0x46>
 800ea76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ea78:	1ac0      	subs	r0, r0, r3
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea80:	6a21      	ldr	r1, [r4, #32]
 800ea82:	4628      	mov	r0, r5
 800ea84:	47b0      	blx	r6
 800ea86:	1c43      	adds	r3, r0, #1
 800ea88:	89a3      	ldrh	r3, [r4, #12]
 800ea8a:	d106      	bne.n	800ea9a <__sflush_r+0x66>
 800ea8c:	6829      	ldr	r1, [r5, #0]
 800ea8e:	291d      	cmp	r1, #29
 800ea90:	d82c      	bhi.n	800eaec <__sflush_r+0xb8>
 800ea92:	4a2a      	ldr	r2, [pc, #168]	; (800eb3c <__sflush_r+0x108>)
 800ea94:	40ca      	lsrs	r2, r1
 800ea96:	07d6      	lsls	r6, r2, #31
 800ea98:	d528      	bpl.n	800eaec <__sflush_r+0xb8>
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	6062      	str	r2, [r4, #4]
 800ea9e:	04d9      	lsls	r1, r3, #19
 800eaa0:	6922      	ldr	r2, [r4, #16]
 800eaa2:	6022      	str	r2, [r4, #0]
 800eaa4:	d504      	bpl.n	800eab0 <__sflush_r+0x7c>
 800eaa6:	1c42      	adds	r2, r0, #1
 800eaa8:	d101      	bne.n	800eaae <__sflush_r+0x7a>
 800eaaa:	682b      	ldr	r3, [r5, #0]
 800eaac:	b903      	cbnz	r3, 800eab0 <__sflush_r+0x7c>
 800eaae:	6560      	str	r0, [r4, #84]	; 0x54
 800eab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eab2:	602f      	str	r7, [r5, #0]
 800eab4:	2900      	cmp	r1, #0
 800eab6:	d0ca      	beq.n	800ea4e <__sflush_r+0x1a>
 800eab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eabc:	4299      	cmp	r1, r3
 800eabe:	d002      	beq.n	800eac6 <__sflush_r+0x92>
 800eac0:	4628      	mov	r0, r5
 800eac2:	f7ff fa99 	bl	800dff8 <_free_r>
 800eac6:	2000      	movs	r0, #0
 800eac8:	6360      	str	r0, [r4, #52]	; 0x34
 800eaca:	e7c1      	b.n	800ea50 <__sflush_r+0x1c>
 800eacc:	6a21      	ldr	r1, [r4, #32]
 800eace:	2301      	movs	r3, #1
 800ead0:	4628      	mov	r0, r5
 800ead2:	47b0      	blx	r6
 800ead4:	1c41      	adds	r1, r0, #1
 800ead6:	d1c7      	bne.n	800ea68 <__sflush_r+0x34>
 800ead8:	682b      	ldr	r3, [r5, #0]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d0c4      	beq.n	800ea68 <__sflush_r+0x34>
 800eade:	2b1d      	cmp	r3, #29
 800eae0:	d001      	beq.n	800eae6 <__sflush_r+0xb2>
 800eae2:	2b16      	cmp	r3, #22
 800eae4:	d101      	bne.n	800eaea <__sflush_r+0xb6>
 800eae6:	602f      	str	r7, [r5, #0]
 800eae8:	e7b1      	b.n	800ea4e <__sflush_r+0x1a>
 800eaea:	89a3      	ldrh	r3, [r4, #12]
 800eaec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eaf0:	81a3      	strh	r3, [r4, #12]
 800eaf2:	e7ad      	b.n	800ea50 <__sflush_r+0x1c>
 800eaf4:	690f      	ldr	r7, [r1, #16]
 800eaf6:	2f00      	cmp	r7, #0
 800eaf8:	d0a9      	beq.n	800ea4e <__sflush_r+0x1a>
 800eafa:	0793      	lsls	r3, r2, #30
 800eafc:	680e      	ldr	r6, [r1, #0]
 800eafe:	bf08      	it	eq
 800eb00:	694b      	ldreq	r3, [r1, #20]
 800eb02:	600f      	str	r7, [r1, #0]
 800eb04:	bf18      	it	ne
 800eb06:	2300      	movne	r3, #0
 800eb08:	eba6 0807 	sub.w	r8, r6, r7
 800eb0c:	608b      	str	r3, [r1, #8]
 800eb0e:	f1b8 0f00 	cmp.w	r8, #0
 800eb12:	dd9c      	ble.n	800ea4e <__sflush_r+0x1a>
 800eb14:	6a21      	ldr	r1, [r4, #32]
 800eb16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eb18:	4643      	mov	r3, r8
 800eb1a:	463a      	mov	r2, r7
 800eb1c:	4628      	mov	r0, r5
 800eb1e:	47b0      	blx	r6
 800eb20:	2800      	cmp	r0, #0
 800eb22:	dc06      	bgt.n	800eb32 <__sflush_r+0xfe>
 800eb24:	89a3      	ldrh	r3, [r4, #12]
 800eb26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb2a:	81a3      	strh	r3, [r4, #12]
 800eb2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb30:	e78e      	b.n	800ea50 <__sflush_r+0x1c>
 800eb32:	4407      	add	r7, r0
 800eb34:	eba8 0800 	sub.w	r8, r8, r0
 800eb38:	e7e9      	b.n	800eb0e <__sflush_r+0xda>
 800eb3a:	bf00      	nop
 800eb3c:	20400001 	.word	0x20400001

0800eb40 <_fflush_r>:
 800eb40:	b538      	push	{r3, r4, r5, lr}
 800eb42:	690b      	ldr	r3, [r1, #16]
 800eb44:	4605      	mov	r5, r0
 800eb46:	460c      	mov	r4, r1
 800eb48:	b913      	cbnz	r3, 800eb50 <_fflush_r+0x10>
 800eb4a:	2500      	movs	r5, #0
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	bd38      	pop	{r3, r4, r5, pc}
 800eb50:	b118      	cbz	r0, 800eb5a <_fflush_r+0x1a>
 800eb52:	6983      	ldr	r3, [r0, #24]
 800eb54:	b90b      	cbnz	r3, 800eb5a <_fflush_r+0x1a>
 800eb56:	f000 f887 	bl	800ec68 <__sinit>
 800eb5a:	4b14      	ldr	r3, [pc, #80]	; (800ebac <_fflush_r+0x6c>)
 800eb5c:	429c      	cmp	r4, r3
 800eb5e:	d11b      	bne.n	800eb98 <_fflush_r+0x58>
 800eb60:	686c      	ldr	r4, [r5, #4]
 800eb62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d0ef      	beq.n	800eb4a <_fflush_r+0xa>
 800eb6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eb6c:	07d0      	lsls	r0, r2, #31
 800eb6e:	d404      	bmi.n	800eb7a <_fflush_r+0x3a>
 800eb70:	0599      	lsls	r1, r3, #22
 800eb72:	d402      	bmi.n	800eb7a <_fflush_r+0x3a>
 800eb74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb76:	f000 f915 	bl	800eda4 <__retarget_lock_acquire_recursive>
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	4621      	mov	r1, r4
 800eb7e:	f7ff ff59 	bl	800ea34 <__sflush_r>
 800eb82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb84:	07da      	lsls	r2, r3, #31
 800eb86:	4605      	mov	r5, r0
 800eb88:	d4e0      	bmi.n	800eb4c <_fflush_r+0xc>
 800eb8a:	89a3      	ldrh	r3, [r4, #12]
 800eb8c:	059b      	lsls	r3, r3, #22
 800eb8e:	d4dd      	bmi.n	800eb4c <_fflush_r+0xc>
 800eb90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb92:	f000 f908 	bl	800eda6 <__retarget_lock_release_recursive>
 800eb96:	e7d9      	b.n	800eb4c <_fflush_r+0xc>
 800eb98:	4b05      	ldr	r3, [pc, #20]	; (800ebb0 <_fflush_r+0x70>)
 800eb9a:	429c      	cmp	r4, r3
 800eb9c:	d101      	bne.n	800eba2 <_fflush_r+0x62>
 800eb9e:	68ac      	ldr	r4, [r5, #8]
 800eba0:	e7df      	b.n	800eb62 <_fflush_r+0x22>
 800eba2:	4b04      	ldr	r3, [pc, #16]	; (800ebb4 <_fflush_r+0x74>)
 800eba4:	429c      	cmp	r4, r3
 800eba6:	bf08      	it	eq
 800eba8:	68ec      	ldreq	r4, [r5, #12]
 800ebaa:	e7da      	b.n	800eb62 <_fflush_r+0x22>
 800ebac:	0800f824 	.word	0x0800f824
 800ebb0:	0800f844 	.word	0x0800f844
 800ebb4:	0800f804 	.word	0x0800f804

0800ebb8 <std>:
 800ebb8:	2300      	movs	r3, #0
 800ebba:	b510      	push	{r4, lr}
 800ebbc:	4604      	mov	r4, r0
 800ebbe:	e9c0 3300 	strd	r3, r3, [r0]
 800ebc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ebc6:	6083      	str	r3, [r0, #8]
 800ebc8:	8181      	strh	r1, [r0, #12]
 800ebca:	6643      	str	r3, [r0, #100]	; 0x64
 800ebcc:	81c2      	strh	r2, [r0, #14]
 800ebce:	6183      	str	r3, [r0, #24]
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	2208      	movs	r2, #8
 800ebd4:	305c      	adds	r0, #92	; 0x5c
 800ebd6:	f7fb fd8f 	bl	800a6f8 <memset>
 800ebda:	4b05      	ldr	r3, [pc, #20]	; (800ebf0 <std+0x38>)
 800ebdc:	6263      	str	r3, [r4, #36]	; 0x24
 800ebde:	4b05      	ldr	r3, [pc, #20]	; (800ebf4 <std+0x3c>)
 800ebe0:	62a3      	str	r3, [r4, #40]	; 0x28
 800ebe2:	4b05      	ldr	r3, [pc, #20]	; (800ebf8 <std+0x40>)
 800ebe4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ebe6:	4b05      	ldr	r3, [pc, #20]	; (800ebfc <std+0x44>)
 800ebe8:	6224      	str	r4, [r4, #32]
 800ebea:	6323      	str	r3, [r4, #48]	; 0x30
 800ebec:	bd10      	pop	{r4, pc}
 800ebee:	bf00      	nop
 800ebf0:	0800ee75 	.word	0x0800ee75
 800ebf4:	0800ee97 	.word	0x0800ee97
 800ebf8:	0800eecf 	.word	0x0800eecf
 800ebfc:	0800eef3 	.word	0x0800eef3

0800ec00 <_cleanup_r>:
 800ec00:	4901      	ldr	r1, [pc, #4]	; (800ec08 <_cleanup_r+0x8>)
 800ec02:	f000 b8af 	b.w	800ed64 <_fwalk_reent>
 800ec06:	bf00      	nop
 800ec08:	0800eb41 	.word	0x0800eb41

0800ec0c <__sfmoreglue>:
 800ec0c:	b570      	push	{r4, r5, r6, lr}
 800ec0e:	2268      	movs	r2, #104	; 0x68
 800ec10:	1e4d      	subs	r5, r1, #1
 800ec12:	4355      	muls	r5, r2
 800ec14:	460e      	mov	r6, r1
 800ec16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ec1a:	f7ff fa59 	bl	800e0d0 <_malloc_r>
 800ec1e:	4604      	mov	r4, r0
 800ec20:	b140      	cbz	r0, 800ec34 <__sfmoreglue+0x28>
 800ec22:	2100      	movs	r1, #0
 800ec24:	e9c0 1600 	strd	r1, r6, [r0]
 800ec28:	300c      	adds	r0, #12
 800ec2a:	60a0      	str	r0, [r4, #8]
 800ec2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ec30:	f7fb fd62 	bl	800a6f8 <memset>
 800ec34:	4620      	mov	r0, r4
 800ec36:	bd70      	pop	{r4, r5, r6, pc}

0800ec38 <__sfp_lock_acquire>:
 800ec38:	4801      	ldr	r0, [pc, #4]	; (800ec40 <__sfp_lock_acquire+0x8>)
 800ec3a:	f000 b8b3 	b.w	800eda4 <__retarget_lock_acquire_recursive>
 800ec3e:	bf00      	nop
 800ec40:	20000f29 	.word	0x20000f29

0800ec44 <__sfp_lock_release>:
 800ec44:	4801      	ldr	r0, [pc, #4]	; (800ec4c <__sfp_lock_release+0x8>)
 800ec46:	f000 b8ae 	b.w	800eda6 <__retarget_lock_release_recursive>
 800ec4a:	bf00      	nop
 800ec4c:	20000f29 	.word	0x20000f29

0800ec50 <__sinit_lock_acquire>:
 800ec50:	4801      	ldr	r0, [pc, #4]	; (800ec58 <__sinit_lock_acquire+0x8>)
 800ec52:	f000 b8a7 	b.w	800eda4 <__retarget_lock_acquire_recursive>
 800ec56:	bf00      	nop
 800ec58:	20000f2a 	.word	0x20000f2a

0800ec5c <__sinit_lock_release>:
 800ec5c:	4801      	ldr	r0, [pc, #4]	; (800ec64 <__sinit_lock_release+0x8>)
 800ec5e:	f000 b8a2 	b.w	800eda6 <__retarget_lock_release_recursive>
 800ec62:	bf00      	nop
 800ec64:	20000f2a 	.word	0x20000f2a

0800ec68 <__sinit>:
 800ec68:	b510      	push	{r4, lr}
 800ec6a:	4604      	mov	r4, r0
 800ec6c:	f7ff fff0 	bl	800ec50 <__sinit_lock_acquire>
 800ec70:	69a3      	ldr	r3, [r4, #24]
 800ec72:	b11b      	cbz	r3, 800ec7c <__sinit+0x14>
 800ec74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec78:	f7ff bff0 	b.w	800ec5c <__sinit_lock_release>
 800ec7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ec80:	6523      	str	r3, [r4, #80]	; 0x50
 800ec82:	4b13      	ldr	r3, [pc, #76]	; (800ecd0 <__sinit+0x68>)
 800ec84:	4a13      	ldr	r2, [pc, #76]	; (800ecd4 <__sinit+0x6c>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	62a2      	str	r2, [r4, #40]	; 0x28
 800ec8a:	42a3      	cmp	r3, r4
 800ec8c:	bf04      	itt	eq
 800ec8e:	2301      	moveq	r3, #1
 800ec90:	61a3      	streq	r3, [r4, #24]
 800ec92:	4620      	mov	r0, r4
 800ec94:	f000 f820 	bl	800ecd8 <__sfp>
 800ec98:	6060      	str	r0, [r4, #4]
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	f000 f81c 	bl	800ecd8 <__sfp>
 800eca0:	60a0      	str	r0, [r4, #8]
 800eca2:	4620      	mov	r0, r4
 800eca4:	f000 f818 	bl	800ecd8 <__sfp>
 800eca8:	2200      	movs	r2, #0
 800ecaa:	60e0      	str	r0, [r4, #12]
 800ecac:	2104      	movs	r1, #4
 800ecae:	6860      	ldr	r0, [r4, #4]
 800ecb0:	f7ff ff82 	bl	800ebb8 <std>
 800ecb4:	68a0      	ldr	r0, [r4, #8]
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	2109      	movs	r1, #9
 800ecba:	f7ff ff7d 	bl	800ebb8 <std>
 800ecbe:	68e0      	ldr	r0, [r4, #12]
 800ecc0:	2202      	movs	r2, #2
 800ecc2:	2112      	movs	r1, #18
 800ecc4:	f7ff ff78 	bl	800ebb8 <std>
 800ecc8:	2301      	movs	r3, #1
 800ecca:	61a3      	str	r3, [r4, #24]
 800eccc:	e7d2      	b.n	800ec74 <__sinit+0xc>
 800ecce:	bf00      	nop
 800ecd0:	0800f3bc 	.word	0x0800f3bc
 800ecd4:	0800ec01 	.word	0x0800ec01

0800ecd8 <__sfp>:
 800ecd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecda:	4607      	mov	r7, r0
 800ecdc:	f7ff ffac 	bl	800ec38 <__sfp_lock_acquire>
 800ece0:	4b1e      	ldr	r3, [pc, #120]	; (800ed5c <__sfp+0x84>)
 800ece2:	681e      	ldr	r6, [r3, #0]
 800ece4:	69b3      	ldr	r3, [r6, #24]
 800ece6:	b913      	cbnz	r3, 800ecee <__sfp+0x16>
 800ece8:	4630      	mov	r0, r6
 800ecea:	f7ff ffbd 	bl	800ec68 <__sinit>
 800ecee:	3648      	adds	r6, #72	; 0x48
 800ecf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ecf4:	3b01      	subs	r3, #1
 800ecf6:	d503      	bpl.n	800ed00 <__sfp+0x28>
 800ecf8:	6833      	ldr	r3, [r6, #0]
 800ecfa:	b30b      	cbz	r3, 800ed40 <__sfp+0x68>
 800ecfc:	6836      	ldr	r6, [r6, #0]
 800ecfe:	e7f7      	b.n	800ecf0 <__sfp+0x18>
 800ed00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ed04:	b9d5      	cbnz	r5, 800ed3c <__sfp+0x64>
 800ed06:	4b16      	ldr	r3, [pc, #88]	; (800ed60 <__sfp+0x88>)
 800ed08:	60e3      	str	r3, [r4, #12]
 800ed0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ed0e:	6665      	str	r5, [r4, #100]	; 0x64
 800ed10:	f000 f847 	bl	800eda2 <__retarget_lock_init_recursive>
 800ed14:	f7ff ff96 	bl	800ec44 <__sfp_lock_release>
 800ed18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ed1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ed20:	6025      	str	r5, [r4, #0]
 800ed22:	61a5      	str	r5, [r4, #24]
 800ed24:	2208      	movs	r2, #8
 800ed26:	4629      	mov	r1, r5
 800ed28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ed2c:	f7fb fce4 	bl	800a6f8 <memset>
 800ed30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ed34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ed38:	4620      	mov	r0, r4
 800ed3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed3c:	3468      	adds	r4, #104	; 0x68
 800ed3e:	e7d9      	b.n	800ecf4 <__sfp+0x1c>
 800ed40:	2104      	movs	r1, #4
 800ed42:	4638      	mov	r0, r7
 800ed44:	f7ff ff62 	bl	800ec0c <__sfmoreglue>
 800ed48:	4604      	mov	r4, r0
 800ed4a:	6030      	str	r0, [r6, #0]
 800ed4c:	2800      	cmp	r0, #0
 800ed4e:	d1d5      	bne.n	800ecfc <__sfp+0x24>
 800ed50:	f7ff ff78 	bl	800ec44 <__sfp_lock_release>
 800ed54:	230c      	movs	r3, #12
 800ed56:	603b      	str	r3, [r7, #0]
 800ed58:	e7ee      	b.n	800ed38 <__sfp+0x60>
 800ed5a:	bf00      	nop
 800ed5c:	0800f3bc 	.word	0x0800f3bc
 800ed60:	ffff0001 	.word	0xffff0001

0800ed64 <_fwalk_reent>:
 800ed64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed68:	4606      	mov	r6, r0
 800ed6a:	4688      	mov	r8, r1
 800ed6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ed70:	2700      	movs	r7, #0
 800ed72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed76:	f1b9 0901 	subs.w	r9, r9, #1
 800ed7a:	d505      	bpl.n	800ed88 <_fwalk_reent+0x24>
 800ed7c:	6824      	ldr	r4, [r4, #0]
 800ed7e:	2c00      	cmp	r4, #0
 800ed80:	d1f7      	bne.n	800ed72 <_fwalk_reent+0xe>
 800ed82:	4638      	mov	r0, r7
 800ed84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed88:	89ab      	ldrh	r3, [r5, #12]
 800ed8a:	2b01      	cmp	r3, #1
 800ed8c:	d907      	bls.n	800ed9e <_fwalk_reent+0x3a>
 800ed8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed92:	3301      	adds	r3, #1
 800ed94:	d003      	beq.n	800ed9e <_fwalk_reent+0x3a>
 800ed96:	4629      	mov	r1, r5
 800ed98:	4630      	mov	r0, r6
 800ed9a:	47c0      	blx	r8
 800ed9c:	4307      	orrs	r7, r0
 800ed9e:	3568      	adds	r5, #104	; 0x68
 800eda0:	e7e9      	b.n	800ed76 <_fwalk_reent+0x12>

0800eda2 <__retarget_lock_init_recursive>:
 800eda2:	4770      	bx	lr

0800eda4 <__retarget_lock_acquire_recursive>:
 800eda4:	4770      	bx	lr

0800eda6 <__retarget_lock_release_recursive>:
 800eda6:	4770      	bx	lr

0800eda8 <__swhatbuf_r>:
 800eda8:	b570      	push	{r4, r5, r6, lr}
 800edaa:	460e      	mov	r6, r1
 800edac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edb0:	2900      	cmp	r1, #0
 800edb2:	b096      	sub	sp, #88	; 0x58
 800edb4:	4614      	mov	r4, r2
 800edb6:	461d      	mov	r5, r3
 800edb8:	da08      	bge.n	800edcc <__swhatbuf_r+0x24>
 800edba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800edbe:	2200      	movs	r2, #0
 800edc0:	602a      	str	r2, [r5, #0]
 800edc2:	061a      	lsls	r2, r3, #24
 800edc4:	d410      	bmi.n	800ede8 <__swhatbuf_r+0x40>
 800edc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800edca:	e00e      	b.n	800edea <__swhatbuf_r+0x42>
 800edcc:	466a      	mov	r2, sp
 800edce:	f000 f8b7 	bl	800ef40 <_fstat_r>
 800edd2:	2800      	cmp	r0, #0
 800edd4:	dbf1      	blt.n	800edba <__swhatbuf_r+0x12>
 800edd6:	9a01      	ldr	r2, [sp, #4]
 800edd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eddc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ede0:	425a      	negs	r2, r3
 800ede2:	415a      	adcs	r2, r3
 800ede4:	602a      	str	r2, [r5, #0]
 800ede6:	e7ee      	b.n	800edc6 <__swhatbuf_r+0x1e>
 800ede8:	2340      	movs	r3, #64	; 0x40
 800edea:	2000      	movs	r0, #0
 800edec:	6023      	str	r3, [r4, #0]
 800edee:	b016      	add	sp, #88	; 0x58
 800edf0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800edf4 <__smakebuf_r>:
 800edf4:	898b      	ldrh	r3, [r1, #12]
 800edf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800edf8:	079d      	lsls	r5, r3, #30
 800edfa:	4606      	mov	r6, r0
 800edfc:	460c      	mov	r4, r1
 800edfe:	d507      	bpl.n	800ee10 <__smakebuf_r+0x1c>
 800ee00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ee04:	6023      	str	r3, [r4, #0]
 800ee06:	6123      	str	r3, [r4, #16]
 800ee08:	2301      	movs	r3, #1
 800ee0a:	6163      	str	r3, [r4, #20]
 800ee0c:	b002      	add	sp, #8
 800ee0e:	bd70      	pop	{r4, r5, r6, pc}
 800ee10:	ab01      	add	r3, sp, #4
 800ee12:	466a      	mov	r2, sp
 800ee14:	f7ff ffc8 	bl	800eda8 <__swhatbuf_r>
 800ee18:	9900      	ldr	r1, [sp, #0]
 800ee1a:	4605      	mov	r5, r0
 800ee1c:	4630      	mov	r0, r6
 800ee1e:	f7ff f957 	bl	800e0d0 <_malloc_r>
 800ee22:	b948      	cbnz	r0, 800ee38 <__smakebuf_r+0x44>
 800ee24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee28:	059a      	lsls	r2, r3, #22
 800ee2a:	d4ef      	bmi.n	800ee0c <__smakebuf_r+0x18>
 800ee2c:	f023 0303 	bic.w	r3, r3, #3
 800ee30:	f043 0302 	orr.w	r3, r3, #2
 800ee34:	81a3      	strh	r3, [r4, #12]
 800ee36:	e7e3      	b.n	800ee00 <__smakebuf_r+0xc>
 800ee38:	4b0d      	ldr	r3, [pc, #52]	; (800ee70 <__smakebuf_r+0x7c>)
 800ee3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ee3c:	89a3      	ldrh	r3, [r4, #12]
 800ee3e:	6020      	str	r0, [r4, #0]
 800ee40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee44:	81a3      	strh	r3, [r4, #12]
 800ee46:	9b00      	ldr	r3, [sp, #0]
 800ee48:	6163      	str	r3, [r4, #20]
 800ee4a:	9b01      	ldr	r3, [sp, #4]
 800ee4c:	6120      	str	r0, [r4, #16]
 800ee4e:	b15b      	cbz	r3, 800ee68 <__smakebuf_r+0x74>
 800ee50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee54:	4630      	mov	r0, r6
 800ee56:	f000 f885 	bl	800ef64 <_isatty_r>
 800ee5a:	b128      	cbz	r0, 800ee68 <__smakebuf_r+0x74>
 800ee5c:	89a3      	ldrh	r3, [r4, #12]
 800ee5e:	f023 0303 	bic.w	r3, r3, #3
 800ee62:	f043 0301 	orr.w	r3, r3, #1
 800ee66:	81a3      	strh	r3, [r4, #12]
 800ee68:	89a0      	ldrh	r0, [r4, #12]
 800ee6a:	4305      	orrs	r5, r0
 800ee6c:	81a5      	strh	r5, [r4, #12]
 800ee6e:	e7cd      	b.n	800ee0c <__smakebuf_r+0x18>
 800ee70:	0800ec01 	.word	0x0800ec01

0800ee74 <__sread>:
 800ee74:	b510      	push	{r4, lr}
 800ee76:	460c      	mov	r4, r1
 800ee78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee7c:	f000 f894 	bl	800efa8 <_read_r>
 800ee80:	2800      	cmp	r0, #0
 800ee82:	bfab      	itete	ge
 800ee84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee86:	89a3      	ldrhlt	r3, [r4, #12]
 800ee88:	181b      	addge	r3, r3, r0
 800ee8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee8e:	bfac      	ite	ge
 800ee90:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee92:	81a3      	strhlt	r3, [r4, #12]
 800ee94:	bd10      	pop	{r4, pc}

0800ee96 <__swrite>:
 800ee96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee9a:	461f      	mov	r7, r3
 800ee9c:	898b      	ldrh	r3, [r1, #12]
 800ee9e:	05db      	lsls	r3, r3, #23
 800eea0:	4605      	mov	r5, r0
 800eea2:	460c      	mov	r4, r1
 800eea4:	4616      	mov	r6, r2
 800eea6:	d505      	bpl.n	800eeb4 <__swrite+0x1e>
 800eea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeac:	2302      	movs	r3, #2
 800eeae:	2200      	movs	r2, #0
 800eeb0:	f000 f868 	bl	800ef84 <_lseek_r>
 800eeb4:	89a3      	ldrh	r3, [r4, #12]
 800eeb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eeba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eebe:	81a3      	strh	r3, [r4, #12]
 800eec0:	4632      	mov	r2, r6
 800eec2:	463b      	mov	r3, r7
 800eec4:	4628      	mov	r0, r5
 800eec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eeca:	f000 b817 	b.w	800eefc <_write_r>

0800eece <__sseek>:
 800eece:	b510      	push	{r4, lr}
 800eed0:	460c      	mov	r4, r1
 800eed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eed6:	f000 f855 	bl	800ef84 <_lseek_r>
 800eeda:	1c43      	adds	r3, r0, #1
 800eedc:	89a3      	ldrh	r3, [r4, #12]
 800eede:	bf15      	itete	ne
 800eee0:	6560      	strne	r0, [r4, #84]	; 0x54
 800eee2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eee6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eeea:	81a3      	strheq	r3, [r4, #12]
 800eeec:	bf18      	it	ne
 800eeee:	81a3      	strhne	r3, [r4, #12]
 800eef0:	bd10      	pop	{r4, pc}

0800eef2 <__sclose>:
 800eef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eef6:	f000 b813 	b.w	800ef20 <_close_r>
	...

0800eefc <_write_r>:
 800eefc:	b538      	push	{r3, r4, r5, lr}
 800eefe:	4d07      	ldr	r5, [pc, #28]	; (800ef1c <_write_r+0x20>)
 800ef00:	4604      	mov	r4, r0
 800ef02:	4608      	mov	r0, r1
 800ef04:	4611      	mov	r1, r2
 800ef06:	2200      	movs	r2, #0
 800ef08:	602a      	str	r2, [r5, #0]
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	f7f6 fa79 	bl	8005402 <_write>
 800ef10:	1c43      	adds	r3, r0, #1
 800ef12:	d102      	bne.n	800ef1a <_write_r+0x1e>
 800ef14:	682b      	ldr	r3, [r5, #0]
 800ef16:	b103      	cbz	r3, 800ef1a <_write_r+0x1e>
 800ef18:	6023      	str	r3, [r4, #0]
 800ef1a:	bd38      	pop	{r3, r4, r5, pc}
 800ef1c:	20000f24 	.word	0x20000f24

0800ef20 <_close_r>:
 800ef20:	b538      	push	{r3, r4, r5, lr}
 800ef22:	4d06      	ldr	r5, [pc, #24]	; (800ef3c <_close_r+0x1c>)
 800ef24:	2300      	movs	r3, #0
 800ef26:	4604      	mov	r4, r0
 800ef28:	4608      	mov	r0, r1
 800ef2a:	602b      	str	r3, [r5, #0]
 800ef2c:	f7f6 fa85 	bl	800543a <_close>
 800ef30:	1c43      	adds	r3, r0, #1
 800ef32:	d102      	bne.n	800ef3a <_close_r+0x1a>
 800ef34:	682b      	ldr	r3, [r5, #0]
 800ef36:	b103      	cbz	r3, 800ef3a <_close_r+0x1a>
 800ef38:	6023      	str	r3, [r4, #0]
 800ef3a:	bd38      	pop	{r3, r4, r5, pc}
 800ef3c:	20000f24 	.word	0x20000f24

0800ef40 <_fstat_r>:
 800ef40:	b538      	push	{r3, r4, r5, lr}
 800ef42:	4d07      	ldr	r5, [pc, #28]	; (800ef60 <_fstat_r+0x20>)
 800ef44:	2300      	movs	r3, #0
 800ef46:	4604      	mov	r4, r0
 800ef48:	4608      	mov	r0, r1
 800ef4a:	4611      	mov	r1, r2
 800ef4c:	602b      	str	r3, [r5, #0]
 800ef4e:	f7f6 fa80 	bl	8005452 <_fstat>
 800ef52:	1c43      	adds	r3, r0, #1
 800ef54:	d102      	bne.n	800ef5c <_fstat_r+0x1c>
 800ef56:	682b      	ldr	r3, [r5, #0]
 800ef58:	b103      	cbz	r3, 800ef5c <_fstat_r+0x1c>
 800ef5a:	6023      	str	r3, [r4, #0]
 800ef5c:	bd38      	pop	{r3, r4, r5, pc}
 800ef5e:	bf00      	nop
 800ef60:	20000f24 	.word	0x20000f24

0800ef64 <_isatty_r>:
 800ef64:	b538      	push	{r3, r4, r5, lr}
 800ef66:	4d06      	ldr	r5, [pc, #24]	; (800ef80 <_isatty_r+0x1c>)
 800ef68:	2300      	movs	r3, #0
 800ef6a:	4604      	mov	r4, r0
 800ef6c:	4608      	mov	r0, r1
 800ef6e:	602b      	str	r3, [r5, #0]
 800ef70:	f7f6 fa7f 	bl	8005472 <_isatty>
 800ef74:	1c43      	adds	r3, r0, #1
 800ef76:	d102      	bne.n	800ef7e <_isatty_r+0x1a>
 800ef78:	682b      	ldr	r3, [r5, #0]
 800ef7a:	b103      	cbz	r3, 800ef7e <_isatty_r+0x1a>
 800ef7c:	6023      	str	r3, [r4, #0]
 800ef7e:	bd38      	pop	{r3, r4, r5, pc}
 800ef80:	20000f24 	.word	0x20000f24

0800ef84 <_lseek_r>:
 800ef84:	b538      	push	{r3, r4, r5, lr}
 800ef86:	4d07      	ldr	r5, [pc, #28]	; (800efa4 <_lseek_r+0x20>)
 800ef88:	4604      	mov	r4, r0
 800ef8a:	4608      	mov	r0, r1
 800ef8c:	4611      	mov	r1, r2
 800ef8e:	2200      	movs	r2, #0
 800ef90:	602a      	str	r2, [r5, #0]
 800ef92:	461a      	mov	r2, r3
 800ef94:	f7f6 fa78 	bl	8005488 <_lseek>
 800ef98:	1c43      	adds	r3, r0, #1
 800ef9a:	d102      	bne.n	800efa2 <_lseek_r+0x1e>
 800ef9c:	682b      	ldr	r3, [r5, #0]
 800ef9e:	b103      	cbz	r3, 800efa2 <_lseek_r+0x1e>
 800efa0:	6023      	str	r3, [r4, #0]
 800efa2:	bd38      	pop	{r3, r4, r5, pc}
 800efa4:	20000f24 	.word	0x20000f24

0800efa8 <_read_r>:
 800efa8:	b538      	push	{r3, r4, r5, lr}
 800efaa:	4d07      	ldr	r5, [pc, #28]	; (800efc8 <_read_r+0x20>)
 800efac:	4604      	mov	r4, r0
 800efae:	4608      	mov	r0, r1
 800efb0:	4611      	mov	r1, r2
 800efb2:	2200      	movs	r2, #0
 800efb4:	602a      	str	r2, [r5, #0]
 800efb6:	461a      	mov	r2, r3
 800efb8:	f7f6 fa06 	bl	80053c8 <_read>
 800efbc:	1c43      	adds	r3, r0, #1
 800efbe:	d102      	bne.n	800efc6 <_read_r+0x1e>
 800efc0:	682b      	ldr	r3, [r5, #0]
 800efc2:	b103      	cbz	r3, 800efc6 <_read_r+0x1e>
 800efc4:	6023      	str	r3, [r4, #0]
 800efc6:	bd38      	pop	{r3, r4, r5, pc}
 800efc8:	20000f24 	.word	0x20000f24

0800efcc <_init>:
 800efcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efce:	bf00      	nop
 800efd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efd2:	bc08      	pop	{r3}
 800efd4:	469e      	mov	lr, r3
 800efd6:	4770      	bx	lr

0800efd8 <_fini>:
 800efd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efda:	bf00      	nop
 800efdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efde:	bc08      	pop	{r3}
 800efe0:	469e      	mov	lr, r3
 800efe2:	4770      	bx	lr
