
Capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000087c  0800f288  0800f288  0001f288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb04  0800fb04  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb04  0800fb04  0001fb04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb0c  0800fb0c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800fb0c  0800fb0c  0001fb0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb1c  0800fb1c  0001fb1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800fb20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 10 .bss          00000da8  200001f8  200001f8  000201f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000fa0  20000fa0  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f30a  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034e4  00000000  00000000  0003f532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  00042a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012d8  00000000  00000000  00043dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e32  00000000  00000000  000450a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000179e0  00000000  00000000  0006aed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7376  00000000  00000000  000828b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00159c28  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006bf0  00000000  00000000  00159c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f26c 	.word	0x0800f26c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800f26c 	.word	0x0800f26c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>:

// Create Serial Buffer with UART2:
BufferedSerial buff_serial(huart2);

// Constructor:
BufferedSerial::BufferedSerial(UART_HandleTypeDef &huart_)
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  : huart(huart_) {}
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001026:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <_ZN14BufferedSerial4initEv>:

// Init:
void BufferedSerial::init(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  reset_rx_buffer();
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 f91f 	bl	8001284 <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <_ZN14BufferedSerial4readEv>:

// Read new char in RX buffer:
int BufferedSerial::read(void) {
 800104e:	b480      	push	{r7}
 8001050:	b085      	sub	sp, #20
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  // Get DMA head:
  uint16_t dma_head = (RX_BUF_SIZE - huart.hdmarx->Instance->NDTR) & rx_buf_mask;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	b29b      	uxth	r3, r3
 8001062:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001066:	b29b      	uxth	r3, r3
 8001068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800106c:	81fb      	strh	r3, [r7, #14]

  // Quit if no new character:
  if (dma_head == rx_tail) return -1;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001074:	89fa      	ldrh	r2, [r7, #14]
 8001076:	429a      	cmp	r2, r3
 8001078:	d102      	bne.n	8001080 <_ZN14BufferedSerial4readEv+0x32>
 800107a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800107e:	e016      	b.n	80010ae <_ZN14BufferedSerial4readEv+0x60>

  // Get next char in buffer:
  int c = (int) rx_buf[rx_tail++];
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	b291      	uxth	r1, r2
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8001090:	461a      	mov	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	791b      	ldrb	r3, [r3, #4]
 8001098:	60bb      	str	r3, [r7, #8]

  // Wrap around if rx_tail > RX_BUF_SIZE:
  rx_tail &= rx_buf_mask;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80010a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404

  return c;
 80010ac:	68bb      	ldr	r3, [r7, #8]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <_ZN14BufferedSerial5writeEPKhi>:

// Prepare data and send it:
void BufferedSerial::write(const uint8_t *data, const int length) {
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b084      	sub	sp, #16
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
  // If data can fit at the end of the buffer:
  if (tx_head + length < TX_BUF_SIZE) {
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80010cc:	461a      	mov	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010d6:	da25      	bge.n	8001124 <_ZN14BufferedSerial5writeEPKhi+0x6a>
    memcpy(&(tx_buf[tx_head]), data, length);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80010de:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	4413      	add	r3, r2
 80010e6:	3304      	adds	r3, #4
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	68b9      	ldr	r1, [r7, #8]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f009 fc45 	bl	800a97c <memcpy>
    tx_head += length; // ) & tx_buf_mask
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	4413      	add	r3, r2
 80010fe:	b29a      	uxth	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    if (tx_head > tx_end) tx_end = tx_head; // Avoids "wrong checksum for topic id and msg" in rosserial logs
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8001112:	429a      	cmp	r2, r3
 8001114:	d921      	bls.n	800115a <_ZN14BufferedSerial5writeEPKhi+0xa0>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
 8001122:	e01a      	b.n	800115a <_ZN14BufferedSerial5writeEPKhi+0xa0>
  }
  // Else data is copied at the beginning of TX buffer:
  else {
    memcpy(tx_buf, data, length);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	4618      	mov	r0, r3
 8001130:	f009 fc24 	bl	800a97c <memcpy>
    if (tx_head > tx_tail) tx_end = tx_head; // Avoids tx_end > tx_tail
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8001140:	429a      	cmp	r2, r3
 8001142:	d905      	bls.n	8001150 <_ZN14BufferedSerial5writeEPKhi+0x96>
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
    tx_head = length;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	b29a      	uxth	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
  }

  // Send data:
  flush_tx_buffer();
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f000 f804 	bl	8001168 <_ZN14BufferedSerial15flush_tx_bufferEv>
}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <_ZN14BufferedSerial15flush_tx_bufferEv>:

// Send data:
void BufferedSerial::flush_tx_buffer(void) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  static bool mutex = false;

  // Reset indexes if they are at the same position:
  if (tx_head != 0 && tx_head == tx_tail) {   // Can be removed (just for better memory management)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00f      	beq.n	800119a <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8001186:	429a      	cmp	r2, r3
 8001188:	d107      	bne.n	800119a <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
     tx_head = 0;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
     tx_tail = 0;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
   }

  // Quit if UART not ready to transmit data or no data to send:
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b20      	cmp	r3, #32
 80011a6:	d10b      	bne.n	80011c0 <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d003      	beq.n	80011c0 <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 80011b8:	4b31      	ldr	r3, [pc, #196]	; (8001280 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <_ZN14BufferedSerial15flush_tx_bufferEv+0x5c>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <_ZN14BufferedSerial15flush_tx_bufferEv+0x5e>
 80011c4:	2300      	movs	r3, #0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d156      	bne.n	8001278 <_ZN14BufferedSerial15flush_tx_bufferEv+0x110>
  mutex = true;
 80011ca:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]

  // Reset flush index if already sent complete TX buffer:
  if (tx_tail == tx_end) tx_tail = 0;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	; 0x408
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80011dc:	429a      	cmp	r2, r3
 80011de:	d103      	bne.n	80011e8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x80>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408

  // Send data behind head:
  if (tx_tail < tx_head) {
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	; 0x408
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d21c      	bcs.n	8001232 <_ZN14BufferedSerial15flush_tx_bufferEv+0xca>
    uint16_t length = tx_head - tx_tail;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8001212:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	3304      	adds	r3, #4
 800121c:	89ba      	ldrh	r2, [r7, #12]
 800121e:	4619      	mov	r1, r3
 8001220:	f008 f85a 	bl	80092d8 <HAL_UART_Transmit_DMA>
    tx_tail = tx_head;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
 8001230:	e01e      	b.n	8001270 <_ZN14BufferedSerial15flush_tx_bufferEv+0x108>
  }
  // Else end the buffer before resetting tail index:
  else {
    uint16_t length = tx_end - tx_tail;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f8b3 240a 	ldrh.w	r2, [r3, #1034]	; 0x40a
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800124c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	4413      	add	r3, r2
 8001254:	3304      	adds	r3, #4
 8001256:	89fa      	ldrh	r2, [r7, #14]
 8001258:	4619      	mov	r1, r3
 800125a:	f008 f83d 	bl	80092d8 <HAL_UART_Transmit_DMA>

    // Reset indexes:
    tx_end = TX_BUF_SIZE;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001264:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
    tx_tail = 0;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
  }

  mutex = false;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	e000      	b.n	800127a <_ZN14BufferedSerial15flush_tx_bufferEv+0x112>
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8001278:	bf00      	nop
}
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000620 	.word	0x20000620

08001284 <_ZN14BufferedSerial15reset_rx_bufferEv>:


// Reset DMA to the beginning of the RX buffer:
inline void BufferedSerial::reset_rx_buffer(void) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart, rx_buf, RX_BUF_SIZE);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3304      	adds	r3, #4
 8001294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001298:	4619      	mov	r1, r3
 800129a:	f008 f89b 	bl	80093d4 <HAL_UART_Receive_DMA>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_ZN14BufferedSerial10get_handleEv>:

// Get UART Handle:
UART_HandleTypeDef* const BufferedSerial::get_handle(void) { return &huart; }
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <HAL_UART_TxCpltCallback>:


// DMA callbacks:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  // Comparing pointers: (remove equality if only one UART is used)
  if (huart->Instance == buff_serial.get_handle()->Instance) {
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681c      	ldr	r4, [r3, #0]
 80012cc:	4809      	ldr	r0, [pc, #36]	; (80012f4 <HAL_UART_TxCpltCallback+0x34>)
 80012ce:	f7ff ffea 	bl	80012a6 <_ZN14BufferedSerial10get_handleEv>
 80012d2:	4603      	mov	r3, r0
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	429c      	cmp	r4, r3
 80012d8:	bf0c      	ite	eq
 80012da:	2301      	moveq	r3, #1
 80012dc:	2300      	movne	r3, #0
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <HAL_UART_TxCpltCallback+0x2a>
    buff_serial.flush_tx_buffer();
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <HAL_UART_TxCpltCallback+0x34>)
 80012e6:	f7ff ff3f 	bl	8001168 <_ZN14BufferedSerial15flush_tx_bufferEv>
  }
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd90      	pop	{r4, r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000214 	.word	0x20000214

080012f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  buff_serial.reset_rx_buffer();  // Can be commented if DMA mode for RX is Circular
 8001300:	4803      	ldr	r0, [pc, #12]	; (8001310 <HAL_UART_RxCpltCallback+0x18>)
 8001302:	f7ff ffbf 	bl	8001284 <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000214 	.word	0x20000214

08001314 <_Z41__static_initialization_and_destruction_0ii>:
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d108      	bne.n	8001336 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132a:	4293      	cmp	r3, r2
 800132c:	d103      	bne.n	8001336 <_Z41__static_initialization_and_destruction_0ii+0x22>
BufferedSerial buff_serial(huart2);
 800132e:	4904      	ldr	r1, [pc, #16]	; (8001340 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001332:	f7ff fe61 	bl	8000ff8 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200007e0 	.word	0x200007e0
 8001344:	20000214 	.word	0x20000214

08001348 <_GLOBAL__sub_I_buff_serial>:
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
 800134c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001350:	2001      	movs	r0, #1
 8001352:	f7ff ffdf 	bl	8001314 <_Z41__static_initialization_and_destruction_0ii>
 8001356:	bd80      	pop	{r7, pc}

08001358 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001362:	edc7 0a00 	vstr	s1, [r7]
 8001366:	edd7 0a00 	vldr	s1, [r7]
 800136a:	ed97 0a01 	vldr	s0, [r7, #4]
 800136e:	f009 f956 	bl	800a61e <atan2f>
 8001372:	eef0 7a40 	vmov.f32	s15, s0
 8001376:	eeb0 0a67 	vmov.f32	s0, s15
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_ZN7MPUXX50C1EP17I2C_HandleTypeDefh>:

#include "MPUXX50.h"

/// @brief MPUXX50 I2C constructor
/// @param pI2Cx Pointer to I2C structure config
MPUXX50::MPUXX50(I2C_HandleTypeDef *pI2Cx, uint8_t addr)
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	4613      	mov	r3, r2
 800138c:	71fb      	strb	r3, [r7, #7]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2201      	movs	r2, #1
 8001392:	735a      	strb	r2, [r3, #13]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2201      	movs	r2, #1
 8001398:	739a      	strb	r2, [r3, #14]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <_ZN7MPUXX50C1EP17I2C_HandleTypeDefh+0x44>)
 800139e:	611a      	str	r2, [r3, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <_ZN7MPUXX50C1EP17I2C_HandleTypeDefh+0x48>)
 80013a4:	615a      	str	r2, [r3, #20]
{
    _pI2Cx = pI2Cx;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	609a      	str	r2, [r3, #8]
    _addr = addr << 1;
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	731a      	strb	r2, [r3, #12]
}
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4618      	mov	r0, r3
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	3f7ae148 	.word	0x3f7ae148
 80013c8:	3b83126f 	.word	0x3b83126f

080013cc <_ZN7MPUXX505beginEv>:

/// @brief Boot up the IMU and ensure we have a valid connection
/// @return Success [1] or fail [0]
uint8_t MPUXX50::begin()
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af04      	add	r7, sp, #16
 80013d2:	6078      	str	r0, [r7, #4]
    // Initialize variables
    uint8_t check, select;

    // Set attitude to zero conditions
    attitude.r = 0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	625a      	str	r2, [r3, #36]	; 0x24
    attitude.p = 0;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	629a      	str	r2, [r3, #40]	; 0x28
    attitude.y = 0;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c

    // Confirm device
    HAL_I2C_Mem_Read(_pI2Cx, _addr, WHO_AM_I, 1, &check, 1, I2C_TIMOUT_MS);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6898      	ldr	r0, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7b1b      	ldrb	r3, [r3, #12]
 80013f4:	b299      	uxth	r1, r3
 80013f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	2301      	movs	r3, #1
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	f107 030f 	add.w	r3, r7, #15
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2301      	movs	r3, #1
 8001408:	2275      	movs	r2, #117	; 0x75
 800140a:	f005 fbd7 	bl	8006bbc <HAL_I2C_Mem_Read>

    // TODO: If 9250 or 6050 fails could it trigger the opposite check???
    if ((check == WHO_AM_I_9250_ANS) || (check == WHO_AM_I_6050_ANS))
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	2b70      	cmp	r3, #112	; 0x70
 8001412:	d002      	beq.n	800141a <_ZN7MPUXX505beginEv+0x4e>
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	2b68      	cmp	r3, #104	; 0x68
 8001418:	d120      	bne.n	800145c <_ZN7MPUXX505beginEv+0x90>
    //if (1)
    {
        // Startup / reset the sensor
        select = 0x00;
 800141a:	2300      	movs	r3, #0
 800141c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, PWR_MGMT_1, 1, &select, 1, I2C_TIMOUT_MS);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6898      	ldr	r0, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7b1b      	ldrb	r3, [r3, #12]
 8001426:	b299      	uxth	r1, r3
 8001428:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142c:	9302      	str	r3, [sp, #8]
 800142e:	2301      	movs	r3, #1
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	f107 030e 	add.w	r3, r7, #14
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2301      	movs	r3, #1
 800143a:	226b      	movs	r2, #107	; 0x6b
 800143c:	f005 fac4 	bl	80069c8 <HAL_I2C_Mem_Write>

        // Set the full scale ranges
        writeAccFullScaleRange(_aFSR);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	7b9b      	ldrb	r3, [r3, #14]
 8001444:	4619      	mov	r1, r3
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f80e 	bl	8001468 <_ZN7MPUXX5022writeAccFullScaleRangeEh>
        writeGyroFullScaleRange(_gFSR);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7b5b      	ldrb	r3, [r3, #13]
 8001450:	4619      	mov	r1, r3
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f898 	bl	8001588 <_ZN7MPUXX5023writeGyroFullScaleRangeEh>

        return 1;
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <_ZN7MPUXX505beginEv+0x92>
    }
    else
    {
        return 0;
 800145c:	2300      	movs	r3, #0
    }
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <_ZN7MPUXX5022writeAccFullScaleRangeEh>:

/// @brief Set the accelerometer full scale range.
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
void MPUXX50::writeAccFullScaleRange(uint8_t aFSR)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af04      	add	r7, sp, #16
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;

    // Set the value
    switch (aFSR)
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d86a      	bhi.n	8001550 <_ZN7MPUXX5022writeAccFullScaleRangeEh+0xe8>
 800147a:	a201      	add	r2, pc, #4	; (adr r2, 8001480 <_ZN7MPUXX5022writeAccFullScaleRangeEh+0x18>)
 800147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001480:	08001491 	.word	0x08001491
 8001484:	080014c1 	.word	0x080014c1
 8001488:	080014f1 	.word	0x080014f1
 800148c:	08001521 	.word	0x08001521
    {
    case AFSR_2G:
        aScaleFactor = 16384.0;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001496:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6898      	ldr	r0, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7b1b      	ldrb	r3, [r3, #12]
 80014a4:	b299      	uxth	r1, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	9302      	str	r3, [sp, #8]
 80014ac:	2301      	movs	r3, #1
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	f107 030f 	add.w	r3, r7, #15
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2301      	movs	r3, #1
 80014b8:	221c      	movs	r2, #28
 80014ba:	f005 fa85 	bl	80069c8 <HAL_I2C_Mem_Write>
        break;
 80014be:	e05f      	b.n	8001580 <_ZN7MPUXX5022writeAccFullScaleRangeEh+0x118>
    case AFSR_4G:
        aScaleFactor = 8192.0;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80014c6:	601a      	str	r2, [r3, #0]
        select = 0x08;
 80014c8:	2308      	movs	r3, #8
 80014ca:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6898      	ldr	r0, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7b1b      	ldrb	r3, [r3, #12]
 80014d4:	b299      	uxth	r1, r3
 80014d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014da:	9302      	str	r3, [sp, #8]
 80014dc:	2301      	movs	r3, #1
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	f107 030f 	add.w	r3, r7, #15
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2301      	movs	r3, #1
 80014e8:	221c      	movs	r2, #28
 80014ea:	f005 fa6d 	bl	80069c8 <HAL_I2C_Mem_Write>
        break;
 80014ee:	e047      	b.n	8001580 <_ZN7MPUXX5022writeAccFullScaleRangeEh+0x118>
    case AFSR_8G:
        aScaleFactor = 4096.0;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80014f6:	601a      	str	r2, [r3, #0]
        select = 0x10;
 80014f8:	2310      	movs	r3, #16
 80014fa:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6898      	ldr	r0, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7b1b      	ldrb	r3, [r3, #12]
 8001504:	b299      	uxth	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	2301      	movs	r3, #1
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	f107 030f 	add.w	r3, r7, #15
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2301      	movs	r3, #1
 8001518:	221c      	movs	r2, #28
 800151a:	f005 fa55 	bl	80069c8 <HAL_I2C_Mem_Write>
        break;
 800151e:	e02f      	b.n	8001580 <_ZN7MPUXX5022writeAccFullScaleRangeEh+0x118>
    case AFSR_16G:
        aScaleFactor = 2048.0;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001526:	601a      	str	r2, [r3, #0]
        select = 0x18;
 8001528:	2318      	movs	r3, #24
 800152a:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6898      	ldr	r0, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7b1b      	ldrb	r3, [r3, #12]
 8001534:	b299      	uxth	r1, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	9302      	str	r3, [sp, #8]
 800153c:	2301      	movs	r3, #1
 800153e:	9301      	str	r3, [sp, #4]
 8001540:	f107 030f 	add.w	r3, r7, #15
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2301      	movs	r3, #1
 8001548:	221c      	movs	r2, #28
 800154a:	f005 fa3d 	bl	80069c8 <HAL_I2C_Mem_Write>
        break;
 800154e:	e017      	b.n	8001580 <_ZN7MPUXX5022writeAccFullScaleRangeEh+0x118>
    default:
        aScaleFactor = 8192.0;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001556:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8001558:	2308      	movs	r3, #8
 800155a:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6898      	ldr	r0, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7b1b      	ldrb	r3, [r3, #12]
 8001564:	b299      	uxth	r1, r3
 8001566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156a:	9302      	str	r3, [sp, #8]
 800156c:	2301      	movs	r3, #1
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	f107 030f 	add.w	r3, r7, #15
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2301      	movs	r3, #1
 8001578:	221c      	movs	r2, #28
 800157a:	f005 fa25 	bl	80069c8 <HAL_I2C_Mem_Write>
        break;
 800157e:	bf00      	nop
    }
}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <_ZN7MPUXX5023writeGyroFullScaleRangeEh>:

/// @brief Set the gyroscope full scale range.
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void MPUXX50::writeGyroFullScaleRange(uint8_t gFSR)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af04      	add	r7, sp, #16
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;

    // Set the value
    switch (gFSR)
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	2b03      	cmp	r3, #3
 8001598:	d866      	bhi.n	8001668 <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0xe0>
 800159a:	a201      	add	r2, pc, #4	; (adr r2, 80015a0 <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0x18>)
 800159c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a0:	080015b1 	.word	0x080015b1
 80015a4:	080015df 	.word	0x080015df
 80015a8:	0800160d 	.word	0x0800160d
 80015ac:	0800163b 	.word	0x0800163b
    {
    case GFSR_250DPS:
        gScaleFactor = 131.0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a3b      	ldr	r2, [pc, #236]	; (80016a0 <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0x118>)
 80015b4:	605a      	str	r2, [r3, #4]
        select = 0x00;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6898      	ldr	r0, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	7b1b      	ldrb	r3, [r3, #12]
 80015c2:	b299      	uxth	r1, r3
 80015c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c8:	9302      	str	r3, [sp, #8]
 80015ca:	2301      	movs	r3, #1
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	f107 030f 	add.w	r3, r7, #15
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2301      	movs	r3, #1
 80015d6:	221b      	movs	r2, #27
 80015d8:	f005 f9f6 	bl	80069c8 <HAL_I2C_Mem_Write>
        break;
 80015dc:	e05b      	b.n	8001696 <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0x10e>
    case GFSR_500DPS:
        gScaleFactor = 65.5;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a30      	ldr	r2, [pc, #192]	; (80016a4 <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0x11c>)
 80015e2:	605a      	str	r2, [r3, #4]
        select = 0x08;
 80015e4:	2308      	movs	r3, #8
 80015e6:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6898      	ldr	r0, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7b1b      	ldrb	r3, [r3, #12]
 80015f0:	b299      	uxth	r1, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	9302      	str	r3, [sp, #8]
 80015f8:	2301      	movs	r3, #1
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	f107 030f 	add.w	r3, r7, #15
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2301      	movs	r3, #1
 8001604:	221b      	movs	r2, #27
 8001606:	f005 f9df 	bl	80069c8 <HAL_I2C_Mem_Write>
        break;
 800160a:	e044      	b.n	8001696 <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0x10e>
    case GFSR_1000DPS:
        gScaleFactor = 32.8;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a26      	ldr	r2, [pc, #152]	; (80016a8 <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0x120>)
 8001610:	605a      	str	r2, [r3, #4]
        select = 0x10;
 8001612:	2310      	movs	r3, #16
 8001614:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6898      	ldr	r0, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7b1b      	ldrb	r3, [r3, #12]
 800161e:	b299      	uxth	r1, r3
 8001620:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001624:	9302      	str	r3, [sp, #8]
 8001626:	2301      	movs	r3, #1
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	f107 030f 	add.w	r3, r7, #15
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2301      	movs	r3, #1
 8001632:	221b      	movs	r2, #27
 8001634:	f005 f9c8 	bl	80069c8 <HAL_I2C_Mem_Write>
        break;
 8001638:	e02d      	b.n	8001696 <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0x10e>
    case GFSR_2000DPS:
        gScaleFactor = 16.4;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0x124>)
 800163e:	605a      	str	r2, [r3, #4]
        select = 0x18;
 8001640:	2318      	movs	r3, #24
 8001642:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6898      	ldr	r0, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7b1b      	ldrb	r3, [r3, #12]
 800164c:	b299      	uxth	r1, r3
 800164e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001652:	9302      	str	r3, [sp, #8]
 8001654:	2301      	movs	r3, #1
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	f107 030f 	add.w	r3, r7, #15
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2301      	movs	r3, #1
 8001660:	221b      	movs	r2, #27
 8001662:	f005 f9b1 	bl	80069c8 <HAL_I2C_Mem_Write>
        break;
 8001666:	e016      	b.n	8001696 <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0x10e>
    default:
        gScaleFactor = 65.5;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <_ZN7MPUXX5023writeGyroFullScaleRangeEh+0x11c>)
 800166c:	605a      	str	r2, [r3, #4]
        select = 0x08;
 800166e:	2308      	movs	r3, #8
 8001670:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(_pI2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6898      	ldr	r0, [r3, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	7b1b      	ldrb	r3, [r3, #12]
 800167a:	b299      	uxth	r1, r3
 800167c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001680:	9302      	str	r3, [sp, #8]
 8001682:	2301      	movs	r3, #1
 8001684:	9301      	str	r3, [sp, #4]
 8001686:	f107 030f 	add.w	r3, r7, #15
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	221b      	movs	r2, #27
 8001690:	f005 f99a 	bl	80069c8 <HAL_I2C_Mem_Write>
        break;
 8001694:	bf00      	nop
    }
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	43030000 	.word	0x43030000
 80016a4:	42830000 	.word	0x42830000
 80016a8:	42033333 	.word	0x42033333
 80016ac:	41833333 	.word	0x41833333

080016b0 <_ZN7MPUXX5021setGyroFullScaleRangeEh>:

/// @brief Set the gyroscope full scale range
/// @param gFSR Desired yroscope full scale range
void MPUXX50::setGyroFullScaleRange(uint8_t gFSR)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	70fb      	strb	r3, [r7, #3]
    _gFSR = gFSR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	78fa      	ldrb	r2, [r7, #3]
 80016c0:	735a      	strb	r2, [r3, #13]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <_ZN7MPUXX5020setAccFullScaleRangeEh>:

/// @brief Set the accelerometer full scale range
/// @param aFSR Desired accelerometer full scale range
void MPUXX50::setAccFullScaleRange(uint8_t aFSR)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	460b      	mov	r3, r1
 80016d8:	70fb      	strb	r3, [r7, #3]
    _aFSR = aFSR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	78fa      	ldrb	r2, [r7, #3]
 80016de:	739a      	strb	r2, [r3, #14]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <_ZN7MPUXX5012setDeltaTimeEf>:

/// @brief Set the sampling duration (delta time) in seconds
/// @param dt Sampling time delta in seconds
void MPUXX50::setDeltaTime(float dt)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	ed87 0a00 	vstr	s0, [r7]
    _dt = dt;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	615a      	str	r2, [r3, #20]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <_ZN7MPUXX506setTauEf>:

/// @brief Time constant of the complementary filter
/// @param tau Time constant
void MPUXX50::setTau(float tau)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	ed87 0a00 	vstr	s0, [r7]
    _tau = tau;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	611a      	str	r2, [r3, #16]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_ZN7MPUXX5013calibrateGyroEt>:

/// @brief Find offsets for each axis of gyroscope
void MPUXX50::calibrateGyro(uint16_t numCalPoints)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08e      	sub	sp, #56	; 0x38
 800172c:	af00      	add	r7, sp, #0
 800172e:	6178      	str	r0, [r7, #20]
 8001730:	460b      	mov	r3, r1
 8001732:	827b      	strh	r3, [r7, #18]
    // Init
    RawData rawData;
    int32_t x = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t y = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t z = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Zero guard
    if (numCalPoints == 0)
 8001740:	8a7b      	ldrh	r3, [r7, #18]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <_ZN7MPUXX5013calibrateGyroEt+0x22>
    {
        numCalPoints = 1;
 8001746:	2301      	movs	r3, #1
 8001748:	827b      	strh	r3, [r7, #18]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800174a:	2300      	movs	r3, #0
 800174c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800174e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001750:	8a7b      	ldrh	r3, [r7, #18]
 8001752:	429a      	cmp	r2, r3
 8001754:	d224      	bcs.n	80017a0 <_ZN7MPUXX5013calibrateGyroEt+0x78>
    {
        rawData = readRawData();
 8001756:	463b      	mov	r3, r7
 8001758:	6979      	ldr	r1, [r7, #20]
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f851 	bl	8001802 <_ZN7MPUXX5011readRawDataEv>
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	463a      	mov	r2, r7
 8001766:	6810      	ldr	r0, [r2, #0]
 8001768:	6851      	ldr	r1, [r2, #4]
 800176a:	6892      	ldr	r2, [r2, #8]
 800176c:	c307      	stmia	r3!, {r0, r1, r2}
        x += rawData.gx;
 800176e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001772:	461a      	mov	r2, r3
 8001774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001776:	4413      	add	r3, r2
 8001778:	637b      	str	r3, [r7, #52]	; 0x34
        y += rawData.gy;
 800177a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800177e:	461a      	mov	r2, r3
 8001780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001782:	4413      	add	r3, r2
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
        z += rawData.gz;
 8001786:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800178a:	461a      	mov	r2, r3
 800178c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178e:	4413      	add	r3, r2
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_Delay(3);
 8001792:	2003      	movs	r0, #3
 8001794:	f004 f8e6 	bl	8005964 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001798:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800179a:	3301      	adds	r3, #1
 800179c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800179e:	e7d6      	b.n	800174e <_ZN7MPUXX5013calibrateGyroEt+0x26>
    }

    // Average the saved data points to find the gyroscope offset
    gyroCal.x = (float)x / (float)numCalPoints;
 80017a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a2:	ee07 3a90 	vmov	s15, r3
 80017a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017aa:	8a7b      	ldrh	r3, [r7, #18]
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	edc3 7a06 	vstr	s15, [r3, #24]
    gyroCal.y = (float)y / (float)numCalPoints;
 80017be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c0:	ee07 3a90 	vmov	s15, r3
 80017c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017c8:	8a7b      	ldrh	r3, [r7, #18]
 80017ca:	ee07 3a90 	vmov	s15, r3
 80017ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	edc3 7a07 	vstr	s15, [r3, #28]
    gyroCal.z = (float)z / (float)numCalPoints;
 80017dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017e6:	8a7b      	ldrh	r3, [r7, #18]
 80017e8:	ee07 3a90 	vmov	s15, r3
 80017ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80017fa:	bf00      	nop
 80017fc:	3738      	adds	r7, #56	; 0x38
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_ZN7MPUXX5011readRawDataEv>:

/// @brief Read raw data from IMU
/// @return Structure containing raw accelerometer and gyroscope data
RawData MPUXX50::readRawData()
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b08a      	sub	sp, #40	; 0x28
 8001806:	af04      	add	r7, sp, #16
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
    // Data out and buffer init
    RawData rawData;
    uint8_t buf[14];

    // Subroutine for reading the raw data
    HAL_I2C_Mem_Read(_pI2Cx, _addr, ACCEL_XOUT_H, 1, buf, 14, I2C_TIMOUT_MS);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6898      	ldr	r0, [r3, #8]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	7b1b      	ldrb	r3, [r3, #12]
 8001814:	b299      	uxth	r1, r3
 8001816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181a:	9302      	str	r3, [sp, #8]
 800181c:	230e      	movs	r3, #14
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	f107 0308 	add.w	r3, r7, #8
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2301      	movs	r3, #1
 8001828:	223b      	movs	r2, #59	; 0x3b
 800182a:	f005 f9c7 	bl	8006bbc <HAL_I2C_Mem_Read>

    // Bit shift the data
    rawData.ax = buf[0] << 8 | buf[1];
 800182e:	7a3b      	ldrb	r3, [r7, #8]
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	b21a      	sxth	r2, r3
 8001834:	7a7b      	ldrb	r3, [r7, #9]
 8001836:	b21b      	sxth	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	b21a      	sxth	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	801a      	strh	r2, [r3, #0]
    rawData.ay = buf[2] << 8 | buf[3];
 8001840:	7abb      	ldrb	r3, [r7, #10]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	b21a      	sxth	r2, r3
 8001846:	7afb      	ldrb	r3, [r7, #11]
 8001848:	b21b      	sxth	r3, r3
 800184a:	4313      	orrs	r3, r2
 800184c:	b21a      	sxth	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	805a      	strh	r2, [r3, #2]
    rawData.az = buf[4] << 8 | buf[5];
 8001852:	7b3b      	ldrb	r3, [r7, #12]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b21a      	sxth	r2, r3
 8001858:	7b7b      	ldrb	r3, [r7, #13]
 800185a:	b21b      	sxth	r3, r3
 800185c:	4313      	orrs	r3, r2
 800185e:	b21a      	sxth	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	809a      	strh	r2, [r3, #4]
    // temperature = buf[6] << 8 | buf[7];
    rawData.gx = buf[8] << 8 | buf[9];
 8001864:	7c3b      	ldrb	r3, [r7, #16]
 8001866:	021b      	lsls	r3, r3, #8
 8001868:	b21a      	sxth	r2, r3
 800186a:	7c7b      	ldrb	r3, [r7, #17]
 800186c:	b21b      	sxth	r3, r3
 800186e:	4313      	orrs	r3, r2
 8001870:	b21a      	sxth	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	80da      	strh	r2, [r3, #6]
    rawData.gy = buf[10] << 8 | buf[11];
 8001876:	7cbb      	ldrb	r3, [r7, #18]
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	b21a      	sxth	r2, r3
 800187c:	7cfb      	ldrb	r3, [r7, #19]
 800187e:	b21b      	sxth	r3, r3
 8001880:	4313      	orrs	r3, r2
 8001882:	b21a      	sxth	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	811a      	strh	r2, [r3, #8]
    rawData.gz = buf[12] << 8 | buf[13];
 8001888:	7d3b      	ldrb	r3, [r7, #20]
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	b21a      	sxth	r2, r3
 800188e:	7d7b      	ldrb	r3, [r7, #21]
 8001890:	b21b      	sxth	r3, r3
 8001892:	4313      	orrs	r3, r2
 8001894:	b21a      	sxth	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	815a      	strh	r2, [r3, #10]

    // Result
    return rawData;
 800189a:	bf00      	nop
}
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_ZN7MPUXX5011processDataEv>:

/// @brief Process the raw data into real world sensor values
/// @return Structure containing processed accelerometer and gyroscope data
ProcessedData MPUXX50::processData()
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
    // Data out structure
    ProcessedData processedData;

    // Get raw values from the IMU
    RawData rawData = readRawData();
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	6839      	ldr	r1, [r7, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ffa4 	bl	8001802 <_ZN7MPUXX5011readRawDataEv>

    // Convert accelerometer values to g's
    processedData.ax = rawData.ax / aScaleFactor;
 80018ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018be:	ee07 3a90 	vmov	s15, r3
 80018c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	ed93 7a00 	vldr	s14, [r3]
 80018cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	edc3 7a00 	vstr	s15, [r3]
    processedData.ay = rawData.ay / aScaleFactor;
 80018d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018da:	ee07 3a90 	vmov	s15, r3
 80018de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	ed93 7a00 	vldr	s14, [r3]
 80018e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	edc3 7a01 	vstr	s15, [r3, #4]
    processedData.az = rawData.az / aScaleFactor;
 80018f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	ed93 7a00 	vldr	s14, [r3]
 8001904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	edc3 7a02 	vstr	s15, [r3, #8]

    // Compensate for gyro offset
    processedData.gx = rawData.gx - gyroCal.x;
 800190e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	edc3 7a03 	vstr	s15, [r3, #12]
    processedData.gy = rawData.gy - gyroCal.y;
 800192a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	edd3 7a07 	vldr	s15, [r3, #28]
 800193c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	edc3 7a04 	vstr	s15, [r3, #16]
    processedData.gz = rawData.gz - gyroCal.z;
 8001946:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800194a:	ee07 3a90 	vmov	s15, r3
 800194e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	edd3 7a08 	vldr	s15, [r3, #32]
 8001958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	edc3 7a05 	vstr	s15, [r3, #20]

    // Convert gyro values to deg/s
    processedData.gx /= gScaleFactor;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	edd3 6a03 	vldr	s13, [r3, #12]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	ed93 7a01 	vldr	s14, [r3, #4]
 800196e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	edc3 7a03 	vstr	s15, [r3, #12]
    processedData.gy /= gScaleFactor;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	edd3 6a04 	vldr	s13, [r3, #16]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	ed93 7a01 	vldr	s14, [r3, #4]
 8001984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	edc3 7a04 	vstr	s15, [r3, #16]
    processedData.gz /= gScaleFactor;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	edd3 6a05 	vldr	s13, [r3, #20]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	ed93 7a01 	vldr	s14, [r3, #4]
 800199a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	edc3 7a05 	vstr	s15, [r3, #20]

    // Return structure
    return processedData;
 80019a4:	bf00      	nop
}
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <_ZN7MPUXX5012calcAttitudeEv>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter
/// @return Structure containing sensor attitude data
Attitude MPUXX50::calcAttitude()
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b092      	sub	sp, #72	; 0x48
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6178      	str	r0, [r7, #20]
    // Read processed data
    ProcessedData sensorData = processData();
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	6979      	ldr	r1, [r7, #20]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ff70 	bl	80018a4 <_ZN7MPUXX5011processDataEv>

    // Complementary filter
    float accelPitch = atan2(sensorData.ay, sensorData.az) * RAD2DEG;
 80019c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80019c8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019cc:	eef0 0a47 	vmov.f32	s1, s14
 80019d0:	eeb0 0a67 	vmov.f32	s0, s15
 80019d4:	f7ff fcc0 	bl	8001358 <_ZSt5atan2ff>
 80019d8:	ee10 3a10 	vmov	r3, s0
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fdb3 	bl	8000548 <__aeabi_f2d>
 80019e2:	a349      	add	r3, pc, #292	; (adr r3, 8001b08 <_ZN7MPUXX5012calcAttitudeEv+0x158>)
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	f7fe fe06 	bl	80005f8 <__aeabi_dmul>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	f7ff f8f8 	bl	8000be8 <__aeabi_d2f>
 80019f8:	4603      	mov	r3, r0
 80019fa:	647b      	str	r3, [r7, #68]	; 0x44
    float accelRoll = atan2(sensorData.ax, sensorData.az) * RAD2DEG;
 80019fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a00:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001a04:	eef0 0a47 	vmov.f32	s1, s14
 8001a08:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0c:	f7ff fca4 	bl	8001358 <_ZSt5atan2ff>
 8001a10:	ee10 3a10 	vmov	r3, s0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd97 	bl	8000548 <__aeabi_f2d>
 8001a1a:	a33b      	add	r3, pc, #236	; (adr r3, 8001b08 <_ZN7MPUXX5012calcAttitudeEv+0x158>)
 8001a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a20:	f7fe fdea 	bl	80005f8 <__aeabi_dmul>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f7ff f8dc 	bl	8000be8 <__aeabi_d2f>
 8001a30:	4603      	mov	r3, r0
 8001a32:	643b      	str	r3, [r7, #64]	; 0x40

    attitude.r = _tau * (attitude.r - sensorData.gy * _dt) + (1 - _tau) * accelRoll;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001a40:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a4e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a60:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a64:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001a68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    attitude.p = _tau * (attitude.p - sensorData.gx * _dt) + (1 - _tau) * accelPitch;
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001a82:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a8c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a90:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001aa2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001aa6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    attitude.y += (sensorData.gz * _dt);
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001abe:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ac8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001acc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // Return
    return attitude;
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001adc:	3224      	adds	r2, #36	; 0x24
 8001ade:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ae0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ae4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aea:	ee06 1a90 	vmov	s13, r1
 8001aee:	ee07 2a10 	vmov	s14, r2
 8001af2:	ee07 3a90 	vmov	s15, r3
}
 8001af6:	eeb0 0a66 	vmov.f32	s0, s13
 8001afa:	eef0 0a47 	vmov.f32	s1, s14
 8001afe:	eeb0 1a67 	vmov.f32	s2, s15
 8001b02:	3748      	adds	r7, #72	; 0x48
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	1a63cbb0 	.word	0x1a63cbb0
 8001b0c:	404ca5dc 	.word	0x404ca5dc

08001b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b14:	f003 feb4 	bl	8005880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b18:	f000 f8a4 	bl	8001c64 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b1c:	f000 fb5a 	bl	80021d4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001b20:	f000 fb30 	bl	8002184 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8001b24:	f000 fb00 	bl	8002128 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8001b28:	f000 f9a6 	bl	8001e78 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8001b2c:	f000 fa1a 	bl	8001f64 <_ZL12MX_TIM3_Initv>
  MX_I2C2_Init();
 8001b30:	f000 f90c 	bl	8001d4c <_ZL12MX_I2C2_Initv>
  MX_TIM5_Init();
 8001b34:	f000 fa74 	bl	8002020 <_ZL12MX_TIM5_Initv>
  MX_TIM14_Init();
 8001b38:	f000 face 	bl	80020d8 <_ZL13MX_TIM14_Initv>
  MX_TIM1_Init();
 8001b3c:	f000 f93a 	bl	8001db4 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */
  // Configure IMU
   imu.setGyroFullScaleRange(GFSR_500DPS);
 8001b40:	2101      	movs	r1, #1
 8001b42:	4840      	ldr	r0, [pc, #256]	; (8001c44 <main+0x134>)
 8001b44:	f7ff fdb4 	bl	80016b0 <_ZN7MPUXX5021setGyroFullScaleRangeEh>
   imu.setAccFullScaleRange(AFSR_4G);
 8001b48:	2101      	movs	r1, #1
 8001b4a:	483e      	ldr	r0, [pc, #248]	; (8001c44 <main+0x134>)
 8001b4c:	f7ff fdbf 	bl	80016ce <_ZN7MPUXX5020setAccFullScaleRangeEh>
   imu.setDeltaTime(0.004);
 8001b50:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8001c48 <main+0x138>
 8001b54:	483b      	ldr	r0, [pc, #236]	; (8001c44 <main+0x134>)
 8001b56:	f7ff fdc9 	bl	80016ec <_ZN7MPUXX5012setDeltaTimeEf>
   imu.setTau(0.98);
 8001b5a:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8001c4c <main+0x13c>
 8001b5e:	4839      	ldr	r0, [pc, #228]	; (8001c44 <main+0x134>)
 8001b60:	f7ff fdd3 	bl	800170a <_ZN7MPUXX506setTauEf>

   // Check if IMU configured properly and block if it didn't
   while (imu.begin() != TRUE){HAL_Delay(500);}
 8001b64:	4837      	ldr	r0, [pc, #220]	; (8001c44 <main+0x134>)
 8001b66:	f7ff fc31 	bl	80013cc <_ZN7MPUXX505beginEv>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	bf14      	ite	ne
 8001b70:	2301      	movne	r3, #1
 8001b72:	2300      	moveq	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d004      	beq.n	8001b84 <main+0x74>
 8001b7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b7e:	f003 fef1 	bl	8005964 <HAL_Delay>
 8001b82:	e7ef      	b.n	8001b64 <main+0x54>

   // Calibrate the IMU
   imu.calibrateGyro(1500);
 8001b84:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001b88:	482e      	ldr	r0, [pc, #184]	; (8001c44 <main+0x134>)
 8001b8a:	f7ff fdcd 	bl	8001728 <_ZN7MPUXX5013calibrateGyroEt>


  //Set up 2x mode
	htim3.Instance->SMCR &= ~TIM_SMCR_SMS; // Clear EncoderMode field
 8001b8e:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <main+0x140>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <main+0x140>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0207 	bic.w	r2, r2, #7
 8001b9c:	609a      	str	r2, [r3, #8]
	htim3.Instance->SMCR |= TIM_ENCODERMODE_TI1 << TIM_SMCR_SMS_Pos; // Set EncoderMode field to TIM_ENCODERMODE_TI1
 8001b9e:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <main+0x140>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <main+0x140>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f042 0201 	orr.w	r2, r2, #1
 8001bac:	609a      	str	r2, [r3, #8]
	htim3.Instance->CCER &= ~TIM_CCER_CC1P; // Clear IC1Polarity field
 8001bae:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <main+0x140>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6a1a      	ldr	r2, [r3, #32]
 8001bb4:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <main+0x140>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0202 	bic.w	r2, r2, #2
 8001bbc:	621a      	str	r2, [r3, #32]
	htim3.Instance->CCER |= TIM_ICPOLARITY_BOTHEDGE << TIM_CCER_CC1P_Pos; // Set IC1Polarity field to TIM_ICPOLARITY_BOTHEDGE
 8001bbe:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <main+0x140>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6a1a      	ldr	r2, [r3, #32]
 8001bc4:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <main+0x140>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0214 	orr.w	r2, r2, #20
 8001bcc:	621a      	str	r2, [r3, #32]

	htim1.Instance->SMCR &= ~TIM_SMCR_SMS; // Clear EncoderMode field
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <main+0x144>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <main+0x144>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0207 	bic.w	r2, r2, #7
 8001bdc:	609a      	str	r2, [r3, #8]
	htim1.Instance->SMCR |= TIM_ENCODERMODE_TI1 << TIM_SMCR_SMS_Pos; // Set EncoderMode field to TIM_ENCODERMODE_TI1
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <main+0x144>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <main+0x144>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0201 	orr.w	r2, r2, #1
 8001bec:	609a      	str	r2, [r3, #8]
	htim1.Instance->CCER &= ~TIM_CCER_CC1P; // Clear IC1Polarity field
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <main+0x144>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6a1a      	ldr	r2, [r3, #32]
 8001bf4:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <main+0x144>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0202 	bic.w	r2, r2, #2
 8001bfc:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCER |= TIM_ICPOLARITY_BOTHEDGE << TIM_CCER_CC1P_Pos; // Set IC1Polarity field to TIM_ICPOLARITY_BOTHEDGE
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <main+0x144>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6a1a      	ldr	r2, [r3, #32]
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <main+0x144>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f042 0214 	orr.w	r2, r2, #20
 8001c0c:	621a      	str	r2, [r3, #32]

	//Start timer
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4811      	ldr	r0, [pc, #68]	; (8001c58 <main+0x148>)
 8001c12:	f006 fabd 	bl	8008190 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001c16:	2104      	movs	r1, #4
 8001c18:	480f      	ldr	r0, [pc, #60]	; (8001c58 <main+0x148>)
 8001c1a:	f006 fab9 	bl	8008190 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001c1e:	2104      	movs	r1, #4
 8001c20:	480b      	ldr	r0, [pc, #44]	; (8001c50 <main+0x140>)
 8001c22:	f006 fc23 	bl	800846c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001c26:	2104      	movs	r1, #4
 8001c28:	480a      	ldr	r0, [pc, #40]	; (8001c54 <main+0x144>)
 8001c2a:	f006 fc1f 	bl	800846c <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8001c2e:	480b      	ldr	r0, [pc, #44]	; (8001c5c <main+0x14c>)
 8001c30:	f006 f9ee 	bl	8008010 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);
 8001c34:	480a      	ldr	r0, [pc, #40]	; (8001c60 <main+0x150>)
 8001c36:	f006 f9eb 	bl	8008010 <HAL_TIM_Base_Start_IT>

	// Init setup for rosserial
	setup();
 8001c3a:	f002 fbe1 	bl	8004400 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8001c3e:	f002 fc01 	bl	8004444 <loop>
 8001c42:	e7fc      	b.n	8001c3e <main+0x12e>
 8001c44:	20000988 	.word	0x20000988
 8001c48:	3b83126f 	.word	0x3b83126f
 8001c4c:	3f7ae148 	.word	0x3f7ae148
 8001c50:	20000708 	.word	0x20000708
 8001c54:	20000678 	.word	0x20000678
 8001c58:	200006c0 	.word	0x200006c0
 8001c5c:	20000750 	.word	0x20000750
 8001c60:	20000798 	.word	0x20000798

08001c64 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b094      	sub	sp, #80	; 0x50
 8001c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6a:	f107 0320 	add.w	r3, r7, #32
 8001c6e:	2230      	movs	r2, #48	; 0x30
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f008 fe90 	bl	800a998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	4b2d      	ldr	r3, [pc, #180]	; (8001d44 <_Z18SystemClock_Configv+0xe0>)
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	4a2c      	ldr	r2, [pc, #176]	; (8001d44 <_Z18SystemClock_Configv+0xe0>)
 8001c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c96:	6413      	str	r3, [r2, #64]	; 0x40
 8001c98:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <_Z18SystemClock_Configv+0xe0>)
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <_Z18SystemClock_Configv+0xe4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a26      	ldr	r2, [pc, #152]	; (8001d48 <_Z18SystemClock_Configv+0xe4>)
 8001cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <_Z18SystemClock_Configv+0xe4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cc8:	2310      	movs	r3, #16
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cd4:	2308      	movs	r3, #8
 8001cd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001cd8:	2360      	movs	r3, #96	; 0x60
 8001cda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce4:	f107 0320 	add.w	r3, r7, #32
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f005 fce9 	bl	80076c0 <HAL_RCC_OscConfig>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	bf14      	ite	ne
 8001cf4:	2301      	movne	r3, #1
 8001cf6:	2300      	moveq	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001cfe:	f000 fdbd 	bl	800287c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d02:	230f      	movs	r3, #15
 8001d04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d06:	2302      	movs	r3, #2
 8001d08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d1a:	f107 030c 	add.w	r3, r7, #12
 8001d1e:	2103      	movs	r1, #3
 8001d20:	4618      	mov	r0, r3
 8001d22:	f005 ff45 	bl	8007bb0 <HAL_RCC_ClockConfig>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bf14      	ite	ne
 8001d2c:	2301      	movne	r3, #1
 8001d2e:	2300      	moveq	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8001d36:	f000 fda1 	bl	800287c <Error_Handler>
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	3750      	adds	r7, #80	; 0x50
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40007000 	.word	0x40007000

08001d4c <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d50:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <_ZL12MX_I2C2_Initv+0x5c>)
 8001d52:	4a16      	ldr	r2, [pc, #88]	; (8001dac <_ZL12MX_I2C2_Initv+0x60>)
 8001d54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001d56:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <_ZL12MX_I2C2_Initv+0x5c>)
 8001d58:	4a15      	ldr	r2, [pc, #84]	; (8001db0 <_ZL12MX_I2C2_Initv+0x64>)
 8001d5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <_ZL12MX_I2C2_Initv+0x5c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <_ZL12MX_I2C2_Initv+0x5c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <_ZL12MX_I2C2_Initv+0x5c>)
 8001d6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d6e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d70:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <_ZL12MX_I2C2_Initv+0x5c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <_ZL12MX_I2C2_Initv+0x5c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <_ZL12MX_I2C2_Initv+0x5c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <_ZL12MX_I2C2_Initv+0x5c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d88:	4807      	ldr	r0, [pc, #28]	; (8001da8 <_ZL12MX_I2C2_Initv+0x5c>)
 8001d8a:	f004 fcd9 	bl	8006740 <HAL_I2C_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	bf14      	ite	ne
 8001d94:	2301      	movne	r3, #1
 8001d96:	2300      	moveq	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8001d9e:	f000 fd6d 	bl	800287c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000624 	.word	0x20000624
 8001dac:	40005800 	.word	0x40005800
 8001db0:	000186a0 	.word	0x000186a0

08001db4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	; 0x30
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	2224      	movs	r2, #36	; 0x24
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f008 fde8 	bl	800a998 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dd0:	4b27      	ldr	r3, [pc, #156]	; (8001e70 <_ZL12MX_TIM1_Initv+0xbc>)
 8001dd2:	4a28      	ldr	r2, [pc, #160]	; (8001e74 <_ZL12MX_TIM1_Initv+0xc0>)
 8001dd4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <_ZL12MX_TIM1_Initv+0xbc>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ddc:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <_ZL12MX_TIM1_Initv+0xbc>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001de2:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <_ZL12MX_TIM1_Initv+0xbc>)
 8001de4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001de8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dea:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <_ZL12MX_TIM1_Initv+0xbc>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001df0:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <_ZL12MX_TIM1_Initv+0xbc>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <_ZL12MX_TIM1_Initv+0xbc>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e00:	2300      	movs	r3, #0
 8001e02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e04:	2301      	movs	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e14:	2301      	movs	r3, #1
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	4619      	mov	r1, r3
 8001e26:	4812      	ldr	r0, [pc, #72]	; (8001e70 <_ZL12MX_TIM1_Initv+0xbc>)
 8001e28:	f006 fa7a 	bl	8008320 <HAL_TIM_Encoder_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	bf14      	ite	ne
 8001e32:	2301      	movne	r3, #1
 8001e34:	2300      	moveq	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <_ZL12MX_TIM1_Initv+0x8c>
  {
    Error_Handler();
 8001e3c:	f000 fd1e 	bl	800287c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e40:	2300      	movs	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4808      	ldr	r0, [pc, #32]	; (8001e70 <_ZL12MX_TIM1_Initv+0xbc>)
 8001e4e:	f007 f965 	bl	800911c <HAL_TIMEx_MasterConfigSynchronization>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	bf14      	ite	ne
 8001e58:	2301      	movne	r3, #1
 8001e5a:	2300      	moveq	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 8001e62:	f000 fd0b 	bl	800287c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e66:	bf00      	nop
 8001e68:	3730      	adds	r7, #48	; 0x30
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000678 	.word	0x20000678
 8001e74:	40010000 	.word	0x40010000

08001e78 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	; 0x28
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7e:	f107 0320 	add.w	r3, r7, #32
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	611a      	str	r2, [r3, #16]
 8001e96:	615a      	str	r2, [r3, #20]
 8001e98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e9a:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <_ZL12MX_TIM2_Initv+0xe8>)
 8001e9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ea0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8001ea2:	4b2f      	ldr	r3, [pc, #188]	; (8001f60 <_ZL12MX_TIM2_Initv+0xe8>)
 8001ea4:	225f      	movs	r2, #95	; 0x5f
 8001ea6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <_ZL12MX_TIM2_Initv+0xe8>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8001eae:	4b2c      	ldr	r3, [pc, #176]	; (8001f60 <_ZL12MX_TIM2_Initv+0xe8>)
 8001eb0:	2231      	movs	r2, #49	; 0x31
 8001eb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <_ZL12MX_TIM2_Initv+0xe8>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eba:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <_ZL12MX_TIM2_Initv+0xe8>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ec0:	4827      	ldr	r0, [pc, #156]	; (8001f60 <_ZL12MX_TIM2_Initv+0xe8>)
 8001ec2:	f006 f915 	bl	80080f0 <HAL_TIM_PWM_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	bf14      	ite	ne
 8001ecc:	2301      	movne	r3, #1
 8001ece:	2300      	moveq	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 8001ed6:	f000 fcd1 	bl	800287c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eda:	2300      	movs	r3, #0
 8001edc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ee2:	f107 0320 	add.w	r3, r7, #32
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	481d      	ldr	r0, [pc, #116]	; (8001f60 <_ZL12MX_TIM2_Initv+0xe8>)
 8001eea:	f007 f917 	bl	800911c <HAL_TIMEx_MasterConfigSynchronization>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf14      	ite	ne
 8001ef4:	2301      	movne	r3, #1
 8001ef6:	2300      	moveq	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 8001efe:	f000 fcbd 	bl	800287c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f02:	2360      	movs	r3, #96	; 0x60
 8001f04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	2200      	movs	r2, #0
 8001f16:	4619      	mov	r1, r3
 8001f18:	4811      	ldr	r0, [pc, #68]	; (8001f60 <_ZL12MX_TIM2_Initv+0xe8>)
 8001f1a:	f006 fc3d 	bl	8008798 <HAL_TIM_PWM_ConfigChannel>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf14      	ite	ne
 8001f24:	2301      	movne	r3, #1
 8001f26:	2300      	moveq	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <_ZL12MX_TIM2_Initv+0xba>
  {
    Error_Handler();
 8001f2e:	f000 fca5 	bl	800287c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	2204      	movs	r2, #4
 8001f36:	4619      	mov	r1, r3
 8001f38:	4809      	ldr	r0, [pc, #36]	; (8001f60 <_ZL12MX_TIM2_Initv+0xe8>)
 8001f3a:	f006 fc2d 	bl	8008798 <HAL_TIM_PWM_ConfigChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf14      	ite	ne
 8001f44:	2301      	movne	r3, #1
 8001f46:	2300      	moveq	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8001f4e:	f000 fc95 	bl	800287c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f52:	4803      	ldr	r0, [pc, #12]	; (8001f60 <_ZL12MX_TIM2_Initv+0xe8>)
 8001f54:	f003 f9fc 	bl	8005350 <HAL_TIM_MspPostInit>

}
 8001f58:	bf00      	nop
 8001f5a:	3728      	adds	r7, #40	; 0x28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	200006c0 	.word	0x200006c0

08001f64 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08c      	sub	sp, #48	; 0x30
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f6a:	f107 030c 	add.w	r3, r7, #12
 8001f6e:	2224      	movs	r2, #36	; 0x24
 8001f70:	2100      	movs	r1, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f008 fd10 	bl	800a998 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f80:	4b25      	ldr	r3, [pc, #148]	; (8002018 <_ZL12MX_TIM3_Initv+0xb4>)
 8001f82:	4a26      	ldr	r2, [pc, #152]	; (800201c <_ZL12MX_TIM3_Initv+0xb8>)
 8001f84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f86:	4b24      	ldr	r3, [pc, #144]	; (8002018 <_ZL12MX_TIM3_Initv+0xb4>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8c:	4b22      	ldr	r3, [pc, #136]	; (8002018 <_ZL12MX_TIM3_Initv+0xb4>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f92:	4b21      	ldr	r3, [pc, #132]	; (8002018 <_ZL12MX_TIM3_Initv+0xb4>)
 8001f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9a:	4b1f      	ldr	r3, [pc, #124]	; (8002018 <_ZL12MX_TIM3_Initv+0xb4>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <_ZL12MX_TIM3_Initv+0xb4>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4811      	ldr	r0, [pc, #68]	; (8002018 <_ZL12MX_TIM3_Initv+0xb4>)
 8001fd2:	f006 f9a5 	bl	8008320 <HAL_TIM_Encoder_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	bf14      	ite	ne
 8001fdc:	2301      	movne	r3, #1
 8001fde:	2300      	moveq	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8001fe6:	f000 fc49 	bl	800287c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4808      	ldr	r0, [pc, #32]	; (8002018 <_ZL12MX_TIM3_Initv+0xb4>)
 8001ff8:	f007 f890 	bl	800911c <HAL_TIMEx_MasterConfigSynchronization>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	bf14      	ite	ne
 8002002:	2301      	movne	r3, #1
 8002004:	2300      	moveq	r3, #0
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 800200c:	f000 fc36 	bl	800287c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002010:	bf00      	nop
 8002012:	3730      	adds	r7, #48	; 0x30
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000708 	.word	0x20000708
 800201c:	40000400 	.word	0x40000400

08002020 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002026:	f107 0308 	add.w	r3, r7, #8
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002034:	463b      	mov	r3, r7
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800203c:	4b24      	ldr	r3, [pc, #144]	; (80020d0 <_ZL12MX_TIM5_Initv+0xb0>)
 800203e:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <_ZL12MX_TIM5_Initv+0xb4>)
 8002040:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9600-1;
 8002042:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <_ZL12MX_TIM5_Initv+0xb0>)
 8002044:	f242 527f 	movw	r2, #9599	; 0x257f
 8002048:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204a:	4b21      	ldr	r3, [pc, #132]	; (80020d0 <_ZL12MX_TIM5_Initv+0xb0>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50;
 8002050:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <_ZL12MX_TIM5_Initv+0xb0>)
 8002052:	2232      	movs	r2, #50	; 0x32
 8002054:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002056:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <_ZL12MX_TIM5_Initv+0xb0>)
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205c:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <_ZL12MX_TIM5_Initv+0xb0>)
 800205e:	2200      	movs	r2, #0
 8002060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002062:	481b      	ldr	r0, [pc, #108]	; (80020d0 <_ZL12MX_TIM5_Initv+0xb0>)
 8002064:	f005 ff84 	bl	8007f70 <HAL_TIM_Base_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	bf14      	ite	ne
 800206e:	2301      	movne	r3, #1
 8002070:	2300      	moveq	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <_ZL12MX_TIM5_Initv+0x5c>
  {
    Error_Handler();
 8002078:	f000 fc00 	bl	800287c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800207c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002080:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002082:	f107 0308 	add.w	r3, r7, #8
 8002086:	4619      	mov	r1, r3
 8002088:	4811      	ldr	r0, [pc, #68]	; (80020d0 <_ZL12MX_TIM5_Initv+0xb0>)
 800208a:	f006 fc47 	bl	800891c <HAL_TIM_ConfigClockSource>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf14      	ite	ne
 8002094:	2301      	movne	r3, #1
 8002096:	2300      	moveq	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <_ZL12MX_TIM5_Initv+0x82>
  {
    Error_Handler();
 800209e:	f000 fbed 	bl	800287c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020aa:	463b      	mov	r3, r7
 80020ac:	4619      	mov	r1, r3
 80020ae:	4808      	ldr	r0, [pc, #32]	; (80020d0 <_ZL12MX_TIM5_Initv+0xb0>)
 80020b0:	f007 f834 	bl	800911c <HAL_TIMEx_MasterConfigSynchronization>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf14      	ite	ne
 80020ba:	2301      	movne	r3, #1
 80020bc:	2300      	moveq	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <_ZL12MX_TIM5_Initv+0xa8>
  {
    Error_Handler();
 80020c4:	f000 fbda 	bl	800287c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80020c8:	bf00      	nop
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000750 	.word	0x20000750
 80020d4:	40000c00 	.word	0x40000c00

080020d8 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80020dc:	4b10      	ldr	r3, [pc, #64]	; (8002120 <_ZL13MX_TIM14_Initv+0x48>)
 80020de:	4a11      	ldr	r2, [pc, #68]	; (8002124 <_ZL13MX_TIM14_Initv+0x4c>)
 80020e0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 9600-1;
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <_ZL13MX_TIM14_Initv+0x48>)
 80020e4:	f242 527f 	movw	r2, #9599	; 0x257f
 80020e8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <_ZL13MX_TIM14_Initv+0x48>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50;
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <_ZL13MX_TIM14_Initv+0x48>)
 80020f2:	2232      	movs	r2, #50	; 0x32
 80020f4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f6:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <_ZL13MX_TIM14_Initv+0x48>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <_ZL13MX_TIM14_Initv+0x48>)
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002102:	4807      	ldr	r0, [pc, #28]	; (8002120 <_ZL13MX_TIM14_Initv+0x48>)
 8002104:	f005 ff34 	bl	8007f70 <HAL_TIM_Base_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	bf14      	ite	ne
 800210e:	2301      	movne	r3, #1
 8002110:	2300      	moveq	r3, #0
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 8002118:	f000 fbb0 	bl	800287c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000798 	.word	0x20000798
 8002124:	40002000 	.word	0x40002000

08002128 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <_ZL19MX_USART2_UART_Initv+0x54>)
 800212e:	4a14      	ldr	r2, [pc, #80]	; (8002180 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002130:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002134:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002138:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800213a:	4b10      	ldr	r3, [pc, #64]	; (800217c <_ZL19MX_USART2_UART_Initv+0x54>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002140:	4b0e      	ldr	r3, [pc, #56]	; (800217c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002146:	4b0d      	ldr	r3, [pc, #52]	; (800217c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <_ZL19MX_USART2_UART_Initv+0x54>)
 800214e:	220c      	movs	r2, #12
 8002150:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <_ZL19MX_USART2_UART_Initv+0x54>)
 800215a:	2200      	movs	r2, #0
 800215c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800215e:	4807      	ldr	r0, [pc, #28]	; (800217c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002160:	f007 f86c 	bl	800923c <HAL_UART_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	bf14      	ite	ne
 800216a:	2301      	movne	r3, #1
 800216c:	2300      	moveq	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002174:	f000 fb82 	bl	800287c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	200007e0 	.word	0x200007e0
 8002180:	40004400 	.word	0x40004400

08002184 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <_ZL11MX_DMA_Initv+0x4c>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <_ZL11MX_DMA_Initv+0x4c>)
 8002194:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <_ZL11MX_DMA_Initv+0x4c>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2100      	movs	r1, #0
 80021aa:	2010      	movs	r0, #16
 80021ac:	f003 fcd9 	bl	8005b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80021b0:	2010      	movs	r0, #16
 80021b2:	f003 fcf2 	bl	8005b9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2100      	movs	r1, #0
 80021ba:	2011      	movs	r0, #17
 80021bc:	f003 fcd1 	bl	8005b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80021c0:	2011      	movs	r0, #17
 80021c2:	f003 fcea 	bl	8005b9a <HAL_NVIC_EnableIRQ>

}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800

080021d4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	; 0x28
 80021d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021da:	f107 0314 	add.w	r3, r7, #20
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
 80021e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <_ZL12MX_GPIO_Initv+0xfc>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a37      	ldr	r2, [pc, #220]	; (80022d0 <_ZL12MX_GPIO_Initv+0xfc>)
 80021f4:	f043 0304 	orr.w	r3, r3, #4
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b35      	ldr	r3, [pc, #212]	; (80022d0 <_ZL12MX_GPIO_Initv+0xfc>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <_ZL12MX_GPIO_Initv+0xfc>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a30      	ldr	r2, [pc, #192]	; (80022d0 <_ZL12MX_GPIO_Initv+0xfc>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <_ZL12MX_GPIO_Initv+0xfc>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <_ZL12MX_GPIO_Initv+0xfc>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a29      	ldr	r2, [pc, #164]	; (80022d0 <_ZL12MX_GPIO_Initv+0xfc>)
 800222c:	f043 0310 	orr.w	r3, r3, #16
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <_ZL12MX_GPIO_Initv+0xfc>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <_ZL12MX_GPIO_Initv+0xfc>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a22      	ldr	r2, [pc, #136]	; (80022d0 <_ZL12MX_GPIO_Initv+0xfc>)
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <_ZL12MX_GPIO_Initv+0xfc>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <_ZL12MX_GPIO_Initv+0xfc>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a1b      	ldr	r2, [pc, #108]	; (80022d0 <_ZL12MX_GPIO_Initv+0xfc>)
 8002264:	f043 0308 	orr.w	r3, r3, #8
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <_ZL12MX_GPIO_Initv+0xfc>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8002276:	2200      	movs	r2, #0
 8002278:	2101      	movs	r1, #1
 800227a:	4816      	ldr	r0, [pc, #88]	; (80022d4 <_ZL12MX_GPIO_Initv+0x100>)
 800227c:	f004 fa46 	bl	800670c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8002280:	2200      	movs	r2, #0
 8002282:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002286:	4814      	ldr	r0, [pc, #80]	; (80022d8 <_ZL12MX_GPIO_Initv+0x104>)
 8002288:	f004 fa40 	bl	800670c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800228c:	2301      	movs	r3, #1
 800228e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002290:	2301      	movs	r3, #1
 8002292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002298:	2300      	movs	r3, #0
 800229a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	480c      	ldr	r0, [pc, #48]	; (80022d4 <_ZL12MX_GPIO_Initv+0x100>)
 80022a4:	f004 f896 	bl	80063d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ae:	2301      	movs	r3, #1
 80022b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022b6:	2302      	movs	r3, #2
 80022b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ba:	f107 0314 	add.w	r3, r7, #20
 80022be:	4619      	mov	r1, r3
 80022c0:	4805      	ldr	r0, [pc, #20]	; (80022d8 <_ZL12MX_GPIO_Initv+0x104>)
 80022c2:	f004 f887 	bl	80063d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022c6:	bf00      	nop
 80022c8:	3728      	adds	r7, #40	; 0x28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40020800 	.word	0x40020800
 80022d8:	40020400 	.word	0x40020400
 80022dc:	00000000 	.word	0x00000000

080022e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022e0:	b5b0      	push	{r4, r5, r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  // Callback, timer has rolled over
  if (htim == &htim5) //100Hz
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a5d      	ldr	r2, [pc, #372]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	f040 81e0 	bne.w	80026b2 <HAL_TIM_PeriodElapsedCallback+0x3d2>
  {
  attitude = imu.calcAttitude();
 80022f2:	485c      	ldr	r0, [pc, #368]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80022f4:	f7ff fb5c 	bl	80019b0 <_ZN7MPUXX5012calcAttitudeEv>
 80022f8:	eef0 6a40 	vmov.f32	s13, s0
 80022fc:	eeb0 7a60 	vmov.f32	s14, s1
 8002300:	eef0 7a41 	vmov.f32	s15, s2
 8002304:	4b58      	ldr	r3, [pc, #352]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002306:	edc3 6a00 	vstr	s13, [r3]
 800230a:	ed83 7a01 	vstr	s14, [r3, #4]
 800230e:	edc3 7a02 	vstr	s15, [r3, #8]
//	  Setpoint_value_m1 = 120;
//	  Setpoint_value_m2 = 100;
	//Wheel 1
	//Encoder_cnt_m1 = __HAL_TIM_GET_COUNTER(&htim3);
	//m1.v = (Encoder_cnt_m1 * 3000) / 960;
	m1.v = rpm1;
 8002312:	4b56      	ldr	r3, [pc, #344]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a56      	ldr	r2, [pc, #344]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002318:	61d3      	str	r3, [r2, #28]
	m1.e = Setpoint_value_m1 - m1.v;					// e(t)=r(t) - v(t)
 800231a:	4b56      	ldr	r3, [pc, #344]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800231c:	ed93 7a00 	vldr	s14, [r3]
 8002320:	4b53      	ldr	r3, [pc, #332]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002322:	edd3 7a07 	vldr	s15, [r3, #28]
 8002326:	ee77 7a67 	vsub.f32	s15, s14, s15
 800232a:	4b51      	ldr	r3, [pc, #324]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800232c:	edc3 7a01 	vstr	s15, [r3, #4]

	m1.P_control = Kp_m1 * (m1.e - m1.e_prev);			// Kp*(e(k) - e(k-1)
 8002330:	4b4f      	ldr	r3, [pc, #316]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002332:	ed93 7a01 	vldr	s14, [r3, #4]
 8002336:	4b4e      	ldr	r3, [pc, #312]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002338:	edd3 7a02 	vldr	s15, [r3, #8]
 800233c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002340:	4b4d      	ldr	r3, [pc, #308]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002342:	edd3 7a00 	vldr	s15, [r3]
 8002346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800234a:	4b49      	ldr	r3, [pc, #292]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800234c:	edc3 7a04 	vstr	s15, [r3, #16]
	m1.I_control = 0.5 * Ki_m1 * 0.01 * (m1.e + m1.e_prev);// Ki*T/2*(e(k) + e(k-1))
 8002350:	4b4a      	ldr	r3, [pc, #296]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f8f7 	bl	8000548 <__aeabi_f2d>
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	4b48      	ldr	r3, [pc, #288]	; (8002480 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002360:	f7fe f94a 	bl	80005f8 <__aeabi_dmul>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	a33a      	add	r3, pc, #232	; (adr r3, 8002458 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002372:	f7fe f941 	bl	80005f8 <__aeabi_dmul>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4614      	mov	r4, r2
 800237c:	461d      	mov	r5, r3
 800237e:	4b3c      	ldr	r3, [pc, #240]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002380:	ed93 7a01 	vldr	s14, [r3, #4]
 8002384:	4b3a      	ldr	r3, [pc, #232]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002386:	edd3 7a02 	vldr	s15, [r3, #8]
 800238a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238e:	ee17 0a90 	vmov	r0, s15
 8002392:	f7fe f8d9 	bl	8000548 <__aeabi_f2d>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4620      	mov	r0, r4
 800239c:	4629      	mov	r1, r5
 800239e:	f7fe f92b 	bl	80005f8 <__aeabi_dmul>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	f7fe fc1d 	bl	8000be8 <__aeabi_d2f>
 80023ae:	4603      	mov	r3, r0
 80023b0:	4a2f      	ldr	r2, [pc, #188]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80023b2:	6153      	str	r3, [r2, #20]
	m1.D_control = Kd_m1 * 100 * (m1.e - 2 * m1.e_prev + m1.e_prev_prev);
 80023b4:	4b33      	ldr	r3, [pc, #204]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80023b6:	edd3 7a00 	vldr	s15, [r3]
 80023ba:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002488 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 80023be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023c2:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80023c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80023c8:	4b29      	ldr	r3, [pc, #164]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80023ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80023ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80023d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80023dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e4:	4b22      	ldr	r3, [pc, #136]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80023e6:	edc3 7a06 	vstr	s15, [r3, #24]
	m1.u = m1.u_prev + m1.P_control + m1.I_control + m1.D_control;// next signal to motor
 80023ea:	4b21      	ldr	r3, [pc, #132]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80023ec:	ed93 7a00 	vldr	s14, [r3]
 80023f0:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80023f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80023f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fa:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80023fc:	edd3 7a05 	vldr	s15, [r3, #20]
 8002400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002404:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002406:	edd3 7a06 	vldr	s15, [r3, #24]
 800240a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240e:	4b18      	ldr	r3, [pc, #96]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002410:	edc3 7a08 	vstr	s15, [r3, #32]
//		m1.I_control = Ki_m1 * 0.01 * (m1.e);
//		m1.D_control = Kd_m1 * 100 * (m1.e -  m1.e_prev);
//		m1.u = m1.P_control + m1.I_control + m1.D_control;

	//Convert signal in RPM to duty cycle
	duty_m1 = (int) (m1.u);	// u/176 = x/600 => x = u*600/176
 8002414:	4b16      	ldr	r3, [pc, #88]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002416:	edd3 7a08 	vldr	s15, [r3, #32]
 800241a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800241e:	ee17 3a90 	vmov	r3, s15
 8002422:	b21a      	sxth	r2, r3
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002426:	801a      	strh	r2, [r3, #0]

	//Turn of DIR Pin if control signal is negative
	if (m1.u < 0) {
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800242a:	edd3 7a08 	vldr	s15, [r3, #32]
 800242e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002436:	d52d      	bpl.n	8002494 <HAL_TIM_PeriodElapsedCallback+0x1b4>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);// DIR PIN = 1
 8002438:	2201      	movs	r2, #1
 800243a:	2101      	movs	r1, #1
 800243c:	4814      	ldr	r0, [pc, #80]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800243e:	f004 f965 	bl	800670c <HAL_GPIO_WritePin>
	duty_m1 = -duty_m1;
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	b21b      	sxth	r3, r3
 8002448:	b29b      	uxth	r3, r3
 800244a:	425b      	negs	r3, r3
 800244c:	b29b      	uxth	r3, r3
 800244e:	b21a      	sxth	r2, r3
 8002450:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002452:	801a      	strh	r2, [r3, #0]
 8002454:	e023      	b.n	800249e <HAL_TIM_PeriodElapsedCallback+0x1be>
 8002456:	bf00      	nop
 8002458:	47ae147b 	.word	0x47ae147b
 800245c:	3f847ae1 	.word	0x3f847ae1
 8002460:	20000750 	.word	0x20000750
 8002464:	20000988 	.word	0x20000988
 8002468:	200008e4 	.word	0x200008e4
 800246c:	20000974 	.word	0x20000974
 8002470:	20000914 	.word	0x20000914
 8002474:	200008f0 	.word	0x200008f0
 8002478:	200008f8 	.word	0x200008f8
 800247c:	20000900 	.word	0x20000900
 8002480:	3fe00000 	.word	0x3fe00000
 8002484:	20000908 	.word	0x20000908
 8002488:	42c80000 	.word	0x42c80000
 800248c:	20000910 	.word	0x20000910
 8002490:	40020800 	.word	0x40020800
	} else{
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);// DIR PIN = 0;
 8002494:	2200      	movs	r2, #0
 8002496:	2101      	movs	r1, #1
 8002498:	4865      	ldr	r0, [pc, #404]	; (8002630 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800249a:	f004 f937 	bl	800670c <HAL_GPIO_WritePin>
	}
	// New PWM width for motor

	if (duty_m1 > 50)
 800249e:	4b65      	ldr	r3, [pc, #404]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	b21b      	sxth	r3, r3
 80024a4:	2b32      	cmp	r3, #50	; 0x32
 80024a6:	bfcc      	ite	gt
 80024a8:	2301      	movgt	r3, #1
 80024aa:	2300      	movle	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <HAL_TIM_PeriodElapsedCallback+0x1d8>
	{
		duty_m1 = 50;
 80024b2:	4b60      	ldr	r3, [pc, #384]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80024b4:	2232      	movs	r2, #50	; 0x32
 80024b6:	801a      	strh	r2, [r3, #0]
	}

	htim2.Instance->CCR1 = duty_m1;
 80024b8:	4b5e      	ldr	r3, [pc, #376]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	b21a      	sxth	r2, r3
 80024be:	4b5e      	ldr	r3, [pc, #376]	; (8002638 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	635a      	str	r2, [r3, #52]	; 0x34
	m1.e_prev_prev = m1.e_prev;
 80024c4:	4b5d      	ldr	r3, [pc, #372]	; (800263c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4a5c      	ldr	r2, [pc, #368]	; (800263c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80024ca:	60d3      	str	r3, [r2, #12]
	m1.e_prev = m1.e;
 80024cc:	4b5b      	ldr	r3, [pc, #364]	; (800263c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a5a      	ldr	r2, [pc, #360]	; (800263c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80024d2:	6093      	str	r3, [r2, #8]
	m1.u_prev = m1.u;
 80024d4:	4b59      	ldr	r3, [pc, #356]	; (800263c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4a58      	ldr	r2, [pc, #352]	; (800263c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80024da:	6013      	str	r3, [r2, #0]
	//__HAL_TIM_SET_COUNTER(&htim3, 0);			// Reset value of encoder

	//Wheel 2
	//Encoder_cnt_m2 = __HAL_TIM_GET_COUNTER(&htim1);
	m2.v = rpm2;
 80024dc:	4b58      	ldr	r3, [pc, #352]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a58      	ldr	r2, [pc, #352]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80024e2:	61d3      	str	r3, [r2, #28]
	m2.e = Setpoint_value_m2 - m2.v;					// e(t)=r(t) - v(t)
 80024e4:	4b58      	ldr	r3, [pc, #352]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80024e6:	ed93 7a00 	vldr	s14, [r3]
 80024ea:	4b56      	ldr	r3, [pc, #344]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80024ec:	edd3 7a07 	vldr	s15, [r3, #28]
 80024f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f4:	4b53      	ldr	r3, [pc, #332]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80024f6:	edc3 7a01 	vstr	s15, [r3, #4]
	m2.P_control = Kp_m2 * (m2.e - m2.e_prev);			// Kp*(e(k) - e(k-1)
 80024fa:	4b52      	ldr	r3, [pc, #328]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80024fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002500:	4b50      	ldr	r3, [pc, #320]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8002502:	edd3 7a02 	vldr	s15, [r3, #8]
 8002506:	ee37 7a67 	vsub.f32	s14, s14, s15
 800250a:	4b50      	ldr	r3, [pc, #320]	; (800264c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800250c:	edd3 7a00 	vldr	s15, [r3]
 8002510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002514:	4b4b      	ldr	r3, [pc, #300]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8002516:	edc3 7a04 	vstr	s15, [r3, #16]
	m2.I_control = 0.5 * Ki_m2 * 0.01 * (m2.e + m2.e_prev);// Ki*T/2*(e(k) + e(k-1))
 800251a:	4b4d      	ldr	r3, [pc, #308]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe f812 	bl	8000548 <__aeabi_f2d>
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	4b4a      	ldr	r3, [pc, #296]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800252a:	f7fe f865 	bl	80005f8 <__aeabi_dmul>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	a33c      	add	r3, pc, #240	; (adr r3, 8002628 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fe f85c 	bl	80005f8 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4614      	mov	r4, r2
 8002546:	461d      	mov	r5, r3
 8002548:	4b3e      	ldr	r3, [pc, #248]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800254a:	ed93 7a01 	vldr	s14, [r3, #4]
 800254e:	4b3d      	ldr	r3, [pc, #244]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8002550:	edd3 7a02 	vldr	s15, [r3, #8]
 8002554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002558:	ee17 0a90 	vmov	r0, s15
 800255c:	f7fd fff4 	bl	8000548 <__aeabi_f2d>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	f7fe f846 	bl	80005f8 <__aeabi_dmul>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f7fe fb38 	bl	8000be8 <__aeabi_d2f>
 8002578:	4603      	mov	r3, r0
 800257a:	4a32      	ldr	r2, [pc, #200]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800257c:	6153      	str	r3, [r2, #20]
	m2.D_control = Kd_m2 * 100 * (m2.e - 2 * m2.e_prev + m2.e_prev_prev);
 800257e:	4b36      	ldr	r3, [pc, #216]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8002580:	edd3 7a00 	vldr	s15, [r3]
 8002584:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800265c <HAL_TIM_PeriodElapsedCallback+0x37c>
 8002588:	ee27 7a87 	vmul.f32	s14, s15, s14
 800258c:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800258e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002592:	4b2c      	ldr	r3, [pc, #176]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8002594:	edd3 7a02 	vldr	s15, [r3, #8]
 8002598:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800259c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80025a0:	4b28      	ldr	r3, [pc, #160]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80025a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80025a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ae:	4b25      	ldr	r3, [pc, #148]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80025b0:	edc3 7a06 	vstr	s15, [r3, #24]
	m2.u = m2.u_prev + m2.P_control + m2.I_control + m2.D_control;// next signal to motor
 80025b4:	4b23      	ldr	r3, [pc, #140]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80025b6:	ed93 7a00 	vldr	s14, [r3]
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80025bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80025c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025c4:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80025c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80025ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ce:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80025d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80025d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d8:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80025da:	edc3 7a08 	vstr	s15, [r3, #32]
//	m2.u = m2.P_control + m2.I_control + m2.D_control;

	//Convert signal in RPM to duty cycle: 600 is htim2.Init.Period,
	//and 208 is max of u when duty cycle = 100%
	//duty_m2 = (int) (m2.u * 374 / 100);	// u/176 = x/600 => x = u*600/176
	duty_m2 = (int) (m2.u);
 80025de:	4b19      	ldr	r3, [pc, #100]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80025e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80025e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025e8:	ee17 3a90 	vmov	r3, s15
 80025ec:	b21a      	sxth	r2, r3
 80025ee:	4b1c      	ldr	r3, [pc, #112]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80025f0:	801a      	strh	r2, [r3, #0]
	//Turn of DIR Pin if control signal is negative
	if (m2.u < 0) {
 80025f2:	4b14      	ldr	r3, [pc, #80]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80025f4:	edd3 7a08 	vldr	s15, [r3, #32]
 80025f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002600:	d532      	bpl.n	8002668 <HAL_TIM_PeriodElapsedCallback+0x388>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);// DIR PIN = 1
 8002602:	2201      	movs	r2, #1
 8002604:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002608:	4816      	ldr	r0, [pc, #88]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800260a:	f004 f87f 	bl	800670c <HAL_GPIO_WritePin>
	duty_m2 = -duty_m2;
 800260e:	4b14      	ldr	r3, [pc, #80]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	b21b      	sxth	r3, r3
 8002614:	b29b      	uxth	r3, r3
 8002616:	425b      	negs	r3, r3
 8002618:	b29b      	uxth	r3, r3
 800261a:	b21a      	sxth	r2, r3
 800261c:	4b10      	ldr	r3, [pc, #64]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800261e:	801a      	strh	r2, [r3, #0]
 8002620:	e028      	b.n	8002674 <HAL_TIM_PeriodElapsedCallback+0x394>
 8002622:	bf00      	nop
 8002624:	f3af 8000 	nop.w
 8002628:	47ae147b 	.word	0x47ae147b
 800262c:	3f847ae1 	.word	0x3f847ae1
 8002630:	40020800 	.word	0x40020800
 8002634:	20000910 	.word	0x20000910
 8002638:	200006c0 	.word	0x200006c0
 800263c:	20000914 	.word	0x20000914
 8002640:	20000978 	.word	0x20000978
 8002644:	20000938 	.word	0x20000938
 8002648:	200008f4 	.word	0x200008f4
 800264c:	200008fc 	.word	0x200008fc
 8002650:	20000904 	.word	0x20000904
 8002654:	3fe00000 	.word	0x3fe00000
 8002658:	2000090c 	.word	0x2000090c
 800265c:	42c80000 	.word	0x42c80000
 8002660:	20000912 	.word	0x20000912
 8002664:	40020400 	.word	0x40020400
	} else
	{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);// DIR PIN = 0;
 8002668:	2200      	movs	r2, #0
 800266a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800266e:	486e      	ldr	r0, [pc, #440]	; (8002828 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002670:	f004 f84c 	bl	800670c <HAL_GPIO_WritePin>
	}
	// New PWM width for motor

	if (duty_m2 > 50)
 8002674:	4b6d      	ldr	r3, [pc, #436]	; (800282c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	b21b      	sxth	r3, r3
 800267a:	2b32      	cmp	r3, #50	; 0x32
 800267c:	bfcc      	ite	gt
 800267e:	2301      	movgt	r3, #1
 8002680:	2300      	movle	r3, #0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <HAL_TIM_PeriodElapsedCallback+0x3ae>
	{
		duty_m2 = 50;
 8002688:	4b68      	ldr	r3, [pc, #416]	; (800282c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 800268a:	2232      	movs	r2, #50	; 0x32
 800268c:	801a      	strh	r2, [r3, #0]
	}

	htim2.Instance->CCR2 = duty_m2;
 800268e:	4b67      	ldr	r3, [pc, #412]	; (800282c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b21a      	sxth	r2, r3
 8002694:	4b66      	ldr	r3, [pc, #408]	; (8002830 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	639a      	str	r2, [r3, #56]	; 0x38
	m2.e_prev_prev = m2.e_prev;
 800269a:	4b66      	ldr	r3, [pc, #408]	; (8002834 <HAL_TIM_PeriodElapsedCallback+0x554>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	4a65      	ldr	r2, [pc, #404]	; (8002834 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80026a0:	60d3      	str	r3, [r2, #12]
	m2.e_prev = m2.e;
 80026a2:	4b64      	ldr	r3, [pc, #400]	; (8002834 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	4a63      	ldr	r2, [pc, #396]	; (8002834 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80026a8:	6093      	str	r3, [r2, #8]
	m2.u_prev = m2.u;
 80026aa:	4b62      	ldr	r3, [pc, #392]	; (8002834 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4a61      	ldr	r2, [pc, #388]	; (8002834 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80026b0:	6013      	str	r3, [r2, #0]
	//__HAL_TIM_SET_COUNTER(&htim1, 0);			// Reset value of encoder
  }
  if (htim == &htim14) //100Hz
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a60      	ldr	r2, [pc, #384]	; (8002838 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	f040 80ad 	bne.w	8002816 <HAL_TIM_PeriodElapsedCallback+0x536>
  {
	  start_time = HAL_GetTick()/1000.0;
 80026bc:	f003 f946 	bl	800594c <HAL_GetTick>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fd ff1e 	bl	8000504 <__aeabi_ui2d>
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	4b5b      	ldr	r3, [pc, #364]	; (800283c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 80026ce:	f7fe f8bd 	bl	800084c <__aeabi_ddiv>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	f7fe fa85 	bl	8000be8 <__aeabi_d2f>
 80026de:	4603      	mov	r3, r0
 80026e0:	4a57      	ldr	r2, [pc, #348]	; (8002840 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80026e2:	6013      	str	r3, [r2, #0]
	  frequency = 1/(start_time-end_time);
 80026e4:	4b56      	ldr	r3, [pc, #344]	; (8002840 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80026e6:	ed93 7a00 	vldr	s14, [r3]
 80026ea:	4b56      	ldr	r3, [pc, #344]	; (8002844 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026fc:	4b52      	ldr	r3, [pc, #328]	; (8002848 <HAL_TIM_PeriodElapsedCallback+0x568>)
 80026fe:	edc3 7a00 	vstr	s15, [r3]
	  end_time = start_time;
 8002702:	4b4f      	ldr	r3, [pc, #316]	; (8002840 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a4f      	ldr	r2, [pc, #316]	; (8002844 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002708:	6013      	str	r3, [r2, #0]
	  Encoder_cnt1 = __HAL_TIM_GET_COUNTER(&htim1);
 800270a:	4b50      	ldr	r3, [pc, #320]	; (800284c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	461a      	mov	r2, r3
 8002712:	4b4f      	ldr	r3, [pc, #316]	; (8002850 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002714:	601a      	str	r2, [r3, #0]
	  Encoder_cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 8002716:	4b4f      	ldr	r3, [pc, #316]	; (8002854 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	461a      	mov	r2, r3
 800271e:	4b4e      	ldr	r3, [pc, #312]	; (8002858 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8002720:	601a      	str	r2, [r3, #0]
	  if (!(abs(Encoder_cnt1 - pre_Encoder_cnt1) > 30000))
 8002722:	4b4b      	ldr	r3, [pc, #300]	; (8002850 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4b4d      	ldr	r3, [pc, #308]	; (800285c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	bfb8      	it	lt
 8002730:	425b      	neglt	r3, r3
 8002732:	f247 5230 	movw	r2, #30000	; 0x7530
 8002736:	4293      	cmp	r3, r2
 8002738:	dc2c      	bgt.n	8002794 <HAL_TIM_PeriodElapsedCallback+0x4b4>
	  {
		  rps1 = ((float)abs(Encoder_cnt1 - pre_Encoder_cnt1) / encoder_cpr) / 0.01; // calculate RPS 1
 800273a:	4b45      	ldr	r3, [pc, #276]	; (8002850 <HAL_TIM_PeriodElapsedCallback+0x570>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4b47      	ldr	r3, [pc, #284]	; (800285c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	bfb8      	it	lt
 8002748:	425b      	neglt	r3, r3
 800274a:	ee07 3a90 	vmov	s15, r3
 800274e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002752:	4b43      	ldr	r3, [pc, #268]	; (8002860 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8002754:	edd3 7a00 	vldr	s15, [r3]
 8002758:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800275c:	ee16 0a90 	vmov	r0, s13
 8002760:	f7fd fef2 	bl	8000548 <__aeabi_f2d>
 8002764:	a32e      	add	r3, pc, #184	; (adr r3, 8002820 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276a:	f7fe f86f 	bl	800084c <__aeabi_ddiv>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4610      	mov	r0, r2
 8002774:	4619      	mov	r1, r3
 8002776:	f7fe fa37 	bl	8000be8 <__aeabi_d2f>
 800277a:	4603      	mov	r3, r0
 800277c:	4a39      	ldr	r2, [pc, #228]	; (8002864 <HAL_TIM_PeriodElapsedCallback+0x584>)
 800277e:	6013      	str	r3, [r2, #0]
		  rpm1 = rps1*60.0;
 8002780:	4b38      	ldr	r3, [pc, #224]	; (8002864 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002868 <HAL_TIM_PeriodElapsedCallback+0x588>
 800278a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800278e:	4b37      	ldr	r3, [pc, #220]	; (800286c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8002790:	edc3 7a00 	vstr	s15, [r3]
	  }
	  if (!(abs(Encoder_cnt2 - pre_Encoder_cnt2) > 30000))
 8002794:	4b30      	ldr	r3, [pc, #192]	; (8002858 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b35      	ldr	r3, [pc, #212]	; (8002870 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bfb8      	it	lt
 80027a2:	425b      	neglt	r3, r3
 80027a4:	f247 5230 	movw	r2, #30000	; 0x7530
 80027a8:	4293      	cmp	r3, r2
 80027aa:	dc2c      	bgt.n	8002806 <HAL_TIM_PeriodElapsedCallback+0x526>
	  {
		  rps2 = ((float)abs(Encoder_cnt2 - pre_Encoder_cnt2) / encoder_cpr) / 0.01; // calculate RPS 2
 80027ac:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <HAL_TIM_PeriodElapsedCallback+0x578>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	bfb8      	it	lt
 80027ba:	425b      	neglt	r3, r3
 80027bc:	ee07 3a90 	vmov	s15, r3
 80027c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027c4:	4b26      	ldr	r3, [pc, #152]	; (8002860 <HAL_TIM_PeriodElapsedCallback+0x580>)
 80027c6:	edd3 7a00 	vldr	s15, [r3]
 80027ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80027ce:	ee16 0a90 	vmov	r0, s13
 80027d2:	f7fd feb9 	bl	8000548 <__aeabi_f2d>
 80027d6:	a312      	add	r3, pc, #72	; (adr r3, 8002820 <HAL_TIM_PeriodElapsedCallback+0x540>)
 80027d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027dc:	f7fe f836 	bl	800084c <__aeabi_ddiv>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4610      	mov	r0, r2
 80027e6:	4619      	mov	r1, r3
 80027e8:	f7fe f9fe 	bl	8000be8 <__aeabi_d2f>
 80027ec:	4603      	mov	r3, r0
 80027ee:	4a21      	ldr	r2, [pc, #132]	; (8002874 <HAL_TIM_PeriodElapsedCallback+0x594>)
 80027f0:	6013      	str	r3, [r2, #0]
		  rpm2 = rps2*60.0;
 80027f2:	4b20      	ldr	r3, [pc, #128]	; (8002874 <HAL_TIM_PeriodElapsedCallback+0x594>)
 80027f4:	edd3 7a00 	vldr	s15, [r3]
 80027f8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002868 <HAL_TIM_PeriodElapsedCallback+0x588>
 80027fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002800:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002802:	edc3 7a00 	vstr	s15, [r3]
	  }
	  pre_Encoder_cnt1 = Encoder_cnt1;
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a14      	ldr	r2, [pc, #80]	; (800285c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 800280c:	6013      	str	r3, [r2, #0]
	  pre_Encoder_cnt2 = Encoder_cnt2;
 800280e:	4b12      	ldr	r3, [pc, #72]	; (8002858 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a17      	ldr	r2, [pc, #92]	; (8002870 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8002814:	6013      	str	r3, [r2, #0]
  }
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bdb0      	pop	{r4, r5, r7, pc}
 800281e:	bf00      	nop
 8002820:	47ae147b 	.word	0x47ae147b
 8002824:	3f847ae1 	.word	0x3f847ae1
 8002828:	40020400 	.word	0x40020400
 800282c:	20000912 	.word	0x20000912
 8002830:	200006c0 	.word	0x200006c0
 8002834:	20000938 	.word	0x20000938
 8002838:	20000798 	.word	0x20000798
 800283c:	408f4000 	.word	0x408f4000
 8002840:	2000097c 	.word	0x2000097c
 8002844:	20000980 	.word	0x20000980
 8002848:	20000984 	.word	0x20000984
 800284c:	20000678 	.word	0x20000678
 8002850:	2000095c 	.word	0x2000095c
 8002854:	20000708 	.word	0x20000708
 8002858:	20000964 	.word	0x20000964
 800285c:	20000960 	.word	0x20000960
 8002860:	20000000 	.word	0x20000000
 8002864:	2000096c 	.word	0x2000096c
 8002868:	42700000 	.word	0x42700000
 800286c:	20000974 	.word	0x20000974
 8002870:	20000968 	.word	0x20000968
 8002874:	20000970 	.word	0x20000970
 8002878:	20000978 	.word	0x20000978

0800287c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002880:	b672      	cpsid	i
}
 8002882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002884:	e7fe      	b.n	8002884 <Error_Handler+0x8>
	...

08002888 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d109      	bne.n	80028ac <_Z41__static_initialization_and_destruction_0ii+0x24>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800289e:	4293      	cmp	r3, r2
 80028a0:	d104      	bne.n	80028ac <_Z41__static_initialization_and_destruction_0ii+0x24>
MPUXX50 imu(&hi2c2, AD0_LOW);
 80028a2:	2268      	movs	r2, #104	; 0x68
 80028a4:	4903      	ldr	r1, [pc, #12]	; (80028b4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80028a6:	4804      	ldr	r0, [pc, #16]	; (80028b8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80028a8:	f7fe fd6a 	bl	8001380 <_ZN7MPUXX50C1EP17I2C_HandleTypeDefh>
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20000624 	.word	0x20000624
 80028b8:	20000988 	.word	0x20000988

080028bc <_GLOBAL__sub_I_hi2c2>:
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
 80028c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80028c4:	2001      	movs	r0, #1
 80028c6:	f7ff ffdf 	bl	8002888 <_Z41__static_initialization_and_destruction_0ii>
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <_ZN3ros3MsgC1Ev+0x1c>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	0800f5f4 	.word	0x0800f5f4

080028ec <_ZN10custom_msg17encoder_input_msgC1Ev>:
      typedef float _input_Ki_m2_type;
      _input_Ki_m2_type input_Ki_m2;
      typedef float _input_Kd_m2_type;
      _input_Kd_m2_type input_Kd_m2;

    encoder_input_msg():
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
      input_Ki_m1(0),
      input_Kd_m1(0),
      input_setpoint_m2(0),
      input_Kp_m2(0),
      input_Ki_m2(0),
      input_Kd_m2(0)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff ffe8 	bl	80028cc <_ZN3ros3MsgC1Ev>
 80028fc:	4a13      	ldr	r2, [pc, #76]	; (800294c <_ZN10custom_msg17encoder_input_msgC1Ev+0x60>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	611a      	str	r2, [r3, #16]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	615a      	str	r2, [r3, #20]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	619a      	str	r2, [r3, #24]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	61da      	str	r2, [r3, #28]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	621a      	str	r2, [r3, #32]
    {
    }
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	0800f5dc 	.word	0x0800f5dc

08002950 <_ZNK10custom_msg17encoder_input_msg9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002950:	b480      	push	{r7}
 8002952:	b08d      	sub	sp, #52	; 0x34
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_setpoint_m1;
      u_input_setpoint_m1.real = this->input_setpoint_m1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
      *(outbuffer + offset + 0) = (u_input_setpoint_m1.base >> (8 * 0)) & 0xFF;
 8002964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	4413      	add	r3, r2
 800296c:	b2ca      	uxtb	r2, r1
 800296e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_setpoint_m1.base >> (8 * 1)) & 0xFF;
 8002970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002972:	0a19      	lsrs	r1, r3, #8
 8002974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002976:	3301      	adds	r3, #1
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	4413      	add	r3, r2
 800297c:	b2ca      	uxtb	r2, r1
 800297e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_setpoint_m1.base >> (8 * 2)) & 0xFF;
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002982:	0c19      	lsrs	r1, r3, #16
 8002984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002986:	3302      	adds	r3, #2
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	4413      	add	r3, r2
 800298c:	b2ca      	uxtb	r2, r1
 800298e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_setpoint_m1.base >> (8 * 3)) & 0xFF;
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	0e19      	lsrs	r1, r3, #24
 8002994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002996:	3303      	adds	r3, #3
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	4413      	add	r3, r2
 800299c:	b2ca      	uxtb	r2, r1
 800299e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_setpoint_m1);
 80029a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a2:	3304      	adds	r3, #4
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kp_m1;
      u_input_Kp_m1.real = this->input_Kp_m1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (u_input_Kp_m1.base >> (8 * 0)) & 0xFF;
 80029ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	4413      	add	r3, r2
 80029b4:	b2ca      	uxtb	r2, r1
 80029b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_Kp_m1.base >> (8 * 1)) & 0xFF;
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	0a19      	lsrs	r1, r3, #8
 80029bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029be:	3301      	adds	r3, #1
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	4413      	add	r3, r2
 80029c4:	b2ca      	uxtb	r2, r1
 80029c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_Kp_m1.base >> (8 * 2)) & 0xFF;
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	0c19      	lsrs	r1, r3, #16
 80029cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ce:	3302      	adds	r3, #2
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	4413      	add	r3, r2
 80029d4:	b2ca      	uxtb	r2, r1
 80029d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_Kp_m1.base >> (8 * 3)) & 0xFF;
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	0e19      	lsrs	r1, r3, #24
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	3303      	adds	r3, #3
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	4413      	add	r3, r2
 80029e4:	b2ca      	uxtb	r2, r1
 80029e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_Kp_m1);
 80029e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ea:	3304      	adds	r3, #4
 80029ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Ki_m1;
      u_input_Ki_m1.real = this->input_Ki_m1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	623b      	str	r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_input_Ki_m1.base >> (8 * 0)) & 0xFF;
 80029f4:	6a39      	ldr	r1, [r7, #32]
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	4413      	add	r3, r2
 80029fc:	b2ca      	uxtb	r2, r1
 80029fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_Ki_m1.base >> (8 * 1)) & 0xFF;
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	0a19      	lsrs	r1, r3, #8
 8002a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a06:	3301      	adds	r3, #1
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	b2ca      	uxtb	r2, r1
 8002a0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_Ki_m1.base >> (8 * 2)) & 0xFF;
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	0c19      	lsrs	r1, r3, #16
 8002a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a16:	3302      	adds	r3, #2
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	b2ca      	uxtb	r2, r1
 8002a1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_Ki_m1.base >> (8 * 3)) & 0xFF;
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	0e19      	lsrs	r1, r3, #24
 8002a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a26:	3303      	adds	r3, #3
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	b2ca      	uxtb	r2, r1
 8002a2e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_Ki_m1);
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	3304      	adds	r3, #4
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kd_m1;
      u_input_Kd_m1.real = this->input_Kd_m1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (u_input_Kd_m1.base >> (8 * 0)) & 0xFF;
 8002a3c:	69f9      	ldr	r1, [r7, #28]
 8002a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	4413      	add	r3, r2
 8002a44:	b2ca      	uxtb	r2, r1
 8002a46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_Kd_m1.base >> (8 * 1)) & 0xFF;
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	0a19      	lsrs	r1, r3, #8
 8002a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4e:	3301      	adds	r3, #1
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	4413      	add	r3, r2
 8002a54:	b2ca      	uxtb	r2, r1
 8002a56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_Kd_m1.base >> (8 * 2)) & 0xFF;
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	0c19      	lsrs	r1, r3, #16
 8002a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5e:	3302      	adds	r3, #2
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	b2ca      	uxtb	r2, r1
 8002a66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_Kd_m1.base >> (8 * 3)) & 0xFF;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	0e19      	lsrs	r1, r3, #24
 8002a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6e:	3303      	adds	r3, #3
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	b2ca      	uxtb	r2, r1
 8002a76:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_Kd_m1);
 8002a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_setpoint_m2;
      u_input_setpoint_m2.real = this->input_setpoint_m2;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	61bb      	str	r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_input_setpoint_m2.base >> (8 * 0)) & 0xFF;
 8002a84:	69b9      	ldr	r1, [r7, #24]
 8002a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	b2ca      	uxtb	r2, r1
 8002a8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_setpoint_m2.base >> (8 * 1)) & 0xFF;
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	0a19      	lsrs	r1, r3, #8
 8002a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a96:	3301      	adds	r3, #1
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	b2ca      	uxtb	r2, r1
 8002a9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_setpoint_m2.base >> (8 * 2)) & 0xFF;
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	0c19      	lsrs	r1, r3, #16
 8002aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	4413      	add	r3, r2
 8002aac:	b2ca      	uxtb	r2, r1
 8002aae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_setpoint_m2.base >> (8 * 3)) & 0xFF;
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	0e19      	lsrs	r1, r3, #24
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab6:	3303      	adds	r3, #3
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	4413      	add	r3, r2
 8002abc:	b2ca      	uxtb	r2, r1
 8002abe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_setpoint_m2);
 8002ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kp_m2;
      u_input_Kp_m2.real = this->input_Kp_m2;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_input_Kp_m2.base >> (8 * 0)) & 0xFF;
 8002acc:	6979      	ldr	r1, [r7, #20]
 8002ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	b2ca      	uxtb	r2, r1
 8002ad6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_Kp_m2.base >> (8 * 1)) & 0xFF;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	0a19      	lsrs	r1, r3, #8
 8002adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ade:	3301      	adds	r3, #1
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	b2ca      	uxtb	r2, r1
 8002ae6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_Kp_m2.base >> (8 * 2)) & 0xFF;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	0c19      	lsrs	r1, r3, #16
 8002aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aee:	3302      	adds	r3, #2
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	b2ca      	uxtb	r2, r1
 8002af6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_Kp_m2.base >> (8 * 3)) & 0xFF;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	0e19      	lsrs	r1, r3, #24
 8002afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afe:	3303      	adds	r3, #3
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	b2ca      	uxtb	r2, r1
 8002b06:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_Kp_m2);
 8002b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Ki_m2;
      u_input_Ki_m2.real = this->input_Ki_m2;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_input_Ki_m2.base >> (8 * 0)) & 0xFF;
 8002b14:	6939      	ldr	r1, [r7, #16]
 8002b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	b2ca      	uxtb	r2, r1
 8002b1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_Ki_m2.base >> (8 * 1)) & 0xFF;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	0a19      	lsrs	r1, r3, #8
 8002b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b26:	3301      	adds	r3, #1
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	b2ca      	uxtb	r2, r1
 8002b2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_Ki_m2.base >> (8 * 2)) & 0xFF;
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	0c19      	lsrs	r1, r3, #16
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	3302      	adds	r3, #2
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	b2ca      	uxtb	r2, r1
 8002b3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_Ki_m2.base >> (8 * 3)) & 0xFF;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	0e19      	lsrs	r1, r3, #24
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b46:	3303      	adds	r3, #3
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	b2ca      	uxtb	r2, r1
 8002b4e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_Ki_m2);
 8002b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b52:	3304      	adds	r3, #4
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kd_m2;
      u_input_Kd_m2.real = this->input_Kd_m2;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_input_Kd_m2.base >> (8 * 0)) & 0xFF;
 8002b5c:	68f9      	ldr	r1, [r7, #12]
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	b2ca      	uxtb	r2, r1
 8002b66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_input_Kd_m2.base >> (8 * 1)) & 0xFF;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	0a19      	lsrs	r1, r3, #8
 8002b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6e:	3301      	adds	r3, #1
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	4413      	add	r3, r2
 8002b74:	b2ca      	uxtb	r2, r1
 8002b76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_input_Kd_m2.base >> (8 * 2)) & 0xFF;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	0c19      	lsrs	r1, r3, #16
 8002b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7e:	3302      	adds	r3, #2
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	4413      	add	r3, r2
 8002b84:	b2ca      	uxtb	r2, r1
 8002b86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_input_Kd_m2.base >> (8 * 3)) & 0xFF;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	0e19      	lsrs	r1, r3, #24
 8002b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8e:	3303      	adds	r3, #3
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	4413      	add	r3, r2
 8002b94:	b2ca      	uxtb	r2, r1
 8002b96:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->input_Kd_m2);
 8002b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 8002b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3734      	adds	r7, #52	; 0x34
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <_ZN10custom_msg17encoder_input_msg11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002bac:	b480      	push	{r7}
 8002bae:	b08d      	sub	sp, #52	; 0x34
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_setpoint_m1;
      u_input_setpoint_m1.base = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
      u_input_setpoint_m1.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc2:	6839      	ldr	r1, [r7, #0]
 8002bc4:	440a      	add	r2, r1
 8002bc6:	7812      	ldrb	r2, [r2, #0]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	62bb      	str	r3, [r7, #40]	; 0x28
      u_input_setpoint_m1.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	6839      	ldr	r1, [r7, #0]
 8002bd4:	440b      	add	r3, r1
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
      u_input_setpoint_m1.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be2:	3302      	adds	r3, #2
 8002be4:	6839      	ldr	r1, [r7, #0]
 8002be6:	440b      	add	r3, r1
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	4313      	orrs	r3, r2
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
      u_input_setpoint_m1.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	3303      	adds	r3, #3
 8002bf6:	6839      	ldr	r1, [r7, #0]
 8002bf8:	440b      	add	r3, r1
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	061b      	lsls	r3, r3, #24
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	62bb      	str	r3, [r7, #40]	; 0x28
      this->input_setpoint_m1 = u_input_setpoint_m1.real;
 8002c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->input_setpoint_m1);
 8002c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kp_m1;
      u_input_Kp_m1.base = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
      u_input_Kp_m1.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c16:	6839      	ldr	r1, [r7, #0]
 8002c18:	440a      	add	r2, r1
 8002c1a:	7812      	ldrb	r2, [r2, #0]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
      u_input_Kp_m1.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c24:	3301      	adds	r3, #1
 8002c26:	6839      	ldr	r1, [r7, #0]
 8002c28:	440b      	add	r3, r1
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
      u_input_Kp_m1.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c36:	3302      	adds	r3, #2
 8002c38:	6839      	ldr	r1, [r7, #0]
 8002c3a:	440b      	add	r3, r1
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	041b      	lsls	r3, r3, #16
 8002c40:	4313      	orrs	r3, r2
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
      u_input_Kp_m1.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c48:	3303      	adds	r3, #3
 8002c4a:	6839      	ldr	r1, [r7, #0]
 8002c4c:	440b      	add	r3, r1
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	061b      	lsls	r3, r3, #24
 8002c52:	4313      	orrs	r3, r2
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
      this->input_Kp_m1 = u_input_Kp_m1.real;
 8002c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->input_Kp_m1);
 8002c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5e:	3304      	adds	r3, #4
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Ki_m1;
      u_input_Ki_m1.base = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	623b      	str	r3, [r7, #32]
      u_input_Ki_m1.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c6a:	6839      	ldr	r1, [r7, #0]
 8002c6c:	440a      	add	r2, r1
 8002c6e:	7812      	ldrb	r2, [r2, #0]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	623b      	str	r3, [r7, #32]
      u_input_Ki_m1.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c74:	6a3a      	ldr	r2, [r7, #32]
 8002c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c78:	3301      	adds	r3, #1
 8002c7a:	6839      	ldr	r1, [r7, #0]
 8002c7c:	440b      	add	r3, r1
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	021b      	lsls	r3, r3, #8
 8002c82:	4313      	orrs	r3, r2
 8002c84:	623b      	str	r3, [r7, #32]
      u_input_Ki_m1.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c86:	6a3a      	ldr	r2, [r7, #32]
 8002c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	6839      	ldr	r1, [r7, #0]
 8002c8e:	440b      	add	r3, r1
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	041b      	lsls	r3, r3, #16
 8002c94:	4313      	orrs	r3, r2
 8002c96:	623b      	str	r3, [r7, #32]
      u_input_Ki_m1.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c98:	6a3a      	ldr	r2, [r7, #32]
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	3303      	adds	r3, #3
 8002c9e:	6839      	ldr	r1, [r7, #0]
 8002ca0:	440b      	add	r3, r1
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	061b      	lsls	r3, r3, #24
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	623b      	str	r3, [r7, #32]
      this->input_Ki_m1 = u_input_Ki_m1.real;
 8002caa:	6a3a      	ldr	r2, [r7, #32]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->input_Ki_m1);
 8002cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kd_m1;
      u_input_Kd_m1.base = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
      u_input_Kd_m1.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cbe:	6839      	ldr	r1, [r7, #0]
 8002cc0:	440a      	add	r2, r1
 8002cc2:	7812      	ldrb	r2, [r2, #0]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61fb      	str	r3, [r7, #28]
      u_input_Kd_m1.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ccc:	3301      	adds	r3, #1
 8002cce:	6839      	ldr	r1, [r7, #0]
 8002cd0:	440b      	add	r3, r1
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61fb      	str	r3, [r7, #28]
      u_input_Kd_m1.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cde:	3302      	adds	r3, #2
 8002ce0:	6839      	ldr	r1, [r7, #0]
 8002ce2:	440b      	add	r3, r1
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	041b      	lsls	r3, r3, #16
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61fb      	str	r3, [r7, #28]
      u_input_Kd_m1.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002cec:	69fa      	ldr	r2, [r7, #28]
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	3303      	adds	r3, #3
 8002cf2:	6839      	ldr	r1, [r7, #0]
 8002cf4:	440b      	add	r3, r1
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	061b      	lsls	r3, r3, #24
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61fb      	str	r3, [r7, #28]
      this->input_Kd_m1 = u_input_Kd_m1.real;
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	611a      	str	r2, [r3, #16]
      offset += sizeof(this->input_Kd_m1);
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	3304      	adds	r3, #4
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_setpoint_m2;
      u_input_setpoint_m2.base = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
      u_input_setpoint_m2.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d12:	6839      	ldr	r1, [r7, #0]
 8002d14:	440a      	add	r2, r1
 8002d16:	7812      	ldrb	r2, [r2, #0]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
      u_input_setpoint_m2.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d20:	3301      	adds	r3, #1
 8002d22:	6839      	ldr	r1, [r7, #0]
 8002d24:	440b      	add	r3, r1
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	021b      	lsls	r3, r3, #8
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
      u_input_setpoint_m2.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d32:	3302      	adds	r3, #2
 8002d34:	6839      	ldr	r1, [r7, #0]
 8002d36:	440b      	add	r3, r1
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	041b      	lsls	r3, r3, #16
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
      u_input_setpoint_m2.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	3303      	adds	r3, #3
 8002d46:	6839      	ldr	r1, [r7, #0]
 8002d48:	440b      	add	r3, r1
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	061b      	lsls	r3, r3, #24
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
      this->input_setpoint_m2 = u_input_setpoint_m2.real;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->input_setpoint_m2);
 8002d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kp_m2;
      u_input_Kp_m2.base = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
      u_input_Kp_m2.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d66:	6839      	ldr	r1, [r7, #0]
 8002d68:	440a      	add	r2, r1
 8002d6a:	7812      	ldrb	r2, [r2, #0]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]
      u_input_Kp_m2.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d74:	3301      	adds	r3, #1
 8002d76:	6839      	ldr	r1, [r7, #0]
 8002d78:	440b      	add	r3, r1
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	021b      	lsls	r3, r3, #8
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]
      u_input_Kp_m2.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	3302      	adds	r3, #2
 8002d88:	6839      	ldr	r1, [r7, #0]
 8002d8a:	440b      	add	r3, r1
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	041b      	lsls	r3, r3, #16
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]
      u_input_Kp_m2.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d98:	3303      	adds	r3, #3
 8002d9a:	6839      	ldr	r1, [r7, #0]
 8002d9c:	440b      	add	r3, r1
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	4313      	orrs	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]
      this->input_Kp_m2 = u_input_Kp_m2.real;
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	619a      	str	r2, [r3, #24]
      offset += sizeof(this->input_Kp_m2);
 8002dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dae:	3304      	adds	r3, #4
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Ki_m2;
      u_input_Ki_m2.base = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
      u_input_Ki_m2.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dba:	6839      	ldr	r1, [r7, #0]
 8002dbc:	440a      	add	r2, r1
 8002dbe:	7812      	ldrb	r2, [r2, #0]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
      u_input_Ki_m2.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc8:	3301      	adds	r3, #1
 8002dca:	6839      	ldr	r1, [r7, #0]
 8002dcc:	440b      	add	r3, r1
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
      u_input_Ki_m2.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dda:	3302      	adds	r3, #2
 8002ddc:	6839      	ldr	r1, [r7, #0]
 8002dde:	440b      	add	r3, r1
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	041b      	lsls	r3, r3, #16
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
      u_input_Ki_m2.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dec:	3303      	adds	r3, #3
 8002dee:	6839      	ldr	r1, [r7, #0]
 8002df0:	440b      	add	r3, r1
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
      this->input_Ki_m2 = u_input_Ki_m2.real;
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->input_Ki_m2);
 8002e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e02:	3304      	adds	r3, #4
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        float real;
        uint32_t base;
      } u_input_Kd_m2;
      u_input_Kd_m2.base = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
      u_input_Kd_m2.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e0e:	6839      	ldr	r1, [r7, #0]
 8002e10:	440a      	add	r2, r1
 8002e12:	7812      	ldrb	r2, [r2, #0]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
      u_input_Kd_m2.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	6839      	ldr	r1, [r7, #0]
 8002e20:	440b      	add	r3, r1
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
      u_input_Kd_m2.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2e:	3302      	adds	r3, #2
 8002e30:	6839      	ldr	r1, [r7, #0]
 8002e32:	440b      	add	r3, r1
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	041b      	lsls	r3, r3, #16
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
      u_input_Kd_m2.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e40:	3303      	adds	r3, #3
 8002e42:	6839      	ldr	r1, [r7, #0]
 8002e44:	440b      	add	r3, r1
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	061b      	lsls	r3, r3, #24
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
      this->input_Kd_m2 = u_input_Kd_m2.real;
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	621a      	str	r2, [r3, #32]
      offset += sizeof(this->input_Kd_m2);
 8002e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e56:	3304      	adds	r3, #4
 8002e58:	62fb      	str	r3, [r7, #44]	; 0x2c
     return offset;
 8002e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3734      	adds	r7, #52	; 0x34
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <_ZN10custom_msg17encoder_input_msg7getTypeEv>:

    virtual const char * getType() override { return "custom_msg/encoder_input_msg"; };
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <_ZN10custom_msg17encoder_input_msg7getTypeEv+0x18>)
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	0800f288 	.word	0x0800f288

08002e84 <_ZN10custom_msg17encoder_input_msg6getMD5Ev>:
    virtual const char * getMD5() override { return "db9ba92c90b9ba885220db60c812fbcf"; };
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <_ZN10custom_msg17encoder_input_msg6getMD5Ev+0x18>)
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	0800f2a8 	.word	0x0800f2a8

08002ea0 <_ZN10custom_msg18encoder_output_msgC1Ev>:
      typedef float _output_rpm_m2_type;
      _output_rpm_m2_type output_rpm_m2;
      typedef float _output_controller_m2_type;
      _output_controller_m2_type output_controller_m2;

    encoder_output_msg():
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
      output_rpm_m1(0),
      output_controller_m1(0),
      output_rpm_m2(0),
      output_controller_m2(0)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fd0e 	bl	80028cc <_ZN3ros3MsgC1Ev>
 8002eb0:	4a0b      	ldr	r2, [pc, #44]	; (8002ee0 <_ZN10custom_msg18encoder_output_msgC1Ev+0x40>)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	611a      	str	r2, [r3, #16]
    {
    }
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	0800f5c4 	.word	0x0800f5c4

08002ee4 <_ZNK10custom_msg18encoder_output_msg9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002ee4:	b480      	push	{r7}
 8002ee6:	b089      	sub	sp, #36	; 0x24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_output_rpm_m1;
      u_output_rpm_m1.real = this->output_rpm_m1;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	61bb      	str	r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_output_rpm_m1.base >> (8 * 0)) & 0xFF;
 8002ef8:	69b9      	ldr	r1, [r7, #24]
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	4413      	add	r3, r2
 8002f00:	b2ca      	uxtb	r2, r1
 8002f02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_output_rpm_m1.base >> (8 * 1)) & 0xFF;
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	0a19      	lsrs	r1, r3, #8
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	4413      	add	r3, r2
 8002f10:	b2ca      	uxtb	r2, r1
 8002f12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_output_rpm_m1.base >> (8 * 2)) & 0xFF;
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	0c19      	lsrs	r1, r3, #16
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	4413      	add	r3, r2
 8002f20:	b2ca      	uxtb	r2, r1
 8002f22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_output_rpm_m1.base >> (8 * 3)) & 0xFF;
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	0e19      	lsrs	r1, r3, #24
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	3303      	adds	r3, #3
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	4413      	add	r3, r2
 8002f30:	b2ca      	uxtb	r2, r1
 8002f32:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->output_rpm_m1);
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	3304      	adds	r3, #4
 8002f38:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_output_controller_m1;
      u_output_controller_m1.real = this->output_controller_m1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_output_controller_m1.base >> (8 * 0)) & 0xFF;
 8002f40:	6979      	ldr	r1, [r7, #20]
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	4413      	add	r3, r2
 8002f48:	b2ca      	uxtb	r2, r1
 8002f4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_output_controller_m1.base >> (8 * 1)) & 0xFF;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	0a19      	lsrs	r1, r3, #8
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	3301      	adds	r3, #1
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	4413      	add	r3, r2
 8002f58:	b2ca      	uxtb	r2, r1
 8002f5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_output_controller_m1.base >> (8 * 2)) & 0xFF;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	0c19      	lsrs	r1, r3, #16
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	3302      	adds	r3, #2
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	4413      	add	r3, r2
 8002f68:	b2ca      	uxtb	r2, r1
 8002f6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_output_controller_m1.base >> (8 * 3)) & 0xFF;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	0e19      	lsrs	r1, r3, #24
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	3303      	adds	r3, #3
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	4413      	add	r3, r2
 8002f78:	b2ca      	uxtb	r2, r1
 8002f7a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->output_controller_m1);
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_output_rpm_m2;
      u_output_rpm_m2.real = this->output_rpm_m2;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_output_rpm_m2.base >> (8 * 0)) & 0xFF;
 8002f88:	6939      	ldr	r1, [r7, #16]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	4413      	add	r3, r2
 8002f90:	b2ca      	uxtb	r2, r1
 8002f92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_output_rpm_m2.base >> (8 * 1)) & 0xFF;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	0a19      	lsrs	r1, r3, #8
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	b2ca      	uxtb	r2, r1
 8002fa2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_output_rpm_m2.base >> (8 * 2)) & 0xFF;
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	0c19      	lsrs	r1, r3, #16
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	3302      	adds	r3, #2
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	4413      	add	r3, r2
 8002fb0:	b2ca      	uxtb	r2, r1
 8002fb2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_output_rpm_m2.base >> (8 * 3)) & 0xFF;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	0e19      	lsrs	r1, r3, #24
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	3303      	adds	r3, #3
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	b2ca      	uxtb	r2, r1
 8002fc2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->output_rpm_m2);
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_output_controller_m2;
      u_output_controller_m2.real = this->output_controller_m2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_output_controller_m2.base >> (8 * 0)) & 0xFF;
 8002fd0:	68f9      	ldr	r1, [r7, #12]
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	b2ca      	uxtb	r2, r1
 8002fda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_output_controller_m2.base >> (8 * 1)) & 0xFF;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	0a19      	lsrs	r1, r3, #8
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	b2ca      	uxtb	r2, r1
 8002fea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_output_controller_m2.base >> (8 * 2)) & 0xFF;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	0c19      	lsrs	r1, r3, #16
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	3302      	adds	r3, #2
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	b2ca      	uxtb	r2, r1
 8002ffa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_output_controller_m2.base >> (8 * 3)) & 0xFF;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	0e19      	lsrs	r1, r3, #24
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	3303      	adds	r3, #3
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	4413      	add	r3, r2
 8003008:	b2ca      	uxtb	r2, r1
 800300a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->output_controller_m2);
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	3304      	adds	r3, #4
 8003010:	61fb      	str	r3, [r7, #28]
      return offset;
 8003012:	69fb      	ldr	r3, [r7, #28]
    }
 8003014:	4618      	mov	r0, r3
 8003016:	3724      	adds	r7, #36	; 0x24
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <_ZN10custom_msg18encoder_output_msg11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003020:	b480      	push	{r7}
 8003022:	b089      	sub	sp, #36	; 0x24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_output_rpm_m1;
      u_output_rpm_m1.base = 0;
 800302e:	2300      	movs	r3, #0
 8003030:	61bb      	str	r3, [r7, #24]
      u_output_rpm_m1.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	69fa      	ldr	r2, [r7, #28]
 8003036:	6839      	ldr	r1, [r7, #0]
 8003038:	440a      	add	r2, r1
 800303a:	7812      	ldrb	r2, [r2, #0]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
      u_output_rpm_m1.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3301      	adds	r3, #1
 8003046:	6839      	ldr	r1, [r7, #0]
 8003048:	440b      	add	r3, r1
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	021b      	lsls	r3, r3, #8
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
      u_output_rpm_m1.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	3302      	adds	r3, #2
 8003058:	6839      	ldr	r1, [r7, #0]
 800305a:	440b      	add	r3, r1
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	041b      	lsls	r3, r3, #16
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
      u_output_rpm_m1.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3303      	adds	r3, #3
 800306a:	6839      	ldr	r1, [r7, #0]
 800306c:	440b      	add	r3, r1
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	061b      	lsls	r3, r3, #24
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
      this->output_rpm_m1 = u_output_rpm_m1.real;
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->output_rpm_m1);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	3304      	adds	r3, #4
 8003080:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_output_controller_m1;
      u_output_controller_m1.base = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
      u_output_controller_m1.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	6839      	ldr	r1, [r7, #0]
 800308c:	440a      	add	r2, r1
 800308e:	7812      	ldrb	r2, [r2, #0]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
      u_output_controller_m1.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3301      	adds	r3, #1
 800309a:	6839      	ldr	r1, [r7, #0]
 800309c:	440b      	add	r3, r1
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	021b      	lsls	r3, r3, #8
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]
      u_output_controller_m1.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	3302      	adds	r3, #2
 80030ac:	6839      	ldr	r1, [r7, #0]
 80030ae:	440b      	add	r3, r1
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	041b      	lsls	r3, r3, #16
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
      u_output_controller_m1.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3303      	adds	r3, #3
 80030be:	6839      	ldr	r1, [r7, #0]
 80030c0:	440b      	add	r3, r1
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
      this->output_controller_m1 = u_output_controller_m1.real;
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->output_controller_m1);
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	3304      	adds	r3, #4
 80030d4:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_output_rpm_m2;
      u_output_rpm_m2.base = 0;
 80030d6:	2300      	movs	r3, #0
 80030d8:	613b      	str	r3, [r7, #16]
      u_output_rpm_m2.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	6839      	ldr	r1, [r7, #0]
 80030e0:	440a      	add	r2, r1
 80030e2:	7812      	ldrb	r2, [r2, #0]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
      u_output_rpm_m2.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3301      	adds	r3, #1
 80030ee:	6839      	ldr	r1, [r7, #0]
 80030f0:	440b      	add	r3, r1
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	021b      	lsls	r3, r3, #8
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
      u_output_rpm_m2.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	3302      	adds	r3, #2
 8003100:	6839      	ldr	r1, [r7, #0]
 8003102:	440b      	add	r3, r1
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	041b      	lsls	r3, r3, #16
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
      u_output_rpm_m2.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3303      	adds	r3, #3
 8003112:	6839      	ldr	r1, [r7, #0]
 8003114:	440b      	add	r3, r1
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	061b      	lsls	r3, r3, #24
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
      this->output_rpm_m2 = u_output_rpm_m2.real;
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->output_rpm_m2);
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	3304      	adds	r3, #4
 8003128:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_output_controller_m2;
      u_output_controller_m2.base = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
      u_output_controller_m2.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	6839      	ldr	r1, [r7, #0]
 8003134:	440a      	add	r2, r1
 8003136:	7812      	ldrb	r2, [r2, #0]
 8003138:	4313      	orrs	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
      u_output_controller_m2.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3301      	adds	r3, #1
 8003142:	6839      	ldr	r1, [r7, #0]
 8003144:	440b      	add	r3, r1
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
      u_output_controller_m2.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	3302      	adds	r3, #2
 8003154:	6839      	ldr	r1, [r7, #0]
 8003156:	440b      	add	r3, r1
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	041b      	lsls	r3, r3, #16
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
      u_output_controller_m2.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3303      	adds	r3, #3
 8003166:	6839      	ldr	r1, [r7, #0]
 8003168:	440b      	add	r3, r1
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	061b      	lsls	r3, r3, #24
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
      this->output_controller_m2 = u_output_controller_m2.real;
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	611a      	str	r2, [r3, #16]
      offset += sizeof(this->output_controller_m2);
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	3304      	adds	r3, #4
 800317c:	61fb      	str	r3, [r7, #28]
     return offset;
 800317e:	69fb      	ldr	r3, [r7, #28]
    }
 8003180:	4618      	mov	r0, r3
 8003182:	3724      	adds	r7, #36	; 0x24
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <_ZN10custom_msg18encoder_output_msg7getTypeEv>:

    virtual const char * getType() override { return "custom_msg/encoder_output_msg"; };
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <_ZN10custom_msg18encoder_output_msg7getTypeEv+0x18>)
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	0800f2cc 	.word	0x0800f2cc

080031a8 <_ZN10custom_msg18encoder_output_msg6getMD5Ev>:
    virtual const char * getMD5() override { return "1245866a2cb06bf0708dba963cb3a6ee"; };
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <_ZN10custom_msg18encoder_output_msg6getMD5Ev+0x18>)
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	0800f2ec 	.word	0x0800f2ec

080031c4 <_ZN10custom_msg7mpu_msgC1Ev>:
      typedef float _pitch_type;
      _pitch_type pitch;
      typedef float _yaw_type;
      _yaw_type yaw;

    mpu_msg():
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
      roll(0),
      pitch(0),
      yaw(0)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fb7c 	bl	80028cc <_ZN3ros3MsgC1Ev>
 80031d4:	4a09      	ldr	r2, [pc, #36]	; (80031fc <_ZN10custom_msg7mpu_msgC1Ev+0x38>)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	609a      	str	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	60da      	str	r2, [r3, #12]
    {
    }
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	0800f5ac 	.word	0x0800f5ac

08003200 <_ZNK10custom_msg7mpu_msg9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_roll;
      u_roll.real = this->roll;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_roll.base >> (8 * 0)) & 0xFF;
 8003214:	6939      	ldr	r1, [r7, #16]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	4413      	add	r3, r2
 800321c:	b2ca      	uxtb	r2, r1
 800321e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_roll.base >> (8 * 1)) & 0xFF;
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	0a19      	lsrs	r1, r3, #8
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	3301      	adds	r3, #1
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	4413      	add	r3, r2
 800322c:	b2ca      	uxtb	r2, r1
 800322e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_roll.base >> (8 * 2)) & 0xFF;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	0c19      	lsrs	r1, r3, #16
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	3302      	adds	r3, #2
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	4413      	add	r3, r2
 800323c:	b2ca      	uxtb	r2, r1
 800323e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_roll.base >> (8 * 3)) & 0xFF;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	0e19      	lsrs	r1, r3, #24
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	3303      	adds	r3, #3
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	4413      	add	r3, r2
 800324c:	b2ca      	uxtb	r2, r1
 800324e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->roll);
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	3304      	adds	r3, #4
 8003254:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_pitch;
      u_pitch.real = this->pitch;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_pitch.base >> (8 * 0)) & 0xFF;
 800325c:	68f9      	ldr	r1, [r7, #12]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	4413      	add	r3, r2
 8003264:	b2ca      	uxtb	r2, r1
 8003266:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_pitch.base >> (8 * 1)) & 0xFF;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	0a19      	lsrs	r1, r3, #8
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	3301      	adds	r3, #1
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	4413      	add	r3, r2
 8003274:	b2ca      	uxtb	r2, r1
 8003276:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_pitch.base >> (8 * 2)) & 0xFF;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	0c19      	lsrs	r1, r3, #16
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	3302      	adds	r3, #2
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	4413      	add	r3, r2
 8003284:	b2ca      	uxtb	r2, r1
 8003286:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_pitch.base >> (8 * 3)) & 0xFF;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	0e19      	lsrs	r1, r3, #24
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	3303      	adds	r3, #3
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	4413      	add	r3, r2
 8003294:	b2ca      	uxtb	r2, r1
 8003296:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->pitch);
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	3304      	adds	r3, #4
 800329c:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_yaw;
      u_yaw.real = this->yaw;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_yaw.base >> (8 * 0)) & 0xFF;
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	4413      	add	r3, r2
 80032ac:	b2ca      	uxtb	r2, r1
 80032ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_yaw.base >> (8 * 1)) & 0xFF;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	0a19      	lsrs	r1, r3, #8
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	3301      	adds	r3, #1
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	4413      	add	r3, r2
 80032bc:	b2ca      	uxtb	r2, r1
 80032be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_yaw.base >> (8 * 2)) & 0xFF;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	0c19      	lsrs	r1, r3, #16
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	3302      	adds	r3, #2
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	4413      	add	r3, r2
 80032cc:	b2ca      	uxtb	r2, r1
 80032ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_yaw.base >> (8 * 3)) & 0xFF;
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	0e19      	lsrs	r1, r3, #24
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	3303      	adds	r3, #3
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	4413      	add	r3, r2
 80032dc:	b2ca      	uxtb	r2, r1
 80032de:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->yaw);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	3304      	adds	r3, #4
 80032e4:	617b      	str	r3, [r7, #20]
      return offset;
 80032e6:	697b      	ldr	r3, [r7, #20]
    }
 80032e8:	4618      	mov	r0, r3
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <_ZN10custom_msg7mpu_msg11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_roll;
      u_roll.base = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	613b      	str	r3, [r7, #16]
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	6839      	ldr	r1, [r7, #0]
 800330c:	440a      	add	r2, r1
 800330e:	7812      	ldrb	r2, [r2, #0]
 8003310:	4313      	orrs	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	3301      	adds	r3, #1
 800331a:	6839      	ldr	r1, [r7, #0]
 800331c:	440b      	add	r3, r1
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	4313      	orrs	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	3302      	adds	r3, #2
 800332c:	6839      	ldr	r1, [r7, #0]
 800332e:	440b      	add	r3, r1
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	041b      	lsls	r3, r3, #16
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	3303      	adds	r3, #3
 800333e:	6839      	ldr	r1, [r7, #0]
 8003340:	440b      	add	r3, r1
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	061b      	lsls	r3, r3, #24
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
      this->roll = u_roll.real;
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->roll);
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	3304      	adds	r3, #4
 8003354:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_pitch;
      u_pitch.base = 0;
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	6839      	ldr	r1, [r7, #0]
 8003360:	440a      	add	r2, r1
 8003362:	7812      	ldrb	r2, [r2, #0]
 8003364:	4313      	orrs	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	3301      	adds	r3, #1
 800336e:	6839      	ldr	r1, [r7, #0]
 8003370:	440b      	add	r3, r1
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	3302      	adds	r3, #2
 8003380:	6839      	ldr	r1, [r7, #0]
 8003382:	440b      	add	r3, r1
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	041b      	lsls	r3, r3, #16
 8003388:	4313      	orrs	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	3303      	adds	r3, #3
 8003392:	6839      	ldr	r1, [r7, #0]
 8003394:	440b      	add	r3, r1
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	061b      	lsls	r3, r3, #24
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
      this->pitch = u_pitch.real;
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->pitch);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	3304      	adds	r3, #4
 80033a8:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_yaw;
      u_yaw.base = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	6839      	ldr	r1, [r7, #0]
 80033b4:	440a      	add	r2, r1
 80033b6:	7812      	ldrb	r2, [r2, #0]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60bb      	str	r3, [r7, #8]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	3301      	adds	r3, #1
 80033c2:	6839      	ldr	r1, [r7, #0]
 80033c4:	440b      	add	r3, r1
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	021b      	lsls	r3, r3, #8
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60bb      	str	r3, [r7, #8]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	3302      	adds	r3, #2
 80033d4:	6839      	ldr	r1, [r7, #0]
 80033d6:	440b      	add	r3, r1
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	041b      	lsls	r3, r3, #16
 80033dc:	4313      	orrs	r3, r2
 80033de:	60bb      	str	r3, [r7, #8]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	3303      	adds	r3, #3
 80033e6:	6839      	ldr	r1, [r7, #0]
 80033e8:	440b      	add	r3, r1
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	061b      	lsls	r3, r3, #24
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60bb      	str	r3, [r7, #8]
      this->yaw = u_yaw.real;
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->yaw);
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	3304      	adds	r3, #4
 80033fc:	617b      	str	r3, [r7, #20]
     return offset;
 80033fe:	697b      	ldr	r3, [r7, #20]
    }
 8003400:	4618      	mov	r0, r3
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <_ZN10custom_msg7mpu_msg7getTypeEv>:

    virtual const char * getType() override { return "custom_msg/mpu_msg"; };
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	4b03      	ldr	r3, [pc, #12]	; (8003424 <_ZN10custom_msg7mpu_msg7getTypeEv+0x18>)
 8003416:	4618      	mov	r0, r3
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	0800f310 	.word	0x0800f310

08003428 <_ZN10custom_msg7mpu_msg6getMD5Ev>:
    virtual const char * getMD5() override { return "c66f4de7f99199dd8e863fffbef112ad"; };
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	4b03      	ldr	r3, [pc, #12]	; (8003440 <_ZN10custom_msg7mpu_msg6getMD5Ev+0x18>)
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	0800f324 	.word	0x0800f324

08003444 <_ZN13STM32HardwareC1Ev>:
// Create Serial Buffer with UART2:
extern BufferedSerial buff_serial;

class STM32Hardware {
 public:
  STM32Hardware() : serial(&buff_serial) {}
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a04      	ldr	r2, [pc, #16]	; (8003460 <_ZN13STM32HardwareC1Ev+0x1c>)
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4618      	mov	r0, r3
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	20000214 	.word	0x20000214

08003464 <_ZN13STM32Hardware4initEv>:

  // Any initialization code necessary to use the serial port:
  void init() { serial->init(); }
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7fd fde1 	bl	8001038 <_ZN14BufferedSerial4initEv>
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <_ZN13STM32Hardware4readEv>:

  // Read a byte from the serial port. -1 = failure:
  int read() { return serial->read(); }
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd fddf 	bl	800104e <_ZN14BufferedSerial4readEv>
 8003490:	4603      	mov	r3, r0
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <_ZN13STM32Hardware5writeEPhi>:

  // Write data to the connection to ROS:
  void write(uint8_t* data, int length) { serial->write(data, length); }
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fd fe03 	bl	80010ba <_ZN14BufferedSerial5writeEPKhi>
 80034b4:	bf00      	nop
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <_ZN13STM32Hardware4timeEv>:

  // Returns milliseconds since start of program:
  unsigned long time() { return HAL_GetTick(); };
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	f002 fa42 	bl	800594c <HAL_GetTick>
 80034c8:	4603      	mov	r3, r0
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4618      	mov	r0, r3
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
      data()
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff f9e4 	bl	80028cc <_ZN3ros3MsgC1Ev>
 8003504:	4a06      	ldr	r2, [pc, #24]	; (8003520 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3304      	adds	r3, #4
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff ffdf 	bl	80034d2 <_ZN3ros4TimeC1Ev>
    {
    }
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	0800f594 	.word	0x0800f594

08003524 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6859      	ldr	r1, [r3, #4]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	4413      	add	r3, r2
 800353c:	b2ca      	uxtb	r2, r1
 800353e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	0a19      	lsrs	r1, r3, #8
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3301      	adds	r3, #1
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	4413      	add	r3, r2
 800354e:	b2ca      	uxtb	r2, r1
 8003550:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	0c19      	lsrs	r1, r3, #16
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	3302      	adds	r3, #2
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	4413      	add	r3, r2
 8003560:	b2ca      	uxtb	r2, r1
 8003562:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	0e19      	lsrs	r1, r3, #24
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3303      	adds	r3, #3
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	4413      	add	r3, r2
 8003572:	b2ca      	uxtb	r2, r1
 8003574:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3304      	adds	r3, #4
 800357a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6899      	ldr	r1, [r3, #8]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	4413      	add	r3, r2
 8003586:	b2ca      	uxtb	r2, r1
 8003588:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	0a19      	lsrs	r1, r3, #8
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3301      	adds	r3, #1
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	4413      	add	r3, r2
 8003598:	b2ca      	uxtb	r2, r1
 800359a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	0c19      	lsrs	r1, r3, #16
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3302      	adds	r3, #2
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	4413      	add	r3, r2
 80035aa:	b2ca      	uxtb	r2, r1
 80035ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	0e19      	lsrs	r1, r3, #24
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	3303      	adds	r3, #3
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	4413      	add	r3, r2
 80035bc:	b2ca      	uxtb	r2, r1
 80035be:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	3304      	adds	r3, #4
 80035c4:	60fb      	str	r3, [r7, #12]
      return offset;
 80035c6:	68fb      	ldr	r3, [r7, #12]
    }
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	4413      	add	r3, r2
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	3301      	adds	r3, #1
 80035f8:	6839      	ldr	r1, [r7, #0]
 80035fa:	440b      	add	r3, r1
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3302      	adds	r3, #2
 800360e:	6839      	ldr	r1, [r7, #0]
 8003610:	440b      	add	r3, r1
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	041b      	lsls	r3, r3, #16
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	3303      	adds	r3, #3
 8003624:	6839      	ldr	r1, [r7, #0]
 8003626:	440b      	add	r3, r1
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	061b      	lsls	r3, r3, #24
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	3304      	adds	r3, #4
 8003636:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	4413      	add	r3, r2
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	3301      	adds	r3, #1
 800364e:	6839      	ldr	r1, [r7, #0]
 8003650:	440b      	add	r3, r1
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	3302      	adds	r3, #2
 8003664:	6839      	ldr	r1, [r7, #0]
 8003666:	440b      	add	r3, r1
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	041b      	lsls	r3, r3, #16
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	3303      	adds	r3, #3
 800367a:	6839      	ldr	r1, [r7, #0]
 800367c:	440b      	add	r3, r1
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	061b      	lsls	r3, r3, #24
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	3304      	adds	r3, #4
 800368c:	60fb      	str	r3, [r7, #12]
     return offset;
 800368e:	68fb      	ldr	r3, [r7, #12]
    }
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	4b03      	ldr	r3, [pc, #12]	; (80036b4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	0800f348 	.word	0x0800f348

080036b8 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	4b03      	ldr	r3, [pc, #12]	; (80036d0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	0800f358 	.word	0x0800f358

080036d4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff f8f4 	bl	80028cc <_ZN3ros3MsgC1Ev>
 80036e4:	4a0b      	ldr	r2, [pc, #44]	; (8003714 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	809a      	strh	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a09      	ldr	r2, [pc, #36]	; (8003718 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80036f4:	609a      	str	r2, [r3, #8]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a07      	ldr	r2, [pc, #28]	; (8003718 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80036fa:	60da      	str	r2, [r3, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a06      	ldr	r2, [pc, #24]	; (8003718 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003700:	611a      	str	r2, [r3, #16]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	615a      	str	r2, [r3, #20]
    {
    }
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	0800f57c 	.word	0x0800f57c
 8003718:	0800f37c 	.word	0x0800f37c

0800371c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8899      	ldrh	r1, [r3, #4]
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	4413      	add	r3, r2
 8003734:	b2ca      	uxtb	r2, r1
 8003736:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	889b      	ldrh	r3, [r3, #4]
 800373c:	0a1b      	lsrs	r3, r3, #8
 800373e:	b299      	uxth	r1, r3
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	3301      	adds	r3, #1
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	4413      	add	r3, r2
 8003748:	b2ca      	uxtb	r2, r1
 800374a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	3302      	adds	r3, #2
 8003750:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	4618      	mov	r0, r3
 8003758:	f7fc fd3a 	bl	80001d0 <strlen>
 800375c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	4413      	add	r3, r2
 8003764:	69b9      	ldr	r1, [r7, #24]
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fef6 	bl	8004558 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	3304      	adds	r3, #4
 8003770:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	18d0      	adds	r0, r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4619      	mov	r1, r3
 8003780:	f007 f8fc 	bl	800a97c <memcpy>
      offset += length_topic_name;
 8003784:	69fa      	ldr	r2, [r7, #28]
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	4413      	add	r3, r2
 800378a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4618      	mov	r0, r3
 8003792:	f7fc fd1d 	bl	80001d0 <strlen>
 8003796:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	4413      	add	r3, r2
 800379e:	6979      	ldr	r1, [r7, #20]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fed9 	bl	8004558 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3304      	adds	r3, #4
 80037aa:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	18d0      	adds	r0, r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4619      	mov	r1, r3
 80037ba:	f007 f8df 	bl	800a97c <memcpy>
      offset += length_message_type;
 80037be:	69fa      	ldr	r2, [r7, #28]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	4413      	add	r3, r2
 80037c4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fc fd00 	bl	80001d0 <strlen>
 80037d0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	4413      	add	r3, r2
 80037d8:	6939      	ldr	r1, [r7, #16]
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 febc 	bl	8004558 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	3304      	adds	r3, #4
 80037e4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	18d0      	adds	r0, r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4619      	mov	r1, r3
 80037f4:	f007 f8c2 	bl	800a97c <memcpy>
      offset += length_md5sum;
 80037f8:	69fa      	ldr	r2, [r7, #28]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4413      	add	r3, r2
 80037fe:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8003806:	68f9      	ldr	r1, [r7, #12]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	4413      	add	r3, r2
 800380e:	b2ca      	uxtb	r2, r1
 8003810:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	0a19      	lsrs	r1, r3, #8
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3301      	adds	r3, #1
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	4413      	add	r3, r2
 800381e:	b2ca      	uxtb	r2, r1
 8003820:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	0c19      	lsrs	r1, r3, #16
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3302      	adds	r3, #2
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	4413      	add	r3, r2
 800382e:	b2ca      	uxtb	r2, r1
 8003830:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	0e19      	lsrs	r1, r3, #24
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3303      	adds	r3, #3
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	4413      	add	r3, r2
 800383e:	b2ca      	uxtb	r2, r1
 8003840:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3304      	adds	r3, #4
 8003846:	61fb      	str	r3, [r7, #28]
      return offset;
 8003848:	69fb      	ldr	r3, [r7, #28]
    }
 800384a:	4618      	mov	r0, r3
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003852:	b580      	push	{r7, lr}
 8003854:	b08a      	sub	sp, #40	; 0x28
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800385c:	2300      	movs	r3, #0
 800385e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	4413      	add	r3, r2
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	b29a      	uxth	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	889b      	ldrh	r3, [r3, #4]
 8003872:	b21a      	sxth	r2, r3
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	3301      	adds	r3, #1
 8003878:	6839      	ldr	r1, [r7, #0]
 800387a:	440b      	add	r3, r1
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	021b      	lsls	r3, r3, #8
 8003880:	b21b      	sxth	r3, r3
 8003882:	4313      	orrs	r3, r2
 8003884:	b21b      	sxth	r3, r3
 8003886:	b29a      	uxth	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	3302      	adds	r3, #2
 8003890:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	441a      	add	r2, r3
 8003898:	f107 0314 	add.w	r3, r7, #20
 800389c:	4611      	mov	r1, r2
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 fe78 	bl	8004594 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	3304      	adds	r3, #4
 80038a8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	4413      	add	r3, r2
 80038b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d20c      	bcs.n	80038d4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	441a      	add	r2, r3
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	3b01      	subs	r3, #1
 80038c4:	6839      	ldr	r1, [r7, #0]
 80038c6:	440b      	add	r3, r1
 80038c8:	7812      	ldrb	r2, [r2, #0]
 80038ca:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	3301      	adds	r3, #1
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
 80038d2:	e7ec      	b.n	80038ae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	4413      	add	r3, r2
 80038da:	3b01      	subs	r3, #1
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	4413      	add	r3, r2
 80038e0:	2200      	movs	r2, #0
 80038e2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	441a      	add	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	4413      	add	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	441a      	add	r2, r3
 80038fe:	f107 0310 	add.w	r3, r7, #16
 8003902:	4611      	mov	r1, r2
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fe45 	bl	8004594 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	3304      	adds	r3, #4
 800390e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	623b      	str	r3, [r7, #32]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4413      	add	r3, r2
 800391a:	6a3a      	ldr	r2, [r7, #32]
 800391c:	429a      	cmp	r2, r3
 800391e:	d20c      	bcs.n	800393a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	441a      	add	r2, r3
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	3b01      	subs	r3, #1
 800392a:	6839      	ldr	r1, [r7, #0]
 800392c:	440b      	add	r3, r1
 800392e:	7812      	ldrb	r2, [r2, #0]
 8003930:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	3301      	adds	r3, #1
 8003936:	623b      	str	r3, [r7, #32]
 8003938:	e7ec      	b.n	8003914 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4413      	add	r3, r2
 8003940:	3b01      	subs	r3, #1
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	4413      	add	r3, r2
 8003946:	2200      	movs	r2, #0
 8003948:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	3b01      	subs	r3, #1
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	441a      	add	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4413      	add	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	441a      	add	r2, r3
 8003964:	f107 030c 	add.w	r3, r7, #12
 8003968:	4611      	mov	r1, r2
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fe12 	bl	8004594 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	3304      	adds	r3, #4
 8003974:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	61fb      	str	r3, [r7, #28]
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4413      	add	r3, r2
 8003980:	69fa      	ldr	r2, [r7, #28]
 8003982:	429a      	cmp	r2, r3
 8003984:	d20c      	bcs.n	80039a0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	441a      	add	r2, r3
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	3b01      	subs	r3, #1
 8003990:	6839      	ldr	r1, [r7, #0]
 8003992:	440b      	add	r3, r1
 8003994:	7812      	ldrb	r2, [r2, #0]
 8003996:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	3301      	adds	r3, #1
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	e7ec      	b.n	800397a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4413      	add	r3, r2
 80039a6:	3b01      	subs	r3, #1
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	4413      	add	r3, r2
 80039ac:	2200      	movs	r2, #0
 80039ae:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	441a      	add	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4413      	add	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	6839      	ldr	r1, [r7, #0]
 80039ce:	440a      	add	r2, r1
 80039d0:	7812      	ldrb	r2, [r2, #0]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	3301      	adds	r3, #1
 80039dc:	6839      	ldr	r1, [r7, #0]
 80039de:	440b      	add	r3, r1
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	3302      	adds	r3, #2
 80039ee:	6839      	ldr	r1, [r7, #0]
 80039f0:	440b      	add	r3, r1
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	041b      	lsls	r3, r3, #16
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	3303      	adds	r3, #3
 8003a00:	6839      	ldr	r1, [r7, #0]
 8003a02:	440b      	add	r3, r1
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	061b      	lsls	r3, r3, #24
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	3304      	adds	r3, #4
 8003a16:	61bb      	str	r3, [r7, #24]
     return offset;
 8003a18:	69bb      	ldr	r3, [r7, #24]
    }
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3728      	adds	r7, #40	; 0x28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	4b03      	ldr	r3, [pc, #12]	; (8003a3c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8003a2e:	4618      	mov	r0, r3
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	0800f380 	.word	0x0800f380

08003a40 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	0800f39c 	.word	0x0800f39c

08003a5c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fe ff30 	bl	80028cc <_ZN3ros3MsgC1Ev>
 8003a6c:	4a06      	ldr	r2, [pc, #24]	; (8003a88 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	711a      	strb	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a04      	ldr	r2, [pc, #16]	; (8003a8c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8003a7c:	609a      	str	r2, [r3, #8]
    {
    }
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	0800f564 	.word	0x0800f564
 8003a8c:	0800f37c 	.word	0x0800f37c

08003a90 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	7912      	ldrb	r2, [r2, #4]
 8003aa8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3301      	adds	r3, #1
 8003aae:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fc fb8b 	bl	80001d0 <strlen>
 8003aba:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	68b9      	ldr	r1, [r7, #8]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fd47 	bl	8004558 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3304      	adds	r3, #4
 8003ace:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	18d0      	adds	r0, r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	4619      	mov	r1, r3
 8003ade:	f006 ff4d 	bl	800a97c <memcpy>
      offset += length_msg;
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]
      return offset;
 8003aea:	68fb      	ldr	r3, [r7, #12]
    }
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	4413      	add	r3, r2
 8003b08:	781a      	ldrb	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	3301      	adds	r3, #1
 8003b12:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	441a      	add	r2, r3
 8003b1a:	f107 030c 	add.w	r3, r7, #12
 8003b1e:	4611      	mov	r1, r2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fd37 	bl	8004594 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4413      	add	r3, r2
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d20c      	bcs.n	8003b56 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	441a      	add	r2, r3
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	3b01      	subs	r3, #1
 8003b46:	6839      	ldr	r1, [r7, #0]
 8003b48:	440b      	add	r3, r1
 8003b4a:	7812      	ldrb	r2, [r2, #0]
 8003b4c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	3301      	adds	r3, #1
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	e7ec      	b.n	8003b30 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	4413      	add	r3, r2
 8003b62:	2200      	movs	r2, #0
 8003b64:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	441a      	add	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4413      	add	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
     return offset;
 8003b7a:	693b      	ldr	r3, [r7, #16]
    }
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8003b8e:	4618      	mov	r0, r3
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	0800f3c0 	.word	0x0800f3c0

08003ba0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8003baa:	4618      	mov	r0, r3
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	0800f3d4 	.word	0x0800f3d4

08003bbc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe fe80 	bl	80028cc <_ZN3ros3MsgC1Ev>
 8003bcc:	4a11      	ldr	r2, [pc, #68]	; (8003c14 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	605a      	str	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	609a      	str	r2, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	60da      	str	r2, [r3, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	611a      	str	r2, [r3, #16]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	615a      	str	r2, [r3, #20]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	619a      	str	r2, [r3, #24]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	61da      	str	r2, [r3, #28]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	621a      	str	r2, [r3, #32]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	0800f54c 	.word	0x0800f54c

08003c18 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08a      	sub	sp, #40	; 0x28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6859      	ldr	r1, [r3, #4]
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	4413      	add	r3, r2
 8003c30:	b2ca      	uxtb	r2, r1
 8003c32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	0a19      	lsrs	r1, r3, #8
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	4413      	add	r3, r2
 8003c42:	b2ca      	uxtb	r2, r1
 8003c44:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	0c19      	lsrs	r1, r3, #16
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	3302      	adds	r3, #2
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	4413      	add	r3, r2
 8003c54:	b2ca      	uxtb	r2, r1
 8003c56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	0e19      	lsrs	r1, r3, #24
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	3303      	adds	r3, #3
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	4413      	add	r3, r2
 8003c66:	b2ca      	uxtb	r2, r1
 8003c68:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003c70:	2300      	movs	r3, #0
 8003c72:	623b      	str	r3, [r7, #32]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	6a3a      	ldr	r2, [r7, #32]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d22b      	bcs.n	8003cd6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8003c8c:	6939      	ldr	r1, [r7, #16]
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	4413      	add	r3, r2
 8003c94:	b2ca      	uxtb	r2, r1
 8003c96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	0a19      	lsrs	r1, r3, #8
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	b2ca      	uxtb	r2, r1
 8003ca6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	0c19      	lsrs	r1, r3, #16
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	3302      	adds	r3, #2
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	b2ca      	uxtb	r2, r1
 8003cb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	0e19      	lsrs	r1, r3, #24
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	3303      	adds	r3, #3
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	b2ca      	uxtb	r2, r1
 8003cc6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	3304      	adds	r3, #4
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	623b      	str	r3, [r7, #32]
 8003cd4:	e7ce      	b.n	8003c74 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6919      	ldr	r1, [r3, #16]
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	4413      	add	r3, r2
 8003ce0:	b2ca      	uxtb	r2, r1
 8003ce2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	0a19      	lsrs	r1, r3, #8
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	3301      	adds	r3, #1
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	b2ca      	uxtb	r2, r1
 8003cf4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	0c19      	lsrs	r1, r3, #16
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	3302      	adds	r3, #2
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	4413      	add	r3, r2
 8003d04:	b2ca      	uxtb	r2, r1
 8003d06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	0e19      	lsrs	r1, r3, #24
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	3303      	adds	r3, #3
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	4413      	add	r3, r2
 8003d16:	b2ca      	uxtb	r2, r1
 8003d18:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003d20:	2300      	movs	r3, #0
 8003d22:	61fb      	str	r3, [r7, #28]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d22b      	bcs.n	8003d86 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8003d3c:	68f9      	ldr	r1, [r7, #12]
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	4413      	add	r3, r2
 8003d44:	b2ca      	uxtb	r2, r1
 8003d46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	0a19      	lsrs	r1, r3, #8
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	3301      	adds	r3, #1
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	4413      	add	r3, r2
 8003d54:	b2ca      	uxtb	r2, r1
 8003d56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	0c19      	lsrs	r1, r3, #16
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	3302      	adds	r3, #2
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	4413      	add	r3, r2
 8003d64:	b2ca      	uxtb	r2, r1
 8003d66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	0e19      	lsrs	r1, r3, #24
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	3303      	adds	r3, #3
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	4413      	add	r3, r2
 8003d74:	b2ca      	uxtb	r2, r1
 8003d76:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	3301      	adds	r3, #1
 8003d82:	61fb      	str	r3, [r7, #28]
 8003d84:	e7ce      	b.n	8003d24 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69d9      	ldr	r1, [r3, #28]
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	4413      	add	r3, r2
 8003d90:	b2ca      	uxtb	r2, r1
 8003d92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	0a19      	lsrs	r1, r3, #8
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	4413      	add	r3, r2
 8003da2:	b2ca      	uxtb	r2, r1
 8003da4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	0c19      	lsrs	r1, r3, #16
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	3302      	adds	r3, #2
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	4413      	add	r3, r2
 8003db4:	b2ca      	uxtb	r2, r1
 8003db6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	0e19      	lsrs	r1, r3, #24
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	3303      	adds	r3, #3
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	b2ca      	uxtb	r2, r1
 8003dc8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	3304      	adds	r3, #4
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61bb      	str	r3, [r7, #24]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d228      	bcs.n	8003e30 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fc f9f0 	bl	80001d0 <strlen>
 8003df0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	4413      	add	r3, r2
 8003df8:	6979      	ldr	r1, [r7, #20]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fbac 	bl	8004558 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	3304      	adds	r3, #4
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	18d0      	adds	r0, r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	f006 fdae 	bl	800a97c <memcpy>
      offset += length_stringsi;
 8003e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	4413      	add	r3, r2
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	61bb      	str	r3, [r7, #24]
 8003e2e:	e7d1      	b.n	8003dd4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003e32:	4618      	mov	r0, r3
 8003e34:	3728      	adds	r7, #40	; 0x28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b08e      	sub	sp, #56	; 0x38
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e44:	2300      	movs	r3, #0
 8003e46:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e54:	3301      	adds	r3, #1
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	4413      	add	r3, r2
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	021b      	lsls	r3, r3, #8
 8003e5e:	6a3a      	ldr	r2, [r7, #32]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e66:	3302      	adds	r3, #2
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	041b      	lsls	r3, r3, #16
 8003e70:	6a3a      	ldr	r2, [r7, #32]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e78:	3303      	adds	r3, #3
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	061b      	lsls	r3, r3, #24
 8003e82:	6a3a      	ldr	r2, [r7, #32]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8003e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	6a3a      	ldr	r2, [r7, #32]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d90a      	bls.n	8003eae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f007 fbfa 	bl	800b69c <realloc>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a3a      	ldr	r2, [r7, #32]
 8003eb2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	633b      	str	r3, [r7, #48]	; 0x30
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d236      	bcs.n	8003f30 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eca:	6839      	ldr	r1, [r7, #0]
 8003ecc:	440a      	add	r2, r1
 8003ece:	7812      	ldrb	r2, [r2, #0]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed8:	3301      	adds	r3, #1
 8003eda:	6839      	ldr	r1, [r7, #0]
 8003edc:	440b      	add	r3, r1
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eea:	3302      	adds	r3, #2
 8003eec:	6839      	ldr	r1, [r7, #0]
 8003eee:	440b      	add	r3, r1
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	041b      	lsls	r3, r3, #16
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efc:	3303      	adds	r3, #3
 8003efe:	6839      	ldr	r1, [r7, #0]
 8003f00:	440b      	add	r3, r1
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	061b      	lsls	r3, r3, #24
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8003f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f12:	3304      	adds	r3, #4
 8003f14:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	3208      	adds	r2, #8
 8003f24:	6812      	ldr	r2, [r2, #0]
 8003f26:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8003f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f2e:	e7c3      	b.n	8003eb8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	4413      	add	r3, r2
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	4413      	add	r3, r2
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	021b      	lsls	r3, r3, #8
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4e:	3302      	adds	r3, #2
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	4413      	add	r3, r2
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	041b      	lsls	r3, r3, #16
 8003f58:	69fa      	ldr	r2, [r7, #28]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f60:	3303      	adds	r3, #3
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	4413      	add	r3, r2
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	061b      	lsls	r3, r3, #24
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8003f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f72:	3304      	adds	r3, #4
 8003f74:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d90a      	bls.n	8003f96 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699a      	ldr	r2, [r3, #24]
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	f007 fb86 	bl	800b69c <realloc>
 8003f90:	4602      	mov	r2, r0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d236      	bcs.n	8004018 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fb2:	6839      	ldr	r1, [r7, #0]
 8003fb4:	440a      	add	r2, r1
 8003fb6:	7812      	ldrb	r2, [r2, #0]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	6839      	ldr	r1, [r7, #0]
 8003fc4:	440b      	add	r3, r1
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd2:	3302      	adds	r3, #2
 8003fd4:	6839      	ldr	r1, [r7, #0]
 8003fd6:	440b      	add	r3, r1
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	041b      	lsls	r3, r3, #16
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe4:	3303      	adds	r3, #3
 8003fe6:	6839      	ldr	r1, [r7, #0]
 8003fe8:	440b      	add	r3, r1
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	061b      	lsls	r3, r3, #24
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	3214      	adds	r2, #20
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8004010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004012:	3301      	adds	r3, #1
 8004014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004016:	e7c3      	b.n	8003fa0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	4413      	add	r3, r2
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004024:	3301      	adds	r3, #1
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	4413      	add	r3, r2
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	021b      	lsls	r3, r3, #8
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4313      	orrs	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004036:	3302      	adds	r3, #2
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	4413      	add	r3, r2
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	041b      	lsls	r3, r3, #16
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004048:	3303      	adds	r3, #3
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	4413      	add	r3, r2
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	061b      	lsls	r3, r3, #24
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4313      	orrs	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8004058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405a:	3304      	adds	r3, #4
 800405c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	429a      	cmp	r2, r3
 8004066:	d90a      	bls.n	800407e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4619      	mov	r1, r3
 8004072:	4610      	mov	r0, r2
 8004074:	f007 fb12 	bl	800b69c <realloc>
 8004078:	4602      	mov	r2, r0
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8004084:	2300      	movs	r3, #0
 8004086:	62bb      	str	r3, [r7, #40]	; 0x28
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800408e:	429a      	cmp	r2, r3
 8004090:	d23f      	bcs.n	8004112 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8004092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	441a      	add	r2, r3
 8004098:	f107 030c 	add.w	r3, r7, #12
 800409c:	4611      	mov	r1, r2
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fa78 	bl	8004594 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80040a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a6:	3304      	adds	r3, #4
 80040a8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80040aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
 80040ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4413      	add	r3, r2
 80040b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d20c      	bcs.n	80040d4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	441a      	add	r2, r3
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	3b01      	subs	r3, #1
 80040c4:	6839      	ldr	r1, [r7, #0]
 80040c6:	440b      	add	r3, r1
 80040c8:	7812      	ldrb	r2, [r2, #0]
 80040ca:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	3301      	adds	r3, #1
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
 80040d2:	e7ec      	b.n	80040ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80040d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4413      	add	r3, r2
 80040da:	3b01      	subs	r3, #1
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	4413      	add	r3, r2
 80040e0:	2200      	movs	r2, #0
 80040e2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80040e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e6:	3b01      	subs	r3, #1
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	441a      	add	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80040f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4413      	add	r3, r2
 80040f6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	3220      	adds	r2, #32
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	3301      	adds	r3, #1
 800410e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004110:	e7ba      	b.n	8004088 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8004112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8004114:	4618      	mov	r0, r3
 8004116:	3738      	adds	r7, #56	; 0x38
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	4b03      	ldr	r3, [pc, #12]	; (8004134 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	0800f4b8 	.word	0x0800f4b8

08004138 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	4b03      	ldr	r3, [pc, #12]	; (8004150 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8004142:	4618      	mov	r0, r3
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	0800f3f8 	.word	0x0800f3f8

08004154 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	605a      	str	r2, [r3, #4]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	611a      	str	r2, [r3, #16]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68d8      	ldr	r0, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6891      	ldr	r1, [r2, #8]
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	4798      	blx	r3
 80041a0:	4603      	mov	r3, r0
  };
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
  }
 80041b6:	4618      	mov	r0, r3
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
	...

080041c4 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
      data("")
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fe fb7c 	bl	80028cc <_ZN3ros3MsgC1Ev>
 80041d4:	4a05      	ldr	r2, [pc, #20]	; (80041ec <_ZN8std_msgs6StringC1Ev+0x28>)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80041de:	605a      	str	r2, [r3, #4]
    {
    }
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	0800f508 	.word	0x0800f508
 80041f0:	0800f37c 	.word	0x0800f37c

080041f4 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	4618      	mov	r0, r3
 8004208:	f7fb ffe2 	bl	80001d0 <strlen>
 800420c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	4413      	add	r3, r2
 8004214:	68b9      	ldr	r1, [r7, #8]
 8004216:	4618      	mov	r0, r3
 8004218:	f000 f99e 	bl	8004558 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	3304      	adds	r3, #4
 8004220:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	18d0      	adds	r0, r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	4619      	mov	r1, r3
 8004230:	f006 fba4 	bl	800a97c <memcpy>
      offset += length_data;
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4413      	add	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
      return offset;
 800423c:	68fb      	ldr	r3, [r7, #12]
    }
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004246:	b580      	push	{r7, lr}
 8004248:	b086      	sub	sp, #24
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	441a      	add	r2, r3
 800425a:	f107 030c 	add.w	r3, r7, #12
 800425e:	4611      	mov	r1, r2
 8004260:	4618      	mov	r0, r3
 8004262:	f000 f997 	bl	8004594 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	3304      	adds	r3, #4
 800426a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4413      	add	r3, r2
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	429a      	cmp	r2, r3
 800427a:	d20c      	bcs.n	8004296 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	441a      	add	r2, r3
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	3b01      	subs	r3, #1
 8004286:	6839      	ldr	r1, [r7, #0]
 8004288:	440b      	add	r3, r1
 800428a:	7812      	ldrb	r2, [r2, #0]
 800428c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	3301      	adds	r3, #1
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	e7ec      	b.n	8004270 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4413      	add	r3, r2
 800429c:	3b01      	subs	r3, #1
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	4413      	add	r3, r2
 80042a2:	2200      	movs	r2, #0
 80042a4:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	441a      	add	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4413      	add	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
     return offset;
 80042ba:	693b      	ldr	r3, [r7, #16]
    }
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <_ZN8std_msgs6String7getTypeEv+0x18>)
 80042ce:	4618      	mov	r0, r3
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	0800f41c 	.word	0x0800f41c

080042e0 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	4b03      	ldr	r3, [pc, #12]	; (80042f8 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80042ea:	4618      	mov	r0, r3
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	0800f42c 	.word	0x0800f42c

080042fc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	4a04      	ldr	r2, [pc, #16]	; (8004318 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4618      	mov	r0, r3
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	0800f538 	.word	0x0800f538

0800431c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff ffe8 	bl	80042fc <_ZN3ros15NodeHandleBase_C1Ev>
 800432c:	4a33      	ldr	r2, [pc, #204]	; (80043fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xe0>)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3304      	adds	r3, #4
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff f884 	bl	8003444 <_ZN13STM32HardwareC1Ev>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	609a      	str	r2, [r3, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	60da      	str	r2, [r3, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	611a      	str	r2, [r3, #16]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	615a      	str	r2, [r3, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3318      	adds	r3, #24
 8004358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800435c:	2100      	movs	r1, #0
 800435e:	4618      	mov	r0, r3
 8004360:	f006 fb1a 	bl	800a998 <memset>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800436a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f006 fb11 	bl	800a998 <memset>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800437c:	2264      	movs	r2, #100	; 0x64
 800437e:	2100      	movs	r1, #0
 8004380:	4618      	mov	r0, r3
 8004382:	f006 fb09 	bl	800a998 <memset>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 800438c:	2264      	movs	r2, #100	; 0x64
 800438e:	2100      	movs	r1, #0
 8004390:	4618      	mov	r0, r3
 8004392:	f006 fb01 	bl	800a998 <memset>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff fbe5 	bl	8003bbc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	0800f4f4 	.word	0x0800f4f4

08004400 <setup>:

//Create a subscriber node to receive setpoint, Kp, Ki and Kd
ros::Subscriber<custom_msg::encoder_input_msg> vel_sub("PID_ctrl", &vel_cb);

void setup(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  nh.initNode();
 8004404:	480a      	ldr	r0, [pc, #40]	; (8004430 <setup+0x30>)
 8004406:	f000 f91f 	bl	8004648 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 800440a:	490a      	ldr	r1, [pc, #40]	; (8004434 <setup+0x34>)
 800440c:	4808      	ldr	r0, [pc, #32]	; (8004430 <setup+0x30>)
 800440e:	f000 f938 	bl	8004682 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(pid_pub);
 8004412:	4909      	ldr	r1, [pc, #36]	; (8004438 <setup+0x38>)
 8004414:	4806      	ldr	r0, [pc, #24]	; (8004430 <setup+0x30>)
 8004416:	f000 f934 	bl	8004682 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(mpu_pub);
 800441a:	4908      	ldr	r1, [pc, #32]	; (800443c <setup+0x3c>)
 800441c:	4804      	ldr	r0, [pc, #16]	; (8004430 <setup+0x30>)
 800441e:	f000 f930 	bl	8004682 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.subscribe(vel_sub);
 8004422:	4907      	ldr	r1, [pc, #28]	; (8004440 <setup+0x40>)
 8004424:	4802      	ldr	r0, [pc, #8]	; (8004430 <setup+0x30>)
 8004426:	f000 f95a 	bl	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
}
 800442a:	bf00      	nop
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	200009b8 	.word	0x200009b8
 8004434:	20000ef0 	.word	0x20000ef0
 8004438:	20000f18 	.word	0x20000f18
 800443c:	20000f3c 	.word	0x20000f3c
 8004440:	20000f50 	.word	0x20000f50

08004444 <loop>:

void loop(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
	str_msg.data = hello;
 8004448:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <loop+0x74>)
 800444a:	4a1c      	ldr	r2, [pc, #112]	; (80044bc <loop+0x78>)
 800444c:	605a      	str	r2, [r3, #4]

	pid_msg.output_controller_m1 = m1.u;
 800444e:	4b1c      	ldr	r3, [pc, #112]	; (80044c0 <loop+0x7c>)
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	4a1c      	ldr	r2, [pc, #112]	; (80044c4 <loop+0x80>)
 8004454:	6093      	str	r3, [r2, #8]
	pid_msg.output_rpm_m1 = m1.v;
 8004456:	4b1a      	ldr	r3, [pc, #104]	; (80044c0 <loop+0x7c>)
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	4a1a      	ldr	r2, [pc, #104]	; (80044c4 <loop+0x80>)
 800445c:	6053      	str	r3, [r2, #4]
	pid_msg.output_controller_m2 = m2.u;
 800445e:	4b1a      	ldr	r3, [pc, #104]	; (80044c8 <loop+0x84>)
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	4a18      	ldr	r2, [pc, #96]	; (80044c4 <loop+0x80>)
 8004464:	6113      	str	r3, [r2, #16]
	pid_msg.output_rpm_m2 = m2.v;
 8004466:	4b18      	ldr	r3, [pc, #96]	; (80044c8 <loop+0x84>)
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	4a16      	ldr	r2, [pc, #88]	; (80044c4 <loop+0x80>)
 800446c:	60d3      	str	r3, [r2, #12]

	mpu_msg.roll = -attitude.r;
 800446e:	4b17      	ldr	r3, [pc, #92]	; (80044cc <loop+0x88>)
 8004470:	edd3 7a00 	vldr	s15, [r3]
 8004474:	eef1 7a67 	vneg.f32	s15, s15
 8004478:	4b15      	ldr	r3, [pc, #84]	; (80044d0 <loop+0x8c>)
 800447a:	edc3 7a01 	vstr	s15, [r3, #4]
	mpu_msg.pitch = attitude.p;
 800447e:	4b13      	ldr	r3, [pc, #76]	; (80044cc <loop+0x88>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	4a13      	ldr	r2, [pc, #76]	; (80044d0 <loop+0x8c>)
 8004484:	6093      	str	r3, [r2, #8]
	mpu_msg.yaw = attitude.y;
 8004486:	4b11      	ldr	r3, [pc, #68]	; (80044cc <loop+0x88>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	4a11      	ldr	r2, [pc, #68]	; (80044d0 <loop+0x8c>)
 800448c:	60d3      	str	r3, [r2, #12]

	chatter.publish(&str_msg);
 800448e:	490a      	ldr	r1, [pc, #40]	; (80044b8 <loop+0x74>)
 8004490:	4810      	ldr	r0, [pc, #64]	; (80044d4 <loop+0x90>)
 8004492:	f7ff fe76 	bl	8004182 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	pid_pub.publish(&pid_msg);
 8004496:	490b      	ldr	r1, [pc, #44]	; (80044c4 <loop+0x80>)
 8004498:	480f      	ldr	r0, [pc, #60]	; (80044d8 <loop+0x94>)
 800449a:	f7ff fe72 	bl	8004182 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	mpu_pub.publish(&mpu_msg);
 800449e:	490c      	ldr	r1, [pc, #48]	; (80044d0 <loop+0x8c>)
 80044a0:	480e      	ldr	r0, [pc, #56]	; (80044dc <loop+0x98>)
 80044a2:	f7ff fe6e 	bl	8004182 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	nh.spinOnce();
 80044a6:	480e      	ldr	r0, [pc, #56]	; (80044e0 <loop+0x9c>)
 80044a8:	f000 f946 	bl	8004738 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	HAL_Delay(50);
 80044ac:	2032      	movs	r0, #50	; 0x32
 80044ae:	f001 fa59 	bl	8005964 <HAL_Delay>
}
 80044b2:	bf00      	nop
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	20000ee8 	.word	0x20000ee8
 80044bc:	20000004 	.word	0x20000004
 80044c0:	20000914 	.word	0x20000914
 80044c4:	20000f04 	.word	0x20000f04
 80044c8:	20000938 	.word	0x20000938
 80044cc:	200008e4 	.word	0x200008e4
 80044d0:	20000f2c 	.word	0x20000f2c
 80044d4:	20000ef0 	.word	0x20000ef0
 80044d8:	20000f18 	.word	0x20000f18
 80044dc:	20000f3c 	.word	0x20000f3c
 80044e0:	200009b8 	.word	0x200009b8

080044e4 <_Z6vel_cbRKN10custom_msg17encoder_input_msgE>:

void vel_cb(const custom_msg::encoder_input_msg& msg){
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
	Setpoint_value_m1 = msg.input_setpoint_m1;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	4a11      	ldr	r2, [pc, #68]	; (8004538 <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x54>)
 80044f2:	6013      	str	r3, [r2, #0]
	Kp_m1 = msg.input_Kp_m1;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	4a10      	ldr	r2, [pc, #64]	; (800453c <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x58>)
 80044fa:	6013      	str	r3, [r2, #0]
	Ki_m1 = msg.input_Ki_m1;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	4a0f      	ldr	r2, [pc, #60]	; (8004540 <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x5c>)
 8004502:	6013      	str	r3, [r2, #0]
	Kd_m1 = msg.input_Kd_m1;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	4a0e      	ldr	r2, [pc, #56]	; (8004544 <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x60>)
 800450a:	6013      	str	r3, [r2, #0]
	Setpoint_value_m2 = msg.input_setpoint_m2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	4a0d      	ldr	r2, [pc, #52]	; (8004548 <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x64>)
 8004512:	6013      	str	r3, [r2, #0]
	Kp_m2 = msg.input_Kp_m2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	4a0c      	ldr	r2, [pc, #48]	; (800454c <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x68>)
 800451a:	6013      	str	r3, [r2, #0]
	Ki_m2 = msg.input_Ki_m2;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	4a0b      	ldr	r2, [pc, #44]	; (8004550 <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x6c>)
 8004522:	6013      	str	r3, [r2, #0]
	Kd_m2 = msg.input_Kd_m2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	4a0a      	ldr	r2, [pc, #40]	; (8004554 <_Z6vel_cbRKN10custom_msg17encoder_input_msgE+0x70>)
 800452a:	6013      	str	r3, [r2, #0]
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	200008f0 	.word	0x200008f0
 800453c:	200008f8 	.word	0x200008f8
 8004540:	20000900 	.word	0x20000900
 8004544:	20000908 	.word	0x20000908
 8004548:	200008f4 	.word	0x200008f4
 800454c:	200008fc 	.word	0x200008fc
 8004550:	20000904 	.word	0x20000904
 8004554:	2000090c 	.word	0x2000090c

08004558 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2b03      	cmp	r3, #3
 800456a:	d80d      	bhi.n	8004588 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	fa22 f103 	lsr.w	r1, r2, r3
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4413      	add	r3, r2
 800457c:	b2ca      	uxtb	r2, r1
 800457e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3301      	adds	r3, #1
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	e7ee      	b.n	8004566 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8004588:	bf00      	nop
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d811      	bhi.n	80045d2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6839      	ldr	r1, [r7, #0]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	440a      	add	r2, r1
 80045b8:	7812      	ldrb	r2, [r2, #0]
 80045ba:	4611      	mov	r1, r2
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	00d2      	lsls	r2, r2, #3
 80045c0:	fa01 f202 	lsl.w	r2, r1, r2
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3301      	adds	r3, #1
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	e7ea      	b.n	80045a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80045d2:	bf00      	nop
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	4a04      	ldr	r2, [pc, #16]	; (80045fc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	0800f520 	.word	0x0800f520

08004600 <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff ffe5 	bl	80045e0 <_ZN3ros11Subscriber_C1Ev>
 8004616:	4a0b      	ldr	r2, [pc, #44]	; (8004644 <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	330c      	adds	r3, #12
 8004620:	4618      	mov	r0, r3
 8004622:	f7fe f963 	bl	80028ec <_ZN10custom_msg17encoder_input_msgC1Ev>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	631a      	str	r2, [r3, #48]	; 0x30
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	609a      	str	r2, [r3, #8]
  };
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	0800f4dc 	.word	0x0800f4dc

08004648 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3304      	adds	r3, #4
 8004654:	4618      	mov	r0, r3
 8004656:	f7fe ff05 	bl	8003464 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8004682:	b480      	push	{r7}
 8004684:	b085      	sub	sp, #20
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b18      	cmp	r3, #24
 8004694:	dc1c      	bgt.n	80046d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4e>
    {
      if (publishers[i] == 0) // empty slot
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800469e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d110      	bne.n	80046c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80046ae:	6839      	ldr	r1, [r7, #0]
 80046b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	60da      	str	r2, [r3, #12]
        return true;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e004      	b.n	80046d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3301      	adds	r3, #1
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	e7df      	b.n	8004690 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 80046d0:	2300      	movs	r3, #0
  }
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80046de:	b480      	push	{r7}
 80046e0:	b085      	sub	sp, #20
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80046e8:	2300      	movs	r3, #0
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b18      	cmp	r3, #24
 80046f0:	dc1b      	bgt.n	800472a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10e      	bne.n	8004722 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x44>
      {
        subscribers[i] = &s;
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	605a      	str	r2, [r3, #4]
        return true;
 800471e:	2301      	movs	r3, #1
 8004720:	e004      	b.n	800472c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3301      	adds	r3, #1
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	e7e0      	b.n	80046ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 800472a:	2300      	movs	r3, #0
  }
 800472c:	4618      	mov	r0, r3
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3304      	adds	r3, #4
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe feb9 	bl	80034bc <_ZN13STM32Hardware4timeEv>
 800474a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800475a:	4293      	cmp	r3, r2
 800475c:	d903      	bls.n	8004766 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d009      	beq.n	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	429a      	cmp	r2, r3
 800477a:	d903      	bls.n	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d013      	beq.n	80047b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3304      	adds	r3, #4
 8004790:	4618      	mov	r0, r3
 8004792:	f7fe fe93 	bl	80034bc <_ZN13STM32Hardware4timeEv>
 8004796:	4602      	mov	r2, r0
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	1ad2      	subs	r2, r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	bf8c      	ite	hi
 80047a4:	2301      	movhi	r3, #1
 80047a6:	2300      	movls	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 80047ae:	f06f 0301 	mvn.w	r3, #1
 80047b2:	e190      	b.n	8004ad6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3304      	adds	r3, #4
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fe fe60 	bl	800347e <_ZN13STM32Hardware4readEv>
 80047be:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f2c0 8170 	blt.w	8004aa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>
      checksum_ += data;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	441a      	add	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80047de:	2b07      	cmp	r3, #7
 80047e0:	d11d      	bne.n	800481e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047e8:	1c59      	adds	r1, r3, #1
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	b2d1      	uxtb	r1, r2
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	4413      	add	r3, r2
 80047f8:	460a      	mov	r2, r1
 80047fa:	761a      	strb	r2, [r3, #24]
        bytes_--;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8004802:	1e5a      	subs	r2, r3, #1
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1b7      	bne.n	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2208      	movs	r2, #8
 8004818:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800481c:	e7b2      	b.n	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d128      	bne.n	800487a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2bff      	cmp	r3, #255	; 0xff
 800482c:	d10d      	bne.n	800484a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f103 0214 	add.w	r2, r3, #20
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8004848:	e79c      	b.n	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3304      	adds	r3, #4
 800484e:	4618      	mov	r0, r3
 8004850:	f7fe fe34 	bl	80034bc <_ZN13STM32Hardware4timeEv>
 8004854:	4602      	mov	r2, r0
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	f241 3288 	movw	r2, #5000	; 0x1388
 800485e:	4293      	cmp	r3, r2
 8004860:	bf8c      	ite	hi
 8004862:	2301      	movhi	r3, #1
 8004864:	2300      	movls	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d08b      	beq.n	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 8004874:	f06f 0301 	mvn.w	r3, #1
 8004878:	e12d      	b.n	8004ad6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004880:	2b01      	cmp	r3, #1
 8004882:	d118      	bne.n	80048b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2bfe      	cmp	r3, #254	; 0xfe
 8004888:	d107      	bne.n	800489a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004898:	e774      	b.n	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f47f af6b 	bne.w	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f915 	bl	8004ade <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80048b4:	e766      	b.n	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d113      	bne.n	80048e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b0>
        bytes_ = data;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 80048e6:	e74d      	b.n	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d110      	bne.n	8004914 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	021b      	lsls	r3, r3, #8
 80048fc:	441a      	add	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004912:	e737      	b.n	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800491a:	2b04      	cmp	r3, #4
 800491c:	d116      	bne.n	800494c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004924:	425a      	negs	r2, r3
 8004926:	b2db      	uxtb	r3, r3
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	bf58      	it	pl
 800492c:	4253      	negpl	r3, r2
 800492e:	2bff      	cmp	r3, #255	; 0xff
 8004930:	d107      	bne.n	8004942 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20a>
          mode_++;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004940:	e720      	b.n	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800494a:	e71b      	b.n	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004952:	2b05      	cmp	r3, #5
 8004954:	d10f      	bne.n	8004976 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
        topic_ = data;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8004974:	e706      	b.n	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800497c:	2b06      	cmp	r3, #6
 800497e:	d117      	bne.n	80049b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	021b      	lsls	r3, r3, #8
 800498a:	441a      	add	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2207      	movs	r2, #7
 8004996:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f47f aeef 	bne.w	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2208      	movs	r2, #8
 80049aa:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80049ae:	e6e9      	b.n	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	f47f aee4 	bne.w	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80049ca:	425a      	negs	r2, r3
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	bf58      	it	pl
 80049d2:	4253      	negpl	r3, r2
 80049d4:	2bff      	cmp	r3, #255	; 0xff
 80049d6:	f47f aed5 	bne.w	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d110      	bne.n	8004a06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
            requestSyncTime();
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f87a 	bl	8004ade <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f894 	bl	8004b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 8004a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a04:	e067      	b.n	8004ad6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004a0c:	2b0a      	cmp	r3, #10
 8004a0e:	d106      	bne.n	8004a1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3318      	adds	r3, #24
 8004a14:	4619      	mov	r1, r3
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f95e 	bl	8004cd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004a1c:	e6b2      	b.n	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004a24:	2b06      	cmp	r3, #6
 8004a26:	d10d      	bne.n	8004a44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3318      	adds	r3, #24
 8004a32:	4619      	mov	r1, r3
 8004a34:	4610      	mov	r0, r2
 8004a36:	f7ff fa00 	bl	8003e3a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8004a42:	e69f      	b.n	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004a4a:	2b0b      	cmp	r3, #11
 8004a4c:	d104      	bne.n	8004a58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x320>
            configured_ = false;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8004a56:	e695      	b.n	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004a5e:	3b64      	subs	r3, #100	; 0x64
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f43f ae89 	beq.w	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004a78:	3b64      	subs	r3, #100	; 0x64
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	6858      	ldr	r0, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004a8c:	3b64      	subs	r3, #100	; 0x64
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	3218      	adds	r2, #24
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	4798      	blx	r3
    while (true)
 8004aa6:	e66d      	b.n	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004aa8:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00f      	beq.n	8004ad4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d906      	bls.n	8004ad4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
      requestSyncTime();
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f809 	bl	8004ade <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 8004ad4:	2300      	movs	r3, #0
  }
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b086      	sub	sp, #24
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004ae6:	f107 030c 	add.w	r3, r7, #12
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fe fd02 	bl	80034f4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f107 020c 	add.w	r2, r7, #12
 8004afa:	210a      	movs	r1, #10
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	4798      	blx	r3
    rt_time = hardware_.time();
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3304      	adds	r3, #4
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fe fcd9 	bl	80034bc <_ZN13STM32Hardware4timeEv>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	609a      	str	r2, [r3, #8]
  }
 8004b10:	bf00      	nop
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8004b18:	b590      	push	{r4, r7, lr}
 8004b1a:	b08b      	sub	sp, #44	; 0x2c
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004b20:	f107 030c 	add.w	r3, r7, #12
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fe fdd5 	bl	80036d4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	2b18      	cmp	r3, #24
 8004b32:	dc5b      	bgt.n	8004bec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b38:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d04f      	beq.n	8004be4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b48:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b72:	6859      	ldr	r1, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b78:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3308      	adds	r3, #8
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4608      	mov	r0, r1
 8004b8a:	4798      	blx	r3
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b94:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b9c:	6859      	ldr	r1, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba2:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	330c      	adds	r3, #12
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4608      	mov	r0, r1
 8004bb4:	4798      	blx	r3
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bbe:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681c      	ldr	r4, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bca:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff fae9 	bl	80041aa <_ZN3ros9Publisher15getEndpointTypeEv>
 8004bd8:	4601      	mov	r1, r0
 8004bda:	f107 030c 	add.w	r3, r7, #12
 8004bde:	461a      	mov	r2, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	3301      	adds	r3, #1
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bea:	e7a0      	b.n	8004b2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004bec:	2300      	movs	r3, #0
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	2b18      	cmp	r3, #24
 8004bf4:	dc68      	bgt.n	8004cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d05b      	beq.n	8004cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	6859      	ldr	r1, [r3, #4]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4608      	mov	r0, r1
 8004c52:	4798      	blx	r3
 8004c54:	4603      	mov	r3, r0
 8004c56:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	6859      	ldr	r1, [r3, #4]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	330c      	adds	r3, #12
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4608      	mov	r0, r1
 8004c7c:	4798      	blx	r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004c82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c86:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681c      	ldr	r4, [r3, #0]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	6859      	ldr	r1, [r3, #4]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3304      	adds	r3, #4
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	4798      	blx	r3
 8004cb4:	4601      	mov	r1, r0
 8004cb6:	f107 030c 	add.w	r3, r7, #12
 8004cba:	461a      	mov	r2, r3
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc6:	e793      	b.n	8004bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 8004cd0:	bf00      	nop
 8004cd2:	372c      	adds	r7, #44	; 0x2c
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd90      	pop	{r4, r7, pc}

08004cd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004ce2:	f107 0308 	add.w	r3, r7, #8
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fe fc04 	bl	80034f4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fe fbe3 	bl	80034bc <_ZN13STM32Hardware4timeEv>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004d00:	f107 0308 	add.w	r3, r7, #8
 8004d04:	6839      	ldr	r1, [r7, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fe fc64 	bl	80035d4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	4914      	ldr	r1, [pc, #80]	; (8004d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8004d12:	fba1 1303 	umull	r1, r3, r1, r3
 8004d16:	099b      	lsrs	r3, r3, #6
 8004d18:	4413      	add	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004d1c:	6939      	ldr	r1, [r7, #16]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8004d22:	fba3 0302 	umull	r0, r3, r3, r2
 8004d26:	099b      	lsrs	r3, r3, #6
 8004d28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d2c:	fb00 f303 	mul.w	r3, r0, r3
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	4a0d      	ldr	r2, [pc, #52]	; (8004d68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004d34:	fb02 f303 	mul.w	r3, r2, r3
 8004d38:	440b      	add	r3, r1
 8004d3a:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004d3c:	f107 0308 	add.w	r3, r7, #8
 8004d40:	3304      	adds	r3, #4
 8004d42:	4619      	mov	r1, r3
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f8a5 	bl	8004e94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe fbb4 	bl	80034bc <_ZN13STM32Hardware4timeEv>
 8004d54:	4602      	mov	r2, r0
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 8004d5c:	bf00      	nop
 8004d5e:	3718      	adds	r7, #24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	10624dd3 	.word	0x10624dd3
 8004d68:	000f4240 	.word	0x000f4240

08004d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b63      	cmp	r3, #99	; 0x63
 8004d7c:	dd09      	ble.n	8004d92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004d84:	f083 0301 	eor.w	r3, r3, #1
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e079      	b.n	8004e86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	f502 7206 	add.w	r2, r2, #536	; 0x218
 8004d9e:	3207      	adds	r2, #7
 8004da0:	4611      	mov	r1, r2
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	4798      	blx	r3
 8004da6:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	22ff      	movs	r2, #255	; 0xff
 8004dac:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	22fe      	movs	r2, #254	; 0xfe
 8004db4:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	0a1b      	lsrs	r3, r3, #8
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8004dde:	4413      	add	r3, r2
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	43db      	mvns	r3, r3
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	b21b      	sxth	r3, r3
 8004dfa:	121b      	asrs	r3, r3, #8
 8004dfc:	b21b      	sxth	r3, r3
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004e0a:	2305      	movs	r3, #5
 8004e0c:	61bb      	str	r3, [r7, #24]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	3306      	adds	r3, #6
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	dc0d      	bgt.n	8004e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	461a      	mov	r2, r3
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	4413      	add	r3, r2
 8004e2a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	e7ec      	b.n	8004e0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	3307      	adds	r3, #7
 8004e38:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	425a      	negs	r2, r3
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	bf58      	it	pl
 8004e44:	4253      	negpl	r3, r2
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	1c59      	adds	r1, r3, #1
 8004e4c:	6179      	str	r1, [r7, #20]
 8004e4e:	43d2      	mvns	r2, r2
 8004e50:	b2d1      	uxtb	r1, r2
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4413      	add	r3, r2
 8004e56:	460a      	mov	r2, r1
 8004e58:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e62:	dc0a      	bgt.n	8004e7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	1d18      	adds	r0, r3, #4
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4619      	mov	r1, r3
 8004e72:	f7fe fb12 	bl	800349a <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	e005      	b.n	8004e86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004e7a:	4905      	ldr	r1, [pc, #20]	; (8004e90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 f847 	bl	8004f10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004e86:	4618      	mov	r0, r3
 8004e88:	3720      	adds	r7, #32
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	0800f450 	.word	0x0800f450

08004e94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fe fb0a 	bl	80034bc <_ZN13STM32Hardware4timeEv>
 8004ea8:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4914      	ldr	r1, [pc, #80]	; (8004f04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 8004eb2:	fba1 1303 	umull	r1, r3, r1, r3
 8004eb6:	099b      	lsrs	r3, r3, #6
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	1e5a      	subs	r2, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	6859      	ldr	r1, [r3, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 8004ec8:	fba3 0302 	umull	r0, r3, r3, r2
 8004ecc:	099b      	lsrs	r3, r3, #6
 8004ece:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ed2:	fb00 f303 	mul.w	r3, r0, r3
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	4a0b      	ldr	r2, [pc, #44]	; (8004f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8004eda:	fb02 f303 	mul.w	r3, r2, r3
 8004ede:	1aca      	subs	r2, r1, r3
 8004ee0:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8004ee2:	4413      	add	r3, r2
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f103 020c 	add.w	r2, r3, #12
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3310      	adds	r3, #16
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	f000 fc6d 	bl	80057d4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004efa:	bf00      	nop
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	10624dd3 	.word	0x10624dd3
 8004f08:	000f4240 	.word	0x000f4240
 8004f0c:	3b9aca00 	.word	0x3b9aca00

08004f10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	2103      	movs	r1, #3
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f804 	bl	8004f2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004f24:	bf00      	nop
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	460b      	mov	r3, r1
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004f3a:	f107 0314 	add.w	r3, r7, #20
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fe fd8c 	bl	8003a5c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004f44:	7afb      	ldrb	r3, [r7, #11]
 8004f46:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f107 0214 	add.w	r2, r7, #20
 8004f56:	2107      	movs	r1, #7
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	4798      	blx	r3
  }
 8004f5c:	bf00      	nop
 8004f5e:	3720      	adds	r7, #32
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <_Z41__static_initialization_and_destruction_0ii>:
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d128      	bne.n	8004fc6 <_Z41__static_initialization_and_destruction_0ii+0x62>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d123      	bne.n	8004fc6 <_Z41__static_initialization_and_destruction_0ii+0x62>
ros::NodeHandle nh;
 8004f7e:	4814      	ldr	r0, [pc, #80]	; (8004fd0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004f80:	f7ff f9cc 	bl	800431c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8004f84:	4813      	ldr	r0, [pc, #76]	; (8004fd4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004f86:	f7ff f91d 	bl	80041c4 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	4a11      	ldr	r2, [pc, #68]	; (8004fd4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004f8e:	4912      	ldr	r1, [pc, #72]	; (8004fd8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004f90:	4812      	ldr	r0, [pc, #72]	; (8004fdc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004f92:	f7ff f8df 	bl	8004154 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
custom_msg::encoder_output_msg pid_msg;
 8004f96:	4812      	ldr	r0, [pc, #72]	; (8004fe0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004f98:	f7fd ff82 	bl	8002ea0 <_ZN10custom_msg18encoder_output_msgC1Ev>
ros::Publisher pid_pub("PID_data", &pid_msg);
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	4a10      	ldr	r2, [pc, #64]	; (8004fe0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004fa0:	4910      	ldr	r1, [pc, #64]	; (8004fe4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004fa2:	4811      	ldr	r0, [pc, #68]	; (8004fe8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004fa4:	f7ff f8d6 	bl	8004154 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
custom_msg::mpu_msg mpu_msg;
 8004fa8:	4810      	ldr	r0, [pc, #64]	; (8004fec <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004faa:	f7fe f90b 	bl	80031c4 <_ZN10custom_msg7mpu_msgC1Ev>
ros::Publisher mpu_pub("MPU_data", &mpu_msg);
 8004fae:	2300      	movs	r3, #0
 8004fb0:	4a0e      	ldr	r2, [pc, #56]	; (8004fec <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004fb2:	490f      	ldr	r1, [pc, #60]	; (8004ff0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004fb4:	480f      	ldr	r0, [pc, #60]	; (8004ff4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004fb6:	f7ff f8cd 	bl	8004154 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<custom_msg::encoder_input_msg> vel_sub("PID_ctrl", &vel_cb);
 8004fba:	2301      	movs	r3, #1
 8004fbc:	4a0e      	ldr	r2, [pc, #56]	; (8004ff8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004fbe:	490f      	ldr	r1, [pc, #60]	; (8004ffc <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004fc0:	480f      	ldr	r0, [pc, #60]	; (8005000 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004fc2:	f7ff fb1d 	bl	8004600 <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvEC1EPKcPFvRKS2_Ei>
}
 8004fc6:	bf00      	nop
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	200009b8 	.word	0x200009b8
 8004fd4:	20000ee8 	.word	0x20000ee8
 8004fd8:	0800f48c 	.word	0x0800f48c
 8004fdc:	20000ef0 	.word	0x20000ef0
 8004fe0:	20000f04 	.word	0x20000f04
 8004fe4:	0800f494 	.word	0x0800f494
 8004fe8:	20000f18 	.word	0x20000f18
 8004fec:	20000f2c 	.word	0x20000f2c
 8004ff0:	0800f4a0 	.word	0x0800f4a0
 8004ff4:	20000f3c 	.word	0x20000f3c
 8004ff8:	080044e5 	.word	0x080044e5
 8004ffc:	0800f4ac 	.word	0x0800f4ac
 8005000:	20000f50 	.word	0x20000f50

08005004 <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	330c      	adds	r3, #12
 8005012:	6839      	ldr	r1, [r7, #0]
 8005014:	4618      	mov	r0, r3
 8005016:	f7fd fdc9 	bl	8002bac <_ZN10custom_msg17encoder_input_msg11deserializeEPh>
    this->cb_(msg);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	320c      	adds	r2, #12
 8005022:	4610      	mov	r0, r2
 8005024:	4798      	blx	r3
  }
 8005026:	bf00      	nop
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 800503a:	4618      	mov	r0, r3
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	330c      	adds	r3, #12
 8005052:	4618      	mov	r0, r3
 8005054:	f7fd ff08 	bl	8002e68 <_ZN10custom_msg17encoder_input_msg7getTypeEv>
 8005058:	4603      	mov	r3, r0
  }
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <_ZN3ros10SubscriberIN10custom_msg17encoder_input_msgEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8005062:	b580      	push	{r7, lr}
 8005064:	b082      	sub	sp, #8
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	330c      	adds	r3, #12
 800506e:	4618      	mov	r0, r3
 8005070:	f7fd ff08 	bl	8002e84 <_ZN10custom_msg17encoder_input_msg6getMD5Ev>
 8005074:	4603      	mov	r3, r0
  }
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
    return configured_;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 800508c:	4618      	mov	r0, r3
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <_GLOBAL__sub_I_nh>:
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
 800509c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80050a0:	2001      	movs	r0, #1
 80050a2:	f7ff ff5f 	bl	8004f64 <_Z41__static_initialization_and_destruction_0ii>
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ae:	2300      	movs	r3, #0
 80050b0:	607b      	str	r3, [r7, #4]
 80050b2:	4b10      	ldr	r3, [pc, #64]	; (80050f4 <HAL_MspInit+0x4c>)
 80050b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b6:	4a0f      	ldr	r2, [pc, #60]	; (80050f4 <HAL_MspInit+0x4c>)
 80050b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050bc:	6453      	str	r3, [r2, #68]	; 0x44
 80050be:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <HAL_MspInit+0x4c>)
 80050c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c6:	607b      	str	r3, [r7, #4]
 80050c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050ca:	2300      	movs	r3, #0
 80050cc:	603b      	str	r3, [r7, #0]
 80050ce:	4b09      	ldr	r3, [pc, #36]	; (80050f4 <HAL_MspInit+0x4c>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	4a08      	ldr	r2, [pc, #32]	; (80050f4 <HAL_MspInit+0x4c>)
 80050d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050d8:	6413      	str	r3, [r2, #64]	; 0x40
 80050da:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <HAL_MspInit+0x4c>)
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e2:	603b      	str	r3, [r7, #0]
 80050e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	40023800 	.word	0x40023800

080050f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08a      	sub	sp, #40	; 0x28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005100:	f107 0314 	add.w	r3, r7, #20
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	605a      	str	r2, [r3, #4]
 800510a:	609a      	str	r2, [r3, #8]
 800510c:	60da      	str	r2, [r3, #12]
 800510e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a19      	ldr	r2, [pc, #100]	; (800517c <HAL_I2C_MspInit+0x84>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d12c      	bne.n	8005174 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800511a:	2300      	movs	r3, #0
 800511c:	613b      	str	r3, [r7, #16]
 800511e:	4b18      	ldr	r3, [pc, #96]	; (8005180 <HAL_I2C_MspInit+0x88>)
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	4a17      	ldr	r2, [pc, #92]	; (8005180 <HAL_I2C_MspInit+0x88>)
 8005124:	f043 0302 	orr.w	r3, r3, #2
 8005128:	6313      	str	r3, [r2, #48]	; 0x30
 800512a:	4b15      	ldr	r3, [pc, #84]	; (8005180 <HAL_I2C_MspInit+0x88>)
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005136:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800513a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800513c:	2312      	movs	r3, #18
 800513e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005140:	2300      	movs	r3, #0
 8005142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005144:	2303      	movs	r3, #3
 8005146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005148:	2304      	movs	r3, #4
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800514c:	f107 0314 	add.w	r3, r7, #20
 8005150:	4619      	mov	r1, r3
 8005152:	480c      	ldr	r0, [pc, #48]	; (8005184 <HAL_I2C_MspInit+0x8c>)
 8005154:	f001 f93e 	bl	80063d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	4b08      	ldr	r3, [pc, #32]	; (8005180 <HAL_I2C_MspInit+0x88>)
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	4a07      	ldr	r2, [pc, #28]	; (8005180 <HAL_I2C_MspInit+0x88>)
 8005162:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005166:	6413      	str	r3, [r2, #64]	; 0x40
 8005168:	4b05      	ldr	r3, [pc, #20]	; (8005180 <HAL_I2C_MspInit+0x88>)
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005174:	bf00      	nop
 8005176:	3728      	adds	r7, #40	; 0x28
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40005800 	.word	0x40005800
 8005180:	40023800 	.word	0x40023800
 8005184:	40020400 	.word	0x40020400

08005188 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08c      	sub	sp, #48	; 0x30
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005190:	f107 031c 	add.w	r3, r7, #28
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	605a      	str	r2, [r3, #4]
 800519a:	609a      	str	r2, [r3, #8]
 800519c:	60da      	str	r2, [r3, #12]
 800519e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a32      	ldr	r2, [pc, #200]	; (8005270 <HAL_TIM_Encoder_MspInit+0xe8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d12d      	bne.n	8005206 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80051aa:	2300      	movs	r3, #0
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	4b31      	ldr	r3, [pc, #196]	; (8005274 <HAL_TIM_Encoder_MspInit+0xec>)
 80051b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b2:	4a30      	ldr	r2, [pc, #192]	; (8005274 <HAL_TIM_Encoder_MspInit+0xec>)
 80051b4:	f043 0301 	orr.w	r3, r3, #1
 80051b8:	6453      	str	r3, [r2, #68]	; 0x44
 80051ba:	4b2e      	ldr	r3, [pc, #184]	; (8005274 <HAL_TIM_Encoder_MspInit+0xec>)
 80051bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	61bb      	str	r3, [r7, #24]
 80051c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80051c6:	2300      	movs	r3, #0
 80051c8:	617b      	str	r3, [r7, #20]
 80051ca:	4b2a      	ldr	r3, [pc, #168]	; (8005274 <HAL_TIM_Encoder_MspInit+0xec>)
 80051cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ce:	4a29      	ldr	r2, [pc, #164]	; (8005274 <HAL_TIM_Encoder_MspInit+0xec>)
 80051d0:	f043 0310 	orr.w	r3, r3, #16
 80051d4:	6313      	str	r3, [r2, #48]	; 0x30
 80051d6:	4b27      	ldr	r3, [pc, #156]	; (8005274 <HAL_TIM_Encoder_MspInit+0xec>)
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80051e2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80051e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e8:	2302      	movs	r3, #2
 80051ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ec:	2300      	movs	r3, #0
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051f0:	2300      	movs	r3, #0
 80051f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80051f4:	2301      	movs	r3, #1
 80051f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051f8:	f107 031c 	add.w	r3, r7, #28
 80051fc:	4619      	mov	r1, r3
 80051fe:	481e      	ldr	r0, [pc, #120]	; (8005278 <HAL_TIM_Encoder_MspInit+0xf0>)
 8005200:	f001 f8e8 	bl	80063d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005204:	e030      	b.n	8005268 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM3)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1c      	ldr	r2, [pc, #112]	; (800527c <HAL_TIM_Encoder_MspInit+0xf4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d12b      	bne.n	8005268 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005210:	2300      	movs	r3, #0
 8005212:	613b      	str	r3, [r7, #16]
 8005214:	4b17      	ldr	r3, [pc, #92]	; (8005274 <HAL_TIM_Encoder_MspInit+0xec>)
 8005216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005218:	4a16      	ldr	r2, [pc, #88]	; (8005274 <HAL_TIM_Encoder_MspInit+0xec>)
 800521a:	f043 0302 	orr.w	r3, r3, #2
 800521e:	6413      	str	r3, [r2, #64]	; 0x40
 8005220:	4b14      	ldr	r3, [pc, #80]	; (8005274 <HAL_TIM_Encoder_MspInit+0xec>)
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	613b      	str	r3, [r7, #16]
 800522a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800522c:	2300      	movs	r3, #0
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	4b10      	ldr	r3, [pc, #64]	; (8005274 <HAL_TIM_Encoder_MspInit+0xec>)
 8005232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005234:	4a0f      	ldr	r2, [pc, #60]	; (8005274 <HAL_TIM_Encoder_MspInit+0xec>)
 8005236:	f043 0304 	orr.w	r3, r3, #4
 800523a:	6313      	str	r3, [r2, #48]	; 0x30
 800523c:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <HAL_TIM_Encoder_MspInit+0xec>)
 800523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005248:	23c0      	movs	r3, #192	; 0xc0
 800524a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800524c:	2302      	movs	r3, #2
 800524e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005250:	2300      	movs	r3, #0
 8005252:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005254:	2300      	movs	r3, #0
 8005256:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005258:	2302      	movs	r3, #2
 800525a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800525c:	f107 031c 	add.w	r3, r7, #28
 8005260:	4619      	mov	r1, r3
 8005262:	4807      	ldr	r0, [pc, #28]	; (8005280 <HAL_TIM_Encoder_MspInit+0xf8>)
 8005264:	f001 f8b6 	bl	80063d4 <HAL_GPIO_Init>
}
 8005268:	bf00      	nop
 800526a:	3730      	adds	r7, #48	; 0x30
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40010000 	.word	0x40010000
 8005274:	40023800 	.word	0x40023800
 8005278:	40021000 	.word	0x40021000
 800527c:	40000400 	.word	0x40000400
 8005280:	40020800 	.word	0x40020800

08005284 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005294:	d10d      	bne.n	80052b2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	4b09      	ldr	r3, [pc, #36]	; (80052c0 <HAL_TIM_PWM_MspInit+0x3c>)
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	4a08      	ldr	r2, [pc, #32]	; (80052c0 <HAL_TIM_PWM_MspInit+0x3c>)
 80052a0:	f043 0301 	orr.w	r3, r3, #1
 80052a4:	6413      	str	r3, [r2, #64]	; 0x40
 80052a6:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <HAL_TIM_PWM_MspInit+0x3c>)
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40023800 	.word	0x40023800

080052c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1c      	ldr	r2, [pc, #112]	; (8005344 <HAL_TIM_Base_MspInit+0x80>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d116      	bne.n	8005304 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	4b1b      	ldr	r3, [pc, #108]	; (8005348 <HAL_TIM_Base_MspInit+0x84>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	4a1a      	ldr	r2, [pc, #104]	; (8005348 <HAL_TIM_Base_MspInit+0x84>)
 80052e0:	f043 0308 	orr.w	r3, r3, #8
 80052e4:	6413      	str	r3, [r2, #64]	; 0x40
 80052e6:	4b18      	ldr	r3, [pc, #96]	; (8005348 <HAL_TIM_Base_MspInit+0x84>)
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80052f2:	2200      	movs	r2, #0
 80052f4:	2100      	movs	r1, #0
 80052f6:	2032      	movs	r0, #50	; 0x32
 80052f8:	f000 fc33 	bl	8005b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80052fc:	2032      	movs	r0, #50	; 0x32
 80052fe:	f000 fc4c 	bl	8005b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8005302:	e01a      	b.n	800533a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM14)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a10      	ldr	r2, [pc, #64]	; (800534c <HAL_TIM_Base_MspInit+0x88>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d115      	bne.n	800533a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800530e:	2300      	movs	r3, #0
 8005310:	60bb      	str	r3, [r7, #8]
 8005312:	4b0d      	ldr	r3, [pc, #52]	; (8005348 <HAL_TIM_Base_MspInit+0x84>)
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	4a0c      	ldr	r2, [pc, #48]	; (8005348 <HAL_TIM_Base_MspInit+0x84>)
 8005318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800531c:	6413      	str	r3, [r2, #64]	; 0x40
 800531e:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <HAL_TIM_Base_MspInit+0x84>)
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005326:	60bb      	str	r3, [r7, #8]
 8005328:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800532a:	2200      	movs	r2, #0
 800532c:	2100      	movs	r1, #0
 800532e:	202d      	movs	r0, #45	; 0x2d
 8005330:	f000 fc17 	bl	8005b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005334:	202d      	movs	r0, #45	; 0x2d
 8005336:	f000 fc30 	bl	8005b9a <HAL_NVIC_EnableIRQ>
}
 800533a:	bf00      	nop
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	40000c00 	.word	0x40000c00
 8005348:	40023800 	.word	0x40023800
 800534c:	40002000 	.word	0x40002000

08005350 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08a      	sub	sp, #40	; 0x28
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005358:	f107 0314 	add.w	r3, r7, #20
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	605a      	str	r2, [r3, #4]
 8005362:	609a      	str	r2, [r3, #8]
 8005364:	60da      	str	r2, [r3, #12]
 8005366:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005370:	d13b      	bne.n	80053ea <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005372:	2300      	movs	r3, #0
 8005374:	613b      	str	r3, [r7, #16]
 8005376:	4b1f      	ldr	r3, [pc, #124]	; (80053f4 <HAL_TIM_MspPostInit+0xa4>)
 8005378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537a:	4a1e      	ldr	r2, [pc, #120]	; (80053f4 <HAL_TIM_MspPostInit+0xa4>)
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	6313      	str	r3, [r2, #48]	; 0x30
 8005382:	4b1c      	ldr	r3, [pc, #112]	; (80053f4 <HAL_TIM_MspPostInit+0xa4>)
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	4b18      	ldr	r3, [pc, #96]	; (80053f4 <HAL_TIM_MspPostInit+0xa4>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	4a17      	ldr	r2, [pc, #92]	; (80053f4 <HAL_TIM_MspPostInit+0xa4>)
 8005398:	f043 0302 	orr.w	r3, r3, #2
 800539c:	6313      	str	r3, [r2, #48]	; 0x30
 800539e:	4b15      	ldr	r3, [pc, #84]	; (80053f4 <HAL_TIM_MspPostInit+0xa4>)
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80053aa:	2301      	movs	r3, #1
 80053ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ae:	2302      	movs	r3, #2
 80053b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b2:	2300      	movs	r3, #0
 80053b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053b6:	2300      	movs	r3, #0
 80053b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80053ba:	2301      	movs	r3, #1
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053be:	f107 0314 	add.w	r3, r7, #20
 80053c2:	4619      	mov	r1, r3
 80053c4:	480c      	ldr	r0, [pc, #48]	; (80053f8 <HAL_TIM_MspPostInit+0xa8>)
 80053c6:	f001 f805 	bl	80063d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80053ca:	2308      	movs	r3, #8
 80053cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ce:	2302      	movs	r3, #2
 80053d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053d6:	2300      	movs	r3, #0
 80053d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80053da:	2301      	movs	r3, #1
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053de:	f107 0314 	add.w	r3, r7, #20
 80053e2:	4619      	mov	r1, r3
 80053e4:	4805      	ldr	r0, [pc, #20]	; (80053fc <HAL_TIM_MspPostInit+0xac>)
 80053e6:	f000 fff5 	bl	80063d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80053ea:	bf00      	nop
 80053ec:	3728      	adds	r7, #40	; 0x28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40023800 	.word	0x40023800
 80053f8:	40020000 	.word	0x40020000
 80053fc:	40020400 	.word	0x40020400

08005400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b08a      	sub	sp, #40	; 0x28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005408:	f107 0314 	add.w	r3, r7, #20
 800540c:	2200      	movs	r2, #0
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	605a      	str	r2, [r3, #4]
 8005412:	609a      	str	r2, [r3, #8]
 8005414:	60da      	str	r2, [r3, #12]
 8005416:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a4c      	ldr	r2, [pc, #304]	; (8005550 <HAL_UART_MspInit+0x150>)
 800541e:	4293      	cmp	r3, r2
 8005420:	f040 8092 	bne.w	8005548 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005424:	2300      	movs	r3, #0
 8005426:	613b      	str	r3, [r7, #16]
 8005428:	4b4a      	ldr	r3, [pc, #296]	; (8005554 <HAL_UART_MspInit+0x154>)
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	4a49      	ldr	r2, [pc, #292]	; (8005554 <HAL_UART_MspInit+0x154>)
 800542e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005432:	6413      	str	r3, [r2, #64]	; 0x40
 8005434:	4b47      	ldr	r3, [pc, #284]	; (8005554 <HAL_UART_MspInit+0x154>)
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005440:	2300      	movs	r3, #0
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	4b43      	ldr	r3, [pc, #268]	; (8005554 <HAL_UART_MspInit+0x154>)
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	4a42      	ldr	r2, [pc, #264]	; (8005554 <HAL_UART_MspInit+0x154>)
 800544a:	f043 0308 	orr.w	r3, r3, #8
 800544e:	6313      	str	r3, [r2, #48]	; 0x30
 8005450:	4b40      	ldr	r3, [pc, #256]	; (8005554 <HAL_UART_MspInit+0x154>)
 8005452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005454:	f003 0308 	and.w	r3, r3, #8
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800545c:	2360      	movs	r3, #96	; 0x60
 800545e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005460:	2302      	movs	r3, #2
 8005462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005464:	2300      	movs	r3, #0
 8005466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005468:	2303      	movs	r3, #3
 800546a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800546c:	2307      	movs	r3, #7
 800546e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005470:	f107 0314 	add.w	r3, r7, #20
 8005474:	4619      	mov	r1, r3
 8005476:	4838      	ldr	r0, [pc, #224]	; (8005558 <HAL_UART_MspInit+0x158>)
 8005478:	f000 ffac 	bl	80063d4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800547c:	4b37      	ldr	r3, [pc, #220]	; (800555c <HAL_UART_MspInit+0x15c>)
 800547e:	4a38      	ldr	r2, [pc, #224]	; (8005560 <HAL_UART_MspInit+0x160>)
 8005480:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005482:	4b36      	ldr	r3, [pc, #216]	; (800555c <HAL_UART_MspInit+0x15c>)
 8005484:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005488:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800548a:	4b34      	ldr	r3, [pc, #208]	; (800555c <HAL_UART_MspInit+0x15c>)
 800548c:	2200      	movs	r2, #0
 800548e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005490:	4b32      	ldr	r3, [pc, #200]	; (800555c <HAL_UART_MspInit+0x15c>)
 8005492:	2200      	movs	r2, #0
 8005494:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005496:	4b31      	ldr	r3, [pc, #196]	; (800555c <HAL_UART_MspInit+0x15c>)
 8005498:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800549c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800549e:	4b2f      	ldr	r3, [pc, #188]	; (800555c <HAL_UART_MspInit+0x15c>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054a4:	4b2d      	ldr	r3, [pc, #180]	; (800555c <HAL_UART_MspInit+0x15c>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80054aa:	4b2c      	ldr	r3, [pc, #176]	; (800555c <HAL_UART_MspInit+0x15c>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80054b0:	4b2a      	ldr	r3, [pc, #168]	; (800555c <HAL_UART_MspInit+0x15c>)
 80054b2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80054b6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054b8:	4b28      	ldr	r3, [pc, #160]	; (800555c <HAL_UART_MspInit+0x15c>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80054be:	4827      	ldr	r0, [pc, #156]	; (800555c <HAL_UART_MspInit+0x15c>)
 80054c0:	f000 fb86 	bl	8005bd0 <HAL_DMA_Init>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80054ca:	f7fd f9d7 	bl	800287c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a22      	ldr	r2, [pc, #136]	; (800555c <HAL_UART_MspInit+0x15c>)
 80054d2:	639a      	str	r2, [r3, #56]	; 0x38
 80054d4:	4a21      	ldr	r2, [pc, #132]	; (800555c <HAL_UART_MspInit+0x15c>)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80054da:	4b22      	ldr	r3, [pc, #136]	; (8005564 <HAL_UART_MspInit+0x164>)
 80054dc:	4a22      	ldr	r2, [pc, #136]	; (8005568 <HAL_UART_MspInit+0x168>)
 80054de:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80054e0:	4b20      	ldr	r3, [pc, #128]	; (8005564 <HAL_UART_MspInit+0x164>)
 80054e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80054e6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054e8:	4b1e      	ldr	r3, [pc, #120]	; (8005564 <HAL_UART_MspInit+0x164>)
 80054ea:	2240      	movs	r2, #64	; 0x40
 80054ec:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054ee:	4b1d      	ldr	r3, [pc, #116]	; (8005564 <HAL_UART_MspInit+0x164>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80054f4:	4b1b      	ldr	r3, [pc, #108]	; (8005564 <HAL_UART_MspInit+0x164>)
 80054f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054fa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054fc:	4b19      	ldr	r3, [pc, #100]	; (8005564 <HAL_UART_MspInit+0x164>)
 80054fe:	2200      	movs	r2, #0
 8005500:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005502:	4b18      	ldr	r3, [pc, #96]	; (8005564 <HAL_UART_MspInit+0x164>)
 8005504:	2200      	movs	r2, #0
 8005506:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005508:	4b16      	ldr	r3, [pc, #88]	; (8005564 <HAL_UART_MspInit+0x164>)
 800550a:	2200      	movs	r2, #0
 800550c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800550e:	4b15      	ldr	r3, [pc, #84]	; (8005564 <HAL_UART_MspInit+0x164>)
 8005510:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005514:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005516:	4b13      	ldr	r3, [pc, #76]	; (8005564 <HAL_UART_MspInit+0x164>)
 8005518:	2200      	movs	r2, #0
 800551a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800551c:	4811      	ldr	r0, [pc, #68]	; (8005564 <HAL_UART_MspInit+0x164>)
 800551e:	f000 fb57 	bl	8005bd0 <HAL_DMA_Init>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8005528:	f7fd f9a8 	bl	800287c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a0d      	ldr	r2, [pc, #52]	; (8005564 <HAL_UART_MspInit+0x164>)
 8005530:	635a      	str	r2, [r3, #52]	; 0x34
 8005532:	4a0c      	ldr	r2, [pc, #48]	; (8005564 <HAL_UART_MspInit+0x164>)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005538:	2200      	movs	r2, #0
 800553a:	2100      	movs	r1, #0
 800553c:	2026      	movs	r0, #38	; 0x26
 800553e:	f000 fb10 	bl	8005b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005542:	2026      	movs	r0, #38	; 0x26
 8005544:	f000 fb29 	bl	8005b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005548:	bf00      	nop
 800554a:	3728      	adds	r7, #40	; 0x28
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40004400 	.word	0x40004400
 8005554:	40023800 	.word	0x40023800
 8005558:	40020c00 	.word	0x40020c00
 800555c:	20000824 	.word	0x20000824
 8005560:	40026088 	.word	0x40026088
 8005564:	20000884 	.word	0x20000884
 8005568:	400260a0 	.word	0x400260a0

0800556c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005570:	e7fe      	b.n	8005570 <NMI_Handler+0x4>

08005572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005572:	b480      	push	{r7}
 8005574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005576:	e7fe      	b.n	8005576 <HardFault_Handler+0x4>

08005578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005578:	b480      	push	{r7}
 800557a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800557c:	e7fe      	b.n	800557c <MemManage_Handler+0x4>

0800557e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800557e:	b480      	push	{r7}
 8005580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005582:	e7fe      	b.n	8005582 <BusFault_Handler+0x4>

08005584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005588:	e7fe      	b.n	8005588 <UsageFault_Handler+0x4>

0800558a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800558a:	b480      	push	{r7}
 800558c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800558e:	bf00      	nop
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800559c:	bf00      	nop
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055a6:	b480      	push	{r7}
 80055a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055aa:	bf00      	nop
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055b8:	f000 f9b4 	bl	8005924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055bc:	bf00      	nop
 80055be:	bd80      	pop	{r7, pc}

080055c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80055c4:	4802      	ldr	r0, [pc, #8]	; (80055d0 <DMA1_Stream5_IRQHandler+0x10>)
 80055c6:	f000 fc9b 	bl	8005f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80055ca:	bf00      	nop
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20000824 	.word	0x20000824

080055d4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80055d8:	4802      	ldr	r0, [pc, #8]	; (80055e4 <DMA1_Stream6_IRQHandler+0x10>)
 80055da:	f000 fc91 	bl	8005f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80055de:	bf00      	nop
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000884 	.word	0x20000884

080055e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80055ec:	4802      	ldr	r0, [pc, #8]	; (80055f8 <USART2_IRQHandler+0x10>)
 80055ee:	f003 ff21 	bl	8009434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80055f2:	bf00      	nop
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	200007e0 	.word	0x200007e0

080055fc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005600:	4802      	ldr	r0, [pc, #8]	; (800560c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8005602:	f002 ffc1 	bl	8008588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8005606:	bf00      	nop
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000798 	.word	0x20000798

08005610 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005614:	4802      	ldr	r0, [pc, #8]	; (8005620 <TIM5_IRQHandler+0x10>)
 8005616:	f002 ffb7 	bl	8008588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800561a:	bf00      	nop
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000750 	.word	0x20000750

08005624 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  return 1;
 8005628:	2301      	movs	r3, #1
}
 800562a:	4618      	mov	r0, r3
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <_kill>:

int _kill(int pid, int sig)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800563e:	f005 f973 	bl	800a928 <__errno>
 8005642:	4603      	mov	r3, r0
 8005644:	2216      	movs	r2, #22
 8005646:	601a      	str	r2, [r3, #0]
  return -1;
 8005648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800564c:	4618      	mov	r0, r3
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <_exit>:

void _exit (int status)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800565c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7ff ffe7 	bl	8005634 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005666:	e7fe      	b.n	8005666 <_exit+0x12>

08005668 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	e00a      	b.n	8005690 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800567a:	f3af 8000 	nop.w
 800567e:	4601      	mov	r1, r0
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	60ba      	str	r2, [r7, #8]
 8005686:	b2ca      	uxtb	r2, r1
 8005688:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	3301      	adds	r3, #1
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	429a      	cmp	r2, r3
 8005696:	dbf0      	blt.n	800567a <_read+0x12>
  }

  return len;
 8005698:	687b      	ldr	r3, [r7, #4]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b086      	sub	sp, #24
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	e009      	b.n	80056c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	60ba      	str	r2, [r7, #8]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	4618      	mov	r0, r3
 80056be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	3301      	adds	r3, #1
 80056c6:	617b      	str	r3, [r7, #20]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	dbf1      	blt.n	80056b4 <_write+0x12>
  }
  return len;
 80056d0:	687b      	ldr	r3, [r7, #4]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <_close>:

int _close(int file)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80056e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005702:	605a      	str	r2, [r3, #4]
  return 0;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <_isatty>:

int _isatty(int file)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800571a:	2301      	movs	r3, #1
}
 800571c:	4618      	mov	r0, r3
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800574c:	4a14      	ldr	r2, [pc, #80]	; (80057a0 <_sbrk+0x5c>)
 800574e:	4b15      	ldr	r3, [pc, #84]	; (80057a4 <_sbrk+0x60>)
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005758:	4b13      	ldr	r3, [pc, #76]	; (80057a8 <_sbrk+0x64>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d102      	bne.n	8005766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005760:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <_sbrk+0x64>)
 8005762:	4a12      	ldr	r2, [pc, #72]	; (80057ac <_sbrk+0x68>)
 8005764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005766:	4b10      	ldr	r3, [pc, #64]	; (80057a8 <_sbrk+0x64>)
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4413      	add	r3, r2
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	429a      	cmp	r2, r3
 8005772:	d207      	bcs.n	8005784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005774:	f005 f8d8 	bl	800a928 <__errno>
 8005778:	4603      	mov	r3, r0
 800577a:	220c      	movs	r2, #12
 800577c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800577e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005782:	e009      	b.n	8005798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005784:	4b08      	ldr	r3, [pc, #32]	; (80057a8 <_sbrk+0x64>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800578a:	4b07      	ldr	r3, [pc, #28]	; (80057a8 <_sbrk+0x64>)
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4413      	add	r3, r2
 8005792:	4a05      	ldr	r2, [pc, #20]	; (80057a8 <_sbrk+0x64>)
 8005794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005796:	68fb      	ldr	r3, [r7, #12]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	20020000 	.word	0x20020000
 80057a4:	00000400 	.word	0x00000400
 80057a8:	20000f88 	.word	0x20000f88
 80057ac:	20000fa0 	.word	0x20000fa0

080057b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80057b4:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <SystemInit+0x20>)
 80057b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ba:	4a05      	ldr	r2, [pc, #20]	; (80057d0 <SystemInit+0x20>)
 80057bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80057c4:	bf00      	nop
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	e000ed00 	.word	0xe000ed00

080057d4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	0a5a      	lsrs	r2, r3, #9
 80057e4:	490f      	ldr	r1, [pc, #60]	; (8005824 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80057e6:	fba1 1202 	umull	r1, r2, r1, r2
 80057ea:	09d2      	lsrs	r2, r2, #7
 80057ec:	490e      	ldr	r1, [pc, #56]	; (8005828 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80057ee:	fb01 f202 	mul.w	r2, r1, r2
 80057f2:	1a9b      	subs	r3, r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	0a5b      	lsrs	r3, r3, #9
 80057fc:	4a09      	ldr	r2, [pc, #36]	; (8005824 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80057fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005802:	09db      	lsrs	r3, r3, #7
 8005804:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	441a      	add	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	601a      	str	r2, [r3, #0]
}
 8005818:	bf00      	nop
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	00044b83 	.word	0x00044b83
 8005828:	3b9aca00 	.word	0x3b9aca00

0800582c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800582c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005864 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005830:	480d      	ldr	r0, [pc, #52]	; (8005868 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005832:	490e      	ldr	r1, [pc, #56]	; (800586c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005834:	4a0e      	ldr	r2, [pc, #56]	; (8005870 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005838:	e002      	b.n	8005840 <LoopCopyDataInit>

0800583a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800583a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800583c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800583e:	3304      	adds	r3, #4

08005840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005844:	d3f9      	bcc.n	800583a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005846:	4a0b      	ldr	r2, [pc, #44]	; (8005874 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005848:	4c0b      	ldr	r4, [pc, #44]	; (8005878 <LoopFillZerobss+0x26>)
  movs r3, #0
 800584a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800584c:	e001      	b.n	8005852 <LoopFillZerobss>

0800584e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800584e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005850:	3204      	adds	r2, #4

08005852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005854:	d3fb      	bcc.n	800584e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005856:	f7ff ffab 	bl	80057b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800585a:	f005 f86b 	bl	800a934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800585e:	f7fc f957 	bl	8001b10 <main>
  bx  lr    
 8005862:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005864:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800586c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8005870:	0800fb20 	.word	0x0800fb20
  ldr r2, =_sbss
 8005874:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8005878:	20000fa0 	.word	0x20000fa0

0800587c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800587c:	e7fe      	b.n	800587c <ADC_IRQHandler>
	...

08005880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005884:	4b0e      	ldr	r3, [pc, #56]	; (80058c0 <HAL_Init+0x40>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a0d      	ldr	r2, [pc, #52]	; (80058c0 <HAL_Init+0x40>)
 800588a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800588e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <HAL_Init+0x40>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a0a      	ldr	r2, [pc, #40]	; (80058c0 <HAL_Init+0x40>)
 8005896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800589a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800589c:	4b08      	ldr	r3, [pc, #32]	; (80058c0 <HAL_Init+0x40>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a07      	ldr	r2, [pc, #28]	; (80058c0 <HAL_Init+0x40>)
 80058a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058a8:	2003      	movs	r0, #3
 80058aa:	f000 f94f 	bl	8005b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80058ae:	200f      	movs	r0, #15
 80058b0:	f000 f808 	bl	80058c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80058b4:	f7ff fbf8 	bl	80050a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40023c00 	.word	0x40023c00

080058c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80058cc:	4b12      	ldr	r3, [pc, #72]	; (8005918 <HAL_InitTick+0x54>)
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	4b12      	ldr	r3, [pc, #72]	; (800591c <HAL_InitTick+0x58>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	4619      	mov	r1, r3
 80058d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058da:	fbb3 f3f1 	udiv	r3, r3, r1
 80058de:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 f967 	bl	8005bb6 <HAL_SYSTICK_Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e00e      	b.n	8005910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b0f      	cmp	r3, #15
 80058f6:	d80a      	bhi.n	800590e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058f8:	2200      	movs	r2, #0
 80058fa:	6879      	ldr	r1, [r7, #4]
 80058fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005900:	f000 f92f 	bl	8005b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005904:	4a06      	ldr	r2, [pc, #24]	; (8005920 <HAL_InitTick+0x5c>)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	e000      	b.n	8005910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
}
 8005910:	4618      	mov	r0, r3
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	20000014 	.word	0x20000014
 800591c:	2000001c 	.word	0x2000001c
 8005920:	20000018 	.word	0x20000018

08005924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005928:	4b06      	ldr	r3, [pc, #24]	; (8005944 <HAL_IncTick+0x20>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	4b06      	ldr	r3, [pc, #24]	; (8005948 <HAL_IncTick+0x24>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4413      	add	r3, r2
 8005934:	4a04      	ldr	r2, [pc, #16]	; (8005948 <HAL_IncTick+0x24>)
 8005936:	6013      	str	r3, [r2, #0]
}
 8005938:	bf00      	nop
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	2000001c 	.word	0x2000001c
 8005948:	20000f8c 	.word	0x20000f8c

0800594c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
  return uwTick;
 8005950:	4b03      	ldr	r3, [pc, #12]	; (8005960 <HAL_GetTick+0x14>)
 8005952:	681b      	ldr	r3, [r3, #0]
}
 8005954:	4618      	mov	r0, r3
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	20000f8c 	.word	0x20000f8c

08005964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800596c:	f7ff ffee 	bl	800594c <HAL_GetTick>
 8005970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800597c:	d005      	beq.n	800598a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800597e:	4b0a      	ldr	r3, [pc, #40]	; (80059a8 <HAL_Delay+0x44>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800598a:	bf00      	nop
 800598c:	f7ff ffde 	bl	800594c <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	429a      	cmp	r2, r3
 800599a:	d8f7      	bhi.n	800598c <HAL_Delay+0x28>
  {
  }
}
 800599c:	bf00      	nop
 800599e:	bf00      	nop
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	2000001c 	.word	0x2000001c

080059ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059bc:	4b0c      	ldr	r3, [pc, #48]	; (80059f0 <__NVIC_SetPriorityGrouping+0x44>)
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059c8:	4013      	ands	r3, r2
 80059ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059de:	4a04      	ldr	r2, [pc, #16]	; (80059f0 <__NVIC_SetPriorityGrouping+0x44>)
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	60d3      	str	r3, [r2, #12]
}
 80059e4:	bf00      	nop
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	e000ed00 	.word	0xe000ed00

080059f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059f8:	4b04      	ldr	r3, [pc, #16]	; (8005a0c <__NVIC_GetPriorityGrouping+0x18>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	0a1b      	lsrs	r3, r3, #8
 80059fe:	f003 0307 	and.w	r3, r3, #7
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	e000ed00 	.word	0xe000ed00

08005a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	4603      	mov	r3, r0
 8005a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	db0b      	blt.n	8005a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a22:	79fb      	ldrb	r3, [r7, #7]
 8005a24:	f003 021f 	and.w	r2, r3, #31
 8005a28:	4907      	ldr	r1, [pc, #28]	; (8005a48 <__NVIC_EnableIRQ+0x38>)
 8005a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	2001      	movs	r0, #1
 8005a32:	fa00 f202 	lsl.w	r2, r0, r2
 8005a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	e000e100 	.word	0xe000e100

08005a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	4603      	mov	r3, r0
 8005a54:	6039      	str	r1, [r7, #0]
 8005a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	db0a      	blt.n	8005a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	490c      	ldr	r1, [pc, #48]	; (8005a98 <__NVIC_SetPriority+0x4c>)
 8005a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a6a:	0112      	lsls	r2, r2, #4
 8005a6c:	b2d2      	uxtb	r2, r2
 8005a6e:	440b      	add	r3, r1
 8005a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a74:	e00a      	b.n	8005a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	4908      	ldr	r1, [pc, #32]	; (8005a9c <__NVIC_SetPriority+0x50>)
 8005a7c:	79fb      	ldrb	r3, [r7, #7]
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	3b04      	subs	r3, #4
 8005a84:	0112      	lsls	r2, r2, #4
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	440b      	add	r3, r1
 8005a8a:	761a      	strb	r2, [r3, #24]
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	e000e100 	.word	0xe000e100
 8005a9c:	e000ed00 	.word	0xe000ed00

08005aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b089      	sub	sp, #36	; 0x24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f003 0307 	and.w	r3, r3, #7
 8005ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f1c3 0307 	rsb	r3, r3, #7
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	bf28      	it	cs
 8005abe:	2304      	movcs	r3, #4
 8005ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	2b06      	cmp	r3, #6
 8005ac8:	d902      	bls.n	8005ad0 <NVIC_EncodePriority+0x30>
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	3b03      	subs	r3, #3
 8005ace:	e000      	b.n	8005ad2 <NVIC_EncodePriority+0x32>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	43da      	mvns	r2, r3
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	401a      	ands	r2, r3
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ae8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	fa01 f303 	lsl.w	r3, r1, r3
 8005af2:	43d9      	mvns	r1, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005af8:	4313      	orrs	r3, r2
         );
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3724      	adds	r7, #36	; 0x24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
	...

08005b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b18:	d301      	bcc.n	8005b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e00f      	b.n	8005b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b1e:	4a0a      	ldr	r2, [pc, #40]	; (8005b48 <SysTick_Config+0x40>)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b26:	210f      	movs	r1, #15
 8005b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b2c:	f7ff ff8e 	bl	8005a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b30:	4b05      	ldr	r3, [pc, #20]	; (8005b48 <SysTick_Config+0x40>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b36:	4b04      	ldr	r3, [pc, #16]	; (8005b48 <SysTick_Config+0x40>)
 8005b38:	2207      	movs	r2, #7
 8005b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	e000e010 	.word	0xe000e010

08005b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff ff29 	bl	80059ac <__NVIC_SetPriorityGrouping>
}
 8005b5a:	bf00      	nop
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b086      	sub	sp, #24
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	4603      	mov	r3, r0
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	607a      	str	r2, [r7, #4]
 8005b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b74:	f7ff ff3e 	bl	80059f4 <__NVIC_GetPriorityGrouping>
 8005b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	68b9      	ldr	r1, [r7, #8]
 8005b7e:	6978      	ldr	r0, [r7, #20]
 8005b80:	f7ff ff8e 	bl	8005aa0 <NVIC_EncodePriority>
 8005b84:	4602      	mov	r2, r0
 8005b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff ff5d 	bl	8005a4c <__NVIC_SetPriority>
}
 8005b92:	bf00      	nop
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b082      	sub	sp, #8
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff ff31 	bl	8005a10 <__NVIC_EnableIRQ>
}
 8005bae:	bf00      	nop
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b082      	sub	sp, #8
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7ff ffa2 	bl	8005b08 <SysTick_Config>
 8005bc4:	4603      	mov	r3, r0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005bdc:	f7ff feb6 	bl	800594c <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e099      	b.n	8005d20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0201 	bic.w	r2, r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c0c:	e00f      	b.n	8005c2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c0e:	f7ff fe9d 	bl	800594c <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b05      	cmp	r3, #5
 8005c1a:	d908      	bls.n	8005c2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2203      	movs	r2, #3
 8005c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e078      	b.n	8005d20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1e8      	bne.n	8005c0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	4b38      	ldr	r3, [pc, #224]	; (8005d28 <HAL_DMA_Init+0x158>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d107      	bne.n	8005c98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	4313      	orrs	r3, r2
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f023 0307 	bic.w	r3, r3, #7
 8005cae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d117      	bne.n	8005cf2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00e      	beq.n	8005cf2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fb01 	bl	80062dc <DMA_CheckFifoParam>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d008      	beq.n	8005cf2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2240      	movs	r2, #64	; 0x40
 8005ce4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e016      	b.n	8005d20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fab8 	bl	8006270 <DMA_CalcBaseAndBitshift>
 8005d00:	4603      	mov	r3, r0
 8005d02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d08:	223f      	movs	r2, #63	; 0x3f
 8005d0a:	409a      	lsls	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	f010803f 	.word	0xf010803f

08005d2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
 8005d38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d101      	bne.n	8005d52 <HAL_DMA_Start_IT+0x26>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e040      	b.n	8005dd4 <HAL_DMA_Start_IT+0xa8>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d12f      	bne.n	8005dc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	68b9      	ldr	r1, [r7, #8]
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 fa4a 	bl	8006214 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d84:	223f      	movs	r2, #63	; 0x3f
 8005d86:	409a      	lsls	r2, r3
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0216 	orr.w	r2, r2, #22
 8005d9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0208 	orr.w	r2, r2, #8
 8005db2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0201 	orr.w	r2, r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	e005      	b.n	8005dd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005dce:	2302      	movs	r3, #2
 8005dd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005dea:	f7ff fdaf 	bl	800594c <HAL_GetTick>
 8005dee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d008      	beq.n	8005e0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2280      	movs	r2, #128	; 0x80
 8005e00:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e052      	b.n	8005eb4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0216 	bic.w	r2, r2, #22
 8005e1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695a      	ldr	r2, [r3, #20]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d103      	bne.n	8005e3e <HAL_DMA_Abort+0x62>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d007      	beq.n	8005e4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0208 	bic.w	r2, r2, #8
 8005e4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0201 	bic.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e5e:	e013      	b.n	8005e88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e60:	f7ff fd74 	bl	800594c <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b05      	cmp	r3, #5
 8005e6c:	d90c      	bls.n	8005e88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2220      	movs	r2, #32
 8005e72:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2203      	movs	r2, #3
 8005e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e015      	b.n	8005eb4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e4      	bne.n	8005e60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9a:	223f      	movs	r2, #63	; 0x3f
 8005e9c:	409a      	lsls	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d004      	beq.n	8005eda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2280      	movs	r2, #128	; 0x80
 8005ed4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e00c      	b.n	8005ef4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2205      	movs	r2, #5
 8005ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0201 	bic.w	r2, r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f0c:	4b8e      	ldr	r3, [pc, #568]	; (8006148 <HAL_DMA_IRQHandler+0x248>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a8e      	ldr	r2, [pc, #568]	; (800614c <HAL_DMA_IRQHandler+0x24c>)
 8005f12:	fba2 2303 	umull	r2, r3, r2, r3
 8005f16:	0a9b      	lsrs	r3, r3, #10
 8005f18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f2a:	2208      	movs	r2, #8
 8005f2c:	409a      	lsls	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4013      	ands	r3, r2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d01a      	beq.n	8005f6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d013      	beq.n	8005f6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 0204 	bic.w	r2, r2, #4
 8005f52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f58:	2208      	movs	r2, #8
 8005f5a:	409a      	lsls	r2, r3
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f64:	f043 0201 	orr.w	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f70:	2201      	movs	r2, #1
 8005f72:	409a      	lsls	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4013      	ands	r3, r2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d012      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00b      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f8e:	2201      	movs	r2, #1
 8005f90:	409a      	lsls	r2, r3
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9a:	f043 0202 	orr.w	r2, r3, #2
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa6:	2204      	movs	r2, #4
 8005fa8:	409a      	lsls	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	4013      	ands	r3, r2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d012      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00b      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc4:	2204      	movs	r2, #4
 8005fc6:	409a      	lsls	r2, r3
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd0:	f043 0204 	orr.w	r2, r3, #4
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fdc:	2210      	movs	r2, #16
 8005fde:	409a      	lsls	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d043      	beq.n	8006070 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d03c      	beq.n	8006070 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffa:	2210      	movs	r2, #16
 8005ffc:	409a      	lsls	r2, r3
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d018      	beq.n	8006042 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d108      	bne.n	8006030 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	2b00      	cmp	r3, #0
 8006024:	d024      	beq.n	8006070 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	4798      	blx	r3
 800602e:	e01f      	b.n	8006070 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006034:	2b00      	cmp	r3, #0
 8006036:	d01b      	beq.n	8006070 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	4798      	blx	r3
 8006040:	e016      	b.n	8006070 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604c:	2b00      	cmp	r3, #0
 800604e:	d107      	bne.n	8006060 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0208 	bic.w	r2, r2, #8
 800605e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006074:	2220      	movs	r2, #32
 8006076:	409a      	lsls	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4013      	ands	r3, r2
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 808f 	beq.w	80061a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0310 	and.w	r3, r3, #16
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 8087 	beq.w	80061a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006096:	2220      	movs	r2, #32
 8006098:	409a      	lsls	r2, r3
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b05      	cmp	r3, #5
 80060a8:	d136      	bne.n	8006118 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0216 	bic.w	r2, r2, #22
 80060b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695a      	ldr	r2, [r3, #20]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d103      	bne.n	80060da <HAL_DMA_IRQHandler+0x1da>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d007      	beq.n	80060ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0208 	bic.w	r2, r2, #8
 80060e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ee:	223f      	movs	r2, #63	; 0x3f
 80060f0:	409a      	lsls	r2, r3
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800610a:	2b00      	cmp	r3, #0
 800610c:	d07e      	beq.n	800620c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	4798      	blx	r3
        }
        return;
 8006116:	e079      	b.n	800620c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d01d      	beq.n	8006162 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10d      	bne.n	8006150 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006138:	2b00      	cmp	r3, #0
 800613a:	d031      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	4798      	blx	r3
 8006144:	e02c      	b.n	80061a0 <HAL_DMA_IRQHandler+0x2a0>
 8006146:	bf00      	nop
 8006148:	20000014 	.word	0x20000014
 800614c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006154:	2b00      	cmp	r3, #0
 8006156:	d023      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	4798      	blx	r3
 8006160:	e01e      	b.n	80061a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10f      	bne.n	8006190 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0210 	bic.w	r2, r2, #16
 800617e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d032      	beq.n	800620e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d022      	beq.n	80061fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2205      	movs	r2, #5
 80061b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 0201 	bic.w	r2, r2, #1
 80061ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	3301      	adds	r3, #1
 80061d0:	60bb      	str	r3, [r7, #8]
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d307      	bcc.n	80061e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1f2      	bne.n	80061cc <HAL_DMA_IRQHandler+0x2cc>
 80061e6:	e000      	b.n	80061ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80061e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d005      	beq.n	800620e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	4798      	blx	r3
 800620a:	e000      	b.n	800620e <HAL_DMA_IRQHandler+0x30e>
        return;
 800620c:	bf00      	nop
    }
  }
}
 800620e:	3718      	adds	r7, #24
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006230:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	2b40      	cmp	r3, #64	; 0x40
 8006240:	d108      	bne.n	8006254 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006252:	e007      	b.n	8006264 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	60da      	str	r2, [r3, #12]
}
 8006264:	bf00      	nop
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	b2db      	uxtb	r3, r3
 800627e:	3b10      	subs	r3, #16
 8006280:	4a14      	ldr	r2, [pc, #80]	; (80062d4 <DMA_CalcBaseAndBitshift+0x64>)
 8006282:	fba2 2303 	umull	r2, r3, r2, r3
 8006286:	091b      	lsrs	r3, r3, #4
 8006288:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800628a:	4a13      	ldr	r2, [pc, #76]	; (80062d8 <DMA_CalcBaseAndBitshift+0x68>)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b03      	cmp	r3, #3
 800629c:	d909      	bls.n	80062b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80062a6:	f023 0303 	bic.w	r3, r3, #3
 80062aa:	1d1a      	adds	r2, r3, #4
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	659a      	str	r2, [r3, #88]	; 0x58
 80062b0:	e007      	b.n	80062c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80062ba:	f023 0303 	bic.w	r3, r3, #3
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	aaaaaaab 	.word	0xaaaaaaab
 80062d8:	0800f61c 	.word	0x0800f61c

080062dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d11f      	bne.n	8006336 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b03      	cmp	r3, #3
 80062fa:	d856      	bhi.n	80063aa <DMA_CheckFifoParam+0xce>
 80062fc:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <DMA_CheckFifoParam+0x28>)
 80062fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006302:	bf00      	nop
 8006304:	08006315 	.word	0x08006315
 8006308:	08006327 	.word	0x08006327
 800630c:	08006315 	.word	0x08006315
 8006310:	080063ab 	.word	0x080063ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d046      	beq.n	80063ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006324:	e043      	b.n	80063ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800632e:	d140      	bne.n	80063b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006334:	e03d      	b.n	80063b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800633e:	d121      	bne.n	8006384 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2b03      	cmp	r3, #3
 8006344:	d837      	bhi.n	80063b6 <DMA_CheckFifoParam+0xda>
 8006346:	a201      	add	r2, pc, #4	; (adr r2, 800634c <DMA_CheckFifoParam+0x70>)
 8006348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634c:	0800635d 	.word	0x0800635d
 8006350:	08006363 	.word	0x08006363
 8006354:	0800635d 	.word	0x0800635d
 8006358:	08006375 	.word	0x08006375
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	73fb      	strb	r3, [r7, #15]
      break;
 8006360:	e030      	b.n	80063c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006366:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d025      	beq.n	80063ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006372:	e022      	b.n	80063ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800637c:	d11f      	bne.n	80063be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006382:	e01c      	b.n	80063be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b02      	cmp	r3, #2
 8006388:	d903      	bls.n	8006392 <DMA_CheckFifoParam+0xb6>
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2b03      	cmp	r3, #3
 800638e:	d003      	beq.n	8006398 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006390:	e018      	b.n	80063c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	73fb      	strb	r3, [r7, #15]
      break;
 8006396:	e015      	b.n	80063c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00e      	beq.n	80063c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	73fb      	strb	r3, [r7, #15]
      break;
 80063a8:	e00b      	b.n	80063c2 <DMA_CheckFifoParam+0xe6>
      break;
 80063aa:	bf00      	nop
 80063ac:	e00a      	b.n	80063c4 <DMA_CheckFifoParam+0xe8>
      break;
 80063ae:	bf00      	nop
 80063b0:	e008      	b.n	80063c4 <DMA_CheckFifoParam+0xe8>
      break;
 80063b2:	bf00      	nop
 80063b4:	e006      	b.n	80063c4 <DMA_CheckFifoParam+0xe8>
      break;
 80063b6:	bf00      	nop
 80063b8:	e004      	b.n	80063c4 <DMA_CheckFifoParam+0xe8>
      break;
 80063ba:	bf00      	nop
 80063bc:	e002      	b.n	80063c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80063be:	bf00      	nop
 80063c0:	e000      	b.n	80063c4 <DMA_CheckFifoParam+0xe8>
      break;
 80063c2:	bf00      	nop
    }
  } 
  
  return status; 
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop

080063d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b089      	sub	sp, #36	; 0x24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80063de:	2300      	movs	r3, #0
 80063e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063ea:	2300      	movs	r3, #0
 80063ec:	61fb      	str	r3, [r7, #28]
 80063ee:	e16b      	b.n	80066c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80063f0:	2201      	movs	r2, #1
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	fa02 f303 	lsl.w	r3, r2, r3
 80063f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	4013      	ands	r3, r2
 8006402:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	429a      	cmp	r2, r3
 800640a:	f040 815a 	bne.w	80066c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f003 0303 	and.w	r3, r3, #3
 8006416:	2b01      	cmp	r3, #1
 8006418:	d005      	beq.n	8006426 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006422:	2b02      	cmp	r3, #2
 8006424:	d130      	bne.n	8006488 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	2203      	movs	r2, #3
 8006432:	fa02 f303 	lsl.w	r3, r2, r3
 8006436:	43db      	mvns	r3, r3
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	4013      	ands	r3, r2
 800643c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	fa02 f303 	lsl.w	r3, r2, r3
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	4313      	orrs	r3, r2
 800644e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800645c:	2201      	movs	r2, #1
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	fa02 f303 	lsl.w	r3, r2, r3
 8006464:	43db      	mvns	r3, r3
 8006466:	69ba      	ldr	r2, [r7, #24]
 8006468:	4013      	ands	r3, r2
 800646a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	091b      	lsrs	r3, r3, #4
 8006472:	f003 0201 	and.w	r2, r3, #1
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	fa02 f303 	lsl.w	r3, r2, r3
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	4313      	orrs	r3, r2
 8006480:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f003 0303 	and.w	r3, r3, #3
 8006490:	2b03      	cmp	r3, #3
 8006492:	d017      	beq.n	80064c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	2203      	movs	r2, #3
 80064a0:	fa02 f303 	lsl.w	r3, r2, r3
 80064a4:	43db      	mvns	r3, r3
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	4013      	ands	r3, r2
 80064aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	fa02 f303 	lsl.w	r3, r2, r3
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f003 0303 	and.w	r3, r3, #3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d123      	bne.n	8006518 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	08da      	lsrs	r2, r3, #3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3208      	adds	r2, #8
 80064d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	220f      	movs	r2, #15
 80064e8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ec:	43db      	mvns	r3, r3
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	4013      	ands	r3, r2
 80064f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	691a      	ldr	r2, [r3, #16]
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	f003 0307 	and.w	r3, r3, #7
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	fa02 f303 	lsl.w	r3, r2, r3
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	4313      	orrs	r3, r2
 8006508:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	08da      	lsrs	r2, r3, #3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3208      	adds	r2, #8
 8006512:	69b9      	ldr	r1, [r7, #24]
 8006514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	2203      	movs	r2, #3
 8006524:	fa02 f303 	lsl.w	r3, r2, r3
 8006528:	43db      	mvns	r3, r3
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	4013      	ands	r3, r2
 800652e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f003 0203 	and.w	r2, r3, #3
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	fa02 f303 	lsl.w	r3, r2, r3
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	4313      	orrs	r3, r2
 8006544:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 80b4 	beq.w	80066c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	4b60      	ldr	r3, [pc, #384]	; (80066e0 <HAL_GPIO_Init+0x30c>)
 8006560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006562:	4a5f      	ldr	r2, [pc, #380]	; (80066e0 <HAL_GPIO_Init+0x30c>)
 8006564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006568:	6453      	str	r3, [r2, #68]	; 0x44
 800656a:	4b5d      	ldr	r3, [pc, #372]	; (80066e0 <HAL_GPIO_Init+0x30c>)
 800656c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006576:	4a5b      	ldr	r2, [pc, #364]	; (80066e4 <HAL_GPIO_Init+0x310>)
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	089b      	lsrs	r3, r3, #2
 800657c:	3302      	adds	r3, #2
 800657e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f003 0303 	and.w	r3, r3, #3
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	220f      	movs	r2, #15
 800658e:	fa02 f303 	lsl.w	r3, r2, r3
 8006592:	43db      	mvns	r3, r3
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	4013      	ands	r3, r2
 8006598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a52      	ldr	r2, [pc, #328]	; (80066e8 <HAL_GPIO_Init+0x314>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d02b      	beq.n	80065fa <HAL_GPIO_Init+0x226>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a51      	ldr	r2, [pc, #324]	; (80066ec <HAL_GPIO_Init+0x318>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d025      	beq.n	80065f6 <HAL_GPIO_Init+0x222>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a50      	ldr	r2, [pc, #320]	; (80066f0 <HAL_GPIO_Init+0x31c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d01f      	beq.n	80065f2 <HAL_GPIO_Init+0x21e>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a4f      	ldr	r2, [pc, #316]	; (80066f4 <HAL_GPIO_Init+0x320>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d019      	beq.n	80065ee <HAL_GPIO_Init+0x21a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a4e      	ldr	r2, [pc, #312]	; (80066f8 <HAL_GPIO_Init+0x324>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d013      	beq.n	80065ea <HAL_GPIO_Init+0x216>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a4d      	ldr	r2, [pc, #308]	; (80066fc <HAL_GPIO_Init+0x328>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d00d      	beq.n	80065e6 <HAL_GPIO_Init+0x212>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a4c      	ldr	r2, [pc, #304]	; (8006700 <HAL_GPIO_Init+0x32c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d007      	beq.n	80065e2 <HAL_GPIO_Init+0x20e>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a4b      	ldr	r2, [pc, #300]	; (8006704 <HAL_GPIO_Init+0x330>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d101      	bne.n	80065de <HAL_GPIO_Init+0x20a>
 80065da:	2307      	movs	r3, #7
 80065dc:	e00e      	b.n	80065fc <HAL_GPIO_Init+0x228>
 80065de:	2308      	movs	r3, #8
 80065e0:	e00c      	b.n	80065fc <HAL_GPIO_Init+0x228>
 80065e2:	2306      	movs	r3, #6
 80065e4:	e00a      	b.n	80065fc <HAL_GPIO_Init+0x228>
 80065e6:	2305      	movs	r3, #5
 80065e8:	e008      	b.n	80065fc <HAL_GPIO_Init+0x228>
 80065ea:	2304      	movs	r3, #4
 80065ec:	e006      	b.n	80065fc <HAL_GPIO_Init+0x228>
 80065ee:	2303      	movs	r3, #3
 80065f0:	e004      	b.n	80065fc <HAL_GPIO_Init+0x228>
 80065f2:	2302      	movs	r3, #2
 80065f4:	e002      	b.n	80065fc <HAL_GPIO_Init+0x228>
 80065f6:	2301      	movs	r3, #1
 80065f8:	e000      	b.n	80065fc <HAL_GPIO_Init+0x228>
 80065fa:	2300      	movs	r3, #0
 80065fc:	69fa      	ldr	r2, [r7, #28]
 80065fe:	f002 0203 	and.w	r2, r2, #3
 8006602:	0092      	lsls	r2, r2, #2
 8006604:	4093      	lsls	r3, r2
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	4313      	orrs	r3, r2
 800660a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800660c:	4935      	ldr	r1, [pc, #212]	; (80066e4 <HAL_GPIO_Init+0x310>)
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	089b      	lsrs	r3, r3, #2
 8006612:	3302      	adds	r3, #2
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800661a:	4b3b      	ldr	r3, [pc, #236]	; (8006708 <HAL_GPIO_Init+0x334>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	43db      	mvns	r3, r3
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	4013      	ands	r3, r2
 8006628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800663e:	4a32      	ldr	r2, [pc, #200]	; (8006708 <HAL_GPIO_Init+0x334>)
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006644:	4b30      	ldr	r3, [pc, #192]	; (8006708 <HAL_GPIO_Init+0x334>)
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	43db      	mvns	r3, r3
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	4013      	ands	r3, r2
 8006652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	4313      	orrs	r3, r2
 8006666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006668:	4a27      	ldr	r2, [pc, #156]	; (8006708 <HAL_GPIO_Init+0x334>)
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800666e:	4b26      	ldr	r3, [pc, #152]	; (8006708 <HAL_GPIO_Init+0x334>)
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	43db      	mvns	r3, r3
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	4013      	ands	r3, r2
 800667c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	4313      	orrs	r3, r2
 8006690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006692:	4a1d      	ldr	r2, [pc, #116]	; (8006708 <HAL_GPIO_Init+0x334>)
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006698:	4b1b      	ldr	r3, [pc, #108]	; (8006708 <HAL_GPIO_Init+0x334>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	43db      	mvns	r3, r3
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	4013      	ands	r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80066bc:	4a12      	ldr	r2, [pc, #72]	; (8006708 <HAL_GPIO_Init+0x334>)
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	3301      	adds	r3, #1
 80066c6:	61fb      	str	r3, [r7, #28]
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	2b0f      	cmp	r3, #15
 80066cc:	f67f ae90 	bls.w	80063f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80066d0:	bf00      	nop
 80066d2:	bf00      	nop
 80066d4:	3724      	adds	r7, #36	; 0x24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40023800 	.word	0x40023800
 80066e4:	40013800 	.word	0x40013800
 80066e8:	40020000 	.word	0x40020000
 80066ec:	40020400 	.word	0x40020400
 80066f0:	40020800 	.word	0x40020800
 80066f4:	40020c00 	.word	0x40020c00
 80066f8:	40021000 	.word	0x40021000
 80066fc:	40021400 	.word	0x40021400
 8006700:	40021800 	.word	0x40021800
 8006704:	40021c00 	.word	0x40021c00
 8006708:	40013c00 	.word	0x40013c00

0800670c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	460b      	mov	r3, r1
 8006716:	807b      	strh	r3, [r7, #2]
 8006718:	4613      	mov	r3, r2
 800671a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800671c:	787b      	ldrb	r3, [r7, #1]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006722:	887a      	ldrh	r2, [r7, #2]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006728:	e003      	b.n	8006732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800672a:	887b      	ldrh	r3, [r7, #2]
 800672c:	041a      	lsls	r2, r3, #16
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	619a      	str	r2, [r3, #24]
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
	...

08006740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e12b      	b.n	80069aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d106      	bne.n	800676c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7fe fcc6 	bl	80050f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2224      	movs	r2, #36	; 0x24
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f022 0201 	bic.w	r2, r2, #1
 8006782:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006792:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80067a4:	f001 fbbc 	bl	8007f20 <HAL_RCC_GetPCLK1Freq>
 80067a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	4a81      	ldr	r2, [pc, #516]	; (80069b4 <HAL_I2C_Init+0x274>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d807      	bhi.n	80067c4 <HAL_I2C_Init+0x84>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4a80      	ldr	r2, [pc, #512]	; (80069b8 <HAL_I2C_Init+0x278>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	bf94      	ite	ls
 80067bc:	2301      	movls	r3, #1
 80067be:	2300      	movhi	r3, #0
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	e006      	b.n	80067d2 <HAL_I2C_Init+0x92>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4a7d      	ldr	r2, [pc, #500]	; (80069bc <HAL_I2C_Init+0x27c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	bf94      	ite	ls
 80067cc:	2301      	movls	r3, #1
 80067ce:	2300      	movhi	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e0e7      	b.n	80069aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4a78      	ldr	r2, [pc, #480]	; (80069c0 <HAL_I2C_Init+0x280>)
 80067de:	fba2 2303 	umull	r2, r3, r2, r3
 80067e2:	0c9b      	lsrs	r3, r3, #18
 80067e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	4a6a      	ldr	r2, [pc, #424]	; (80069b4 <HAL_I2C_Init+0x274>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d802      	bhi.n	8006814 <HAL_I2C_Init+0xd4>
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	3301      	adds	r3, #1
 8006812:	e009      	b.n	8006828 <HAL_I2C_Init+0xe8>
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800681a:	fb02 f303 	mul.w	r3, r2, r3
 800681e:	4a69      	ldr	r2, [pc, #420]	; (80069c4 <HAL_I2C_Init+0x284>)
 8006820:	fba2 2303 	umull	r2, r3, r2, r3
 8006824:	099b      	lsrs	r3, r3, #6
 8006826:	3301      	adds	r3, #1
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6812      	ldr	r2, [r2, #0]
 800682c:	430b      	orrs	r3, r1
 800682e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800683a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	495c      	ldr	r1, [pc, #368]	; (80069b4 <HAL_I2C_Init+0x274>)
 8006844:	428b      	cmp	r3, r1
 8006846:	d819      	bhi.n	800687c <HAL_I2C_Init+0x13c>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	1e59      	subs	r1, r3, #1
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	005b      	lsls	r3, r3, #1
 8006852:	fbb1 f3f3 	udiv	r3, r1, r3
 8006856:	1c59      	adds	r1, r3, #1
 8006858:	f640 73fc 	movw	r3, #4092	; 0xffc
 800685c:	400b      	ands	r3, r1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00a      	beq.n	8006878 <HAL_I2C_Init+0x138>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	1e59      	subs	r1, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006870:	3301      	adds	r3, #1
 8006872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006876:	e051      	b.n	800691c <HAL_I2C_Init+0x1dc>
 8006878:	2304      	movs	r3, #4
 800687a:	e04f      	b.n	800691c <HAL_I2C_Init+0x1dc>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d111      	bne.n	80068a8 <HAL_I2C_Init+0x168>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	1e58      	subs	r0, r3, #1
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6859      	ldr	r1, [r3, #4]
 800688c:	460b      	mov	r3, r1
 800688e:	005b      	lsls	r3, r3, #1
 8006890:	440b      	add	r3, r1
 8006892:	fbb0 f3f3 	udiv	r3, r0, r3
 8006896:	3301      	adds	r3, #1
 8006898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800689c:	2b00      	cmp	r3, #0
 800689e:	bf0c      	ite	eq
 80068a0:	2301      	moveq	r3, #1
 80068a2:	2300      	movne	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	e012      	b.n	80068ce <HAL_I2C_Init+0x18e>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	1e58      	subs	r0, r3, #1
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6859      	ldr	r1, [r3, #4]
 80068b0:	460b      	mov	r3, r1
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	0099      	lsls	r1, r3, #2
 80068b8:	440b      	add	r3, r1
 80068ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80068be:	3301      	adds	r3, #1
 80068c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	bf0c      	ite	eq
 80068c8:	2301      	moveq	r3, #1
 80068ca:	2300      	movne	r3, #0
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <HAL_I2C_Init+0x196>
 80068d2:	2301      	movs	r3, #1
 80068d4:	e022      	b.n	800691c <HAL_I2C_Init+0x1dc>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10e      	bne.n	80068fc <HAL_I2C_Init+0x1bc>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	1e58      	subs	r0, r3, #1
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6859      	ldr	r1, [r3, #4]
 80068e6:	460b      	mov	r3, r1
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	440b      	add	r3, r1
 80068ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80068f0:	3301      	adds	r3, #1
 80068f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068fa:	e00f      	b.n	800691c <HAL_I2C_Init+0x1dc>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	1e58      	subs	r0, r3, #1
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6859      	ldr	r1, [r3, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	0099      	lsls	r1, r3, #2
 800690c:	440b      	add	r3, r1
 800690e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006912:	3301      	adds	r3, #1
 8006914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800691c:	6879      	ldr	r1, [r7, #4]
 800691e:	6809      	ldr	r1, [r1, #0]
 8006920:	4313      	orrs	r3, r2
 8006922:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	69da      	ldr	r2, [r3, #28]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	431a      	orrs	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	430a      	orrs	r2, r1
 800693e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800694a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	6911      	ldr	r1, [r2, #16]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	68d2      	ldr	r2, [r2, #12]
 8006956:	4311      	orrs	r1, r2
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6812      	ldr	r2, [r2, #0]
 800695c:	430b      	orrs	r3, r1
 800695e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	695a      	ldr	r2, [r3, #20]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	431a      	orrs	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 0201 	orr.w	r2, r2, #1
 800698a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2220      	movs	r2, #32
 8006996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	000186a0 	.word	0x000186a0
 80069b8:	001e847f 	.word	0x001e847f
 80069bc:	003d08ff 	.word	0x003d08ff
 80069c0:	431bde83 	.word	0x431bde83
 80069c4:	10624dd3 	.word	0x10624dd3

080069c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	4608      	mov	r0, r1
 80069d2:	4611      	mov	r1, r2
 80069d4:	461a      	mov	r2, r3
 80069d6:	4603      	mov	r3, r0
 80069d8:	817b      	strh	r3, [r7, #10]
 80069da:	460b      	mov	r3, r1
 80069dc:	813b      	strh	r3, [r7, #8]
 80069de:	4613      	mov	r3, r2
 80069e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80069e2:	f7fe ffb3 	bl	800594c <HAL_GetTick>
 80069e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b20      	cmp	r3, #32
 80069f2:	f040 80d9 	bne.w	8006ba8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	2319      	movs	r3, #25
 80069fc:	2201      	movs	r2, #1
 80069fe:	496d      	ldr	r1, [pc, #436]	; (8006bb4 <HAL_I2C_Mem_Write+0x1ec>)
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 fc7f 	bl	8007304 <I2C_WaitOnFlagUntilTimeout>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e0cc      	b.n	8006baa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d101      	bne.n	8006a1e <HAL_I2C_Mem_Write+0x56>
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	e0c5      	b.n	8006baa <HAL_I2C_Mem_Write+0x1e2>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d007      	beq.n	8006a44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0201 	orr.w	r2, r2, #1
 8006a42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2221      	movs	r2, #33	; 0x21
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2240      	movs	r2, #64	; 0x40
 8006a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6a3a      	ldr	r2, [r7, #32]
 8006a6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4a4d      	ldr	r2, [pc, #308]	; (8006bb8 <HAL_I2C_Mem_Write+0x1f0>)
 8006a84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a86:	88f8      	ldrh	r0, [r7, #6]
 8006a88:	893a      	ldrh	r2, [r7, #8]
 8006a8a:	8979      	ldrh	r1, [r7, #10]
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	9301      	str	r3, [sp, #4]
 8006a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	4603      	mov	r3, r0
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f000 fab6 	bl	8007008 <I2C_RequestMemoryWrite>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d052      	beq.n	8006b48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e081      	b.n	8006baa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 fd00 	bl	80074b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00d      	beq.n	8006ad2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d107      	bne.n	8006ace <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006acc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e06b      	b.n	8006baa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad6:	781a      	ldrb	r2, [r3, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aec:	3b01      	subs	r3, #1
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	3b01      	subs	r3, #1
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d11b      	bne.n	8006b48 <HAL_I2C_Mem_Write+0x180>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d017      	beq.n	8006b48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1c:	781a      	ldrb	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b32:	3b01      	subs	r3, #1
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1aa      	bne.n	8006aa6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 fcec 	bl	8007532 <I2C_WaitOnBTFFlagUntilTimeout>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00d      	beq.n	8006b7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d107      	bne.n	8006b78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e016      	b.n	8006baa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	e000      	b.n	8006baa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006ba8:	2302      	movs	r3, #2
  }
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	00100002 	.word	0x00100002
 8006bb8:	ffff0000 	.word	0xffff0000

08006bbc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08c      	sub	sp, #48	; 0x30
 8006bc0:	af02      	add	r7, sp, #8
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	4608      	mov	r0, r1
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	461a      	mov	r2, r3
 8006bca:	4603      	mov	r3, r0
 8006bcc:	817b      	strh	r3, [r7, #10]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	813b      	strh	r3, [r7, #8]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006bd6:	f7fe feb9 	bl	800594c <HAL_GetTick>
 8006bda:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b20      	cmp	r3, #32
 8006be6:	f040 8208 	bne.w	8006ffa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	2319      	movs	r3, #25
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	497b      	ldr	r1, [pc, #492]	; (8006de0 <HAL_I2C_Mem_Read+0x224>)
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 fb85 	bl	8007304 <I2C_WaitOnFlagUntilTimeout>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006c00:	2302      	movs	r3, #2
 8006c02:	e1fb      	b.n	8006ffc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d101      	bne.n	8006c12 <HAL_I2C_Mem_Read+0x56>
 8006c0e:	2302      	movs	r3, #2
 8006c10:	e1f4      	b.n	8006ffc <HAL_I2C_Mem_Read+0x440>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d007      	beq.n	8006c38 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0201 	orr.w	r2, r2, #1
 8006c36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2222      	movs	r2, #34	; 0x22
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2240      	movs	r2, #64	; 0x40
 8006c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006c68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4a5b      	ldr	r2, [pc, #364]	; (8006de4 <HAL_I2C_Mem_Read+0x228>)
 8006c78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c7a:	88f8      	ldrh	r0, [r7, #6]
 8006c7c:	893a      	ldrh	r2, [r7, #8]
 8006c7e:	8979      	ldrh	r1, [r7, #10]
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	9301      	str	r3, [sp, #4]
 8006c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	4603      	mov	r3, r0
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 fa52 	bl	8007134 <I2C_RequestMemoryRead>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e1b0      	b.n	8006ffc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d113      	bne.n	8006cca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	623b      	str	r3, [r7, #32]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	623b      	str	r3, [r7, #32]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	623b      	str	r3, [r7, #32]
 8006cb6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	e184      	b.n	8006fd4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d11b      	bne.n	8006d0a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ce0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	61fb      	str	r3, [r7, #28]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	61fb      	str	r3, [r7, #28]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	61fb      	str	r3, [r7, #28]
 8006cf6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	e164      	b.n	8006fd4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d11b      	bne.n	8006d4a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d32:	2300      	movs	r3, #0
 8006d34:	61bb      	str	r3, [r7, #24]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	61bb      	str	r3, [r7, #24]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	61bb      	str	r3, [r7, #24]
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	e144      	b.n	8006fd4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	617b      	str	r3, [r7, #20]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	617b      	str	r3, [r7, #20]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	617b      	str	r3, [r7, #20]
 8006d5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006d60:	e138      	b.n	8006fd4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	f200 80f1 	bhi.w	8006f4e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d123      	bne.n	8006dbc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 fc1b 	bl	80075b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e139      	b.n	8006ffc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	691a      	ldr	r2, [r3, #16]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	b2d2      	uxtb	r2, r2
 8006d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006da4:	3b01      	subs	r3, #1
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dba:	e10b      	b.n	8006fd4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d14e      	bne.n	8006e62 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dca:	2200      	movs	r2, #0
 8006dcc:	4906      	ldr	r1, [pc, #24]	; (8006de8 <HAL_I2C_Mem_Read+0x22c>)
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 fa98 	bl	8007304 <I2C_WaitOnFlagUntilTimeout>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d008      	beq.n	8006dec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e10e      	b.n	8006ffc <HAL_I2C_Mem_Read+0x440>
 8006dde:	bf00      	nop
 8006de0:	00100002 	.word	0x00100002
 8006de4:	ffff0000 	.word	0xffff0000
 8006de8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	691a      	ldr	r2, [r3, #16]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e06:	b2d2      	uxtb	r2, r2
 8006e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	691a      	ldr	r2, [r3, #16]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e38:	b2d2      	uxtb	r2, r2
 8006e3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	1c5a      	adds	r2, r3, #1
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e60:	e0b8      	b.n	8006fd4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e68:	2200      	movs	r2, #0
 8006e6a:	4966      	ldr	r1, [pc, #408]	; (8007004 <HAL_I2C_Mem_Read+0x448>)
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 fa49 	bl	8007304 <I2C_WaitOnFlagUntilTimeout>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e0bf      	b.n	8006ffc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	691a      	ldr	r2, [r3, #16]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	494f      	ldr	r1, [pc, #316]	; (8007004 <HAL_I2C_Mem_Read+0x448>)
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 fa1b 	bl	8007304 <I2C_WaitOnFlagUntilTimeout>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e091      	b.n	8006ffc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ee6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	691a      	ldr	r2, [r3, #16]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f04:	3b01      	subs	r3, #1
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	691a      	ldr	r2, [r3, #16]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	b2d2      	uxtb	r2, r2
 8006f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	3b01      	subs	r3, #1
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f4c:	e042      	b.n	8006fd4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 fb2e 	bl	80075b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e04c      	b.n	8006ffc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	691a      	ldr	r2, [r3, #16]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	b2d2      	uxtb	r2, r2
 8006f6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	f003 0304 	and.w	r3, r3, #4
 8006f9e:	2b04      	cmp	r3, #4
 8006fa0:	d118      	bne.n	8006fd4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	691a      	ldr	r2, [r3, #16]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fac:	b2d2      	uxtb	r2, r2
 8006fae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f47f aec2 	bne.w	8006d62 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	e000      	b.n	8006ffc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006ffa:	2302      	movs	r3, #2
  }
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3728      	adds	r7, #40	; 0x28
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	00010004 	.word	0x00010004

08007008 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b088      	sub	sp, #32
 800700c:	af02      	add	r7, sp, #8
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	4608      	mov	r0, r1
 8007012:	4611      	mov	r1, r2
 8007014:	461a      	mov	r2, r3
 8007016:	4603      	mov	r3, r0
 8007018:	817b      	strh	r3, [r7, #10]
 800701a:	460b      	mov	r3, r1
 800701c:	813b      	strh	r3, [r7, #8]
 800701e:	4613      	mov	r3, r2
 8007020:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007030:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	2200      	movs	r2, #0
 800703a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 f960 	bl	8007304 <I2C_WaitOnFlagUntilTimeout>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00d      	beq.n	8007066 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007058:	d103      	bne.n	8007062 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007060:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e05f      	b.n	8007126 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007066:	897b      	ldrh	r3, [r7, #10]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	461a      	mov	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007074:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	6a3a      	ldr	r2, [r7, #32]
 800707a:	492d      	ldr	r1, [pc, #180]	; (8007130 <I2C_RequestMemoryWrite+0x128>)
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 f998 	bl	80073b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e04c      	b.n	8007126 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800708c:	2300      	movs	r3, #0
 800708e:	617b      	str	r3, [r7, #20]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	617b      	str	r3, [r7, #20]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	617b      	str	r3, [r7, #20]
 80070a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a4:	6a39      	ldr	r1, [r7, #32]
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 fa02 	bl	80074b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00d      	beq.n	80070ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b6:	2b04      	cmp	r3, #4
 80070b8:	d107      	bne.n	80070ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e02b      	b.n	8007126 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070ce:	88fb      	ldrh	r3, [r7, #6]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d105      	bne.n	80070e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070d4:	893b      	ldrh	r3, [r7, #8]
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	611a      	str	r2, [r3, #16]
 80070de:	e021      	b.n	8007124 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80070e0:	893b      	ldrh	r3, [r7, #8]
 80070e2:	0a1b      	lsrs	r3, r3, #8
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070f0:	6a39      	ldr	r1, [r7, #32]
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 f9dc 	bl	80074b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00d      	beq.n	800711a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	2b04      	cmp	r3, #4
 8007104:	d107      	bne.n	8007116 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007114:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e005      	b.n	8007126 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800711a:	893b      	ldrh	r3, [r7, #8]
 800711c:	b2da      	uxtb	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	00010002 	.word	0x00010002

08007134 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b088      	sub	sp, #32
 8007138:	af02      	add	r7, sp, #8
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	4608      	mov	r0, r1
 800713e:	4611      	mov	r1, r2
 8007140:	461a      	mov	r2, r3
 8007142:	4603      	mov	r3, r0
 8007144:	817b      	strh	r3, [r7, #10]
 8007146:	460b      	mov	r3, r1
 8007148:	813b      	strh	r3, [r7, #8]
 800714a:	4613      	mov	r3, r2
 800714c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800715c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800716c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	2200      	movs	r2, #0
 8007176:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 f8c2 	bl	8007304 <I2C_WaitOnFlagUntilTimeout>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00d      	beq.n	80071a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007194:	d103      	bne.n	800719e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800719c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e0aa      	b.n	80072f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071a2:	897b      	ldrh	r3, [r7, #10]
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	461a      	mov	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	6a3a      	ldr	r2, [r7, #32]
 80071b6:	4952      	ldr	r1, [pc, #328]	; (8007300 <I2C_RequestMemoryRead+0x1cc>)
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 f8fa 	bl	80073b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d001      	beq.n	80071c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e097      	b.n	80072f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	617b      	str	r3, [r7, #20]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	617b      	str	r3, [r7, #20]
 80071dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e0:	6a39      	ldr	r1, [r7, #32]
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 f964 	bl	80074b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00d      	beq.n	800720a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	d107      	bne.n	8007206 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007204:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e076      	b.n	80072f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800720a:	88fb      	ldrh	r3, [r7, #6]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d105      	bne.n	800721c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007210:	893b      	ldrh	r3, [r7, #8]
 8007212:	b2da      	uxtb	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	611a      	str	r2, [r3, #16]
 800721a:	e021      	b.n	8007260 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800721c:	893b      	ldrh	r3, [r7, #8]
 800721e:	0a1b      	lsrs	r3, r3, #8
 8007220:	b29b      	uxth	r3, r3
 8007222:	b2da      	uxtb	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800722a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800722c:	6a39      	ldr	r1, [r7, #32]
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 f93e 	bl	80074b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00d      	beq.n	8007256 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	2b04      	cmp	r3, #4
 8007240:	d107      	bne.n	8007252 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007250:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e050      	b.n	80072f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007256:	893b      	ldrh	r3, [r7, #8]
 8007258:	b2da      	uxtb	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007262:	6a39      	ldr	r1, [r7, #32]
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 f923 	bl	80074b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00d      	beq.n	800728c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007274:	2b04      	cmp	r3, #4
 8007276:	d107      	bne.n	8007288 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007286:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e035      	b.n	80072f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800729a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 f82b 	bl	8007304 <I2C_WaitOnFlagUntilTimeout>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00d      	beq.n	80072d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c2:	d103      	bne.n	80072cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e013      	b.n	80072f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80072d0:	897b      	ldrh	r3, [r7, #10]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	f043 0301 	orr.w	r3, r3, #1
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	6a3a      	ldr	r2, [r7, #32]
 80072e4:	4906      	ldr	r1, [pc, #24]	; (8007300 <I2C_RequestMemoryRead+0x1cc>)
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f000 f863 	bl	80073b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e000      	b.n	80072f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3718      	adds	r7, #24
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	00010002 	.word	0x00010002

08007304 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	603b      	str	r3, [r7, #0]
 8007310:	4613      	mov	r3, r2
 8007312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007314:	e025      	b.n	8007362 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800731c:	d021      	beq.n	8007362 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800731e:	f7fe fb15 	bl	800594c <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	429a      	cmp	r2, r3
 800732c:	d302      	bcc.n	8007334 <I2C_WaitOnFlagUntilTimeout+0x30>
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d116      	bne.n	8007362 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2220      	movs	r2, #32
 800733e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	f043 0220 	orr.w	r2, r3, #32
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e023      	b.n	80073aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	0c1b      	lsrs	r3, r3, #16
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b01      	cmp	r3, #1
 800736a:	d10d      	bne.n	8007388 <I2C_WaitOnFlagUntilTimeout+0x84>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	43da      	mvns	r2, r3
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	4013      	ands	r3, r2
 8007378:	b29b      	uxth	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	bf0c      	ite	eq
 800737e:	2301      	moveq	r3, #1
 8007380:	2300      	movne	r3, #0
 8007382:	b2db      	uxtb	r3, r3
 8007384:	461a      	mov	r2, r3
 8007386:	e00c      	b.n	80073a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	43da      	mvns	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	4013      	ands	r3, r2
 8007394:	b29b      	uxth	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	bf0c      	ite	eq
 800739a:	2301      	moveq	r3, #1
 800739c:	2300      	movne	r3, #0
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	461a      	mov	r2, r3
 80073a2:	79fb      	ldrb	r3, [r7, #7]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d0b6      	beq.n	8007316 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b084      	sub	sp, #16
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	60f8      	str	r0, [r7, #12]
 80073ba:	60b9      	str	r1, [r7, #8]
 80073bc:	607a      	str	r2, [r7, #4]
 80073be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073c0:	e051      	b.n	8007466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073d0:	d123      	bne.n	800741a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2220      	movs	r2, #32
 80073f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007406:	f043 0204 	orr.w	r2, r3, #4
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e046      	b.n	80074a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007420:	d021      	beq.n	8007466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007422:	f7fe fa93 	bl	800594c <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	429a      	cmp	r2, r3
 8007430:	d302      	bcc.n	8007438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d116      	bne.n	8007466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2220      	movs	r2, #32
 8007442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	f043 0220 	orr.w	r2, r3, #32
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e020      	b.n	80074a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	0c1b      	lsrs	r3, r3, #16
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b01      	cmp	r3, #1
 800746e:	d10c      	bne.n	800748a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	43da      	mvns	r2, r3
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	4013      	ands	r3, r2
 800747c:	b29b      	uxth	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	bf14      	ite	ne
 8007482:	2301      	movne	r3, #1
 8007484:	2300      	moveq	r3, #0
 8007486:	b2db      	uxtb	r3, r3
 8007488:	e00b      	b.n	80074a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	43da      	mvns	r2, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	4013      	ands	r3, r2
 8007496:	b29b      	uxth	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	bf14      	ite	ne
 800749c:	2301      	movne	r3, #1
 800749e:	2300      	moveq	r3, #0
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d18d      	bne.n	80073c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074bc:	e02d      	b.n	800751a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 f8ce 	bl	8007660 <I2C_IsAcknowledgeFailed>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e02d      	b.n	800752a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074d4:	d021      	beq.n	800751a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074d6:	f7fe fa39 	bl	800594c <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d302      	bcc.n	80074ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d116      	bne.n	800751a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007506:	f043 0220 	orr.w	r2, r3, #32
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e007      	b.n	800752a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007524:	2b80      	cmp	r3, #128	; 0x80
 8007526:	d1ca      	bne.n	80074be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b084      	sub	sp, #16
 8007536:	af00      	add	r7, sp, #0
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800753e:	e02d      	b.n	800759c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 f88d 	bl	8007660 <I2C_IsAcknowledgeFailed>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e02d      	b.n	80075ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007556:	d021      	beq.n	800759c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007558:	f7fe f9f8 	bl	800594c <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	429a      	cmp	r2, r3
 8007566:	d302      	bcc.n	800756e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d116      	bne.n	800759c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2220      	movs	r2, #32
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007588:	f043 0220 	orr.w	r2, r3, #32
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e007      	b.n	80075ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	f003 0304 	and.w	r3, r3, #4
 80075a6:	2b04      	cmp	r3, #4
 80075a8:	d1ca      	bne.n	8007540 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075c0:	e042      	b.n	8007648 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	f003 0310 	and.w	r3, r3, #16
 80075cc:	2b10      	cmp	r3, #16
 80075ce:	d119      	bne.n	8007604 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f06f 0210 	mvn.w	r2, #16
 80075d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2220      	movs	r2, #32
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e029      	b.n	8007658 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007604:	f7fe f9a2 	bl	800594c <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	429a      	cmp	r2, r3
 8007612:	d302      	bcc.n	800761a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d116      	bne.n	8007648 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2220      	movs	r2, #32
 8007624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007634:	f043 0220 	orr.w	r2, r3, #32
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e007      	b.n	8007658 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007652:	2b40      	cmp	r3, #64	; 0x40
 8007654:	d1b5      	bne.n	80075c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007676:	d11b      	bne.n	80076b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007680:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2220      	movs	r2, #32
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769c:	f043 0204 	orr.w	r2, r3, #4
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e000      	b.n	80076b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	370c      	adds	r7, #12
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
	...

080076c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e267      	b.n	8007ba2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d075      	beq.n	80077ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076de:	4b88      	ldr	r3, [pc, #544]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f003 030c 	and.w	r3, r3, #12
 80076e6:	2b04      	cmp	r3, #4
 80076e8:	d00c      	beq.n	8007704 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076ea:	4b85      	ldr	r3, [pc, #532]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076f2:	2b08      	cmp	r3, #8
 80076f4:	d112      	bne.n	800771c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076f6:	4b82      	ldr	r3, [pc, #520]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007702:	d10b      	bne.n	800771c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007704:	4b7e      	ldr	r3, [pc, #504]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d05b      	beq.n	80077c8 <HAL_RCC_OscConfig+0x108>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d157      	bne.n	80077c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e242      	b.n	8007ba2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007724:	d106      	bne.n	8007734 <HAL_RCC_OscConfig+0x74>
 8007726:	4b76      	ldr	r3, [pc, #472]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a75      	ldr	r2, [pc, #468]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 800772c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007730:	6013      	str	r3, [r2, #0]
 8007732:	e01d      	b.n	8007770 <HAL_RCC_OscConfig+0xb0>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800773c:	d10c      	bne.n	8007758 <HAL_RCC_OscConfig+0x98>
 800773e:	4b70      	ldr	r3, [pc, #448]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a6f      	ldr	r2, [pc, #444]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 8007744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	4b6d      	ldr	r3, [pc, #436]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a6c      	ldr	r2, [pc, #432]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 8007750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007754:	6013      	str	r3, [r2, #0]
 8007756:	e00b      	b.n	8007770 <HAL_RCC_OscConfig+0xb0>
 8007758:	4b69      	ldr	r3, [pc, #420]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a68      	ldr	r2, [pc, #416]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 800775e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007762:	6013      	str	r3, [r2, #0]
 8007764:	4b66      	ldr	r3, [pc, #408]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a65      	ldr	r2, [pc, #404]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 800776a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800776e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d013      	beq.n	80077a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007778:	f7fe f8e8 	bl	800594c <HAL_GetTick>
 800777c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800777e:	e008      	b.n	8007792 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007780:	f7fe f8e4 	bl	800594c <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	2b64      	cmp	r3, #100	; 0x64
 800778c:	d901      	bls.n	8007792 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e207      	b.n	8007ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007792:	4b5b      	ldr	r3, [pc, #364]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0f0      	beq.n	8007780 <HAL_RCC_OscConfig+0xc0>
 800779e:	e014      	b.n	80077ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077a0:	f7fe f8d4 	bl	800594c <HAL_GetTick>
 80077a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077a6:	e008      	b.n	80077ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077a8:	f7fe f8d0 	bl	800594c <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	2b64      	cmp	r3, #100	; 0x64
 80077b4:	d901      	bls.n	80077ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e1f3      	b.n	8007ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077ba:	4b51      	ldr	r3, [pc, #324]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1f0      	bne.n	80077a8 <HAL_RCC_OscConfig+0xe8>
 80077c6:	e000      	b.n	80077ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d063      	beq.n	800789e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077d6:	4b4a      	ldr	r3, [pc, #296]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f003 030c 	and.w	r3, r3, #12
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00b      	beq.n	80077fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077e2:	4b47      	ldr	r3, [pc, #284]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077ea:	2b08      	cmp	r3, #8
 80077ec:	d11c      	bne.n	8007828 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077ee:	4b44      	ldr	r3, [pc, #272]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d116      	bne.n	8007828 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077fa:	4b41      	ldr	r3, [pc, #260]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b00      	cmp	r3, #0
 8007804:	d005      	beq.n	8007812 <HAL_RCC_OscConfig+0x152>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d001      	beq.n	8007812 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e1c7      	b.n	8007ba2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007812:	4b3b      	ldr	r3, [pc, #236]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	00db      	lsls	r3, r3, #3
 8007820:	4937      	ldr	r1, [pc, #220]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 8007822:	4313      	orrs	r3, r2
 8007824:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007826:	e03a      	b.n	800789e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d020      	beq.n	8007872 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007830:	4b34      	ldr	r3, [pc, #208]	; (8007904 <HAL_RCC_OscConfig+0x244>)
 8007832:	2201      	movs	r2, #1
 8007834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007836:	f7fe f889 	bl	800594c <HAL_GetTick>
 800783a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800783c:	e008      	b.n	8007850 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800783e:	f7fe f885 	bl	800594c <HAL_GetTick>
 8007842:	4602      	mov	r2, r0
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	2b02      	cmp	r3, #2
 800784a:	d901      	bls.n	8007850 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	e1a8      	b.n	8007ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007850:	4b2b      	ldr	r3, [pc, #172]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0302 	and.w	r3, r3, #2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d0f0      	beq.n	800783e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800785c:	4b28      	ldr	r3, [pc, #160]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	00db      	lsls	r3, r3, #3
 800786a:	4925      	ldr	r1, [pc, #148]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 800786c:	4313      	orrs	r3, r2
 800786e:	600b      	str	r3, [r1, #0]
 8007870:	e015      	b.n	800789e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007872:	4b24      	ldr	r3, [pc, #144]	; (8007904 <HAL_RCC_OscConfig+0x244>)
 8007874:	2200      	movs	r2, #0
 8007876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007878:	f7fe f868 	bl	800594c <HAL_GetTick>
 800787c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800787e:	e008      	b.n	8007892 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007880:	f7fe f864 	bl	800594c <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	2b02      	cmp	r3, #2
 800788c:	d901      	bls.n	8007892 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e187      	b.n	8007ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007892:	4b1b      	ldr	r3, [pc, #108]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1f0      	bne.n	8007880 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0308 	and.w	r3, r3, #8
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d036      	beq.n	8007918 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d016      	beq.n	80078e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078b2:	4b15      	ldr	r3, [pc, #84]	; (8007908 <HAL_RCC_OscConfig+0x248>)
 80078b4:	2201      	movs	r2, #1
 80078b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b8:	f7fe f848 	bl	800594c <HAL_GetTick>
 80078bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078be:	e008      	b.n	80078d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078c0:	f7fe f844 	bl	800594c <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d901      	bls.n	80078d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e167      	b.n	8007ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078d2:	4b0b      	ldr	r3, [pc, #44]	; (8007900 <HAL_RCC_OscConfig+0x240>)
 80078d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d0f0      	beq.n	80078c0 <HAL_RCC_OscConfig+0x200>
 80078de:	e01b      	b.n	8007918 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078e0:	4b09      	ldr	r3, [pc, #36]	; (8007908 <HAL_RCC_OscConfig+0x248>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078e6:	f7fe f831 	bl	800594c <HAL_GetTick>
 80078ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078ec:	e00e      	b.n	800790c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078ee:	f7fe f82d 	bl	800594c <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d907      	bls.n	800790c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e150      	b.n	8007ba2 <HAL_RCC_OscConfig+0x4e2>
 8007900:	40023800 	.word	0x40023800
 8007904:	42470000 	.word	0x42470000
 8007908:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800790c:	4b88      	ldr	r3, [pc, #544]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 800790e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1ea      	bne.n	80078ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 8097 	beq.w	8007a54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007926:	2300      	movs	r3, #0
 8007928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800792a:	4b81      	ldr	r3, [pc, #516]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 800792c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10f      	bne.n	8007956 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007936:	2300      	movs	r3, #0
 8007938:	60bb      	str	r3, [r7, #8]
 800793a:	4b7d      	ldr	r3, [pc, #500]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	4a7c      	ldr	r2, [pc, #496]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 8007940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007944:	6413      	str	r3, [r2, #64]	; 0x40
 8007946:	4b7a      	ldr	r3, [pc, #488]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 8007948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800794e:	60bb      	str	r3, [r7, #8]
 8007950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007952:	2301      	movs	r3, #1
 8007954:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007956:	4b77      	ldr	r3, [pc, #476]	; (8007b34 <HAL_RCC_OscConfig+0x474>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800795e:	2b00      	cmp	r3, #0
 8007960:	d118      	bne.n	8007994 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007962:	4b74      	ldr	r3, [pc, #464]	; (8007b34 <HAL_RCC_OscConfig+0x474>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a73      	ldr	r2, [pc, #460]	; (8007b34 <HAL_RCC_OscConfig+0x474>)
 8007968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800796c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800796e:	f7fd ffed 	bl	800594c <HAL_GetTick>
 8007972:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007974:	e008      	b.n	8007988 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007976:	f7fd ffe9 	bl	800594c <HAL_GetTick>
 800797a:	4602      	mov	r2, r0
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	2b02      	cmp	r3, #2
 8007982:	d901      	bls.n	8007988 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e10c      	b.n	8007ba2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007988:	4b6a      	ldr	r3, [pc, #424]	; (8007b34 <HAL_RCC_OscConfig+0x474>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007990:	2b00      	cmp	r3, #0
 8007992:	d0f0      	beq.n	8007976 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d106      	bne.n	80079aa <HAL_RCC_OscConfig+0x2ea>
 800799c:	4b64      	ldr	r3, [pc, #400]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 800799e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a0:	4a63      	ldr	r2, [pc, #396]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 80079a2:	f043 0301 	orr.w	r3, r3, #1
 80079a6:	6713      	str	r3, [r2, #112]	; 0x70
 80079a8:	e01c      	b.n	80079e4 <HAL_RCC_OscConfig+0x324>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	2b05      	cmp	r3, #5
 80079b0:	d10c      	bne.n	80079cc <HAL_RCC_OscConfig+0x30c>
 80079b2:	4b5f      	ldr	r3, [pc, #380]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 80079b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b6:	4a5e      	ldr	r2, [pc, #376]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 80079b8:	f043 0304 	orr.w	r3, r3, #4
 80079bc:	6713      	str	r3, [r2, #112]	; 0x70
 80079be:	4b5c      	ldr	r3, [pc, #368]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 80079c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c2:	4a5b      	ldr	r2, [pc, #364]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 80079c4:	f043 0301 	orr.w	r3, r3, #1
 80079c8:	6713      	str	r3, [r2, #112]	; 0x70
 80079ca:	e00b      	b.n	80079e4 <HAL_RCC_OscConfig+0x324>
 80079cc:	4b58      	ldr	r3, [pc, #352]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 80079ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d0:	4a57      	ldr	r2, [pc, #348]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 80079d2:	f023 0301 	bic.w	r3, r3, #1
 80079d6:	6713      	str	r3, [r2, #112]	; 0x70
 80079d8:	4b55      	ldr	r3, [pc, #340]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 80079da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079dc:	4a54      	ldr	r2, [pc, #336]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 80079de:	f023 0304 	bic.w	r3, r3, #4
 80079e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d015      	beq.n	8007a18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079ec:	f7fd ffae 	bl	800594c <HAL_GetTick>
 80079f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079f2:	e00a      	b.n	8007a0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079f4:	f7fd ffaa 	bl	800594c <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d901      	bls.n	8007a0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e0cb      	b.n	8007ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a0a:	4b49      	ldr	r3, [pc, #292]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 8007a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0ee      	beq.n	80079f4 <HAL_RCC_OscConfig+0x334>
 8007a16:	e014      	b.n	8007a42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a18:	f7fd ff98 	bl	800594c <HAL_GetTick>
 8007a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a1e:	e00a      	b.n	8007a36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a20:	f7fd ff94 	bl	800594c <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d901      	bls.n	8007a36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e0b5      	b.n	8007ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a36:	4b3e      	ldr	r3, [pc, #248]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 8007a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1ee      	bne.n	8007a20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a42:	7dfb      	ldrb	r3, [r7, #23]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d105      	bne.n	8007a54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a48:	4b39      	ldr	r3, [pc, #228]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 8007a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4c:	4a38      	ldr	r2, [pc, #224]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 8007a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 80a1 	beq.w	8007ba0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a5e:	4b34      	ldr	r3, [pc, #208]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f003 030c 	and.w	r3, r3, #12
 8007a66:	2b08      	cmp	r3, #8
 8007a68:	d05c      	beq.n	8007b24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d141      	bne.n	8007af6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a72:	4b31      	ldr	r3, [pc, #196]	; (8007b38 <HAL_RCC_OscConfig+0x478>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a78:	f7fd ff68 	bl	800594c <HAL_GetTick>
 8007a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a7e:	e008      	b.n	8007a92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a80:	f7fd ff64 	bl	800594c <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d901      	bls.n	8007a92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e087      	b.n	8007ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a92:	4b27      	ldr	r3, [pc, #156]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1f0      	bne.n	8007a80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	69da      	ldr	r2, [r3, #28]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	019b      	lsls	r3, r3, #6
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab4:	085b      	lsrs	r3, r3, #1
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	041b      	lsls	r3, r3, #16
 8007aba:	431a      	orrs	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac0:	061b      	lsls	r3, r3, #24
 8007ac2:	491b      	ldr	r1, [pc, #108]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ac8:	4b1b      	ldr	r3, [pc, #108]	; (8007b38 <HAL_RCC_OscConfig+0x478>)
 8007aca:	2201      	movs	r2, #1
 8007acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ace:	f7fd ff3d 	bl	800594c <HAL_GetTick>
 8007ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ad4:	e008      	b.n	8007ae8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ad6:	f7fd ff39 	bl	800594c <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d901      	bls.n	8007ae8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e05c      	b.n	8007ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ae8:	4b11      	ldr	r3, [pc, #68]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d0f0      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x416>
 8007af4:	e054      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007af6:	4b10      	ldr	r3, [pc, #64]	; (8007b38 <HAL_RCC_OscConfig+0x478>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007afc:	f7fd ff26 	bl	800594c <HAL_GetTick>
 8007b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b02:	e008      	b.n	8007b16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b04:	f7fd ff22 	bl	800594c <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d901      	bls.n	8007b16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e045      	b.n	8007ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b16:	4b06      	ldr	r3, [pc, #24]	; (8007b30 <HAL_RCC_OscConfig+0x470>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1f0      	bne.n	8007b04 <HAL_RCC_OscConfig+0x444>
 8007b22:	e03d      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d107      	bne.n	8007b3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e038      	b.n	8007ba2 <HAL_RCC_OscConfig+0x4e2>
 8007b30:	40023800 	.word	0x40023800
 8007b34:	40007000 	.word	0x40007000
 8007b38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b3c:	4b1b      	ldr	r3, [pc, #108]	; (8007bac <HAL_RCC_OscConfig+0x4ec>)
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d028      	beq.n	8007b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d121      	bne.n	8007b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d11a      	bne.n	8007b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d111      	bne.n	8007b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b82:	085b      	lsrs	r3, r3, #1
 8007b84:	3b01      	subs	r3, #1
 8007b86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d107      	bne.n	8007b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d001      	beq.n	8007ba0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e000      	b.n	8007ba2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3718      	adds	r7, #24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	40023800 	.word	0x40023800

08007bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e0cc      	b.n	8007d5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007bc4:	4b68      	ldr	r3, [pc, #416]	; (8007d68 <HAL_RCC_ClockConfig+0x1b8>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0307 	and.w	r3, r3, #7
 8007bcc:	683a      	ldr	r2, [r7, #0]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d90c      	bls.n	8007bec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bd2:	4b65      	ldr	r3, [pc, #404]	; (8007d68 <HAL_RCC_ClockConfig+0x1b8>)
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	b2d2      	uxtb	r2, r2
 8007bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bda:	4b63      	ldr	r3, [pc, #396]	; (8007d68 <HAL_RCC_ClockConfig+0x1b8>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0307 	and.w	r3, r3, #7
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d001      	beq.n	8007bec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e0b8      	b.n	8007d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0302 	and.w	r3, r3, #2
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d020      	beq.n	8007c3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0304 	and.w	r3, r3, #4
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d005      	beq.n	8007c10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c04:	4b59      	ldr	r3, [pc, #356]	; (8007d6c <HAL_RCC_ClockConfig+0x1bc>)
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	4a58      	ldr	r2, [pc, #352]	; (8007d6c <HAL_RCC_ClockConfig+0x1bc>)
 8007c0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0308 	and.w	r3, r3, #8
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d005      	beq.n	8007c28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c1c:	4b53      	ldr	r3, [pc, #332]	; (8007d6c <HAL_RCC_ClockConfig+0x1bc>)
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	4a52      	ldr	r2, [pc, #328]	; (8007d6c <HAL_RCC_ClockConfig+0x1bc>)
 8007c22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c28:	4b50      	ldr	r3, [pc, #320]	; (8007d6c <HAL_RCC_ClockConfig+0x1bc>)
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	494d      	ldr	r1, [pc, #308]	; (8007d6c <HAL_RCC_ClockConfig+0x1bc>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d044      	beq.n	8007cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d107      	bne.n	8007c5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c4e:	4b47      	ldr	r3, [pc, #284]	; (8007d6c <HAL_RCC_ClockConfig+0x1bc>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d119      	bne.n	8007c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e07f      	b.n	8007d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d003      	beq.n	8007c6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c6a:	2b03      	cmp	r3, #3
 8007c6c:	d107      	bne.n	8007c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c6e:	4b3f      	ldr	r3, [pc, #252]	; (8007d6c <HAL_RCC_ClockConfig+0x1bc>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d109      	bne.n	8007c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e06f      	b.n	8007d5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c7e:	4b3b      	ldr	r3, [pc, #236]	; (8007d6c <HAL_RCC_ClockConfig+0x1bc>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0302 	and.w	r3, r3, #2
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e067      	b.n	8007d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c8e:	4b37      	ldr	r3, [pc, #220]	; (8007d6c <HAL_RCC_ClockConfig+0x1bc>)
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f023 0203 	bic.w	r2, r3, #3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	4934      	ldr	r1, [pc, #208]	; (8007d6c <HAL_RCC_ClockConfig+0x1bc>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ca0:	f7fd fe54 	bl	800594c <HAL_GetTick>
 8007ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ca6:	e00a      	b.n	8007cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ca8:	f7fd fe50 	bl	800594c <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d901      	bls.n	8007cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e04f      	b.n	8007d5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cbe:	4b2b      	ldr	r3, [pc, #172]	; (8007d6c <HAL_RCC_ClockConfig+0x1bc>)
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f003 020c 	and.w	r2, r3, #12
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d1eb      	bne.n	8007ca8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007cd0:	4b25      	ldr	r3, [pc, #148]	; (8007d68 <HAL_RCC_ClockConfig+0x1b8>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0307 	and.w	r3, r3, #7
 8007cd8:	683a      	ldr	r2, [r7, #0]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d20c      	bcs.n	8007cf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cde:	4b22      	ldr	r3, [pc, #136]	; (8007d68 <HAL_RCC_ClockConfig+0x1b8>)
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	b2d2      	uxtb	r2, r2
 8007ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ce6:	4b20      	ldr	r3, [pc, #128]	; (8007d68 <HAL_RCC_ClockConfig+0x1b8>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0307 	and.w	r3, r3, #7
 8007cee:	683a      	ldr	r2, [r7, #0]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d001      	beq.n	8007cf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e032      	b.n	8007d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0304 	and.w	r3, r3, #4
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d008      	beq.n	8007d16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d04:	4b19      	ldr	r3, [pc, #100]	; (8007d6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	4916      	ldr	r1, [pc, #88]	; (8007d6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0308 	and.w	r3, r3, #8
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d009      	beq.n	8007d36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d22:	4b12      	ldr	r3, [pc, #72]	; (8007d6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	00db      	lsls	r3, r3, #3
 8007d30:	490e      	ldr	r1, [pc, #56]	; (8007d6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d36:	f000 f821 	bl	8007d7c <HAL_RCC_GetSysClockFreq>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	4b0b      	ldr	r3, [pc, #44]	; (8007d6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	091b      	lsrs	r3, r3, #4
 8007d42:	f003 030f 	and.w	r3, r3, #15
 8007d46:	490a      	ldr	r1, [pc, #40]	; (8007d70 <HAL_RCC_ClockConfig+0x1c0>)
 8007d48:	5ccb      	ldrb	r3, [r1, r3]
 8007d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d4e:	4a09      	ldr	r2, [pc, #36]	; (8007d74 <HAL_RCC_ClockConfig+0x1c4>)
 8007d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d52:	4b09      	ldr	r3, [pc, #36]	; (8007d78 <HAL_RCC_ClockConfig+0x1c8>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fd fdb4 	bl	80058c4 <HAL_InitTick>

  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	40023c00 	.word	0x40023c00
 8007d6c:	40023800 	.word	0x40023800
 8007d70:	0800f604 	.word	0x0800f604
 8007d74:	20000014 	.word	0x20000014
 8007d78:	20000018 	.word	0x20000018

08007d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d80:	b090      	sub	sp, #64	; 0x40
 8007d82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	637b      	str	r3, [r7, #52]	; 0x34
 8007d88:	2300      	movs	r3, #0
 8007d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007d90:	2300      	movs	r3, #0
 8007d92:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d94:	4b59      	ldr	r3, [pc, #356]	; (8007efc <HAL_RCC_GetSysClockFreq+0x180>)
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f003 030c 	and.w	r3, r3, #12
 8007d9c:	2b08      	cmp	r3, #8
 8007d9e:	d00d      	beq.n	8007dbc <HAL_RCC_GetSysClockFreq+0x40>
 8007da0:	2b08      	cmp	r3, #8
 8007da2:	f200 80a1 	bhi.w	8007ee8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d002      	beq.n	8007db0 <HAL_RCC_GetSysClockFreq+0x34>
 8007daa:	2b04      	cmp	r3, #4
 8007dac:	d003      	beq.n	8007db6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007dae:	e09b      	b.n	8007ee8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007db0:	4b53      	ldr	r3, [pc, #332]	; (8007f00 <HAL_RCC_GetSysClockFreq+0x184>)
 8007db2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007db4:	e09b      	b.n	8007eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007db6:	4b53      	ldr	r3, [pc, #332]	; (8007f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8007db8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007dba:	e098      	b.n	8007eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007dbc:	4b4f      	ldr	r3, [pc, #316]	; (8007efc <HAL_RCC_GetSysClockFreq+0x180>)
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dc4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007dc6:	4b4d      	ldr	r3, [pc, #308]	; (8007efc <HAL_RCC_GetSysClockFreq+0x180>)
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d028      	beq.n	8007e24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dd2:	4b4a      	ldr	r3, [pc, #296]	; (8007efc <HAL_RCC_GetSysClockFreq+0x180>)
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	099b      	lsrs	r3, r3, #6
 8007dd8:	2200      	movs	r2, #0
 8007dda:	623b      	str	r3, [r7, #32]
 8007ddc:	627a      	str	r2, [r7, #36]	; 0x24
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007de4:	2100      	movs	r1, #0
 8007de6:	4b47      	ldr	r3, [pc, #284]	; (8007f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8007de8:	fb03 f201 	mul.w	r2, r3, r1
 8007dec:	2300      	movs	r3, #0
 8007dee:	fb00 f303 	mul.w	r3, r0, r3
 8007df2:	4413      	add	r3, r2
 8007df4:	4a43      	ldr	r2, [pc, #268]	; (8007f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8007df6:	fba0 1202 	umull	r1, r2, r0, r2
 8007dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dfc:	460a      	mov	r2, r1
 8007dfe:	62ba      	str	r2, [r7, #40]	; 0x28
 8007e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e02:	4413      	add	r3, r2
 8007e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e08:	2200      	movs	r2, #0
 8007e0a:	61bb      	str	r3, [r7, #24]
 8007e0c:	61fa      	str	r2, [r7, #28]
 8007e0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e16:	f7f8 ff37 	bl	8000c88 <__aeabi_uldivmod>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4613      	mov	r3, r2
 8007e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e22:	e053      	b.n	8007ecc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e24:	4b35      	ldr	r3, [pc, #212]	; (8007efc <HAL_RCC_GetSysClockFreq+0x180>)
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	099b      	lsrs	r3, r3, #6
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	613b      	str	r3, [r7, #16]
 8007e2e:	617a      	str	r2, [r7, #20]
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007e36:	f04f 0b00 	mov.w	fp, #0
 8007e3a:	4652      	mov	r2, sl
 8007e3c:	465b      	mov	r3, fp
 8007e3e:	f04f 0000 	mov.w	r0, #0
 8007e42:	f04f 0100 	mov.w	r1, #0
 8007e46:	0159      	lsls	r1, r3, #5
 8007e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e4c:	0150      	lsls	r0, r2, #5
 8007e4e:	4602      	mov	r2, r0
 8007e50:	460b      	mov	r3, r1
 8007e52:	ebb2 080a 	subs.w	r8, r2, sl
 8007e56:	eb63 090b 	sbc.w	r9, r3, fp
 8007e5a:	f04f 0200 	mov.w	r2, #0
 8007e5e:	f04f 0300 	mov.w	r3, #0
 8007e62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007e66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007e6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007e6e:	ebb2 0408 	subs.w	r4, r2, r8
 8007e72:	eb63 0509 	sbc.w	r5, r3, r9
 8007e76:	f04f 0200 	mov.w	r2, #0
 8007e7a:	f04f 0300 	mov.w	r3, #0
 8007e7e:	00eb      	lsls	r3, r5, #3
 8007e80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e84:	00e2      	lsls	r2, r4, #3
 8007e86:	4614      	mov	r4, r2
 8007e88:	461d      	mov	r5, r3
 8007e8a:	eb14 030a 	adds.w	r3, r4, sl
 8007e8e:	603b      	str	r3, [r7, #0]
 8007e90:	eb45 030b 	adc.w	r3, r5, fp
 8007e94:	607b      	str	r3, [r7, #4]
 8007e96:	f04f 0200 	mov.w	r2, #0
 8007e9a:	f04f 0300 	mov.w	r3, #0
 8007e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	028b      	lsls	r3, r1, #10
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007eac:	4621      	mov	r1, r4
 8007eae:	028a      	lsls	r2, r1, #10
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	60bb      	str	r3, [r7, #8]
 8007eba:	60fa      	str	r2, [r7, #12]
 8007ebc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ec0:	f7f8 fee2 	bl	8000c88 <__aeabi_uldivmod>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4613      	mov	r3, r2
 8007eca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ecc:	4b0b      	ldr	r3, [pc, #44]	; (8007efc <HAL_RCC_GetSysClockFreq+0x180>)
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	0c1b      	lsrs	r3, r3, #16
 8007ed2:	f003 0303 	and.w	r3, r3, #3
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	005b      	lsls	r3, r3, #1
 8007eda:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007edc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007ee6:	e002      	b.n	8007eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ee8:	4b05      	ldr	r3, [pc, #20]	; (8007f00 <HAL_RCC_GetSysClockFreq+0x184>)
 8007eea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3740      	adds	r7, #64	; 0x40
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007efa:	bf00      	nop
 8007efc:	40023800 	.word	0x40023800
 8007f00:	00f42400 	.word	0x00f42400
 8007f04:	017d7840 	.word	0x017d7840

08007f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f0c:	4b03      	ldr	r3, [pc, #12]	; (8007f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	20000014 	.word	0x20000014

08007f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f24:	f7ff fff0 	bl	8007f08 <HAL_RCC_GetHCLKFreq>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	4b05      	ldr	r3, [pc, #20]	; (8007f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	0a9b      	lsrs	r3, r3, #10
 8007f30:	f003 0307 	and.w	r3, r3, #7
 8007f34:	4903      	ldr	r1, [pc, #12]	; (8007f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f36:	5ccb      	ldrb	r3, [r1, r3]
 8007f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	40023800 	.word	0x40023800
 8007f44:	0800f614 	.word	0x0800f614

08007f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007f4c:	f7ff ffdc 	bl	8007f08 <HAL_RCC_GetHCLKFreq>
 8007f50:	4602      	mov	r2, r0
 8007f52:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	0b5b      	lsrs	r3, r3, #13
 8007f58:	f003 0307 	and.w	r3, r3, #7
 8007f5c:	4903      	ldr	r1, [pc, #12]	; (8007f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f5e:	5ccb      	ldrb	r3, [r1, r3]
 8007f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	40023800 	.word	0x40023800
 8007f6c:	0800f614 	.word	0x0800f614

08007f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d101      	bne.n	8007f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e041      	b.n	8008006 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d106      	bne.n	8007f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7fd f994 	bl	80052c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	3304      	adds	r3, #4
 8007fac:	4619      	mov	r1, r3
 8007fae:	4610      	mov	r0, r2
 8007fb0:	f000 fda4 	bl	8008afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
	...

08008010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b01      	cmp	r3, #1
 8008022:	d001      	beq.n	8008028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e04e      	b.n	80080c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68da      	ldr	r2, [r3, #12]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f042 0201 	orr.w	r2, r2, #1
 800803e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a23      	ldr	r2, [pc, #140]	; (80080d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d022      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008052:	d01d      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a1f      	ldr	r2, [pc, #124]	; (80080d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d018      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a1e      	ldr	r2, [pc, #120]	; (80080dc <HAL_TIM_Base_Start_IT+0xcc>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d013      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a1c      	ldr	r2, [pc, #112]	; (80080e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d00e      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a1b      	ldr	r2, [pc, #108]	; (80080e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d009      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a19      	ldr	r2, [pc, #100]	; (80080e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d004      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x80>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a18      	ldr	r2, [pc, #96]	; (80080ec <HAL_TIM_Base_Start_IT+0xdc>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d111      	bne.n	80080b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f003 0307 	and.w	r3, r3, #7
 800809a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b06      	cmp	r3, #6
 80080a0:	d010      	beq.n	80080c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f042 0201 	orr.w	r2, r2, #1
 80080b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080b2:	e007      	b.n	80080c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f042 0201 	orr.w	r2, r2, #1
 80080c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	40010000 	.word	0x40010000
 80080d8:	40000400 	.word	0x40000400
 80080dc:	40000800 	.word	0x40000800
 80080e0:	40000c00 	.word	0x40000c00
 80080e4:	40010400 	.word	0x40010400
 80080e8:	40014000 	.word	0x40014000
 80080ec:	40001800 	.word	0x40001800

080080f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e041      	b.n	8008186 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d106      	bne.n	800811c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7fd f8b4 	bl	8005284 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2202      	movs	r2, #2
 8008120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	3304      	adds	r3, #4
 800812c:	4619      	mov	r1, r3
 800812e:	4610      	mov	r0, r2
 8008130:	f000 fce4 	bl	8008afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
	...

08008190 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d109      	bne.n	80081b4 <HAL_TIM_PWM_Start+0x24>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	bf14      	ite	ne
 80081ac:	2301      	movne	r3, #1
 80081ae:	2300      	moveq	r3, #0
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	e022      	b.n	80081fa <HAL_TIM_PWM_Start+0x6a>
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2b04      	cmp	r3, #4
 80081b8:	d109      	bne.n	80081ce <HAL_TIM_PWM_Start+0x3e>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	bf14      	ite	ne
 80081c6:	2301      	movne	r3, #1
 80081c8:	2300      	moveq	r3, #0
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	e015      	b.n	80081fa <HAL_TIM_PWM_Start+0x6a>
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b08      	cmp	r3, #8
 80081d2:	d109      	bne.n	80081e8 <HAL_TIM_PWM_Start+0x58>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b01      	cmp	r3, #1
 80081de:	bf14      	ite	ne
 80081e0:	2301      	movne	r3, #1
 80081e2:	2300      	moveq	r3, #0
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	e008      	b.n	80081fa <HAL_TIM_PWM_Start+0x6a>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	bf14      	ite	ne
 80081f4:	2301      	movne	r3, #1
 80081f6:	2300      	moveq	r3, #0
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e07c      	b.n	80082fc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d104      	bne.n	8008212 <HAL_TIM_PWM_Start+0x82>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2202      	movs	r2, #2
 800820c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008210:	e013      	b.n	800823a <HAL_TIM_PWM_Start+0xaa>
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b04      	cmp	r3, #4
 8008216:	d104      	bne.n	8008222 <HAL_TIM_PWM_Start+0x92>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2202      	movs	r2, #2
 800821c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008220:	e00b      	b.n	800823a <HAL_TIM_PWM_Start+0xaa>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b08      	cmp	r3, #8
 8008226:	d104      	bne.n	8008232 <HAL_TIM_PWM_Start+0xa2>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008230:	e003      	b.n	800823a <HAL_TIM_PWM_Start+0xaa>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2202      	movs	r2, #2
 8008236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2201      	movs	r2, #1
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	4618      	mov	r0, r3
 8008244:	f000 ff44 	bl	80090d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a2d      	ldr	r2, [pc, #180]	; (8008304 <HAL_TIM_PWM_Start+0x174>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d004      	beq.n	800825c <HAL_TIM_PWM_Start+0xcc>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a2c      	ldr	r2, [pc, #176]	; (8008308 <HAL_TIM_PWM_Start+0x178>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d101      	bne.n	8008260 <HAL_TIM_PWM_Start+0xd0>
 800825c:	2301      	movs	r3, #1
 800825e:	e000      	b.n	8008262 <HAL_TIM_PWM_Start+0xd2>
 8008260:	2300      	movs	r3, #0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d007      	beq.n	8008276 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008274:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a22      	ldr	r2, [pc, #136]	; (8008304 <HAL_TIM_PWM_Start+0x174>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d022      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x136>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008288:	d01d      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x136>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a1f      	ldr	r2, [pc, #124]	; (800830c <HAL_TIM_PWM_Start+0x17c>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d018      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x136>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a1d      	ldr	r2, [pc, #116]	; (8008310 <HAL_TIM_PWM_Start+0x180>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d013      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x136>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a1c      	ldr	r2, [pc, #112]	; (8008314 <HAL_TIM_PWM_Start+0x184>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d00e      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x136>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a16      	ldr	r2, [pc, #88]	; (8008308 <HAL_TIM_PWM_Start+0x178>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d009      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x136>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a18      	ldr	r2, [pc, #96]	; (8008318 <HAL_TIM_PWM_Start+0x188>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d004      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x136>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a16      	ldr	r2, [pc, #88]	; (800831c <HAL_TIM_PWM_Start+0x18c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d111      	bne.n	80082ea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f003 0307 	and.w	r3, r3, #7
 80082d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b06      	cmp	r3, #6
 80082d6:	d010      	beq.n	80082fa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f042 0201 	orr.w	r2, r2, #1
 80082e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082e8:	e007      	b.n	80082fa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f042 0201 	orr.w	r2, r2, #1
 80082f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	40010000 	.word	0x40010000
 8008308:	40010400 	.word	0x40010400
 800830c:	40000400 	.word	0x40000400
 8008310:	40000800 	.word	0x40000800
 8008314:	40000c00 	.word	0x40000c00
 8008318:	40014000 	.word	0x40014000
 800831c:	40001800 	.word	0x40001800

08008320 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e097      	b.n	8008464 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b00      	cmp	r3, #0
 800833e:	d106      	bne.n	800834e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7fc ff1d 	bl	8005188 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2202      	movs	r2, #2
 8008352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	6812      	ldr	r2, [r2, #0]
 8008360:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008364:	f023 0307 	bic.w	r3, r3, #7
 8008368:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	3304      	adds	r3, #4
 8008372:	4619      	mov	r1, r3
 8008374:	4610      	mov	r0, r2
 8008376:	f000 fbc1 	bl	8008afc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	4313      	orrs	r3, r2
 800839a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083a2:	f023 0303 	bic.w	r3, r3, #3
 80083a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	689a      	ldr	r2, [r3, #8]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	021b      	lsls	r3, r3, #8
 80083b2:	4313      	orrs	r3, r2
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80083c0:	f023 030c 	bic.w	r3, r3, #12
 80083c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	68da      	ldr	r2, [r3, #12]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	021b      	lsls	r3, r3, #8
 80083dc:	4313      	orrs	r3, r2
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	011a      	lsls	r2, r3, #4
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	6a1b      	ldr	r3, [r3, #32]
 80083ee:	031b      	lsls	r3, r3, #12
 80083f0:	4313      	orrs	r3, r2
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80083fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008406:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	011b      	lsls	r3, r3, #4
 8008412:	4313      	orrs	r3, r2
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	4313      	orrs	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2201      	movs	r2, #1
 800843e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3718      	adds	r7, #24
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800847c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008484:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800848c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008494:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d110      	bne.n	80084be <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800849c:	7bfb      	ldrb	r3, [r7, #15]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d102      	bne.n	80084a8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80084a2:	7b7b      	ldrb	r3, [r7, #13]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d001      	beq.n	80084ac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e069      	b.n	8008580 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2202      	movs	r2, #2
 80084b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2202      	movs	r2, #2
 80084b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084bc:	e031      	b.n	8008522 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	d110      	bne.n	80084e6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d102      	bne.n	80084d0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80084ca:	7b3b      	ldrb	r3, [r7, #12]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d001      	beq.n	80084d4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	e055      	b.n	8008580 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2202      	movs	r2, #2
 80084d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2202      	movs	r2, #2
 80084e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084e4:	e01d      	b.n	8008522 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d108      	bne.n	80084fe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d105      	bne.n	80084fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084f2:	7b7b      	ldrb	r3, [r7, #13]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d102      	bne.n	80084fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80084f8:	7b3b      	ldrb	r3, [r7, #12]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d001      	beq.n	8008502 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e03e      	b.n	8008580 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2202      	movs	r2, #2
 8008506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2202      	movs	r2, #2
 800850e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2202      	movs	r2, #2
 8008516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2202      	movs	r2, #2
 800851e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d003      	beq.n	8008530 <HAL_TIM_Encoder_Start+0xc4>
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	2b04      	cmp	r3, #4
 800852c:	d008      	beq.n	8008540 <HAL_TIM_Encoder_Start+0xd4>
 800852e:	e00f      	b.n	8008550 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2201      	movs	r2, #1
 8008536:	2100      	movs	r1, #0
 8008538:	4618      	mov	r0, r3
 800853a:	f000 fdc9 	bl	80090d0 <TIM_CCxChannelCmd>
      break;
 800853e:	e016      	b.n	800856e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2201      	movs	r2, #1
 8008546:	2104      	movs	r1, #4
 8008548:	4618      	mov	r0, r3
 800854a:	f000 fdc1 	bl	80090d0 <TIM_CCxChannelCmd>
      break;
 800854e:	e00e      	b.n	800856e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2201      	movs	r2, #1
 8008556:	2100      	movs	r1, #0
 8008558:	4618      	mov	r0, r3
 800855a:	f000 fdb9 	bl	80090d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2201      	movs	r2, #1
 8008564:	2104      	movs	r1, #4
 8008566:	4618      	mov	r0, r3
 8008568:	f000 fdb2 	bl	80090d0 <TIM_CCxChannelCmd>
      break;
 800856c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f042 0201 	orr.w	r2, r2, #1
 800857c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	2b02      	cmp	r3, #2
 800859c:	d122      	bne.n	80085e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	f003 0302 	and.w	r3, r3, #2
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d11b      	bne.n	80085e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f06f 0202 	mvn.w	r2, #2
 80085b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	f003 0303 	and.w	r3, r3, #3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d003      	beq.n	80085d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fa77 	bl	8008abe <HAL_TIM_IC_CaptureCallback>
 80085d0:	e005      	b.n	80085de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fa69 	bl	8008aaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fa7a 	bl	8008ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	f003 0304 	and.w	r3, r3, #4
 80085ee:	2b04      	cmp	r3, #4
 80085f0:	d122      	bne.n	8008638 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	f003 0304 	and.w	r3, r3, #4
 80085fc:	2b04      	cmp	r3, #4
 80085fe:	d11b      	bne.n	8008638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f06f 0204 	mvn.w	r2, #4
 8008608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2202      	movs	r2, #2
 800860e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fa4d 	bl	8008abe <HAL_TIM_IC_CaptureCallback>
 8008624:	e005      	b.n	8008632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fa3f 	bl	8008aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fa50 	bl	8008ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	f003 0308 	and.w	r3, r3, #8
 8008642:	2b08      	cmp	r3, #8
 8008644:	d122      	bne.n	800868c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	f003 0308 	and.w	r3, r3, #8
 8008650:	2b08      	cmp	r3, #8
 8008652:	d11b      	bne.n	800868c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f06f 0208 	mvn.w	r2, #8
 800865c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2204      	movs	r2, #4
 8008662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	f003 0303 	and.w	r3, r3, #3
 800866e:	2b00      	cmp	r3, #0
 8008670:	d003      	beq.n	800867a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fa23 	bl	8008abe <HAL_TIM_IC_CaptureCallback>
 8008678:	e005      	b.n	8008686 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa15 	bl	8008aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fa26 	bl	8008ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	f003 0310 	and.w	r3, r3, #16
 8008696:	2b10      	cmp	r3, #16
 8008698:	d122      	bne.n	80086e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	f003 0310 	and.w	r3, r3, #16
 80086a4:	2b10      	cmp	r3, #16
 80086a6:	d11b      	bne.n	80086e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f06f 0210 	mvn.w	r2, #16
 80086b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2208      	movs	r2, #8
 80086b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	69db      	ldr	r3, [r3, #28]
 80086be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d003      	beq.n	80086ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f9f9 	bl	8008abe <HAL_TIM_IC_CaptureCallback>
 80086cc:	e005      	b.n	80086da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f9eb 	bl	8008aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f9fc 	bl	8008ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d10e      	bne.n	800870c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d107      	bne.n	800870c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f06f 0201 	mvn.w	r2, #1
 8008704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7f9 fdea 	bl	80022e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008716:	2b80      	cmp	r3, #128	; 0x80
 8008718:	d10e      	bne.n	8008738 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008724:	2b80      	cmp	r3, #128	; 0x80
 8008726:	d107      	bne.n	8008738 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fd78 	bl	8009228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008742:	2b40      	cmp	r3, #64	; 0x40
 8008744:	d10e      	bne.n	8008764 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008750:	2b40      	cmp	r3, #64	; 0x40
 8008752:	d107      	bne.n	8008764 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800875c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f9c1 	bl	8008ae6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	f003 0320 	and.w	r3, r3, #32
 800876e:	2b20      	cmp	r3, #32
 8008770:	d10e      	bne.n	8008790 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f003 0320 	and.w	r3, r3, #32
 800877c:	2b20      	cmp	r3, #32
 800877e:	d107      	bne.n	8008790 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f06f 0220 	mvn.w	r2, #32
 8008788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fd42 	bl	8009214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008790:	bf00      	nop
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d101      	bne.n	80087b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80087b2:	2302      	movs	r3, #2
 80087b4:	e0ae      	b.n	8008914 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2b0c      	cmp	r3, #12
 80087c2:	f200 809f 	bhi.w	8008904 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80087c6:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	08008801 	.word	0x08008801
 80087d0:	08008905 	.word	0x08008905
 80087d4:	08008905 	.word	0x08008905
 80087d8:	08008905 	.word	0x08008905
 80087dc:	08008841 	.word	0x08008841
 80087e0:	08008905 	.word	0x08008905
 80087e4:	08008905 	.word	0x08008905
 80087e8:	08008905 	.word	0x08008905
 80087ec:	08008883 	.word	0x08008883
 80087f0:	08008905 	.word	0x08008905
 80087f4:	08008905 	.word	0x08008905
 80087f8:	08008905 	.word	0x08008905
 80087fc:	080088c3 	.word	0x080088c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68b9      	ldr	r1, [r7, #8]
 8008806:	4618      	mov	r0, r3
 8008808:	f000 fa18 	bl	8008c3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	699a      	ldr	r2, [r3, #24]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f042 0208 	orr.w	r2, r2, #8
 800881a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	699a      	ldr	r2, [r3, #24]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f022 0204 	bic.w	r2, r2, #4
 800882a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6999      	ldr	r1, [r3, #24]
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	691a      	ldr	r2, [r3, #16]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	619a      	str	r2, [r3, #24]
      break;
 800883e:	e064      	b.n	800890a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68b9      	ldr	r1, [r7, #8]
 8008846:	4618      	mov	r0, r3
 8008848:	f000 fa68 	bl	8008d1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	699a      	ldr	r2, [r3, #24]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800885a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	699a      	ldr	r2, [r3, #24]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800886a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6999      	ldr	r1, [r3, #24]
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	021a      	lsls	r2, r3, #8
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	430a      	orrs	r2, r1
 800887e:	619a      	str	r2, [r3, #24]
      break;
 8008880:	e043      	b.n	800890a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68b9      	ldr	r1, [r7, #8]
 8008888:	4618      	mov	r0, r3
 800888a:	f000 fabd 	bl	8008e08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	69da      	ldr	r2, [r3, #28]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f042 0208 	orr.w	r2, r2, #8
 800889c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	69da      	ldr	r2, [r3, #28]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f022 0204 	bic.w	r2, r2, #4
 80088ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	69d9      	ldr	r1, [r3, #28]
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	691a      	ldr	r2, [r3, #16]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	430a      	orrs	r2, r1
 80088be:	61da      	str	r2, [r3, #28]
      break;
 80088c0:	e023      	b.n	800890a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68b9      	ldr	r1, [r7, #8]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 fb11 	bl	8008ef0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	69da      	ldr	r2, [r3, #28]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	69da      	ldr	r2, [r3, #28]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	69d9      	ldr	r1, [r3, #28]
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	021a      	lsls	r2, r3, #8
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	430a      	orrs	r2, r1
 8008900:	61da      	str	r2, [r3, #28]
      break;
 8008902:	e002      	b.n	800890a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	75fb      	strb	r3, [r7, #23]
      break;
 8008908:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008912:	7dfb      	ldrb	r3, [r7, #23]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3718      	adds	r7, #24
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008930:	2b01      	cmp	r3, #1
 8008932:	d101      	bne.n	8008938 <HAL_TIM_ConfigClockSource+0x1c>
 8008934:	2302      	movs	r3, #2
 8008936:	e0b4      	b.n	8008aa2 <HAL_TIM_ConfigClockSource+0x186>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2202      	movs	r2, #2
 8008944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800895e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008970:	d03e      	beq.n	80089f0 <HAL_TIM_ConfigClockSource+0xd4>
 8008972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008976:	f200 8087 	bhi.w	8008a88 <HAL_TIM_ConfigClockSource+0x16c>
 800897a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800897e:	f000 8086 	beq.w	8008a8e <HAL_TIM_ConfigClockSource+0x172>
 8008982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008986:	d87f      	bhi.n	8008a88 <HAL_TIM_ConfigClockSource+0x16c>
 8008988:	2b70      	cmp	r3, #112	; 0x70
 800898a:	d01a      	beq.n	80089c2 <HAL_TIM_ConfigClockSource+0xa6>
 800898c:	2b70      	cmp	r3, #112	; 0x70
 800898e:	d87b      	bhi.n	8008a88 <HAL_TIM_ConfigClockSource+0x16c>
 8008990:	2b60      	cmp	r3, #96	; 0x60
 8008992:	d050      	beq.n	8008a36 <HAL_TIM_ConfigClockSource+0x11a>
 8008994:	2b60      	cmp	r3, #96	; 0x60
 8008996:	d877      	bhi.n	8008a88 <HAL_TIM_ConfigClockSource+0x16c>
 8008998:	2b50      	cmp	r3, #80	; 0x50
 800899a:	d03c      	beq.n	8008a16 <HAL_TIM_ConfigClockSource+0xfa>
 800899c:	2b50      	cmp	r3, #80	; 0x50
 800899e:	d873      	bhi.n	8008a88 <HAL_TIM_ConfigClockSource+0x16c>
 80089a0:	2b40      	cmp	r3, #64	; 0x40
 80089a2:	d058      	beq.n	8008a56 <HAL_TIM_ConfigClockSource+0x13a>
 80089a4:	2b40      	cmp	r3, #64	; 0x40
 80089a6:	d86f      	bhi.n	8008a88 <HAL_TIM_ConfigClockSource+0x16c>
 80089a8:	2b30      	cmp	r3, #48	; 0x30
 80089aa:	d064      	beq.n	8008a76 <HAL_TIM_ConfigClockSource+0x15a>
 80089ac:	2b30      	cmp	r3, #48	; 0x30
 80089ae:	d86b      	bhi.n	8008a88 <HAL_TIM_ConfigClockSource+0x16c>
 80089b0:	2b20      	cmp	r3, #32
 80089b2:	d060      	beq.n	8008a76 <HAL_TIM_ConfigClockSource+0x15a>
 80089b4:	2b20      	cmp	r3, #32
 80089b6:	d867      	bhi.n	8008a88 <HAL_TIM_ConfigClockSource+0x16c>
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d05c      	beq.n	8008a76 <HAL_TIM_ConfigClockSource+0x15a>
 80089bc:	2b10      	cmp	r3, #16
 80089be:	d05a      	beq.n	8008a76 <HAL_TIM_ConfigClockSource+0x15a>
 80089c0:	e062      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6818      	ldr	r0, [r3, #0]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	6899      	ldr	r1, [r3, #8]
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	f000 fb5d 	bl	8009090 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80089e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	609a      	str	r2, [r3, #8]
      break;
 80089ee:	e04f      	b.n	8008a90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6818      	ldr	r0, [r3, #0]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	6899      	ldr	r1, [r3, #8]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	685a      	ldr	r2, [r3, #4]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	f000 fb46 	bl	8009090 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	689a      	ldr	r2, [r3, #8]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a12:	609a      	str	r2, [r3, #8]
      break;
 8008a14:	e03c      	b.n	8008a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6818      	ldr	r0, [r3, #0]
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	6859      	ldr	r1, [r3, #4]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	461a      	mov	r2, r3
 8008a24:	f000 faba 	bl	8008f9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2150      	movs	r1, #80	; 0x50
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 fb13 	bl	800905a <TIM_ITRx_SetConfig>
      break;
 8008a34:	e02c      	b.n	8008a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6818      	ldr	r0, [r3, #0]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	6859      	ldr	r1, [r3, #4]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	461a      	mov	r2, r3
 8008a44:	f000 fad9 	bl	8008ffa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2160      	movs	r1, #96	; 0x60
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f000 fb03 	bl	800905a <TIM_ITRx_SetConfig>
      break;
 8008a54:	e01c      	b.n	8008a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6818      	ldr	r0, [r3, #0]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	6859      	ldr	r1, [r3, #4]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	461a      	mov	r2, r3
 8008a64:	f000 fa9a 	bl	8008f9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2140      	movs	r1, #64	; 0x40
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 faf3 	bl	800905a <TIM_ITRx_SetConfig>
      break;
 8008a74:	e00c      	b.n	8008a90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4619      	mov	r1, r3
 8008a80:	4610      	mov	r0, r2
 8008a82:	f000 faea 	bl	800905a <TIM_ITRx_SetConfig>
      break;
 8008a86:	e003      	b.n	8008a90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a8c:	e000      	b.n	8008a90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b083      	sub	sp, #12
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ab2:	bf00      	nop
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b083      	sub	sp, #12
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ac6:	bf00      	nop
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	b083      	sub	sp, #12
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ada:	bf00      	nop
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b083      	sub	sp, #12
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008aee:	bf00      	nop
 8008af0:	370c      	adds	r7, #12
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
	...

08008afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a40      	ldr	r2, [pc, #256]	; (8008c10 <TIM_Base_SetConfig+0x114>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d013      	beq.n	8008b3c <TIM_Base_SetConfig+0x40>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b1a:	d00f      	beq.n	8008b3c <TIM_Base_SetConfig+0x40>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a3d      	ldr	r2, [pc, #244]	; (8008c14 <TIM_Base_SetConfig+0x118>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d00b      	beq.n	8008b3c <TIM_Base_SetConfig+0x40>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a3c      	ldr	r2, [pc, #240]	; (8008c18 <TIM_Base_SetConfig+0x11c>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d007      	beq.n	8008b3c <TIM_Base_SetConfig+0x40>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a3b      	ldr	r2, [pc, #236]	; (8008c1c <TIM_Base_SetConfig+0x120>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d003      	beq.n	8008b3c <TIM_Base_SetConfig+0x40>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a3a      	ldr	r2, [pc, #232]	; (8008c20 <TIM_Base_SetConfig+0x124>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d108      	bne.n	8008b4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a2f      	ldr	r2, [pc, #188]	; (8008c10 <TIM_Base_SetConfig+0x114>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d02b      	beq.n	8008bae <TIM_Base_SetConfig+0xb2>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b5c:	d027      	beq.n	8008bae <TIM_Base_SetConfig+0xb2>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a2c      	ldr	r2, [pc, #176]	; (8008c14 <TIM_Base_SetConfig+0x118>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d023      	beq.n	8008bae <TIM_Base_SetConfig+0xb2>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a2b      	ldr	r2, [pc, #172]	; (8008c18 <TIM_Base_SetConfig+0x11c>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d01f      	beq.n	8008bae <TIM_Base_SetConfig+0xb2>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a2a      	ldr	r2, [pc, #168]	; (8008c1c <TIM_Base_SetConfig+0x120>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d01b      	beq.n	8008bae <TIM_Base_SetConfig+0xb2>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a29      	ldr	r2, [pc, #164]	; (8008c20 <TIM_Base_SetConfig+0x124>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d017      	beq.n	8008bae <TIM_Base_SetConfig+0xb2>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a28      	ldr	r2, [pc, #160]	; (8008c24 <TIM_Base_SetConfig+0x128>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d013      	beq.n	8008bae <TIM_Base_SetConfig+0xb2>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a27      	ldr	r2, [pc, #156]	; (8008c28 <TIM_Base_SetConfig+0x12c>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d00f      	beq.n	8008bae <TIM_Base_SetConfig+0xb2>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a26      	ldr	r2, [pc, #152]	; (8008c2c <TIM_Base_SetConfig+0x130>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d00b      	beq.n	8008bae <TIM_Base_SetConfig+0xb2>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a25      	ldr	r2, [pc, #148]	; (8008c30 <TIM_Base_SetConfig+0x134>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d007      	beq.n	8008bae <TIM_Base_SetConfig+0xb2>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a24      	ldr	r2, [pc, #144]	; (8008c34 <TIM_Base_SetConfig+0x138>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d003      	beq.n	8008bae <TIM_Base_SetConfig+0xb2>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a23      	ldr	r2, [pc, #140]	; (8008c38 <TIM_Base_SetConfig+0x13c>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d108      	bne.n	8008bc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	689a      	ldr	r2, [r3, #8]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a0a      	ldr	r2, [pc, #40]	; (8008c10 <TIM_Base_SetConfig+0x114>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d003      	beq.n	8008bf4 <TIM_Base_SetConfig+0xf8>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a0c      	ldr	r2, [pc, #48]	; (8008c20 <TIM_Base_SetConfig+0x124>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d103      	bne.n	8008bfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	691a      	ldr	r2, [r3, #16]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	615a      	str	r2, [r3, #20]
}
 8008c02:	bf00      	nop
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	40010000 	.word	0x40010000
 8008c14:	40000400 	.word	0x40000400
 8008c18:	40000800 	.word	0x40000800
 8008c1c:	40000c00 	.word	0x40000c00
 8008c20:	40010400 	.word	0x40010400
 8008c24:	40014000 	.word	0x40014000
 8008c28:	40014400 	.word	0x40014400
 8008c2c:	40014800 	.word	0x40014800
 8008c30:	40001800 	.word	0x40001800
 8008c34:	40001c00 	.word	0x40001c00
 8008c38:	40002000 	.word	0x40002000

08008c3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b087      	sub	sp, #28
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	f023 0201 	bic.w	r2, r3, #1
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a1b      	ldr	r3, [r3, #32]
 8008c56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f023 0303 	bic.w	r3, r3, #3
 8008c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f023 0302 	bic.w	r3, r3, #2
 8008c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a20      	ldr	r2, [pc, #128]	; (8008d14 <TIM_OC1_SetConfig+0xd8>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d003      	beq.n	8008ca0 <TIM_OC1_SetConfig+0x64>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a1f      	ldr	r2, [pc, #124]	; (8008d18 <TIM_OC1_SetConfig+0xdc>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d10c      	bne.n	8008cba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	f023 0308 	bic.w	r3, r3, #8
 8008ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	f023 0304 	bic.w	r3, r3, #4
 8008cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a15      	ldr	r2, [pc, #84]	; (8008d14 <TIM_OC1_SetConfig+0xd8>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d003      	beq.n	8008cca <TIM_OC1_SetConfig+0x8e>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a14      	ldr	r2, [pc, #80]	; (8008d18 <TIM_OC1_SetConfig+0xdc>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d111      	bne.n	8008cee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	695b      	ldr	r3, [r3, #20]
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	621a      	str	r2, [r3, #32]
}
 8008d08:	bf00      	nop
 8008d0a:	371c      	adds	r7, #28
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	40010000 	.word	0x40010000
 8008d18:	40010400 	.word	0x40010400

08008d1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b087      	sub	sp, #28
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a1b      	ldr	r3, [r3, #32]
 8008d2a:	f023 0210 	bic.w	r2, r3, #16
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	021b      	lsls	r3, r3, #8
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f023 0320 	bic.w	r3, r3, #32
 8008d66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	011b      	lsls	r3, r3, #4
 8008d6e:	697a      	ldr	r2, [r7, #20]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a22      	ldr	r2, [pc, #136]	; (8008e00 <TIM_OC2_SetConfig+0xe4>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d003      	beq.n	8008d84 <TIM_OC2_SetConfig+0x68>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a21      	ldr	r2, [pc, #132]	; (8008e04 <TIM_OC2_SetConfig+0xe8>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d10d      	bne.n	8008da0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	011b      	lsls	r3, r3, #4
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a17      	ldr	r2, [pc, #92]	; (8008e00 <TIM_OC2_SetConfig+0xe4>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d003      	beq.n	8008db0 <TIM_OC2_SetConfig+0x94>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a16      	ldr	r2, [pc, #88]	; (8008e04 <TIM_OC2_SetConfig+0xe8>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d113      	bne.n	8008dd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008db6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	695b      	ldr	r3, [r3, #20]
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	685a      	ldr	r2, [r3, #4]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	621a      	str	r2, [r3, #32]
}
 8008df2:	bf00      	nop
 8008df4:	371c      	adds	r7, #28
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	40010000 	.word	0x40010000
 8008e04:	40010400 	.word	0x40010400

08008e08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	69db      	ldr	r3, [r3, #28]
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 0303 	bic.w	r3, r3, #3
 8008e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	021b      	lsls	r3, r3, #8
 8008e58:	697a      	ldr	r2, [r7, #20]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a21      	ldr	r2, [pc, #132]	; (8008ee8 <TIM_OC3_SetConfig+0xe0>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d003      	beq.n	8008e6e <TIM_OC3_SetConfig+0x66>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a20      	ldr	r2, [pc, #128]	; (8008eec <TIM_OC3_SetConfig+0xe4>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d10d      	bne.n	8008e8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	021b      	lsls	r3, r3, #8
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a16      	ldr	r2, [pc, #88]	; (8008ee8 <TIM_OC3_SetConfig+0xe0>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d003      	beq.n	8008e9a <TIM_OC3_SetConfig+0x92>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a15      	ldr	r2, [pc, #84]	; (8008eec <TIM_OC3_SetConfig+0xe4>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d113      	bne.n	8008ec2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	695b      	ldr	r3, [r3, #20]
 8008eae:	011b      	lsls	r3, r3, #4
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	011b      	lsls	r3, r3, #4
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	621a      	str	r2, [r3, #32]
}
 8008edc:	bf00      	nop
 8008ede:	371c      	adds	r7, #28
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	40010000 	.word	0x40010000
 8008eec:	40010400 	.word	0x40010400

08008ef0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b087      	sub	sp, #28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a1b      	ldr	r3, [r3, #32]
 8008f0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	021b      	lsls	r3, r3, #8
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	031b      	lsls	r3, r3, #12
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a12      	ldr	r2, [pc, #72]	; (8008f94 <TIM_OC4_SetConfig+0xa4>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d003      	beq.n	8008f58 <TIM_OC4_SetConfig+0x68>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a11      	ldr	r2, [pc, #68]	; (8008f98 <TIM_OC4_SetConfig+0xa8>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d109      	bne.n	8008f6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	695b      	ldr	r3, [r3, #20]
 8008f64:	019b      	lsls	r3, r3, #6
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	621a      	str	r2, [r3, #32]
}
 8008f86:	bf00      	nop
 8008f88:	371c      	adds	r7, #28
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	40010000 	.word	0x40010000
 8008f98:	40010400 	.word	0x40010400

08008f9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6a1b      	ldr	r3, [r3, #32]
 8008fac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
 8008fb2:	f023 0201 	bic.w	r2, r3, #1
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	011b      	lsls	r3, r3, #4
 8008fcc:	693a      	ldr	r2, [r7, #16]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f023 030a 	bic.w	r3, r3, #10
 8008fd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008fda:	697a      	ldr	r2, [r7, #20]
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	621a      	str	r2, [r3, #32]
}
 8008fee:	bf00      	nop
 8008ff0:	371c      	adds	r7, #28
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b087      	sub	sp, #28
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	60f8      	str	r0, [r7, #12]
 8009002:	60b9      	str	r1, [r7, #8]
 8009004:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	f023 0210 	bic.w	r2, r3, #16
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6a1b      	ldr	r3, [r3, #32]
 800901c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009024:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	031b      	lsls	r3, r3, #12
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	4313      	orrs	r3, r2
 800902e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009036:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	4313      	orrs	r3, r2
 8009040:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	697a      	ldr	r2, [r7, #20]
 8009046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	621a      	str	r2, [r3, #32]
}
 800904e:	bf00      	nop
 8009050:	371c      	adds	r7, #28
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800905a:	b480      	push	{r7}
 800905c:	b085      	sub	sp, #20
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4313      	orrs	r3, r2
 8009078:	f043 0307 	orr.w	r3, r3, #7
 800907c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	609a      	str	r2, [r3, #8]
}
 8009084:	bf00      	nop
 8009086:	3714      	adds	r7, #20
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009090:	b480      	push	{r7}
 8009092:	b087      	sub	sp, #28
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
 800909c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	021a      	lsls	r2, r3, #8
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	431a      	orrs	r2, r3
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	609a      	str	r2, [r3, #8]
}
 80090c4:	bf00      	nop
 80090c6:	371c      	adds	r7, #28
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b087      	sub	sp, #28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	f003 031f 	and.w	r3, r3, #31
 80090e2:	2201      	movs	r2, #1
 80090e4:	fa02 f303 	lsl.w	r3, r2, r3
 80090e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6a1a      	ldr	r2, [r3, #32]
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	43db      	mvns	r3, r3
 80090f2:	401a      	ands	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6a1a      	ldr	r2, [r3, #32]
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f003 031f 	and.w	r3, r3, #31
 8009102:	6879      	ldr	r1, [r7, #4]
 8009104:	fa01 f303 	lsl.w	r3, r1, r3
 8009108:	431a      	orrs	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	621a      	str	r2, [r3, #32]
}
 800910e:	bf00      	nop
 8009110:	371c      	adds	r7, #28
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
	...

0800911c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800912c:	2b01      	cmp	r3, #1
 800912e:	d101      	bne.n	8009134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009130:	2302      	movs	r3, #2
 8009132:	e05a      	b.n	80091ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2202      	movs	r2, #2
 8009140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800915a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	4313      	orrs	r3, r2
 8009164:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a21      	ldr	r2, [pc, #132]	; (80091f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d022      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009180:	d01d      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a1d      	ldr	r2, [pc, #116]	; (80091fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d018      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a1b      	ldr	r2, [pc, #108]	; (8009200 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d013      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a1a      	ldr	r2, [pc, #104]	; (8009204 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d00e      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a18      	ldr	r2, [pc, #96]	; (8009208 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d009      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a17      	ldr	r2, [pc, #92]	; (800920c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d004      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a15      	ldr	r2, [pc, #84]	; (8009210 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d10c      	bne.n	80091d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3714      	adds	r7, #20
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop
 80091f8:	40010000 	.word	0x40010000
 80091fc:	40000400 	.word	0x40000400
 8009200:	40000800 	.word	0x40000800
 8009204:	40000c00 	.word	0x40000c00
 8009208:	40010400 	.word	0x40010400
 800920c:	40014000 	.word	0x40014000
 8009210:	40001800 	.word	0x40001800

08009214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800921c:	bf00      	nop
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d101      	bne.n	800924e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	e03f      	b.n	80092ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009254:	b2db      	uxtb	r3, r3
 8009256:	2b00      	cmp	r3, #0
 8009258:	d106      	bne.n	8009268 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7fc f8cc 	bl	8005400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2224      	movs	r2, #36	; 0x24
 800926c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68da      	ldr	r2, [r3, #12]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800927e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 ff43 	bl	800a10c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	691a      	ldr	r2, [r3, #16]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009294:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	695a      	ldr	r2, [r3, #20]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68da      	ldr	r2, [r3, #12]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2220      	movs	r2, #32
 80092c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2220      	movs	r2, #32
 80092c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
	...

080092d8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b08c      	sub	sp, #48	; 0x30
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	4613      	mov	r3, r2
 80092e4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b20      	cmp	r3, #32
 80092f0:	d165      	bne.n	80093be <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d002      	beq.n	80092fe <HAL_UART_Transmit_DMA+0x26>
 80092f8:	88fb      	ldrh	r3, [r7, #6]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d101      	bne.n	8009302 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e05e      	b.n	80093c0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009308:	2b01      	cmp	r3, #1
 800930a:	d101      	bne.n	8009310 <HAL_UART_Transmit_DMA+0x38>
 800930c:	2302      	movs	r3, #2
 800930e:	e057      	b.n	80093c0 <HAL_UART_Transmit_DMA+0xe8>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	88fa      	ldrh	r2, [r7, #6]
 8009322:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	88fa      	ldrh	r2, [r7, #6]
 8009328:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2221      	movs	r2, #33	; 0x21
 8009334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800933c:	4a22      	ldr	r2, [pc, #136]	; (80093c8 <HAL_UART_Transmit_DMA+0xf0>)
 800933e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009344:	4a21      	ldr	r2, [pc, #132]	; (80093cc <HAL_UART_Transmit_DMA+0xf4>)
 8009346:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934c:	4a20      	ldr	r2, [pc, #128]	; (80093d0 <HAL_UART_Transmit_DMA+0xf8>)
 800934e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009354:	2200      	movs	r2, #0
 8009356:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009358:	f107 0308 	add.w	r3, r7, #8
 800935c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009364:	6819      	ldr	r1, [r3, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3304      	adds	r3, #4
 800936c:	461a      	mov	r2, r3
 800936e:	88fb      	ldrh	r3, [r7, #6]
 8009370:	f7fc fcdc 	bl	8005d2c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800937c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	3314      	adds	r3, #20
 800938c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	e853 3f00 	ldrex	r3, [r3]
 8009394:	617b      	str	r3, [r7, #20]
   return(result);
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800939c:	62bb      	str	r3, [r7, #40]	; 0x28
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3314      	adds	r3, #20
 80093a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093a6:	627a      	str	r2, [r7, #36]	; 0x24
 80093a8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093aa:	6a39      	ldr	r1, [r7, #32]
 80093ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ae:	e841 2300 	strex	r3, r2, [r1]
 80093b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1e5      	bne.n	8009386 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80093ba:	2300      	movs	r3, #0
 80093bc:	e000      	b.n	80093c0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80093be:	2302      	movs	r3, #2
  }
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3730      	adds	r7, #48	; 0x30
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	080099a5 	.word	0x080099a5
 80093cc:	08009a3f 	.word	0x08009a3f
 80093d0:	08009bb7 	.word	0x08009bb7

080093d4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	4613      	mov	r3, r2
 80093e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	2b20      	cmp	r3, #32
 80093ec:	d11d      	bne.n	800942a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d002      	beq.n	80093fa <HAL_UART_Receive_DMA+0x26>
 80093f4:	88fb      	ldrh	r3, [r7, #6]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	e016      	b.n	800942c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009404:	2b01      	cmp	r3, #1
 8009406:	d101      	bne.n	800940c <HAL_UART_Receive_DMA+0x38>
 8009408:	2302      	movs	r3, #2
 800940a:	e00f      	b.n	800942c <HAL_UART_Receive_DMA+0x58>
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800941a:	88fb      	ldrh	r3, [r7, #6]
 800941c:	461a      	mov	r2, r3
 800941e:	68b9      	ldr	r1, [r7, #8]
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f000 fc13 	bl	8009c4c <UART_Start_Receive_DMA>
 8009426:	4603      	mov	r3, r0
 8009428:	e000      	b.n	800942c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800942a:	2302      	movs	r3, #2
  }
}
 800942c:	4618      	mov	r0, r3
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b0ba      	sub	sp, #232	; 0xe8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800945a:	2300      	movs	r3, #0
 800945c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009460:	2300      	movs	r3, #0
 8009462:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800946a:	f003 030f 	and.w	r3, r3, #15
 800946e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009472:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10f      	bne.n	800949a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800947a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800947e:	f003 0320 	and.w	r3, r3, #32
 8009482:	2b00      	cmp	r3, #0
 8009484:	d009      	beq.n	800949a <HAL_UART_IRQHandler+0x66>
 8009486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800948a:	f003 0320 	and.w	r3, r3, #32
 800948e:	2b00      	cmp	r3, #0
 8009490:	d003      	beq.n	800949a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fd7f 	bl	8009f96 <UART_Receive_IT>
      return;
 8009498:	e256      	b.n	8009948 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800949a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f000 80de 	beq.w	8009660 <HAL_UART_IRQHandler+0x22c>
 80094a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d106      	bne.n	80094be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80094b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 80d1 	beq.w	8009660 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80094be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00b      	beq.n	80094e2 <HAL_UART_IRQHandler+0xae>
 80094ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d005      	beq.n	80094e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094da:	f043 0201 	orr.w	r2, r3, #1
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80094e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094e6:	f003 0304 	and.w	r3, r3, #4
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00b      	beq.n	8009506 <HAL_UART_IRQHandler+0xd2>
 80094ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d005      	beq.n	8009506 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fe:	f043 0202 	orr.w	r2, r3, #2
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800950a:	f003 0302 	and.w	r3, r3, #2
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00b      	beq.n	800952a <HAL_UART_IRQHandler+0xf6>
 8009512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	2b00      	cmp	r3, #0
 800951c:	d005      	beq.n	800952a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009522:	f043 0204 	orr.w	r2, r3, #4
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800952a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800952e:	f003 0308 	and.w	r3, r3, #8
 8009532:	2b00      	cmp	r3, #0
 8009534:	d011      	beq.n	800955a <HAL_UART_IRQHandler+0x126>
 8009536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800953a:	f003 0320 	and.w	r3, r3, #32
 800953e:	2b00      	cmp	r3, #0
 8009540:	d105      	bne.n	800954e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	2b00      	cmp	r3, #0
 800954c:	d005      	beq.n	800955a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009552:	f043 0208 	orr.w	r2, r3, #8
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955e:	2b00      	cmp	r3, #0
 8009560:	f000 81ed 	beq.w	800993e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009568:	f003 0320 	and.w	r3, r3, #32
 800956c:	2b00      	cmp	r3, #0
 800956e:	d008      	beq.n	8009582 <HAL_UART_IRQHandler+0x14e>
 8009570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009574:	f003 0320 	and.w	r3, r3, #32
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fd0a 	bl	8009f96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	695b      	ldr	r3, [r3, #20]
 8009588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800958c:	2b40      	cmp	r3, #64	; 0x40
 800958e:	bf0c      	ite	eq
 8009590:	2301      	moveq	r3, #1
 8009592:	2300      	movne	r3, #0
 8009594:	b2db      	uxtb	r3, r3
 8009596:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959e:	f003 0308 	and.w	r3, r3, #8
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d103      	bne.n	80095ae <HAL_UART_IRQHandler+0x17a>
 80095a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d04f      	beq.n	800964e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fc12 	bl	8009dd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095be:	2b40      	cmp	r3, #64	; 0x40
 80095c0:	d141      	bne.n	8009646 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	3314      	adds	r3, #20
 80095c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80095d0:	e853 3f00 	ldrex	r3, [r3]
 80095d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80095d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80095dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3314      	adds	r3, #20
 80095ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80095ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80095f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80095fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80095fe:	e841 2300 	strex	r3, r2, [r1]
 8009602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009606:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1d9      	bne.n	80095c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009612:	2b00      	cmp	r3, #0
 8009614:	d013      	beq.n	800963e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961a:	4a7d      	ldr	r2, [pc, #500]	; (8009810 <HAL_UART_IRQHandler+0x3dc>)
 800961c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009622:	4618      	mov	r0, r3
 8009624:	f7fc fc4a 	bl	8005ebc <HAL_DMA_Abort_IT>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d016      	beq.n	800965c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009638:	4610      	mov	r0, r2
 800963a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800963c:	e00e      	b.n	800965c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 f99a 	bl	8009978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009644:	e00a      	b.n	800965c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f996 	bl	8009978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800964c:	e006      	b.n	800965c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f992 	bl	8009978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800965a:	e170      	b.n	800993e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800965c:	bf00      	nop
    return;
 800965e:	e16e      	b.n	800993e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009664:	2b01      	cmp	r3, #1
 8009666:	f040 814a 	bne.w	80098fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800966a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800966e:	f003 0310 	and.w	r3, r3, #16
 8009672:	2b00      	cmp	r3, #0
 8009674:	f000 8143 	beq.w	80098fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800967c:	f003 0310 	and.w	r3, r3, #16
 8009680:	2b00      	cmp	r3, #0
 8009682:	f000 813c 	beq.w	80098fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009686:	2300      	movs	r3, #0
 8009688:	60bb      	str	r3, [r7, #8]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	60bb      	str	r3, [r7, #8]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	60bb      	str	r3, [r7, #8]
 800969a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a6:	2b40      	cmp	r3, #64	; 0x40
 80096a8:	f040 80b4 	bne.w	8009814 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80096b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 8140 	beq.w	8009942 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80096c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80096ca:	429a      	cmp	r2, r3
 80096cc:	f080 8139 	bcs.w	8009942 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80096d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096dc:	69db      	ldr	r3, [r3, #28]
 80096de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096e2:	f000 8088 	beq.w	80097f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	330c      	adds	r3, #12
 80096ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096f4:	e853 3f00 	ldrex	r3, [r3]
 80096f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80096fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009704:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	330c      	adds	r3, #12
 800970e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009712:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009716:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800971e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009722:	e841 2300 	strex	r3, r2, [r1]
 8009726:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800972a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1d9      	bne.n	80096e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	3314      	adds	r3, #20
 8009738:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800973c:	e853 3f00 	ldrex	r3, [r3]
 8009740:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009744:	f023 0301 	bic.w	r3, r3, #1
 8009748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	3314      	adds	r3, #20
 8009752:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009756:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800975a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800975e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009762:	e841 2300 	strex	r3, r2, [r1]
 8009766:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1e1      	bne.n	8009732 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	3314      	adds	r3, #20
 8009774:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009778:	e853 3f00 	ldrex	r3, [r3]
 800977c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800977e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3314      	adds	r3, #20
 800978e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009792:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009794:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009796:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009798:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800979a:	e841 2300 	strex	r3, r2, [r1]
 800979e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80097a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1e3      	bne.n	800976e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2220      	movs	r2, #32
 80097aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	330c      	adds	r3, #12
 80097ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097be:	e853 3f00 	ldrex	r3, [r3]
 80097c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80097c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097c6:	f023 0310 	bic.w	r3, r3, #16
 80097ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	330c      	adds	r3, #12
 80097d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80097d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80097da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80097de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80097e0:	e841 2300 	strex	r3, r2, [r1]
 80097e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80097e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1e3      	bne.n	80097b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fc faf3 	bl	8005ddc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097fe:	b29b      	uxth	r3, r3
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	b29b      	uxth	r3, r3
 8009804:	4619      	mov	r1, r3
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f8c0 	bl	800998c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800980c:	e099      	b.n	8009942 <HAL_UART_IRQHandler+0x50e>
 800980e:	bf00      	nop
 8009810:	08009e9f 	.word	0x08009e9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800981c:	b29b      	uxth	r3, r3
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009828:	b29b      	uxth	r3, r3
 800982a:	2b00      	cmp	r3, #0
 800982c:	f000 808b 	beq.w	8009946 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009830:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009834:	2b00      	cmp	r3, #0
 8009836:	f000 8086 	beq.w	8009946 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	330c      	adds	r3, #12
 8009840:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009844:	e853 3f00 	ldrex	r3, [r3]
 8009848:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800984a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800984c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009850:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	330c      	adds	r3, #12
 800985a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800985e:	647a      	str	r2, [r7, #68]	; 0x44
 8009860:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009862:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009864:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009866:	e841 2300 	strex	r3, r2, [r1]
 800986a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800986c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1e3      	bne.n	800983a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3314      	adds	r3, #20
 8009878:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987c:	e853 3f00 	ldrex	r3, [r3]
 8009880:	623b      	str	r3, [r7, #32]
   return(result);
 8009882:	6a3b      	ldr	r3, [r7, #32]
 8009884:	f023 0301 	bic.w	r3, r3, #1
 8009888:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3314      	adds	r3, #20
 8009892:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009896:	633a      	str	r2, [r7, #48]	; 0x30
 8009898:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800989c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800989e:	e841 2300 	strex	r3, r2, [r1]
 80098a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1e3      	bne.n	8009872 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2220      	movs	r2, #32
 80098ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	330c      	adds	r3, #12
 80098be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	e853 3f00 	ldrex	r3, [r3]
 80098c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f023 0310 	bic.w	r3, r3, #16
 80098ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	330c      	adds	r3, #12
 80098d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80098dc:	61fa      	str	r2, [r7, #28]
 80098de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e0:	69b9      	ldr	r1, [r7, #24]
 80098e2:	69fa      	ldr	r2, [r7, #28]
 80098e4:	e841 2300 	strex	r3, r2, [r1]
 80098e8:	617b      	str	r3, [r7, #20]
   return(result);
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1e3      	bne.n	80098b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80098f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098f4:	4619      	mov	r1, r3
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f848 	bl	800998c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80098fc:	e023      	b.n	8009946 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80098fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009906:	2b00      	cmp	r3, #0
 8009908:	d009      	beq.n	800991e <HAL_UART_IRQHandler+0x4ea>
 800990a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800990e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009912:	2b00      	cmp	r3, #0
 8009914:	d003      	beq.n	800991e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fad5 	bl	8009ec6 <UART_Transmit_IT>
    return;
 800991c:	e014      	b.n	8009948 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800991e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00e      	beq.n	8009948 <HAL_UART_IRQHandler+0x514>
 800992a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800992e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009932:	2b00      	cmp	r3, #0
 8009934:	d008      	beq.n	8009948 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fb15 	bl	8009f66 <UART_EndTransmit_IT>
    return;
 800993c:	e004      	b.n	8009948 <HAL_UART_IRQHandler+0x514>
    return;
 800993e:	bf00      	nop
 8009940:	e002      	b.n	8009948 <HAL_UART_IRQHandler+0x514>
      return;
 8009942:	bf00      	nop
 8009944:	e000      	b.n	8009948 <HAL_UART_IRQHandler+0x514>
      return;
 8009946:	bf00      	nop
  }
}
 8009948:	37e8      	adds	r7, #232	; 0xe8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop

08009950 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009958:	bf00      	nop
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	460b      	mov	r3, r1
 8009996:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b090      	sub	sp, #64	; 0x40
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d137      	bne.n	8009a30 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80099c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099c2:	2200      	movs	r2, #0
 80099c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80099c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	3314      	adds	r3, #20
 80099cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	e853 3f00 	ldrex	r3, [r3]
 80099d4:	623b      	str	r3, [r7, #32]
   return(result);
 80099d6:	6a3b      	ldr	r3, [r7, #32]
 80099d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80099de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	3314      	adds	r3, #20
 80099e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099e6:	633a      	str	r2, [r7, #48]	; 0x30
 80099e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099ee:	e841 2300 	strex	r3, r2, [r1]
 80099f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1e5      	bne.n	80099c6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	330c      	adds	r3, #12
 8009a00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	e853 3f00 	ldrex	r3, [r3]
 8009a08:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a10:	637b      	str	r3, [r7, #52]	; 0x34
 8009a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	330c      	adds	r3, #12
 8009a18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a1a:	61fa      	str	r2, [r7, #28]
 8009a1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1e:	69b9      	ldr	r1, [r7, #24]
 8009a20:	69fa      	ldr	r2, [r7, #28]
 8009a22:	e841 2300 	strex	r3, r2, [r1]
 8009a26:	617b      	str	r3, [r7, #20]
   return(result);
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1e5      	bne.n	80099fa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a2e:	e002      	b.n	8009a36 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009a30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009a32:	f7f7 fc45 	bl	80012c0 <HAL_UART_TxCpltCallback>
}
 8009a36:	bf00      	nop
 8009a38:	3740      	adds	r7, #64	; 0x40
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b084      	sub	sp, #16
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f7ff ff7f 	bl	8009950 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a52:	bf00      	nop
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b09c      	sub	sp, #112	; 0x70
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a66:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d172      	bne.n	8009b5c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a78:	2200      	movs	r2, #0
 8009a7a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	330c      	adds	r3, #12
 8009a82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a86:	e853 3f00 	ldrex	r3, [r3]
 8009a8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a92:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	330c      	adds	r3, #12
 8009a9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8009a9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009aa2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009aa4:	e841 2300 	strex	r3, r2, [r1]
 8009aa8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d1e5      	bne.n	8009a7c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	3314      	adds	r3, #20
 8009ab6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aba:	e853 3f00 	ldrex	r3, [r3]
 8009abe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac2:	f023 0301 	bic.w	r3, r3, #1
 8009ac6:	667b      	str	r3, [r7, #100]	; 0x64
 8009ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	3314      	adds	r3, #20
 8009ace:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009ad0:	647a      	str	r2, [r7, #68]	; 0x44
 8009ad2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ad6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ad8:	e841 2300 	strex	r3, r2, [r1]
 8009adc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1e5      	bne.n	8009ab0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3314      	adds	r3, #20
 8009aea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	e853 3f00 	ldrex	r3, [r3]
 8009af2:	623b      	str	r3, [r7, #32]
   return(result);
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009afa:	663b      	str	r3, [r7, #96]	; 0x60
 8009afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	3314      	adds	r3, #20
 8009b02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b04:	633a      	str	r2, [r7, #48]	; 0x30
 8009b06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b0c:	e841 2300 	strex	r3, r2, [r1]
 8009b10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1e5      	bne.n	8009ae4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b1a:	2220      	movs	r2, #32
 8009b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d119      	bne.n	8009b5c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	330c      	adds	r3, #12
 8009b2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	e853 3f00 	ldrex	r3, [r3]
 8009b36:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f023 0310 	bic.w	r3, r3, #16
 8009b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	330c      	adds	r3, #12
 8009b46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009b48:	61fa      	str	r2, [r7, #28]
 8009b4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4c:	69b9      	ldr	r1, [r7, #24]
 8009b4e:	69fa      	ldr	r2, [r7, #28]
 8009b50:	e841 2300 	strex	r3, r2, [r1]
 8009b54:	617b      	str	r3, [r7, #20]
   return(result);
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1e5      	bne.n	8009b28 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d106      	bne.n	8009b72 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b68:	4619      	mov	r1, r3
 8009b6a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009b6c:	f7ff ff0e 	bl	800998c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b70:	e002      	b.n	8009b78 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009b72:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009b74:	f7f7 fbc0 	bl	80012f8 <HAL_UART_RxCpltCallback>
}
 8009b78:	bf00      	nop
 8009b7a:	3770      	adds	r7, #112	; 0x70
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d108      	bne.n	8009ba8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b9a:	085b      	lsrs	r3, r3, #1
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f7ff fef3 	bl	800998c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ba6:	e002      	b.n	8009bae <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f7ff fedb 	bl	8009964 <HAL_UART_RxHalfCpltCallback>
}
 8009bae:	bf00      	nop
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b084      	sub	sp, #16
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	695b      	ldr	r3, [r3, #20]
 8009bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bd2:	2b80      	cmp	r3, #128	; 0x80
 8009bd4:	bf0c      	ite	eq
 8009bd6:	2301      	moveq	r3, #1
 8009bd8:	2300      	movne	r3, #0
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	2b21      	cmp	r3, #33	; 0x21
 8009be8:	d108      	bne.n	8009bfc <UART_DMAError+0x46>
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d005      	beq.n	8009bfc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009bf6:	68b8      	ldr	r0, [r7, #8]
 8009bf8:	f000 f8c6 	bl	8009d88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c06:	2b40      	cmp	r3, #64	; 0x40
 8009c08:	bf0c      	ite	eq
 8009c0a:	2301      	moveq	r3, #1
 8009c0c:	2300      	movne	r3, #0
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b22      	cmp	r3, #34	; 0x22
 8009c1c:	d108      	bne.n	8009c30 <UART_DMAError+0x7a>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d005      	beq.n	8009c30 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	2200      	movs	r2, #0
 8009c28:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009c2a:	68b8      	ldr	r0, [r7, #8]
 8009c2c:	f000 f8d4 	bl	8009dd8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c34:	f043 0210 	orr.w	r2, r3, #16
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c3c:	68b8      	ldr	r0, [r7, #8]
 8009c3e:	f7ff fe9b 	bl	8009978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c42:	bf00      	nop
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
	...

08009c4c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b098      	sub	sp, #96	; 0x60
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	4613      	mov	r3, r2
 8009c58:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	88fa      	ldrh	r2, [r7, #6]
 8009c64:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2222      	movs	r2, #34	; 0x22
 8009c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c78:	4a40      	ldr	r2, [pc, #256]	; (8009d7c <UART_Start_Receive_DMA+0x130>)
 8009c7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c80:	4a3f      	ldr	r2, [pc, #252]	; (8009d80 <UART_Start_Receive_DMA+0x134>)
 8009c82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c88:	4a3e      	ldr	r2, [pc, #248]	; (8009d84 <UART_Start_Receive_DMA+0x138>)
 8009c8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c90:	2200      	movs	r2, #0
 8009c92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009c94:	f107 0308 	add.w	r3, r7, #8
 8009c98:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	3304      	adds	r3, #4
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	88fb      	ldrh	r3, [r7, #6]
 8009cac:	f7fc f83e 	bl	8005d2c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	613b      	str	r3, [r7, #16]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	613b      	str	r3, [r7, #16]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	613b      	str	r3, [r7, #16]
 8009cc4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	691b      	ldr	r3, [r3, #16]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d019      	beq.n	8009d0a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	330c      	adds	r3, #12
 8009cdc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ce0:	e853 3f00 	ldrex	r3, [r3]
 8009ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cec:	65bb      	str	r3, [r7, #88]	; 0x58
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	330c      	adds	r3, #12
 8009cf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009cf6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009cf8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009cfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009cfe:	e841 2300 	strex	r3, r2, [r1]
 8009d02:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1e5      	bne.n	8009cd6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	3314      	adds	r3, #20
 8009d10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d14:	e853 3f00 	ldrex	r3, [r3]
 8009d18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1c:	f043 0301 	orr.w	r3, r3, #1
 8009d20:	657b      	str	r3, [r7, #84]	; 0x54
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	3314      	adds	r3, #20
 8009d28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009d2a:	63ba      	str	r2, [r7, #56]	; 0x38
 8009d2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009d30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d32:	e841 2300 	strex	r3, r2, [r1]
 8009d36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1e5      	bne.n	8009d0a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	3314      	adds	r3, #20
 8009d44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	e853 3f00 	ldrex	r3, [r3]
 8009d4c:	617b      	str	r3, [r7, #20]
   return(result);
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d54:	653b      	str	r3, [r7, #80]	; 0x50
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3314      	adds	r3, #20
 8009d5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009d5e:	627a      	str	r2, [r7, #36]	; 0x24
 8009d60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d62:	6a39      	ldr	r1, [r7, #32]
 8009d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d66:	e841 2300 	strex	r3, r2, [r1]
 8009d6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1e5      	bne.n	8009d3e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3760      	adds	r7, #96	; 0x60
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	08009a5b 	.word	0x08009a5b
 8009d80:	08009b81 	.word	0x08009b81
 8009d84:	08009bb7 	.word	0x08009bb7

08009d88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b089      	sub	sp, #36	; 0x24
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	330c      	adds	r3, #12
 8009d96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	e853 3f00 	ldrex	r3, [r3]
 8009d9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009da6:	61fb      	str	r3, [r7, #28]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	330c      	adds	r3, #12
 8009dae:	69fa      	ldr	r2, [r7, #28]
 8009db0:	61ba      	str	r2, [r7, #24]
 8009db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db4:	6979      	ldr	r1, [r7, #20]
 8009db6:	69ba      	ldr	r2, [r7, #24]
 8009db8:	e841 2300 	strex	r3, r2, [r1]
 8009dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1e5      	bne.n	8009d90 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2220      	movs	r2, #32
 8009dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009dcc:	bf00      	nop
 8009dce:	3724      	adds	r7, #36	; 0x24
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b095      	sub	sp, #84	; 0x54
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	330c      	adds	r3, #12
 8009de6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dea:	e853 3f00 	ldrex	r3, [r3]
 8009dee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	330c      	adds	r3, #12
 8009dfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e00:	643a      	str	r2, [r7, #64]	; 0x40
 8009e02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e08:	e841 2300 	strex	r3, r2, [r1]
 8009e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1e5      	bne.n	8009de0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	3314      	adds	r3, #20
 8009e1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	e853 3f00 	ldrex	r3, [r3]
 8009e22:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	f023 0301 	bic.w	r3, r3, #1
 8009e2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	3314      	adds	r3, #20
 8009e32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e3c:	e841 2300 	strex	r3, r2, [r1]
 8009e40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1e5      	bne.n	8009e14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d119      	bne.n	8009e84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	330c      	adds	r3, #12
 8009e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	e853 3f00 	ldrex	r3, [r3]
 8009e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	f023 0310 	bic.w	r3, r3, #16
 8009e66:	647b      	str	r3, [r7, #68]	; 0x44
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	330c      	adds	r3, #12
 8009e6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e70:	61ba      	str	r2, [r7, #24]
 8009e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e74:	6979      	ldr	r1, [r7, #20]
 8009e76:	69ba      	ldr	r2, [r7, #24]
 8009e78:	e841 2300 	strex	r3, r2, [r1]
 8009e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1e5      	bne.n	8009e50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2220      	movs	r2, #32
 8009e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009e92:	bf00      	nop
 8009e94:	3754      	adds	r7, #84	; 0x54
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr

08009e9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b084      	sub	sp, #16
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eaa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f7ff fd5d 	bl	8009978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ebe:	bf00      	nop
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b085      	sub	sp, #20
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b21      	cmp	r3, #33	; 0x21
 8009ed8:	d13e      	bne.n	8009f58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ee2:	d114      	bne.n	8009f0e <UART_Transmit_IT+0x48>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d110      	bne.n	8009f0e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6a1b      	ldr	r3, [r3, #32]
 8009ef0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	881b      	ldrh	r3, [r3, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a1b      	ldr	r3, [r3, #32]
 8009f06:	1c9a      	adds	r2, r3, #2
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	621a      	str	r2, [r3, #32]
 8009f0c:	e008      	b.n	8009f20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	1c59      	adds	r1, r3, #1
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	6211      	str	r1, [r2, #32]
 8009f18:	781a      	ldrb	r2, [r3, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	3b01      	subs	r3, #1
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d10f      	bne.n	8009f54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68da      	ldr	r2, [r3, #12]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68da      	ldr	r2, [r3, #12]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009f54:	2300      	movs	r3, #0
 8009f56:	e000      	b.n	8009f5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009f58:	2302      	movs	r3, #2
  }
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3714      	adds	r7, #20
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr

08009f66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b082      	sub	sp, #8
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68da      	ldr	r2, [r3, #12]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2220      	movs	r2, #32
 8009f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f7f7 f99a 	bl	80012c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b08c      	sub	sp, #48	; 0x30
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	2b22      	cmp	r3, #34	; 0x22
 8009fa8:	f040 80ab 	bne.w	800a102 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fb4:	d117      	bne.n	8009fe6 <UART_Receive_IT+0x50>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d113      	bne.n	8009fe6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fde:	1c9a      	adds	r2, r3, #2
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	629a      	str	r2, [r3, #40]	; 0x28
 8009fe4:	e026      	b.n	800a034 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009fec:	2300      	movs	r3, #0
 8009fee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ff8:	d007      	beq.n	800a00a <UART_Receive_IT+0x74>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10a      	bne.n	800a018 <UART_Receive_IT+0x82>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d106      	bne.n	800a018 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	b2da      	uxtb	r2, r3
 800a012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a014:	701a      	strb	r2, [r3, #0]
 800a016:	e008      	b.n	800a02a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a024:	b2da      	uxtb	r2, r3
 800a026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a028:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02e:	1c5a      	adds	r2, r3, #1
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a038:	b29b      	uxth	r3, r3
 800a03a:	3b01      	subs	r3, #1
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	4619      	mov	r1, r3
 800a042:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a044:	2b00      	cmp	r3, #0
 800a046:	d15a      	bne.n	800a0fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68da      	ldr	r2, [r3, #12]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f022 0220 	bic.w	r2, r2, #32
 800a056:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68da      	ldr	r2, [r3, #12]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a066:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	695a      	ldr	r2, [r3, #20]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f022 0201 	bic.w	r2, r2, #1
 800a076:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2220      	movs	r2, #32
 800a07c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a084:	2b01      	cmp	r3, #1
 800a086:	d135      	bne.n	800a0f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	330c      	adds	r3, #12
 800a094:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	e853 3f00 	ldrex	r3, [r3]
 800a09c:	613b      	str	r3, [r7, #16]
   return(result);
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	f023 0310 	bic.w	r3, r3, #16
 800a0a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	330c      	adds	r3, #12
 800a0ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ae:	623a      	str	r2, [r7, #32]
 800a0b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b2:	69f9      	ldr	r1, [r7, #28]
 800a0b4:	6a3a      	ldr	r2, [r7, #32]
 800a0b6:	e841 2300 	strex	r3, r2, [r1]
 800a0ba:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1e5      	bne.n	800a08e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 0310 	and.w	r3, r3, #16
 800a0cc:	2b10      	cmp	r3, #16
 800a0ce:	d10a      	bne.n	800a0e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	60fb      	str	r3, [r7, #12]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	60fb      	str	r3, [r7, #12]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	60fb      	str	r3, [r7, #12]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f7ff fc4d 	bl	800998c <HAL_UARTEx_RxEventCallback>
 800a0f2:	e002      	b.n	800a0fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f7f7 f8ff 	bl	80012f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	e002      	b.n	800a104 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	e000      	b.n	800a104 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a102:	2302      	movs	r3, #2
  }
}
 800a104:	4618      	mov	r0, r3
 800a106:	3730      	adds	r7, #48	; 0x30
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a10c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a110:	b0c0      	sub	sp, #256	; 0x100
 800a112:	af00      	add	r7, sp, #0
 800a114:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	691b      	ldr	r3, [r3, #16]
 800a120:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a128:	68d9      	ldr	r1, [r3, #12]
 800a12a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	ea40 0301 	orr.w	r3, r0, r1
 800a134:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a13a:	689a      	ldr	r2, [r3, #8]
 800a13c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	431a      	orrs	r2, r3
 800a144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	431a      	orrs	r2, r3
 800a14c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a150:	69db      	ldr	r3, [r3, #28]
 800a152:	4313      	orrs	r3, r2
 800a154:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a164:	f021 010c 	bic.w	r1, r1, #12
 800a168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a172:	430b      	orrs	r3, r1
 800a174:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	695b      	ldr	r3, [r3, #20]
 800a17e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a186:	6999      	ldr	r1, [r3, #24]
 800a188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	ea40 0301 	orr.w	r3, r0, r1
 800a192:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	4b8f      	ldr	r3, [pc, #572]	; (800a3d8 <UART_SetConfig+0x2cc>)
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d005      	beq.n	800a1ac <UART_SetConfig+0xa0>
 800a1a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	4b8d      	ldr	r3, [pc, #564]	; (800a3dc <UART_SetConfig+0x2d0>)
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d104      	bne.n	800a1b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a1ac:	f7fd fecc 	bl	8007f48 <HAL_RCC_GetPCLK2Freq>
 800a1b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a1b4:	e003      	b.n	800a1be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a1b6:	f7fd feb3 	bl	8007f20 <HAL_RCC_GetPCLK1Freq>
 800a1ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1c2:	69db      	ldr	r3, [r3, #28]
 800a1c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1c8:	f040 810c 	bne.w	800a3e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a1cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a1d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a1da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a1de:	4622      	mov	r2, r4
 800a1e0:	462b      	mov	r3, r5
 800a1e2:	1891      	adds	r1, r2, r2
 800a1e4:	65b9      	str	r1, [r7, #88]	; 0x58
 800a1e6:	415b      	adcs	r3, r3
 800a1e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a1ee:	4621      	mov	r1, r4
 800a1f0:	eb12 0801 	adds.w	r8, r2, r1
 800a1f4:	4629      	mov	r1, r5
 800a1f6:	eb43 0901 	adc.w	r9, r3, r1
 800a1fa:	f04f 0200 	mov.w	r2, #0
 800a1fe:	f04f 0300 	mov.w	r3, #0
 800a202:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a206:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a20a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a20e:	4690      	mov	r8, r2
 800a210:	4699      	mov	r9, r3
 800a212:	4623      	mov	r3, r4
 800a214:	eb18 0303 	adds.w	r3, r8, r3
 800a218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a21c:	462b      	mov	r3, r5
 800a21e:	eb49 0303 	adc.w	r3, r9, r3
 800a222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a232:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a236:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a23a:	460b      	mov	r3, r1
 800a23c:	18db      	adds	r3, r3, r3
 800a23e:	653b      	str	r3, [r7, #80]	; 0x50
 800a240:	4613      	mov	r3, r2
 800a242:	eb42 0303 	adc.w	r3, r2, r3
 800a246:	657b      	str	r3, [r7, #84]	; 0x54
 800a248:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a24c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a250:	f7f6 fd1a 	bl	8000c88 <__aeabi_uldivmod>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	4b61      	ldr	r3, [pc, #388]	; (800a3e0 <UART_SetConfig+0x2d4>)
 800a25a:	fba3 2302 	umull	r2, r3, r3, r2
 800a25e:	095b      	lsrs	r3, r3, #5
 800a260:	011c      	lsls	r4, r3, #4
 800a262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a266:	2200      	movs	r2, #0
 800a268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a26c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a270:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a274:	4642      	mov	r2, r8
 800a276:	464b      	mov	r3, r9
 800a278:	1891      	adds	r1, r2, r2
 800a27a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a27c:	415b      	adcs	r3, r3
 800a27e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a280:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a284:	4641      	mov	r1, r8
 800a286:	eb12 0a01 	adds.w	sl, r2, r1
 800a28a:	4649      	mov	r1, r9
 800a28c:	eb43 0b01 	adc.w	fp, r3, r1
 800a290:	f04f 0200 	mov.w	r2, #0
 800a294:	f04f 0300 	mov.w	r3, #0
 800a298:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a29c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a2a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a2a4:	4692      	mov	sl, r2
 800a2a6:	469b      	mov	fp, r3
 800a2a8:	4643      	mov	r3, r8
 800a2aa:	eb1a 0303 	adds.w	r3, sl, r3
 800a2ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a2b2:	464b      	mov	r3, r9
 800a2b4:	eb4b 0303 	adc.w	r3, fp, r3
 800a2b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a2bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a2c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a2cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	18db      	adds	r3, r3, r3
 800a2d4:	643b      	str	r3, [r7, #64]	; 0x40
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	eb42 0303 	adc.w	r3, r2, r3
 800a2dc:	647b      	str	r3, [r7, #68]	; 0x44
 800a2de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a2e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a2e6:	f7f6 fccf 	bl	8000c88 <__aeabi_uldivmod>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	4b3b      	ldr	r3, [pc, #236]	; (800a3e0 <UART_SetConfig+0x2d4>)
 800a2f2:	fba3 2301 	umull	r2, r3, r3, r1
 800a2f6:	095b      	lsrs	r3, r3, #5
 800a2f8:	2264      	movs	r2, #100	; 0x64
 800a2fa:	fb02 f303 	mul.w	r3, r2, r3
 800a2fe:	1acb      	subs	r3, r1, r3
 800a300:	00db      	lsls	r3, r3, #3
 800a302:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a306:	4b36      	ldr	r3, [pc, #216]	; (800a3e0 <UART_SetConfig+0x2d4>)
 800a308:	fba3 2302 	umull	r2, r3, r3, r2
 800a30c:	095b      	lsrs	r3, r3, #5
 800a30e:	005b      	lsls	r3, r3, #1
 800a310:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a314:	441c      	add	r4, r3
 800a316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a31a:	2200      	movs	r2, #0
 800a31c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a320:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a324:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a328:	4642      	mov	r2, r8
 800a32a:	464b      	mov	r3, r9
 800a32c:	1891      	adds	r1, r2, r2
 800a32e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a330:	415b      	adcs	r3, r3
 800a332:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a334:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a338:	4641      	mov	r1, r8
 800a33a:	1851      	adds	r1, r2, r1
 800a33c:	6339      	str	r1, [r7, #48]	; 0x30
 800a33e:	4649      	mov	r1, r9
 800a340:	414b      	adcs	r3, r1
 800a342:	637b      	str	r3, [r7, #52]	; 0x34
 800a344:	f04f 0200 	mov.w	r2, #0
 800a348:	f04f 0300 	mov.w	r3, #0
 800a34c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a350:	4659      	mov	r1, fp
 800a352:	00cb      	lsls	r3, r1, #3
 800a354:	4651      	mov	r1, sl
 800a356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a35a:	4651      	mov	r1, sl
 800a35c:	00ca      	lsls	r2, r1, #3
 800a35e:	4610      	mov	r0, r2
 800a360:	4619      	mov	r1, r3
 800a362:	4603      	mov	r3, r0
 800a364:	4642      	mov	r2, r8
 800a366:	189b      	adds	r3, r3, r2
 800a368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a36c:	464b      	mov	r3, r9
 800a36e:	460a      	mov	r2, r1
 800a370:	eb42 0303 	adc.w	r3, r2, r3
 800a374:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a384:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a388:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a38c:	460b      	mov	r3, r1
 800a38e:	18db      	adds	r3, r3, r3
 800a390:	62bb      	str	r3, [r7, #40]	; 0x28
 800a392:	4613      	mov	r3, r2
 800a394:	eb42 0303 	adc.w	r3, r2, r3
 800a398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a39a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a39e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a3a2:	f7f6 fc71 	bl	8000c88 <__aeabi_uldivmod>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	4b0d      	ldr	r3, [pc, #52]	; (800a3e0 <UART_SetConfig+0x2d4>)
 800a3ac:	fba3 1302 	umull	r1, r3, r3, r2
 800a3b0:	095b      	lsrs	r3, r3, #5
 800a3b2:	2164      	movs	r1, #100	; 0x64
 800a3b4:	fb01 f303 	mul.w	r3, r1, r3
 800a3b8:	1ad3      	subs	r3, r2, r3
 800a3ba:	00db      	lsls	r3, r3, #3
 800a3bc:	3332      	adds	r3, #50	; 0x32
 800a3be:	4a08      	ldr	r2, [pc, #32]	; (800a3e0 <UART_SetConfig+0x2d4>)
 800a3c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c4:	095b      	lsrs	r3, r3, #5
 800a3c6:	f003 0207 	and.w	r2, r3, #7
 800a3ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4422      	add	r2, r4
 800a3d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a3d4:	e105      	b.n	800a5e2 <UART_SetConfig+0x4d6>
 800a3d6:	bf00      	nop
 800a3d8:	40011000 	.word	0x40011000
 800a3dc:	40011400 	.word	0x40011400
 800a3e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a3e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a3ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a3f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a3f6:	4642      	mov	r2, r8
 800a3f8:	464b      	mov	r3, r9
 800a3fa:	1891      	adds	r1, r2, r2
 800a3fc:	6239      	str	r1, [r7, #32]
 800a3fe:	415b      	adcs	r3, r3
 800a400:	627b      	str	r3, [r7, #36]	; 0x24
 800a402:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a406:	4641      	mov	r1, r8
 800a408:	1854      	adds	r4, r2, r1
 800a40a:	4649      	mov	r1, r9
 800a40c:	eb43 0501 	adc.w	r5, r3, r1
 800a410:	f04f 0200 	mov.w	r2, #0
 800a414:	f04f 0300 	mov.w	r3, #0
 800a418:	00eb      	lsls	r3, r5, #3
 800a41a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a41e:	00e2      	lsls	r2, r4, #3
 800a420:	4614      	mov	r4, r2
 800a422:	461d      	mov	r5, r3
 800a424:	4643      	mov	r3, r8
 800a426:	18e3      	adds	r3, r4, r3
 800a428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a42c:	464b      	mov	r3, r9
 800a42e:	eb45 0303 	adc.w	r3, r5, r3
 800a432:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a442:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a446:	f04f 0200 	mov.w	r2, #0
 800a44a:	f04f 0300 	mov.w	r3, #0
 800a44e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a452:	4629      	mov	r1, r5
 800a454:	008b      	lsls	r3, r1, #2
 800a456:	4621      	mov	r1, r4
 800a458:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a45c:	4621      	mov	r1, r4
 800a45e:	008a      	lsls	r2, r1, #2
 800a460:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a464:	f7f6 fc10 	bl	8000c88 <__aeabi_uldivmod>
 800a468:	4602      	mov	r2, r0
 800a46a:	460b      	mov	r3, r1
 800a46c:	4b60      	ldr	r3, [pc, #384]	; (800a5f0 <UART_SetConfig+0x4e4>)
 800a46e:	fba3 2302 	umull	r2, r3, r3, r2
 800a472:	095b      	lsrs	r3, r3, #5
 800a474:	011c      	lsls	r4, r3, #4
 800a476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a47a:	2200      	movs	r2, #0
 800a47c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a480:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a484:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a488:	4642      	mov	r2, r8
 800a48a:	464b      	mov	r3, r9
 800a48c:	1891      	adds	r1, r2, r2
 800a48e:	61b9      	str	r1, [r7, #24]
 800a490:	415b      	adcs	r3, r3
 800a492:	61fb      	str	r3, [r7, #28]
 800a494:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a498:	4641      	mov	r1, r8
 800a49a:	1851      	adds	r1, r2, r1
 800a49c:	6139      	str	r1, [r7, #16]
 800a49e:	4649      	mov	r1, r9
 800a4a0:	414b      	adcs	r3, r1
 800a4a2:	617b      	str	r3, [r7, #20]
 800a4a4:	f04f 0200 	mov.w	r2, #0
 800a4a8:	f04f 0300 	mov.w	r3, #0
 800a4ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a4b0:	4659      	mov	r1, fp
 800a4b2:	00cb      	lsls	r3, r1, #3
 800a4b4:	4651      	mov	r1, sl
 800a4b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a4ba:	4651      	mov	r1, sl
 800a4bc:	00ca      	lsls	r2, r1, #3
 800a4be:	4610      	mov	r0, r2
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	4642      	mov	r2, r8
 800a4c6:	189b      	adds	r3, r3, r2
 800a4c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a4cc:	464b      	mov	r3, r9
 800a4ce:	460a      	mov	r2, r1
 800a4d0:	eb42 0303 	adc.w	r3, r2, r3
 800a4d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a4d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a4e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a4e4:	f04f 0200 	mov.w	r2, #0
 800a4e8:	f04f 0300 	mov.w	r3, #0
 800a4ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a4f0:	4649      	mov	r1, r9
 800a4f2:	008b      	lsls	r3, r1, #2
 800a4f4:	4641      	mov	r1, r8
 800a4f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a4fa:	4641      	mov	r1, r8
 800a4fc:	008a      	lsls	r2, r1, #2
 800a4fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a502:	f7f6 fbc1 	bl	8000c88 <__aeabi_uldivmod>
 800a506:	4602      	mov	r2, r0
 800a508:	460b      	mov	r3, r1
 800a50a:	4b39      	ldr	r3, [pc, #228]	; (800a5f0 <UART_SetConfig+0x4e4>)
 800a50c:	fba3 1302 	umull	r1, r3, r3, r2
 800a510:	095b      	lsrs	r3, r3, #5
 800a512:	2164      	movs	r1, #100	; 0x64
 800a514:	fb01 f303 	mul.w	r3, r1, r3
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	011b      	lsls	r3, r3, #4
 800a51c:	3332      	adds	r3, #50	; 0x32
 800a51e:	4a34      	ldr	r2, [pc, #208]	; (800a5f0 <UART_SetConfig+0x4e4>)
 800a520:	fba2 2303 	umull	r2, r3, r2, r3
 800a524:	095b      	lsrs	r3, r3, #5
 800a526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a52a:	441c      	add	r4, r3
 800a52c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a530:	2200      	movs	r2, #0
 800a532:	673b      	str	r3, [r7, #112]	; 0x70
 800a534:	677a      	str	r2, [r7, #116]	; 0x74
 800a536:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a53a:	4642      	mov	r2, r8
 800a53c:	464b      	mov	r3, r9
 800a53e:	1891      	adds	r1, r2, r2
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	415b      	adcs	r3, r3
 800a544:	60fb      	str	r3, [r7, #12]
 800a546:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a54a:	4641      	mov	r1, r8
 800a54c:	1851      	adds	r1, r2, r1
 800a54e:	6039      	str	r1, [r7, #0]
 800a550:	4649      	mov	r1, r9
 800a552:	414b      	adcs	r3, r1
 800a554:	607b      	str	r3, [r7, #4]
 800a556:	f04f 0200 	mov.w	r2, #0
 800a55a:	f04f 0300 	mov.w	r3, #0
 800a55e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a562:	4659      	mov	r1, fp
 800a564:	00cb      	lsls	r3, r1, #3
 800a566:	4651      	mov	r1, sl
 800a568:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a56c:	4651      	mov	r1, sl
 800a56e:	00ca      	lsls	r2, r1, #3
 800a570:	4610      	mov	r0, r2
 800a572:	4619      	mov	r1, r3
 800a574:	4603      	mov	r3, r0
 800a576:	4642      	mov	r2, r8
 800a578:	189b      	adds	r3, r3, r2
 800a57a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a57c:	464b      	mov	r3, r9
 800a57e:	460a      	mov	r2, r1
 800a580:	eb42 0303 	adc.w	r3, r2, r3
 800a584:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	663b      	str	r3, [r7, #96]	; 0x60
 800a590:	667a      	str	r2, [r7, #100]	; 0x64
 800a592:	f04f 0200 	mov.w	r2, #0
 800a596:	f04f 0300 	mov.w	r3, #0
 800a59a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a59e:	4649      	mov	r1, r9
 800a5a0:	008b      	lsls	r3, r1, #2
 800a5a2:	4641      	mov	r1, r8
 800a5a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5a8:	4641      	mov	r1, r8
 800a5aa:	008a      	lsls	r2, r1, #2
 800a5ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a5b0:	f7f6 fb6a 	bl	8000c88 <__aeabi_uldivmod>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	4b0d      	ldr	r3, [pc, #52]	; (800a5f0 <UART_SetConfig+0x4e4>)
 800a5ba:	fba3 1302 	umull	r1, r3, r3, r2
 800a5be:	095b      	lsrs	r3, r3, #5
 800a5c0:	2164      	movs	r1, #100	; 0x64
 800a5c2:	fb01 f303 	mul.w	r3, r1, r3
 800a5c6:	1ad3      	subs	r3, r2, r3
 800a5c8:	011b      	lsls	r3, r3, #4
 800a5ca:	3332      	adds	r3, #50	; 0x32
 800a5cc:	4a08      	ldr	r2, [pc, #32]	; (800a5f0 <UART_SetConfig+0x4e4>)
 800a5ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a5d2:	095b      	lsrs	r3, r3, #5
 800a5d4:	f003 020f 	and.w	r2, r3, #15
 800a5d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4422      	add	r2, r4
 800a5e0:	609a      	str	r2, [r3, #8]
}
 800a5e2:	bf00      	nop
 800a5e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5ee:	bf00      	nop
 800a5f0:	51eb851f 	.word	0x51eb851f

0800a5f4 <__cxa_pure_virtual>:
 800a5f4:	b508      	push	{r3, lr}
 800a5f6:	f000 f80d 	bl	800a614 <_ZSt9terminatev>

0800a5fa <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a5fa:	b508      	push	{r3, lr}
 800a5fc:	4780      	blx	r0
 800a5fe:	f000 f98c 	bl	800a91a <abort>
	...

0800a604 <_ZSt13get_terminatev>:
 800a604:	4b02      	ldr	r3, [pc, #8]	; (800a610 <_ZSt13get_terminatev+0xc>)
 800a606:	6818      	ldr	r0, [r3, #0]
 800a608:	f3bf 8f5b 	dmb	ish
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	20000020 	.word	0x20000020

0800a614 <_ZSt9terminatev>:
 800a614:	b508      	push	{r3, lr}
 800a616:	f7ff fff5 	bl	800a604 <_ZSt13get_terminatev>
 800a61a:	f7ff ffee 	bl	800a5fa <_ZN10__cxxabiv111__terminateEPFvvE>

0800a61e <atan2f>:
 800a61e:	f000 b801 	b.w	800a624 <__ieee754_atan2f>
	...

0800a624 <__ieee754_atan2f>:
 800a624:	ee10 2a90 	vmov	r2, s1
 800a628:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a62c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a630:	b510      	push	{r4, lr}
 800a632:	eef0 7a40 	vmov.f32	s15, s0
 800a636:	dc06      	bgt.n	800a646 <__ieee754_atan2f+0x22>
 800a638:	ee10 0a10 	vmov	r0, s0
 800a63c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a640:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a644:	dd04      	ble.n	800a650 <__ieee754_atan2f+0x2c>
 800a646:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a64a:	eeb0 0a67 	vmov.f32	s0, s15
 800a64e:	bd10      	pop	{r4, pc}
 800a650:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a654:	d103      	bne.n	800a65e <__ieee754_atan2f+0x3a>
 800a656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a65a:	f000 b883 	b.w	800a764 <atanf>
 800a65e:	1794      	asrs	r4, r2, #30
 800a660:	f004 0402 	and.w	r4, r4, #2
 800a664:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a668:	b943      	cbnz	r3, 800a67c <__ieee754_atan2f+0x58>
 800a66a:	2c02      	cmp	r4, #2
 800a66c:	d05e      	beq.n	800a72c <__ieee754_atan2f+0x108>
 800a66e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a740 <__ieee754_atan2f+0x11c>
 800a672:	2c03      	cmp	r4, #3
 800a674:	bf08      	it	eq
 800a676:	eef0 7a47 	vmoveq.f32	s15, s14
 800a67a:	e7e6      	b.n	800a64a <__ieee754_atan2f+0x26>
 800a67c:	b941      	cbnz	r1, 800a690 <__ieee754_atan2f+0x6c>
 800a67e:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a744 <__ieee754_atan2f+0x120>
 800a682:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800a748 <__ieee754_atan2f+0x124>
 800a686:	2800      	cmp	r0, #0
 800a688:	bfb8      	it	lt
 800a68a:	eef0 7a40 	vmovlt.f32	s15, s0
 800a68e:	e7dc      	b.n	800a64a <__ieee754_atan2f+0x26>
 800a690:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a694:	d110      	bne.n	800a6b8 <__ieee754_atan2f+0x94>
 800a696:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a69a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a69e:	d107      	bne.n	800a6b0 <__ieee754_atan2f+0x8c>
 800a6a0:	2c02      	cmp	r4, #2
 800a6a2:	d846      	bhi.n	800a732 <__ieee754_atan2f+0x10e>
 800a6a4:	4b29      	ldr	r3, [pc, #164]	; (800a74c <__ieee754_atan2f+0x128>)
 800a6a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a6aa:	edd4 7a00 	vldr	s15, [r4]
 800a6ae:	e7cc      	b.n	800a64a <__ieee754_atan2f+0x26>
 800a6b0:	2c02      	cmp	r4, #2
 800a6b2:	d841      	bhi.n	800a738 <__ieee754_atan2f+0x114>
 800a6b4:	4b26      	ldr	r3, [pc, #152]	; (800a750 <__ieee754_atan2f+0x12c>)
 800a6b6:	e7f6      	b.n	800a6a6 <__ieee754_atan2f+0x82>
 800a6b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a6bc:	d0df      	beq.n	800a67e <__ieee754_atan2f+0x5a>
 800a6be:	1a5b      	subs	r3, r3, r1
 800a6c0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800a6c4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a6c8:	da1a      	bge.n	800a700 <__ieee754_atan2f+0xdc>
 800a6ca:	2a00      	cmp	r2, #0
 800a6cc:	da01      	bge.n	800a6d2 <__ieee754_atan2f+0xae>
 800a6ce:	313c      	adds	r1, #60	; 0x3c
 800a6d0:	db19      	blt.n	800a706 <__ieee754_atan2f+0xe2>
 800a6d2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a6d6:	f000 f919 	bl	800a90c <fabsf>
 800a6da:	f000 f843 	bl	800a764 <atanf>
 800a6de:	eef0 7a40 	vmov.f32	s15, s0
 800a6e2:	2c01      	cmp	r4, #1
 800a6e4:	d012      	beq.n	800a70c <__ieee754_atan2f+0xe8>
 800a6e6:	2c02      	cmp	r4, #2
 800a6e8:	d017      	beq.n	800a71a <__ieee754_atan2f+0xf6>
 800a6ea:	2c00      	cmp	r4, #0
 800a6ec:	d0ad      	beq.n	800a64a <__ieee754_atan2f+0x26>
 800a6ee:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a754 <__ieee754_atan2f+0x130>
 800a6f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a6f6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a758 <__ieee754_atan2f+0x134>
 800a6fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a6fe:	e7a4      	b.n	800a64a <__ieee754_atan2f+0x26>
 800a700:	eddf 7a10 	vldr	s15, [pc, #64]	; 800a744 <__ieee754_atan2f+0x120>
 800a704:	e7ed      	b.n	800a6e2 <__ieee754_atan2f+0xbe>
 800a706:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a75c <__ieee754_atan2f+0x138>
 800a70a:	e7ea      	b.n	800a6e2 <__ieee754_atan2f+0xbe>
 800a70c:	ee17 3a90 	vmov	r3, s15
 800a710:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a714:	ee07 3a90 	vmov	s15, r3
 800a718:	e797      	b.n	800a64a <__ieee754_atan2f+0x26>
 800a71a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a754 <__ieee754_atan2f+0x130>
 800a71e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a722:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800a758 <__ieee754_atan2f+0x134>
 800a726:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a72a:	e78e      	b.n	800a64a <__ieee754_atan2f+0x26>
 800a72c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800a758 <__ieee754_atan2f+0x134>
 800a730:	e78b      	b.n	800a64a <__ieee754_atan2f+0x26>
 800a732:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a760 <__ieee754_atan2f+0x13c>
 800a736:	e788      	b.n	800a64a <__ieee754_atan2f+0x26>
 800a738:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a75c <__ieee754_atan2f+0x138>
 800a73c:	e785      	b.n	800a64a <__ieee754_atan2f+0x26>
 800a73e:	bf00      	nop
 800a740:	c0490fdb 	.word	0xc0490fdb
 800a744:	3fc90fdb 	.word	0x3fc90fdb
 800a748:	bfc90fdb 	.word	0xbfc90fdb
 800a74c:	0800f624 	.word	0x0800f624
 800a750:	0800f630 	.word	0x0800f630
 800a754:	33bbbd2e 	.word	0x33bbbd2e
 800a758:	40490fdb 	.word	0x40490fdb
 800a75c:	00000000 	.word	0x00000000
 800a760:	3f490fdb 	.word	0x3f490fdb

0800a764 <atanf>:
 800a764:	b538      	push	{r3, r4, r5, lr}
 800a766:	ee10 5a10 	vmov	r5, s0
 800a76a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a76e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800a772:	eef0 7a40 	vmov.f32	s15, s0
 800a776:	db10      	blt.n	800a79a <atanf+0x36>
 800a778:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a77c:	dd04      	ble.n	800a788 <atanf+0x24>
 800a77e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a782:	eeb0 0a67 	vmov.f32	s0, s15
 800a786:	bd38      	pop	{r3, r4, r5, pc}
 800a788:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800a8c0 <atanf+0x15c>
 800a78c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800a8c4 <atanf+0x160>
 800a790:	2d00      	cmp	r5, #0
 800a792:	bfd8      	it	le
 800a794:	eef0 7a40 	vmovle.f32	s15, s0
 800a798:	e7f3      	b.n	800a782 <atanf+0x1e>
 800a79a:	4b4b      	ldr	r3, [pc, #300]	; (800a8c8 <atanf+0x164>)
 800a79c:	429c      	cmp	r4, r3
 800a79e:	dc10      	bgt.n	800a7c2 <atanf+0x5e>
 800a7a0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800a7a4:	da0a      	bge.n	800a7bc <atanf+0x58>
 800a7a6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a8cc <atanf+0x168>
 800a7aa:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a7ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7b2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ba:	dce2      	bgt.n	800a782 <atanf+0x1e>
 800a7bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7c0:	e013      	b.n	800a7ea <atanf+0x86>
 800a7c2:	f000 f8a3 	bl	800a90c <fabsf>
 800a7c6:	4b42      	ldr	r3, [pc, #264]	; (800a8d0 <atanf+0x16c>)
 800a7c8:	429c      	cmp	r4, r3
 800a7ca:	dc4f      	bgt.n	800a86c <atanf+0x108>
 800a7cc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800a7d0:	429c      	cmp	r4, r3
 800a7d2:	dc41      	bgt.n	800a858 <atanf+0xf4>
 800a7d4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a7d8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a7dc:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a7e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a7ea:	1c5a      	adds	r2, r3, #1
 800a7ec:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a7f0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a8d4 <atanf+0x170>
 800a7f4:	eddf 5a38 	vldr	s11, [pc, #224]	; 800a8d8 <atanf+0x174>
 800a7f8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800a8dc <atanf+0x178>
 800a7fc:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a800:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a804:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a8e0 <atanf+0x17c>
 800a808:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a80c:	eddf 5a35 	vldr	s11, [pc, #212]	; 800a8e4 <atanf+0x180>
 800a810:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a814:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a8e8 <atanf+0x184>
 800a818:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a81c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a8ec <atanf+0x188>
 800a820:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a824:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800a8f0 <atanf+0x18c>
 800a828:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a82c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a8f4 <atanf+0x190>
 800a830:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a834:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800a8f8 <atanf+0x194>
 800a838:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a83c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a8fc <atanf+0x198>
 800a840:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a844:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a848:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a84c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a850:	d121      	bne.n	800a896 <atanf+0x132>
 800a852:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a856:	e794      	b.n	800a782 <atanf+0x1e>
 800a858:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a85c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a860:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a864:	2301      	movs	r3, #1
 800a866:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a86a:	e7be      	b.n	800a7ea <atanf+0x86>
 800a86c:	4b24      	ldr	r3, [pc, #144]	; (800a900 <atanf+0x19c>)
 800a86e:	429c      	cmp	r4, r3
 800a870:	dc0b      	bgt.n	800a88a <atanf+0x126>
 800a872:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800a876:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a87a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a87e:	2302      	movs	r3, #2
 800a880:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a888:	e7af      	b.n	800a7ea <atanf+0x86>
 800a88a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a88e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a892:	2303      	movs	r3, #3
 800a894:	e7a9      	b.n	800a7ea <atanf+0x86>
 800a896:	4a1b      	ldr	r2, [pc, #108]	; (800a904 <atanf+0x1a0>)
 800a898:	491b      	ldr	r1, [pc, #108]	; (800a908 <atanf+0x1a4>)
 800a89a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a89e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a8a2:	ed93 0a00 	vldr	s0, [r3]
 800a8a6:	ee37 7a40 	vsub.f32	s14, s14, s0
 800a8aa:	ed92 0a00 	vldr	s0, [r2]
 800a8ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8b2:	2d00      	cmp	r5, #0
 800a8b4:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a8b8:	bfb8      	it	lt
 800a8ba:	eef1 7a67 	vneglt.f32	s15, s15
 800a8be:	e760      	b.n	800a782 <atanf+0x1e>
 800a8c0:	3fc90fdb 	.word	0x3fc90fdb
 800a8c4:	bfc90fdb 	.word	0xbfc90fdb
 800a8c8:	3edfffff 	.word	0x3edfffff
 800a8cc:	7149f2ca 	.word	0x7149f2ca
 800a8d0:	3f97ffff 	.word	0x3f97ffff
 800a8d4:	3c8569d7 	.word	0x3c8569d7
 800a8d8:	3d4bda59 	.word	0x3d4bda59
 800a8dc:	bd6ef16b 	.word	0xbd6ef16b
 800a8e0:	3d886b35 	.word	0x3d886b35
 800a8e4:	3dba2e6e 	.word	0x3dba2e6e
 800a8e8:	3e124925 	.word	0x3e124925
 800a8ec:	3eaaaaab 	.word	0x3eaaaaab
 800a8f0:	bd15a221 	.word	0xbd15a221
 800a8f4:	bd9d8795 	.word	0xbd9d8795
 800a8f8:	bde38e38 	.word	0xbde38e38
 800a8fc:	be4ccccd 	.word	0xbe4ccccd
 800a900:	401bffff 	.word	0x401bffff
 800a904:	0800f63c 	.word	0x0800f63c
 800a908:	0800f64c 	.word	0x0800f64c

0800a90c <fabsf>:
 800a90c:	ee10 3a10 	vmov	r3, s0
 800a910:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a914:	ee00 3a10 	vmov	s0, r3
 800a918:	4770      	bx	lr

0800a91a <abort>:
 800a91a:	b508      	push	{r3, lr}
 800a91c:	2006      	movs	r0, #6
 800a91e:	f000 fef3 	bl	800b708 <raise>
 800a922:	2001      	movs	r0, #1
 800a924:	f7fa fe96 	bl	8005654 <_exit>

0800a928 <__errno>:
 800a928:	4b01      	ldr	r3, [pc, #4]	; (800a930 <__errno+0x8>)
 800a92a:	6818      	ldr	r0, [r3, #0]
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	20000024 	.word	0x20000024

0800a934 <__libc_init_array>:
 800a934:	b570      	push	{r4, r5, r6, lr}
 800a936:	4d0d      	ldr	r5, [pc, #52]	; (800a96c <__libc_init_array+0x38>)
 800a938:	4c0d      	ldr	r4, [pc, #52]	; (800a970 <__libc_init_array+0x3c>)
 800a93a:	1b64      	subs	r4, r4, r5
 800a93c:	10a4      	asrs	r4, r4, #2
 800a93e:	2600      	movs	r6, #0
 800a940:	42a6      	cmp	r6, r4
 800a942:	d109      	bne.n	800a958 <__libc_init_array+0x24>
 800a944:	4d0b      	ldr	r5, [pc, #44]	; (800a974 <__libc_init_array+0x40>)
 800a946:	4c0c      	ldr	r4, [pc, #48]	; (800a978 <__libc_init_array+0x44>)
 800a948:	f004 fc90 	bl	800f26c <_init>
 800a94c:	1b64      	subs	r4, r4, r5
 800a94e:	10a4      	asrs	r4, r4, #2
 800a950:	2600      	movs	r6, #0
 800a952:	42a6      	cmp	r6, r4
 800a954:	d105      	bne.n	800a962 <__libc_init_array+0x2e>
 800a956:	bd70      	pop	{r4, r5, r6, pc}
 800a958:	f855 3b04 	ldr.w	r3, [r5], #4
 800a95c:	4798      	blx	r3
 800a95e:	3601      	adds	r6, #1
 800a960:	e7ee      	b.n	800a940 <__libc_init_array+0xc>
 800a962:	f855 3b04 	ldr.w	r3, [r5], #4
 800a966:	4798      	blx	r3
 800a968:	3601      	adds	r6, #1
 800a96a:	e7f2      	b.n	800a952 <__libc_init_array+0x1e>
 800a96c:	0800fb0c 	.word	0x0800fb0c
 800a970:	0800fb0c 	.word	0x0800fb0c
 800a974:	0800fb0c 	.word	0x0800fb0c
 800a978:	0800fb1c 	.word	0x0800fb1c

0800a97c <memcpy>:
 800a97c:	440a      	add	r2, r1
 800a97e:	4291      	cmp	r1, r2
 800a980:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a984:	d100      	bne.n	800a988 <memcpy+0xc>
 800a986:	4770      	bx	lr
 800a988:	b510      	push	{r4, lr}
 800a98a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a98e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a992:	4291      	cmp	r1, r2
 800a994:	d1f9      	bne.n	800a98a <memcpy+0xe>
 800a996:	bd10      	pop	{r4, pc}

0800a998 <memset>:
 800a998:	4402      	add	r2, r0
 800a99a:	4603      	mov	r3, r0
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d100      	bne.n	800a9a2 <memset+0xa>
 800a9a0:	4770      	bx	lr
 800a9a2:	f803 1b01 	strb.w	r1, [r3], #1
 800a9a6:	e7f9      	b.n	800a99c <memset+0x4>

0800a9a8 <__cvt>:
 800a9a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9ac:	ec55 4b10 	vmov	r4, r5, d0
 800a9b0:	2d00      	cmp	r5, #0
 800a9b2:	460e      	mov	r6, r1
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	462b      	mov	r3, r5
 800a9b8:	bfbb      	ittet	lt
 800a9ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a9be:	461d      	movlt	r5, r3
 800a9c0:	2300      	movge	r3, #0
 800a9c2:	232d      	movlt	r3, #45	; 0x2d
 800a9c4:	700b      	strb	r3, [r1, #0]
 800a9c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a9cc:	4691      	mov	r9, r2
 800a9ce:	f023 0820 	bic.w	r8, r3, #32
 800a9d2:	bfbc      	itt	lt
 800a9d4:	4622      	movlt	r2, r4
 800a9d6:	4614      	movlt	r4, r2
 800a9d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a9dc:	d005      	beq.n	800a9ea <__cvt+0x42>
 800a9de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a9e2:	d100      	bne.n	800a9e6 <__cvt+0x3e>
 800a9e4:	3601      	adds	r6, #1
 800a9e6:	2102      	movs	r1, #2
 800a9e8:	e000      	b.n	800a9ec <__cvt+0x44>
 800a9ea:	2103      	movs	r1, #3
 800a9ec:	ab03      	add	r3, sp, #12
 800a9ee:	9301      	str	r3, [sp, #4]
 800a9f0:	ab02      	add	r3, sp, #8
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	ec45 4b10 	vmov	d0, r4, r5
 800a9f8:	4653      	mov	r3, sl
 800a9fa:	4632      	mov	r2, r6
 800a9fc:	f001 fdf8 	bl	800c5f0 <_dtoa_r>
 800aa00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aa04:	4607      	mov	r7, r0
 800aa06:	d102      	bne.n	800aa0e <__cvt+0x66>
 800aa08:	f019 0f01 	tst.w	r9, #1
 800aa0c:	d022      	beq.n	800aa54 <__cvt+0xac>
 800aa0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aa12:	eb07 0906 	add.w	r9, r7, r6
 800aa16:	d110      	bne.n	800aa3a <__cvt+0x92>
 800aa18:	783b      	ldrb	r3, [r7, #0]
 800aa1a:	2b30      	cmp	r3, #48	; 0x30
 800aa1c:	d10a      	bne.n	800aa34 <__cvt+0x8c>
 800aa1e:	2200      	movs	r2, #0
 800aa20:	2300      	movs	r3, #0
 800aa22:	4620      	mov	r0, r4
 800aa24:	4629      	mov	r1, r5
 800aa26:	f7f6 f84f 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa2a:	b918      	cbnz	r0, 800aa34 <__cvt+0x8c>
 800aa2c:	f1c6 0601 	rsb	r6, r6, #1
 800aa30:	f8ca 6000 	str.w	r6, [sl]
 800aa34:	f8da 3000 	ldr.w	r3, [sl]
 800aa38:	4499      	add	r9, r3
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	4620      	mov	r0, r4
 800aa40:	4629      	mov	r1, r5
 800aa42:	f7f6 f841 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa46:	b108      	cbz	r0, 800aa4c <__cvt+0xa4>
 800aa48:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa4c:	2230      	movs	r2, #48	; 0x30
 800aa4e:	9b03      	ldr	r3, [sp, #12]
 800aa50:	454b      	cmp	r3, r9
 800aa52:	d307      	bcc.n	800aa64 <__cvt+0xbc>
 800aa54:	9b03      	ldr	r3, [sp, #12]
 800aa56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa58:	1bdb      	subs	r3, r3, r7
 800aa5a:	4638      	mov	r0, r7
 800aa5c:	6013      	str	r3, [r2, #0]
 800aa5e:	b004      	add	sp, #16
 800aa60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa64:	1c59      	adds	r1, r3, #1
 800aa66:	9103      	str	r1, [sp, #12]
 800aa68:	701a      	strb	r2, [r3, #0]
 800aa6a:	e7f0      	b.n	800aa4e <__cvt+0xa6>

0800aa6c <__exponent>:
 800aa6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2900      	cmp	r1, #0
 800aa72:	bfb8      	it	lt
 800aa74:	4249      	neglt	r1, r1
 800aa76:	f803 2b02 	strb.w	r2, [r3], #2
 800aa7a:	bfb4      	ite	lt
 800aa7c:	222d      	movlt	r2, #45	; 0x2d
 800aa7e:	222b      	movge	r2, #43	; 0x2b
 800aa80:	2909      	cmp	r1, #9
 800aa82:	7042      	strb	r2, [r0, #1]
 800aa84:	dd2a      	ble.n	800aadc <__exponent+0x70>
 800aa86:	f10d 0407 	add.w	r4, sp, #7
 800aa8a:	46a4      	mov	ip, r4
 800aa8c:	270a      	movs	r7, #10
 800aa8e:	46a6      	mov	lr, r4
 800aa90:	460a      	mov	r2, r1
 800aa92:	fb91 f6f7 	sdiv	r6, r1, r7
 800aa96:	fb07 1516 	mls	r5, r7, r6, r1
 800aa9a:	3530      	adds	r5, #48	; 0x30
 800aa9c:	2a63      	cmp	r2, #99	; 0x63
 800aa9e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800aaa2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800aaa6:	4631      	mov	r1, r6
 800aaa8:	dcf1      	bgt.n	800aa8e <__exponent+0x22>
 800aaaa:	3130      	adds	r1, #48	; 0x30
 800aaac:	f1ae 0502 	sub.w	r5, lr, #2
 800aab0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800aab4:	1c44      	adds	r4, r0, #1
 800aab6:	4629      	mov	r1, r5
 800aab8:	4561      	cmp	r1, ip
 800aaba:	d30a      	bcc.n	800aad2 <__exponent+0x66>
 800aabc:	f10d 0209 	add.w	r2, sp, #9
 800aac0:	eba2 020e 	sub.w	r2, r2, lr
 800aac4:	4565      	cmp	r5, ip
 800aac6:	bf88      	it	hi
 800aac8:	2200      	movhi	r2, #0
 800aaca:	4413      	add	r3, r2
 800aacc:	1a18      	subs	r0, r3, r0
 800aace:	b003      	add	sp, #12
 800aad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aad6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800aada:	e7ed      	b.n	800aab8 <__exponent+0x4c>
 800aadc:	2330      	movs	r3, #48	; 0x30
 800aade:	3130      	adds	r1, #48	; 0x30
 800aae0:	7083      	strb	r3, [r0, #2]
 800aae2:	70c1      	strb	r1, [r0, #3]
 800aae4:	1d03      	adds	r3, r0, #4
 800aae6:	e7f1      	b.n	800aacc <__exponent+0x60>

0800aae8 <_printf_float>:
 800aae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaec:	ed2d 8b02 	vpush	{d8}
 800aaf0:	b08d      	sub	sp, #52	; 0x34
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aaf8:	4616      	mov	r6, r2
 800aafa:	461f      	mov	r7, r3
 800aafc:	4605      	mov	r5, r0
 800aafe:	f002 fed5 	bl	800d8ac <_localeconv_r>
 800ab02:	f8d0 a000 	ldr.w	sl, [r0]
 800ab06:	4650      	mov	r0, sl
 800ab08:	f7f5 fb62 	bl	80001d0 <strlen>
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	930a      	str	r3, [sp, #40]	; 0x28
 800ab10:	6823      	ldr	r3, [r4, #0]
 800ab12:	9305      	str	r3, [sp, #20]
 800ab14:	f8d8 3000 	ldr.w	r3, [r8]
 800ab18:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ab1c:	3307      	adds	r3, #7
 800ab1e:	f023 0307 	bic.w	r3, r3, #7
 800ab22:	f103 0208 	add.w	r2, r3, #8
 800ab26:	f8c8 2000 	str.w	r2, [r8]
 800ab2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ab32:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ab36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ab3a:	9307      	str	r3, [sp, #28]
 800ab3c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ab40:	ee08 0a10 	vmov	s16, r0
 800ab44:	4b9f      	ldr	r3, [pc, #636]	; (800adc4 <_printf_float+0x2dc>)
 800ab46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab4e:	f7f5 ffed 	bl	8000b2c <__aeabi_dcmpun>
 800ab52:	bb88      	cbnz	r0, 800abb8 <_printf_float+0xd0>
 800ab54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab58:	4b9a      	ldr	r3, [pc, #616]	; (800adc4 <_printf_float+0x2dc>)
 800ab5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab5e:	f7f5 ffc7 	bl	8000af0 <__aeabi_dcmple>
 800ab62:	bb48      	cbnz	r0, 800abb8 <_printf_float+0xd0>
 800ab64:	2200      	movs	r2, #0
 800ab66:	2300      	movs	r3, #0
 800ab68:	4640      	mov	r0, r8
 800ab6a:	4649      	mov	r1, r9
 800ab6c:	f7f5 ffb6 	bl	8000adc <__aeabi_dcmplt>
 800ab70:	b110      	cbz	r0, 800ab78 <_printf_float+0x90>
 800ab72:	232d      	movs	r3, #45	; 0x2d
 800ab74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab78:	4b93      	ldr	r3, [pc, #588]	; (800adc8 <_printf_float+0x2e0>)
 800ab7a:	4894      	ldr	r0, [pc, #592]	; (800adcc <_printf_float+0x2e4>)
 800ab7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ab80:	bf94      	ite	ls
 800ab82:	4698      	movls	r8, r3
 800ab84:	4680      	movhi	r8, r0
 800ab86:	2303      	movs	r3, #3
 800ab88:	6123      	str	r3, [r4, #16]
 800ab8a:	9b05      	ldr	r3, [sp, #20]
 800ab8c:	f023 0204 	bic.w	r2, r3, #4
 800ab90:	6022      	str	r2, [r4, #0]
 800ab92:	f04f 0900 	mov.w	r9, #0
 800ab96:	9700      	str	r7, [sp, #0]
 800ab98:	4633      	mov	r3, r6
 800ab9a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ab9c:	4621      	mov	r1, r4
 800ab9e:	4628      	mov	r0, r5
 800aba0:	f000 f9d8 	bl	800af54 <_printf_common>
 800aba4:	3001      	adds	r0, #1
 800aba6:	f040 8090 	bne.w	800acca <_printf_float+0x1e2>
 800abaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abae:	b00d      	add	sp, #52	; 0x34
 800abb0:	ecbd 8b02 	vpop	{d8}
 800abb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb8:	4642      	mov	r2, r8
 800abba:	464b      	mov	r3, r9
 800abbc:	4640      	mov	r0, r8
 800abbe:	4649      	mov	r1, r9
 800abc0:	f7f5 ffb4 	bl	8000b2c <__aeabi_dcmpun>
 800abc4:	b140      	cbz	r0, 800abd8 <_printf_float+0xf0>
 800abc6:	464b      	mov	r3, r9
 800abc8:	2b00      	cmp	r3, #0
 800abca:	bfbc      	itt	lt
 800abcc:	232d      	movlt	r3, #45	; 0x2d
 800abce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800abd2:	487f      	ldr	r0, [pc, #508]	; (800add0 <_printf_float+0x2e8>)
 800abd4:	4b7f      	ldr	r3, [pc, #508]	; (800add4 <_printf_float+0x2ec>)
 800abd6:	e7d1      	b.n	800ab7c <_printf_float+0x94>
 800abd8:	6863      	ldr	r3, [r4, #4]
 800abda:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800abde:	9206      	str	r2, [sp, #24]
 800abe0:	1c5a      	adds	r2, r3, #1
 800abe2:	d13f      	bne.n	800ac64 <_printf_float+0x17c>
 800abe4:	2306      	movs	r3, #6
 800abe6:	6063      	str	r3, [r4, #4]
 800abe8:	9b05      	ldr	r3, [sp, #20]
 800abea:	6861      	ldr	r1, [r4, #4]
 800abec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800abf0:	2300      	movs	r3, #0
 800abf2:	9303      	str	r3, [sp, #12]
 800abf4:	ab0a      	add	r3, sp, #40	; 0x28
 800abf6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800abfa:	ab09      	add	r3, sp, #36	; 0x24
 800abfc:	ec49 8b10 	vmov	d0, r8, r9
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	6022      	str	r2, [r4, #0]
 800ac04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ac08:	4628      	mov	r0, r5
 800ac0a:	f7ff fecd 	bl	800a9a8 <__cvt>
 800ac0e:	9b06      	ldr	r3, [sp, #24]
 800ac10:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac12:	2b47      	cmp	r3, #71	; 0x47
 800ac14:	4680      	mov	r8, r0
 800ac16:	d108      	bne.n	800ac2a <_printf_float+0x142>
 800ac18:	1cc8      	adds	r0, r1, #3
 800ac1a:	db02      	blt.n	800ac22 <_printf_float+0x13a>
 800ac1c:	6863      	ldr	r3, [r4, #4]
 800ac1e:	4299      	cmp	r1, r3
 800ac20:	dd41      	ble.n	800aca6 <_printf_float+0x1be>
 800ac22:	f1ab 0b02 	sub.w	fp, fp, #2
 800ac26:	fa5f fb8b 	uxtb.w	fp, fp
 800ac2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ac2e:	d820      	bhi.n	800ac72 <_printf_float+0x18a>
 800ac30:	3901      	subs	r1, #1
 800ac32:	465a      	mov	r2, fp
 800ac34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ac38:	9109      	str	r1, [sp, #36]	; 0x24
 800ac3a:	f7ff ff17 	bl	800aa6c <__exponent>
 800ac3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac40:	1813      	adds	r3, r2, r0
 800ac42:	2a01      	cmp	r2, #1
 800ac44:	4681      	mov	r9, r0
 800ac46:	6123      	str	r3, [r4, #16]
 800ac48:	dc02      	bgt.n	800ac50 <_printf_float+0x168>
 800ac4a:	6822      	ldr	r2, [r4, #0]
 800ac4c:	07d2      	lsls	r2, r2, #31
 800ac4e:	d501      	bpl.n	800ac54 <_printf_float+0x16c>
 800ac50:	3301      	adds	r3, #1
 800ac52:	6123      	str	r3, [r4, #16]
 800ac54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d09c      	beq.n	800ab96 <_printf_float+0xae>
 800ac5c:	232d      	movs	r3, #45	; 0x2d
 800ac5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac62:	e798      	b.n	800ab96 <_printf_float+0xae>
 800ac64:	9a06      	ldr	r2, [sp, #24]
 800ac66:	2a47      	cmp	r2, #71	; 0x47
 800ac68:	d1be      	bne.n	800abe8 <_printf_float+0x100>
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1bc      	bne.n	800abe8 <_printf_float+0x100>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e7b9      	b.n	800abe6 <_printf_float+0xfe>
 800ac72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ac76:	d118      	bne.n	800acaa <_printf_float+0x1c2>
 800ac78:	2900      	cmp	r1, #0
 800ac7a:	6863      	ldr	r3, [r4, #4]
 800ac7c:	dd0b      	ble.n	800ac96 <_printf_float+0x1ae>
 800ac7e:	6121      	str	r1, [r4, #16]
 800ac80:	b913      	cbnz	r3, 800ac88 <_printf_float+0x1a0>
 800ac82:	6822      	ldr	r2, [r4, #0]
 800ac84:	07d0      	lsls	r0, r2, #31
 800ac86:	d502      	bpl.n	800ac8e <_printf_float+0x1a6>
 800ac88:	3301      	adds	r3, #1
 800ac8a:	440b      	add	r3, r1
 800ac8c:	6123      	str	r3, [r4, #16]
 800ac8e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ac90:	f04f 0900 	mov.w	r9, #0
 800ac94:	e7de      	b.n	800ac54 <_printf_float+0x16c>
 800ac96:	b913      	cbnz	r3, 800ac9e <_printf_float+0x1b6>
 800ac98:	6822      	ldr	r2, [r4, #0]
 800ac9a:	07d2      	lsls	r2, r2, #31
 800ac9c:	d501      	bpl.n	800aca2 <_printf_float+0x1ba>
 800ac9e:	3302      	adds	r3, #2
 800aca0:	e7f4      	b.n	800ac8c <_printf_float+0x1a4>
 800aca2:	2301      	movs	r3, #1
 800aca4:	e7f2      	b.n	800ac8c <_printf_float+0x1a4>
 800aca6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800acaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acac:	4299      	cmp	r1, r3
 800acae:	db05      	blt.n	800acbc <_printf_float+0x1d4>
 800acb0:	6823      	ldr	r3, [r4, #0]
 800acb2:	6121      	str	r1, [r4, #16]
 800acb4:	07d8      	lsls	r0, r3, #31
 800acb6:	d5ea      	bpl.n	800ac8e <_printf_float+0x1a6>
 800acb8:	1c4b      	adds	r3, r1, #1
 800acba:	e7e7      	b.n	800ac8c <_printf_float+0x1a4>
 800acbc:	2900      	cmp	r1, #0
 800acbe:	bfd4      	ite	le
 800acc0:	f1c1 0202 	rsble	r2, r1, #2
 800acc4:	2201      	movgt	r2, #1
 800acc6:	4413      	add	r3, r2
 800acc8:	e7e0      	b.n	800ac8c <_printf_float+0x1a4>
 800acca:	6823      	ldr	r3, [r4, #0]
 800accc:	055a      	lsls	r2, r3, #21
 800acce:	d407      	bmi.n	800ace0 <_printf_float+0x1f8>
 800acd0:	6923      	ldr	r3, [r4, #16]
 800acd2:	4642      	mov	r2, r8
 800acd4:	4631      	mov	r1, r6
 800acd6:	4628      	mov	r0, r5
 800acd8:	47b8      	blx	r7
 800acda:	3001      	adds	r0, #1
 800acdc:	d12c      	bne.n	800ad38 <_printf_float+0x250>
 800acde:	e764      	b.n	800abaa <_printf_float+0xc2>
 800ace0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ace4:	f240 80e0 	bls.w	800aea8 <_printf_float+0x3c0>
 800ace8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800acec:	2200      	movs	r2, #0
 800acee:	2300      	movs	r3, #0
 800acf0:	f7f5 feea 	bl	8000ac8 <__aeabi_dcmpeq>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d034      	beq.n	800ad62 <_printf_float+0x27a>
 800acf8:	4a37      	ldr	r2, [pc, #220]	; (800add8 <_printf_float+0x2f0>)
 800acfa:	2301      	movs	r3, #1
 800acfc:	4631      	mov	r1, r6
 800acfe:	4628      	mov	r0, r5
 800ad00:	47b8      	blx	r7
 800ad02:	3001      	adds	r0, #1
 800ad04:	f43f af51 	beq.w	800abaa <_printf_float+0xc2>
 800ad08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	db02      	blt.n	800ad16 <_printf_float+0x22e>
 800ad10:	6823      	ldr	r3, [r4, #0]
 800ad12:	07d8      	lsls	r0, r3, #31
 800ad14:	d510      	bpl.n	800ad38 <_printf_float+0x250>
 800ad16:	ee18 3a10 	vmov	r3, s16
 800ad1a:	4652      	mov	r2, sl
 800ad1c:	4631      	mov	r1, r6
 800ad1e:	4628      	mov	r0, r5
 800ad20:	47b8      	blx	r7
 800ad22:	3001      	adds	r0, #1
 800ad24:	f43f af41 	beq.w	800abaa <_printf_float+0xc2>
 800ad28:	f04f 0800 	mov.w	r8, #0
 800ad2c:	f104 091a 	add.w	r9, r4, #26
 800ad30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad32:	3b01      	subs	r3, #1
 800ad34:	4543      	cmp	r3, r8
 800ad36:	dc09      	bgt.n	800ad4c <_printf_float+0x264>
 800ad38:	6823      	ldr	r3, [r4, #0]
 800ad3a:	079b      	lsls	r3, r3, #30
 800ad3c:	f100 8105 	bmi.w	800af4a <_printf_float+0x462>
 800ad40:	68e0      	ldr	r0, [r4, #12]
 800ad42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad44:	4298      	cmp	r0, r3
 800ad46:	bfb8      	it	lt
 800ad48:	4618      	movlt	r0, r3
 800ad4a:	e730      	b.n	800abae <_printf_float+0xc6>
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	464a      	mov	r2, r9
 800ad50:	4631      	mov	r1, r6
 800ad52:	4628      	mov	r0, r5
 800ad54:	47b8      	blx	r7
 800ad56:	3001      	adds	r0, #1
 800ad58:	f43f af27 	beq.w	800abaa <_printf_float+0xc2>
 800ad5c:	f108 0801 	add.w	r8, r8, #1
 800ad60:	e7e6      	b.n	800ad30 <_printf_float+0x248>
 800ad62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	dc39      	bgt.n	800addc <_printf_float+0x2f4>
 800ad68:	4a1b      	ldr	r2, [pc, #108]	; (800add8 <_printf_float+0x2f0>)
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	4631      	mov	r1, r6
 800ad6e:	4628      	mov	r0, r5
 800ad70:	47b8      	blx	r7
 800ad72:	3001      	adds	r0, #1
 800ad74:	f43f af19 	beq.w	800abaa <_printf_float+0xc2>
 800ad78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	d102      	bne.n	800ad86 <_printf_float+0x29e>
 800ad80:	6823      	ldr	r3, [r4, #0]
 800ad82:	07d9      	lsls	r1, r3, #31
 800ad84:	d5d8      	bpl.n	800ad38 <_printf_float+0x250>
 800ad86:	ee18 3a10 	vmov	r3, s16
 800ad8a:	4652      	mov	r2, sl
 800ad8c:	4631      	mov	r1, r6
 800ad8e:	4628      	mov	r0, r5
 800ad90:	47b8      	blx	r7
 800ad92:	3001      	adds	r0, #1
 800ad94:	f43f af09 	beq.w	800abaa <_printf_float+0xc2>
 800ad98:	f04f 0900 	mov.w	r9, #0
 800ad9c:	f104 0a1a 	add.w	sl, r4, #26
 800ada0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ada2:	425b      	negs	r3, r3
 800ada4:	454b      	cmp	r3, r9
 800ada6:	dc01      	bgt.n	800adac <_printf_float+0x2c4>
 800ada8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adaa:	e792      	b.n	800acd2 <_printf_float+0x1ea>
 800adac:	2301      	movs	r3, #1
 800adae:	4652      	mov	r2, sl
 800adb0:	4631      	mov	r1, r6
 800adb2:	4628      	mov	r0, r5
 800adb4:	47b8      	blx	r7
 800adb6:	3001      	adds	r0, #1
 800adb8:	f43f aef7 	beq.w	800abaa <_printf_float+0xc2>
 800adbc:	f109 0901 	add.w	r9, r9, #1
 800adc0:	e7ee      	b.n	800ada0 <_printf_float+0x2b8>
 800adc2:	bf00      	nop
 800adc4:	7fefffff 	.word	0x7fefffff
 800adc8:	0800f660 	.word	0x0800f660
 800adcc:	0800f664 	.word	0x0800f664
 800add0:	0800f66c 	.word	0x0800f66c
 800add4:	0800f668 	.word	0x0800f668
 800add8:	0800f670 	.word	0x0800f670
 800addc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ade0:	429a      	cmp	r2, r3
 800ade2:	bfa8      	it	ge
 800ade4:	461a      	movge	r2, r3
 800ade6:	2a00      	cmp	r2, #0
 800ade8:	4691      	mov	r9, r2
 800adea:	dc37      	bgt.n	800ae5c <_printf_float+0x374>
 800adec:	f04f 0b00 	mov.w	fp, #0
 800adf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800adf4:	f104 021a 	add.w	r2, r4, #26
 800adf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800adfa:	9305      	str	r3, [sp, #20]
 800adfc:	eba3 0309 	sub.w	r3, r3, r9
 800ae00:	455b      	cmp	r3, fp
 800ae02:	dc33      	bgt.n	800ae6c <_printf_float+0x384>
 800ae04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	db3b      	blt.n	800ae84 <_printf_float+0x39c>
 800ae0c:	6823      	ldr	r3, [r4, #0]
 800ae0e:	07da      	lsls	r2, r3, #31
 800ae10:	d438      	bmi.n	800ae84 <_printf_float+0x39c>
 800ae12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae14:	9a05      	ldr	r2, [sp, #20]
 800ae16:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae18:	1a9a      	subs	r2, r3, r2
 800ae1a:	eba3 0901 	sub.w	r9, r3, r1
 800ae1e:	4591      	cmp	r9, r2
 800ae20:	bfa8      	it	ge
 800ae22:	4691      	movge	r9, r2
 800ae24:	f1b9 0f00 	cmp.w	r9, #0
 800ae28:	dc35      	bgt.n	800ae96 <_printf_float+0x3ae>
 800ae2a:	f04f 0800 	mov.w	r8, #0
 800ae2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae32:	f104 0a1a 	add.w	sl, r4, #26
 800ae36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae3a:	1a9b      	subs	r3, r3, r2
 800ae3c:	eba3 0309 	sub.w	r3, r3, r9
 800ae40:	4543      	cmp	r3, r8
 800ae42:	f77f af79 	ble.w	800ad38 <_printf_float+0x250>
 800ae46:	2301      	movs	r3, #1
 800ae48:	4652      	mov	r2, sl
 800ae4a:	4631      	mov	r1, r6
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	47b8      	blx	r7
 800ae50:	3001      	adds	r0, #1
 800ae52:	f43f aeaa 	beq.w	800abaa <_printf_float+0xc2>
 800ae56:	f108 0801 	add.w	r8, r8, #1
 800ae5a:	e7ec      	b.n	800ae36 <_printf_float+0x34e>
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	4631      	mov	r1, r6
 800ae60:	4642      	mov	r2, r8
 800ae62:	4628      	mov	r0, r5
 800ae64:	47b8      	blx	r7
 800ae66:	3001      	adds	r0, #1
 800ae68:	d1c0      	bne.n	800adec <_printf_float+0x304>
 800ae6a:	e69e      	b.n	800abaa <_printf_float+0xc2>
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	4631      	mov	r1, r6
 800ae70:	4628      	mov	r0, r5
 800ae72:	9205      	str	r2, [sp, #20]
 800ae74:	47b8      	blx	r7
 800ae76:	3001      	adds	r0, #1
 800ae78:	f43f ae97 	beq.w	800abaa <_printf_float+0xc2>
 800ae7c:	9a05      	ldr	r2, [sp, #20]
 800ae7e:	f10b 0b01 	add.w	fp, fp, #1
 800ae82:	e7b9      	b.n	800adf8 <_printf_float+0x310>
 800ae84:	ee18 3a10 	vmov	r3, s16
 800ae88:	4652      	mov	r2, sl
 800ae8a:	4631      	mov	r1, r6
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	47b8      	blx	r7
 800ae90:	3001      	adds	r0, #1
 800ae92:	d1be      	bne.n	800ae12 <_printf_float+0x32a>
 800ae94:	e689      	b.n	800abaa <_printf_float+0xc2>
 800ae96:	9a05      	ldr	r2, [sp, #20]
 800ae98:	464b      	mov	r3, r9
 800ae9a:	4442      	add	r2, r8
 800ae9c:	4631      	mov	r1, r6
 800ae9e:	4628      	mov	r0, r5
 800aea0:	47b8      	blx	r7
 800aea2:	3001      	adds	r0, #1
 800aea4:	d1c1      	bne.n	800ae2a <_printf_float+0x342>
 800aea6:	e680      	b.n	800abaa <_printf_float+0xc2>
 800aea8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aeaa:	2a01      	cmp	r2, #1
 800aeac:	dc01      	bgt.n	800aeb2 <_printf_float+0x3ca>
 800aeae:	07db      	lsls	r3, r3, #31
 800aeb0:	d538      	bpl.n	800af24 <_printf_float+0x43c>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	4642      	mov	r2, r8
 800aeb6:	4631      	mov	r1, r6
 800aeb8:	4628      	mov	r0, r5
 800aeba:	47b8      	blx	r7
 800aebc:	3001      	adds	r0, #1
 800aebe:	f43f ae74 	beq.w	800abaa <_printf_float+0xc2>
 800aec2:	ee18 3a10 	vmov	r3, s16
 800aec6:	4652      	mov	r2, sl
 800aec8:	4631      	mov	r1, r6
 800aeca:	4628      	mov	r0, r5
 800aecc:	47b8      	blx	r7
 800aece:	3001      	adds	r0, #1
 800aed0:	f43f ae6b 	beq.w	800abaa <_printf_float+0xc2>
 800aed4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aed8:	2200      	movs	r2, #0
 800aeda:	2300      	movs	r3, #0
 800aedc:	f7f5 fdf4 	bl	8000ac8 <__aeabi_dcmpeq>
 800aee0:	b9d8      	cbnz	r0, 800af1a <_printf_float+0x432>
 800aee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aee4:	f108 0201 	add.w	r2, r8, #1
 800aee8:	3b01      	subs	r3, #1
 800aeea:	4631      	mov	r1, r6
 800aeec:	4628      	mov	r0, r5
 800aeee:	47b8      	blx	r7
 800aef0:	3001      	adds	r0, #1
 800aef2:	d10e      	bne.n	800af12 <_printf_float+0x42a>
 800aef4:	e659      	b.n	800abaa <_printf_float+0xc2>
 800aef6:	2301      	movs	r3, #1
 800aef8:	4652      	mov	r2, sl
 800aefa:	4631      	mov	r1, r6
 800aefc:	4628      	mov	r0, r5
 800aefe:	47b8      	blx	r7
 800af00:	3001      	adds	r0, #1
 800af02:	f43f ae52 	beq.w	800abaa <_printf_float+0xc2>
 800af06:	f108 0801 	add.w	r8, r8, #1
 800af0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af0c:	3b01      	subs	r3, #1
 800af0e:	4543      	cmp	r3, r8
 800af10:	dcf1      	bgt.n	800aef6 <_printf_float+0x40e>
 800af12:	464b      	mov	r3, r9
 800af14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800af18:	e6dc      	b.n	800acd4 <_printf_float+0x1ec>
 800af1a:	f04f 0800 	mov.w	r8, #0
 800af1e:	f104 0a1a 	add.w	sl, r4, #26
 800af22:	e7f2      	b.n	800af0a <_printf_float+0x422>
 800af24:	2301      	movs	r3, #1
 800af26:	4642      	mov	r2, r8
 800af28:	e7df      	b.n	800aeea <_printf_float+0x402>
 800af2a:	2301      	movs	r3, #1
 800af2c:	464a      	mov	r2, r9
 800af2e:	4631      	mov	r1, r6
 800af30:	4628      	mov	r0, r5
 800af32:	47b8      	blx	r7
 800af34:	3001      	adds	r0, #1
 800af36:	f43f ae38 	beq.w	800abaa <_printf_float+0xc2>
 800af3a:	f108 0801 	add.w	r8, r8, #1
 800af3e:	68e3      	ldr	r3, [r4, #12]
 800af40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af42:	1a5b      	subs	r3, r3, r1
 800af44:	4543      	cmp	r3, r8
 800af46:	dcf0      	bgt.n	800af2a <_printf_float+0x442>
 800af48:	e6fa      	b.n	800ad40 <_printf_float+0x258>
 800af4a:	f04f 0800 	mov.w	r8, #0
 800af4e:	f104 0919 	add.w	r9, r4, #25
 800af52:	e7f4      	b.n	800af3e <_printf_float+0x456>

0800af54 <_printf_common>:
 800af54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af58:	4616      	mov	r6, r2
 800af5a:	4699      	mov	r9, r3
 800af5c:	688a      	ldr	r2, [r1, #8]
 800af5e:	690b      	ldr	r3, [r1, #16]
 800af60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af64:	4293      	cmp	r3, r2
 800af66:	bfb8      	it	lt
 800af68:	4613      	movlt	r3, r2
 800af6a:	6033      	str	r3, [r6, #0]
 800af6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af70:	4607      	mov	r7, r0
 800af72:	460c      	mov	r4, r1
 800af74:	b10a      	cbz	r2, 800af7a <_printf_common+0x26>
 800af76:	3301      	adds	r3, #1
 800af78:	6033      	str	r3, [r6, #0]
 800af7a:	6823      	ldr	r3, [r4, #0]
 800af7c:	0699      	lsls	r1, r3, #26
 800af7e:	bf42      	ittt	mi
 800af80:	6833      	ldrmi	r3, [r6, #0]
 800af82:	3302      	addmi	r3, #2
 800af84:	6033      	strmi	r3, [r6, #0]
 800af86:	6825      	ldr	r5, [r4, #0]
 800af88:	f015 0506 	ands.w	r5, r5, #6
 800af8c:	d106      	bne.n	800af9c <_printf_common+0x48>
 800af8e:	f104 0a19 	add.w	sl, r4, #25
 800af92:	68e3      	ldr	r3, [r4, #12]
 800af94:	6832      	ldr	r2, [r6, #0]
 800af96:	1a9b      	subs	r3, r3, r2
 800af98:	42ab      	cmp	r3, r5
 800af9a:	dc26      	bgt.n	800afea <_printf_common+0x96>
 800af9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800afa0:	1e13      	subs	r3, r2, #0
 800afa2:	6822      	ldr	r2, [r4, #0]
 800afa4:	bf18      	it	ne
 800afa6:	2301      	movne	r3, #1
 800afa8:	0692      	lsls	r2, r2, #26
 800afaa:	d42b      	bmi.n	800b004 <_printf_common+0xb0>
 800afac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afb0:	4649      	mov	r1, r9
 800afb2:	4638      	mov	r0, r7
 800afb4:	47c0      	blx	r8
 800afb6:	3001      	adds	r0, #1
 800afb8:	d01e      	beq.n	800aff8 <_printf_common+0xa4>
 800afba:	6823      	ldr	r3, [r4, #0]
 800afbc:	68e5      	ldr	r5, [r4, #12]
 800afbe:	6832      	ldr	r2, [r6, #0]
 800afc0:	f003 0306 	and.w	r3, r3, #6
 800afc4:	2b04      	cmp	r3, #4
 800afc6:	bf08      	it	eq
 800afc8:	1aad      	subeq	r5, r5, r2
 800afca:	68a3      	ldr	r3, [r4, #8]
 800afcc:	6922      	ldr	r2, [r4, #16]
 800afce:	bf0c      	ite	eq
 800afd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afd4:	2500      	movne	r5, #0
 800afd6:	4293      	cmp	r3, r2
 800afd8:	bfc4      	itt	gt
 800afda:	1a9b      	subgt	r3, r3, r2
 800afdc:	18ed      	addgt	r5, r5, r3
 800afde:	2600      	movs	r6, #0
 800afe0:	341a      	adds	r4, #26
 800afe2:	42b5      	cmp	r5, r6
 800afe4:	d11a      	bne.n	800b01c <_printf_common+0xc8>
 800afe6:	2000      	movs	r0, #0
 800afe8:	e008      	b.n	800affc <_printf_common+0xa8>
 800afea:	2301      	movs	r3, #1
 800afec:	4652      	mov	r2, sl
 800afee:	4649      	mov	r1, r9
 800aff0:	4638      	mov	r0, r7
 800aff2:	47c0      	blx	r8
 800aff4:	3001      	adds	r0, #1
 800aff6:	d103      	bne.n	800b000 <_printf_common+0xac>
 800aff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800affc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b000:	3501      	adds	r5, #1
 800b002:	e7c6      	b.n	800af92 <_printf_common+0x3e>
 800b004:	18e1      	adds	r1, r4, r3
 800b006:	1c5a      	adds	r2, r3, #1
 800b008:	2030      	movs	r0, #48	; 0x30
 800b00a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b00e:	4422      	add	r2, r4
 800b010:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b014:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b018:	3302      	adds	r3, #2
 800b01a:	e7c7      	b.n	800afac <_printf_common+0x58>
 800b01c:	2301      	movs	r3, #1
 800b01e:	4622      	mov	r2, r4
 800b020:	4649      	mov	r1, r9
 800b022:	4638      	mov	r0, r7
 800b024:	47c0      	blx	r8
 800b026:	3001      	adds	r0, #1
 800b028:	d0e6      	beq.n	800aff8 <_printf_common+0xa4>
 800b02a:	3601      	adds	r6, #1
 800b02c:	e7d9      	b.n	800afe2 <_printf_common+0x8e>
	...

0800b030 <_printf_i>:
 800b030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b034:	7e0f      	ldrb	r7, [r1, #24]
 800b036:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b038:	2f78      	cmp	r7, #120	; 0x78
 800b03a:	4691      	mov	r9, r2
 800b03c:	4680      	mov	r8, r0
 800b03e:	460c      	mov	r4, r1
 800b040:	469a      	mov	sl, r3
 800b042:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b046:	d807      	bhi.n	800b058 <_printf_i+0x28>
 800b048:	2f62      	cmp	r7, #98	; 0x62
 800b04a:	d80a      	bhi.n	800b062 <_printf_i+0x32>
 800b04c:	2f00      	cmp	r7, #0
 800b04e:	f000 80d8 	beq.w	800b202 <_printf_i+0x1d2>
 800b052:	2f58      	cmp	r7, #88	; 0x58
 800b054:	f000 80a3 	beq.w	800b19e <_printf_i+0x16e>
 800b058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b05c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b060:	e03a      	b.n	800b0d8 <_printf_i+0xa8>
 800b062:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b066:	2b15      	cmp	r3, #21
 800b068:	d8f6      	bhi.n	800b058 <_printf_i+0x28>
 800b06a:	a101      	add	r1, pc, #4	; (adr r1, 800b070 <_printf_i+0x40>)
 800b06c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b070:	0800b0c9 	.word	0x0800b0c9
 800b074:	0800b0dd 	.word	0x0800b0dd
 800b078:	0800b059 	.word	0x0800b059
 800b07c:	0800b059 	.word	0x0800b059
 800b080:	0800b059 	.word	0x0800b059
 800b084:	0800b059 	.word	0x0800b059
 800b088:	0800b0dd 	.word	0x0800b0dd
 800b08c:	0800b059 	.word	0x0800b059
 800b090:	0800b059 	.word	0x0800b059
 800b094:	0800b059 	.word	0x0800b059
 800b098:	0800b059 	.word	0x0800b059
 800b09c:	0800b1e9 	.word	0x0800b1e9
 800b0a0:	0800b10d 	.word	0x0800b10d
 800b0a4:	0800b1cb 	.word	0x0800b1cb
 800b0a8:	0800b059 	.word	0x0800b059
 800b0ac:	0800b059 	.word	0x0800b059
 800b0b0:	0800b20b 	.word	0x0800b20b
 800b0b4:	0800b059 	.word	0x0800b059
 800b0b8:	0800b10d 	.word	0x0800b10d
 800b0bc:	0800b059 	.word	0x0800b059
 800b0c0:	0800b059 	.word	0x0800b059
 800b0c4:	0800b1d3 	.word	0x0800b1d3
 800b0c8:	682b      	ldr	r3, [r5, #0]
 800b0ca:	1d1a      	adds	r2, r3, #4
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	602a      	str	r2, [r5, #0]
 800b0d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e0a3      	b.n	800b224 <_printf_i+0x1f4>
 800b0dc:	6820      	ldr	r0, [r4, #0]
 800b0de:	6829      	ldr	r1, [r5, #0]
 800b0e0:	0606      	lsls	r6, r0, #24
 800b0e2:	f101 0304 	add.w	r3, r1, #4
 800b0e6:	d50a      	bpl.n	800b0fe <_printf_i+0xce>
 800b0e8:	680e      	ldr	r6, [r1, #0]
 800b0ea:	602b      	str	r3, [r5, #0]
 800b0ec:	2e00      	cmp	r6, #0
 800b0ee:	da03      	bge.n	800b0f8 <_printf_i+0xc8>
 800b0f0:	232d      	movs	r3, #45	; 0x2d
 800b0f2:	4276      	negs	r6, r6
 800b0f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0f8:	485e      	ldr	r0, [pc, #376]	; (800b274 <_printf_i+0x244>)
 800b0fa:	230a      	movs	r3, #10
 800b0fc:	e019      	b.n	800b132 <_printf_i+0x102>
 800b0fe:	680e      	ldr	r6, [r1, #0]
 800b100:	602b      	str	r3, [r5, #0]
 800b102:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b106:	bf18      	it	ne
 800b108:	b236      	sxthne	r6, r6
 800b10a:	e7ef      	b.n	800b0ec <_printf_i+0xbc>
 800b10c:	682b      	ldr	r3, [r5, #0]
 800b10e:	6820      	ldr	r0, [r4, #0]
 800b110:	1d19      	adds	r1, r3, #4
 800b112:	6029      	str	r1, [r5, #0]
 800b114:	0601      	lsls	r1, r0, #24
 800b116:	d501      	bpl.n	800b11c <_printf_i+0xec>
 800b118:	681e      	ldr	r6, [r3, #0]
 800b11a:	e002      	b.n	800b122 <_printf_i+0xf2>
 800b11c:	0646      	lsls	r6, r0, #25
 800b11e:	d5fb      	bpl.n	800b118 <_printf_i+0xe8>
 800b120:	881e      	ldrh	r6, [r3, #0]
 800b122:	4854      	ldr	r0, [pc, #336]	; (800b274 <_printf_i+0x244>)
 800b124:	2f6f      	cmp	r7, #111	; 0x6f
 800b126:	bf0c      	ite	eq
 800b128:	2308      	moveq	r3, #8
 800b12a:	230a      	movne	r3, #10
 800b12c:	2100      	movs	r1, #0
 800b12e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b132:	6865      	ldr	r5, [r4, #4]
 800b134:	60a5      	str	r5, [r4, #8]
 800b136:	2d00      	cmp	r5, #0
 800b138:	bfa2      	ittt	ge
 800b13a:	6821      	ldrge	r1, [r4, #0]
 800b13c:	f021 0104 	bicge.w	r1, r1, #4
 800b140:	6021      	strge	r1, [r4, #0]
 800b142:	b90e      	cbnz	r6, 800b148 <_printf_i+0x118>
 800b144:	2d00      	cmp	r5, #0
 800b146:	d04d      	beq.n	800b1e4 <_printf_i+0x1b4>
 800b148:	4615      	mov	r5, r2
 800b14a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b14e:	fb03 6711 	mls	r7, r3, r1, r6
 800b152:	5dc7      	ldrb	r7, [r0, r7]
 800b154:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b158:	4637      	mov	r7, r6
 800b15a:	42bb      	cmp	r3, r7
 800b15c:	460e      	mov	r6, r1
 800b15e:	d9f4      	bls.n	800b14a <_printf_i+0x11a>
 800b160:	2b08      	cmp	r3, #8
 800b162:	d10b      	bne.n	800b17c <_printf_i+0x14c>
 800b164:	6823      	ldr	r3, [r4, #0]
 800b166:	07de      	lsls	r6, r3, #31
 800b168:	d508      	bpl.n	800b17c <_printf_i+0x14c>
 800b16a:	6923      	ldr	r3, [r4, #16]
 800b16c:	6861      	ldr	r1, [r4, #4]
 800b16e:	4299      	cmp	r1, r3
 800b170:	bfde      	ittt	le
 800b172:	2330      	movle	r3, #48	; 0x30
 800b174:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b178:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b17c:	1b52      	subs	r2, r2, r5
 800b17e:	6122      	str	r2, [r4, #16]
 800b180:	f8cd a000 	str.w	sl, [sp]
 800b184:	464b      	mov	r3, r9
 800b186:	aa03      	add	r2, sp, #12
 800b188:	4621      	mov	r1, r4
 800b18a:	4640      	mov	r0, r8
 800b18c:	f7ff fee2 	bl	800af54 <_printf_common>
 800b190:	3001      	adds	r0, #1
 800b192:	d14c      	bne.n	800b22e <_printf_i+0x1fe>
 800b194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b198:	b004      	add	sp, #16
 800b19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b19e:	4835      	ldr	r0, [pc, #212]	; (800b274 <_printf_i+0x244>)
 800b1a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b1a4:	6829      	ldr	r1, [r5, #0]
 800b1a6:	6823      	ldr	r3, [r4, #0]
 800b1a8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b1ac:	6029      	str	r1, [r5, #0]
 800b1ae:	061d      	lsls	r5, r3, #24
 800b1b0:	d514      	bpl.n	800b1dc <_printf_i+0x1ac>
 800b1b2:	07df      	lsls	r7, r3, #31
 800b1b4:	bf44      	itt	mi
 800b1b6:	f043 0320 	orrmi.w	r3, r3, #32
 800b1ba:	6023      	strmi	r3, [r4, #0]
 800b1bc:	b91e      	cbnz	r6, 800b1c6 <_printf_i+0x196>
 800b1be:	6823      	ldr	r3, [r4, #0]
 800b1c0:	f023 0320 	bic.w	r3, r3, #32
 800b1c4:	6023      	str	r3, [r4, #0]
 800b1c6:	2310      	movs	r3, #16
 800b1c8:	e7b0      	b.n	800b12c <_printf_i+0xfc>
 800b1ca:	6823      	ldr	r3, [r4, #0]
 800b1cc:	f043 0320 	orr.w	r3, r3, #32
 800b1d0:	6023      	str	r3, [r4, #0]
 800b1d2:	2378      	movs	r3, #120	; 0x78
 800b1d4:	4828      	ldr	r0, [pc, #160]	; (800b278 <_printf_i+0x248>)
 800b1d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1da:	e7e3      	b.n	800b1a4 <_printf_i+0x174>
 800b1dc:	0659      	lsls	r1, r3, #25
 800b1de:	bf48      	it	mi
 800b1e0:	b2b6      	uxthmi	r6, r6
 800b1e2:	e7e6      	b.n	800b1b2 <_printf_i+0x182>
 800b1e4:	4615      	mov	r5, r2
 800b1e6:	e7bb      	b.n	800b160 <_printf_i+0x130>
 800b1e8:	682b      	ldr	r3, [r5, #0]
 800b1ea:	6826      	ldr	r6, [r4, #0]
 800b1ec:	6961      	ldr	r1, [r4, #20]
 800b1ee:	1d18      	adds	r0, r3, #4
 800b1f0:	6028      	str	r0, [r5, #0]
 800b1f2:	0635      	lsls	r5, r6, #24
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	d501      	bpl.n	800b1fc <_printf_i+0x1cc>
 800b1f8:	6019      	str	r1, [r3, #0]
 800b1fa:	e002      	b.n	800b202 <_printf_i+0x1d2>
 800b1fc:	0670      	lsls	r0, r6, #25
 800b1fe:	d5fb      	bpl.n	800b1f8 <_printf_i+0x1c8>
 800b200:	8019      	strh	r1, [r3, #0]
 800b202:	2300      	movs	r3, #0
 800b204:	6123      	str	r3, [r4, #16]
 800b206:	4615      	mov	r5, r2
 800b208:	e7ba      	b.n	800b180 <_printf_i+0x150>
 800b20a:	682b      	ldr	r3, [r5, #0]
 800b20c:	1d1a      	adds	r2, r3, #4
 800b20e:	602a      	str	r2, [r5, #0]
 800b210:	681d      	ldr	r5, [r3, #0]
 800b212:	6862      	ldr	r2, [r4, #4]
 800b214:	2100      	movs	r1, #0
 800b216:	4628      	mov	r0, r5
 800b218:	f7f4 ffe2 	bl	80001e0 <memchr>
 800b21c:	b108      	cbz	r0, 800b222 <_printf_i+0x1f2>
 800b21e:	1b40      	subs	r0, r0, r5
 800b220:	6060      	str	r0, [r4, #4]
 800b222:	6863      	ldr	r3, [r4, #4]
 800b224:	6123      	str	r3, [r4, #16]
 800b226:	2300      	movs	r3, #0
 800b228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b22c:	e7a8      	b.n	800b180 <_printf_i+0x150>
 800b22e:	6923      	ldr	r3, [r4, #16]
 800b230:	462a      	mov	r2, r5
 800b232:	4649      	mov	r1, r9
 800b234:	4640      	mov	r0, r8
 800b236:	47d0      	blx	sl
 800b238:	3001      	adds	r0, #1
 800b23a:	d0ab      	beq.n	800b194 <_printf_i+0x164>
 800b23c:	6823      	ldr	r3, [r4, #0]
 800b23e:	079b      	lsls	r3, r3, #30
 800b240:	d413      	bmi.n	800b26a <_printf_i+0x23a>
 800b242:	68e0      	ldr	r0, [r4, #12]
 800b244:	9b03      	ldr	r3, [sp, #12]
 800b246:	4298      	cmp	r0, r3
 800b248:	bfb8      	it	lt
 800b24a:	4618      	movlt	r0, r3
 800b24c:	e7a4      	b.n	800b198 <_printf_i+0x168>
 800b24e:	2301      	movs	r3, #1
 800b250:	4632      	mov	r2, r6
 800b252:	4649      	mov	r1, r9
 800b254:	4640      	mov	r0, r8
 800b256:	47d0      	blx	sl
 800b258:	3001      	adds	r0, #1
 800b25a:	d09b      	beq.n	800b194 <_printf_i+0x164>
 800b25c:	3501      	adds	r5, #1
 800b25e:	68e3      	ldr	r3, [r4, #12]
 800b260:	9903      	ldr	r1, [sp, #12]
 800b262:	1a5b      	subs	r3, r3, r1
 800b264:	42ab      	cmp	r3, r5
 800b266:	dcf2      	bgt.n	800b24e <_printf_i+0x21e>
 800b268:	e7eb      	b.n	800b242 <_printf_i+0x212>
 800b26a:	2500      	movs	r5, #0
 800b26c:	f104 0619 	add.w	r6, r4, #25
 800b270:	e7f5      	b.n	800b25e <_printf_i+0x22e>
 800b272:	bf00      	nop
 800b274:	0800f672 	.word	0x0800f672
 800b278:	0800f683 	.word	0x0800f683

0800b27c <_scanf_float>:
 800b27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b280:	b087      	sub	sp, #28
 800b282:	4617      	mov	r7, r2
 800b284:	9303      	str	r3, [sp, #12]
 800b286:	688b      	ldr	r3, [r1, #8]
 800b288:	1e5a      	subs	r2, r3, #1
 800b28a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b28e:	bf83      	ittte	hi
 800b290:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b294:	195b      	addhi	r3, r3, r5
 800b296:	9302      	strhi	r3, [sp, #8]
 800b298:	2300      	movls	r3, #0
 800b29a:	bf86      	itte	hi
 800b29c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b2a0:	608b      	strhi	r3, [r1, #8]
 800b2a2:	9302      	strls	r3, [sp, #8]
 800b2a4:	680b      	ldr	r3, [r1, #0]
 800b2a6:	468b      	mov	fp, r1
 800b2a8:	2500      	movs	r5, #0
 800b2aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b2ae:	f84b 3b1c 	str.w	r3, [fp], #28
 800b2b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b2b6:	4680      	mov	r8, r0
 800b2b8:	460c      	mov	r4, r1
 800b2ba:	465e      	mov	r6, fp
 800b2bc:	46aa      	mov	sl, r5
 800b2be:	46a9      	mov	r9, r5
 800b2c0:	9501      	str	r5, [sp, #4]
 800b2c2:	68a2      	ldr	r2, [r4, #8]
 800b2c4:	b152      	cbz	r2, 800b2dc <_scanf_float+0x60>
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	2b4e      	cmp	r3, #78	; 0x4e
 800b2cc:	d864      	bhi.n	800b398 <_scanf_float+0x11c>
 800b2ce:	2b40      	cmp	r3, #64	; 0x40
 800b2d0:	d83c      	bhi.n	800b34c <_scanf_float+0xd0>
 800b2d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b2d6:	b2c8      	uxtb	r0, r1
 800b2d8:	280e      	cmp	r0, #14
 800b2da:	d93a      	bls.n	800b352 <_scanf_float+0xd6>
 800b2dc:	f1b9 0f00 	cmp.w	r9, #0
 800b2e0:	d003      	beq.n	800b2ea <_scanf_float+0x6e>
 800b2e2:	6823      	ldr	r3, [r4, #0]
 800b2e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b2ee:	f1ba 0f01 	cmp.w	sl, #1
 800b2f2:	f200 8113 	bhi.w	800b51c <_scanf_float+0x2a0>
 800b2f6:	455e      	cmp	r6, fp
 800b2f8:	f200 8105 	bhi.w	800b506 <_scanf_float+0x28a>
 800b2fc:	2501      	movs	r5, #1
 800b2fe:	4628      	mov	r0, r5
 800b300:	b007      	add	sp, #28
 800b302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b306:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b30a:	2a0d      	cmp	r2, #13
 800b30c:	d8e6      	bhi.n	800b2dc <_scanf_float+0x60>
 800b30e:	a101      	add	r1, pc, #4	; (adr r1, 800b314 <_scanf_float+0x98>)
 800b310:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b314:	0800b453 	.word	0x0800b453
 800b318:	0800b2dd 	.word	0x0800b2dd
 800b31c:	0800b2dd 	.word	0x0800b2dd
 800b320:	0800b2dd 	.word	0x0800b2dd
 800b324:	0800b4b3 	.word	0x0800b4b3
 800b328:	0800b48b 	.word	0x0800b48b
 800b32c:	0800b2dd 	.word	0x0800b2dd
 800b330:	0800b2dd 	.word	0x0800b2dd
 800b334:	0800b461 	.word	0x0800b461
 800b338:	0800b2dd 	.word	0x0800b2dd
 800b33c:	0800b2dd 	.word	0x0800b2dd
 800b340:	0800b2dd 	.word	0x0800b2dd
 800b344:	0800b2dd 	.word	0x0800b2dd
 800b348:	0800b419 	.word	0x0800b419
 800b34c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b350:	e7db      	b.n	800b30a <_scanf_float+0x8e>
 800b352:	290e      	cmp	r1, #14
 800b354:	d8c2      	bhi.n	800b2dc <_scanf_float+0x60>
 800b356:	a001      	add	r0, pc, #4	; (adr r0, 800b35c <_scanf_float+0xe0>)
 800b358:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b35c:	0800b40b 	.word	0x0800b40b
 800b360:	0800b2dd 	.word	0x0800b2dd
 800b364:	0800b40b 	.word	0x0800b40b
 800b368:	0800b49f 	.word	0x0800b49f
 800b36c:	0800b2dd 	.word	0x0800b2dd
 800b370:	0800b3b9 	.word	0x0800b3b9
 800b374:	0800b3f5 	.word	0x0800b3f5
 800b378:	0800b3f5 	.word	0x0800b3f5
 800b37c:	0800b3f5 	.word	0x0800b3f5
 800b380:	0800b3f5 	.word	0x0800b3f5
 800b384:	0800b3f5 	.word	0x0800b3f5
 800b388:	0800b3f5 	.word	0x0800b3f5
 800b38c:	0800b3f5 	.word	0x0800b3f5
 800b390:	0800b3f5 	.word	0x0800b3f5
 800b394:	0800b3f5 	.word	0x0800b3f5
 800b398:	2b6e      	cmp	r3, #110	; 0x6e
 800b39a:	d809      	bhi.n	800b3b0 <_scanf_float+0x134>
 800b39c:	2b60      	cmp	r3, #96	; 0x60
 800b39e:	d8b2      	bhi.n	800b306 <_scanf_float+0x8a>
 800b3a0:	2b54      	cmp	r3, #84	; 0x54
 800b3a2:	d077      	beq.n	800b494 <_scanf_float+0x218>
 800b3a4:	2b59      	cmp	r3, #89	; 0x59
 800b3a6:	d199      	bne.n	800b2dc <_scanf_float+0x60>
 800b3a8:	2d07      	cmp	r5, #7
 800b3aa:	d197      	bne.n	800b2dc <_scanf_float+0x60>
 800b3ac:	2508      	movs	r5, #8
 800b3ae:	e029      	b.n	800b404 <_scanf_float+0x188>
 800b3b0:	2b74      	cmp	r3, #116	; 0x74
 800b3b2:	d06f      	beq.n	800b494 <_scanf_float+0x218>
 800b3b4:	2b79      	cmp	r3, #121	; 0x79
 800b3b6:	e7f6      	b.n	800b3a6 <_scanf_float+0x12a>
 800b3b8:	6821      	ldr	r1, [r4, #0]
 800b3ba:	05c8      	lsls	r0, r1, #23
 800b3bc:	d51a      	bpl.n	800b3f4 <_scanf_float+0x178>
 800b3be:	9b02      	ldr	r3, [sp, #8]
 800b3c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b3c4:	6021      	str	r1, [r4, #0]
 800b3c6:	f109 0901 	add.w	r9, r9, #1
 800b3ca:	b11b      	cbz	r3, 800b3d4 <_scanf_float+0x158>
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	3201      	adds	r2, #1
 800b3d0:	9302      	str	r3, [sp, #8]
 800b3d2:	60a2      	str	r2, [r4, #8]
 800b3d4:	68a3      	ldr	r3, [r4, #8]
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	60a3      	str	r3, [r4, #8]
 800b3da:	6923      	ldr	r3, [r4, #16]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	6123      	str	r3, [r4, #16]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	607b      	str	r3, [r7, #4]
 800b3e8:	f340 8084 	ble.w	800b4f4 <_scanf_float+0x278>
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	603b      	str	r3, [r7, #0]
 800b3f2:	e766      	b.n	800b2c2 <_scanf_float+0x46>
 800b3f4:	eb1a 0f05 	cmn.w	sl, r5
 800b3f8:	f47f af70 	bne.w	800b2dc <_scanf_float+0x60>
 800b3fc:	6822      	ldr	r2, [r4, #0]
 800b3fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b402:	6022      	str	r2, [r4, #0]
 800b404:	f806 3b01 	strb.w	r3, [r6], #1
 800b408:	e7e4      	b.n	800b3d4 <_scanf_float+0x158>
 800b40a:	6822      	ldr	r2, [r4, #0]
 800b40c:	0610      	lsls	r0, r2, #24
 800b40e:	f57f af65 	bpl.w	800b2dc <_scanf_float+0x60>
 800b412:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b416:	e7f4      	b.n	800b402 <_scanf_float+0x186>
 800b418:	f1ba 0f00 	cmp.w	sl, #0
 800b41c:	d10e      	bne.n	800b43c <_scanf_float+0x1c0>
 800b41e:	f1b9 0f00 	cmp.w	r9, #0
 800b422:	d10e      	bne.n	800b442 <_scanf_float+0x1c6>
 800b424:	6822      	ldr	r2, [r4, #0]
 800b426:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b42a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b42e:	d108      	bne.n	800b442 <_scanf_float+0x1c6>
 800b430:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b434:	6022      	str	r2, [r4, #0]
 800b436:	f04f 0a01 	mov.w	sl, #1
 800b43a:	e7e3      	b.n	800b404 <_scanf_float+0x188>
 800b43c:	f1ba 0f02 	cmp.w	sl, #2
 800b440:	d055      	beq.n	800b4ee <_scanf_float+0x272>
 800b442:	2d01      	cmp	r5, #1
 800b444:	d002      	beq.n	800b44c <_scanf_float+0x1d0>
 800b446:	2d04      	cmp	r5, #4
 800b448:	f47f af48 	bne.w	800b2dc <_scanf_float+0x60>
 800b44c:	3501      	adds	r5, #1
 800b44e:	b2ed      	uxtb	r5, r5
 800b450:	e7d8      	b.n	800b404 <_scanf_float+0x188>
 800b452:	f1ba 0f01 	cmp.w	sl, #1
 800b456:	f47f af41 	bne.w	800b2dc <_scanf_float+0x60>
 800b45a:	f04f 0a02 	mov.w	sl, #2
 800b45e:	e7d1      	b.n	800b404 <_scanf_float+0x188>
 800b460:	b97d      	cbnz	r5, 800b482 <_scanf_float+0x206>
 800b462:	f1b9 0f00 	cmp.w	r9, #0
 800b466:	f47f af3c 	bne.w	800b2e2 <_scanf_float+0x66>
 800b46a:	6822      	ldr	r2, [r4, #0]
 800b46c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b470:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b474:	f47f af39 	bne.w	800b2ea <_scanf_float+0x6e>
 800b478:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b47c:	6022      	str	r2, [r4, #0]
 800b47e:	2501      	movs	r5, #1
 800b480:	e7c0      	b.n	800b404 <_scanf_float+0x188>
 800b482:	2d03      	cmp	r5, #3
 800b484:	d0e2      	beq.n	800b44c <_scanf_float+0x1d0>
 800b486:	2d05      	cmp	r5, #5
 800b488:	e7de      	b.n	800b448 <_scanf_float+0x1cc>
 800b48a:	2d02      	cmp	r5, #2
 800b48c:	f47f af26 	bne.w	800b2dc <_scanf_float+0x60>
 800b490:	2503      	movs	r5, #3
 800b492:	e7b7      	b.n	800b404 <_scanf_float+0x188>
 800b494:	2d06      	cmp	r5, #6
 800b496:	f47f af21 	bne.w	800b2dc <_scanf_float+0x60>
 800b49a:	2507      	movs	r5, #7
 800b49c:	e7b2      	b.n	800b404 <_scanf_float+0x188>
 800b49e:	6822      	ldr	r2, [r4, #0]
 800b4a0:	0591      	lsls	r1, r2, #22
 800b4a2:	f57f af1b 	bpl.w	800b2dc <_scanf_float+0x60>
 800b4a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b4aa:	6022      	str	r2, [r4, #0]
 800b4ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800b4b0:	e7a8      	b.n	800b404 <_scanf_float+0x188>
 800b4b2:	6822      	ldr	r2, [r4, #0]
 800b4b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b4b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b4bc:	d006      	beq.n	800b4cc <_scanf_float+0x250>
 800b4be:	0550      	lsls	r0, r2, #21
 800b4c0:	f57f af0c 	bpl.w	800b2dc <_scanf_float+0x60>
 800b4c4:	f1b9 0f00 	cmp.w	r9, #0
 800b4c8:	f43f af0f 	beq.w	800b2ea <_scanf_float+0x6e>
 800b4cc:	0591      	lsls	r1, r2, #22
 800b4ce:	bf58      	it	pl
 800b4d0:	9901      	ldrpl	r1, [sp, #4]
 800b4d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b4d6:	bf58      	it	pl
 800b4d8:	eba9 0101 	subpl.w	r1, r9, r1
 800b4dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b4e0:	bf58      	it	pl
 800b4e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b4e6:	6022      	str	r2, [r4, #0]
 800b4e8:	f04f 0900 	mov.w	r9, #0
 800b4ec:	e78a      	b.n	800b404 <_scanf_float+0x188>
 800b4ee:	f04f 0a03 	mov.w	sl, #3
 800b4f2:	e787      	b.n	800b404 <_scanf_float+0x188>
 800b4f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b4f8:	4639      	mov	r1, r7
 800b4fa:	4640      	mov	r0, r8
 800b4fc:	4798      	blx	r3
 800b4fe:	2800      	cmp	r0, #0
 800b500:	f43f aedf 	beq.w	800b2c2 <_scanf_float+0x46>
 800b504:	e6ea      	b.n	800b2dc <_scanf_float+0x60>
 800b506:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b50a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b50e:	463a      	mov	r2, r7
 800b510:	4640      	mov	r0, r8
 800b512:	4798      	blx	r3
 800b514:	6923      	ldr	r3, [r4, #16]
 800b516:	3b01      	subs	r3, #1
 800b518:	6123      	str	r3, [r4, #16]
 800b51a:	e6ec      	b.n	800b2f6 <_scanf_float+0x7a>
 800b51c:	1e6b      	subs	r3, r5, #1
 800b51e:	2b06      	cmp	r3, #6
 800b520:	d825      	bhi.n	800b56e <_scanf_float+0x2f2>
 800b522:	2d02      	cmp	r5, #2
 800b524:	d836      	bhi.n	800b594 <_scanf_float+0x318>
 800b526:	455e      	cmp	r6, fp
 800b528:	f67f aee8 	bls.w	800b2fc <_scanf_float+0x80>
 800b52c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b530:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b534:	463a      	mov	r2, r7
 800b536:	4640      	mov	r0, r8
 800b538:	4798      	blx	r3
 800b53a:	6923      	ldr	r3, [r4, #16]
 800b53c:	3b01      	subs	r3, #1
 800b53e:	6123      	str	r3, [r4, #16]
 800b540:	e7f1      	b.n	800b526 <_scanf_float+0x2aa>
 800b542:	9802      	ldr	r0, [sp, #8]
 800b544:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b548:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b54c:	9002      	str	r0, [sp, #8]
 800b54e:	463a      	mov	r2, r7
 800b550:	4640      	mov	r0, r8
 800b552:	4798      	blx	r3
 800b554:	6923      	ldr	r3, [r4, #16]
 800b556:	3b01      	subs	r3, #1
 800b558:	6123      	str	r3, [r4, #16]
 800b55a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b55e:	fa5f fa8a 	uxtb.w	sl, sl
 800b562:	f1ba 0f02 	cmp.w	sl, #2
 800b566:	d1ec      	bne.n	800b542 <_scanf_float+0x2c6>
 800b568:	3d03      	subs	r5, #3
 800b56a:	b2ed      	uxtb	r5, r5
 800b56c:	1b76      	subs	r6, r6, r5
 800b56e:	6823      	ldr	r3, [r4, #0]
 800b570:	05da      	lsls	r2, r3, #23
 800b572:	d52f      	bpl.n	800b5d4 <_scanf_float+0x358>
 800b574:	055b      	lsls	r3, r3, #21
 800b576:	d510      	bpl.n	800b59a <_scanf_float+0x31e>
 800b578:	455e      	cmp	r6, fp
 800b57a:	f67f aebf 	bls.w	800b2fc <_scanf_float+0x80>
 800b57e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b582:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b586:	463a      	mov	r2, r7
 800b588:	4640      	mov	r0, r8
 800b58a:	4798      	blx	r3
 800b58c:	6923      	ldr	r3, [r4, #16]
 800b58e:	3b01      	subs	r3, #1
 800b590:	6123      	str	r3, [r4, #16]
 800b592:	e7f1      	b.n	800b578 <_scanf_float+0x2fc>
 800b594:	46aa      	mov	sl, r5
 800b596:	9602      	str	r6, [sp, #8]
 800b598:	e7df      	b.n	800b55a <_scanf_float+0x2de>
 800b59a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b59e:	6923      	ldr	r3, [r4, #16]
 800b5a0:	2965      	cmp	r1, #101	; 0x65
 800b5a2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b5a6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800b5aa:	6123      	str	r3, [r4, #16]
 800b5ac:	d00c      	beq.n	800b5c8 <_scanf_float+0x34c>
 800b5ae:	2945      	cmp	r1, #69	; 0x45
 800b5b0:	d00a      	beq.n	800b5c8 <_scanf_float+0x34c>
 800b5b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b5b6:	463a      	mov	r2, r7
 800b5b8:	4640      	mov	r0, r8
 800b5ba:	4798      	blx	r3
 800b5bc:	6923      	ldr	r3, [r4, #16]
 800b5be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b5c2:	3b01      	subs	r3, #1
 800b5c4:	1eb5      	subs	r5, r6, #2
 800b5c6:	6123      	str	r3, [r4, #16]
 800b5c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b5cc:	463a      	mov	r2, r7
 800b5ce:	4640      	mov	r0, r8
 800b5d0:	4798      	blx	r3
 800b5d2:	462e      	mov	r6, r5
 800b5d4:	6825      	ldr	r5, [r4, #0]
 800b5d6:	f015 0510 	ands.w	r5, r5, #16
 800b5da:	d159      	bne.n	800b690 <_scanf_float+0x414>
 800b5dc:	7035      	strb	r5, [r6, #0]
 800b5de:	6823      	ldr	r3, [r4, #0]
 800b5e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b5e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5e8:	d11b      	bne.n	800b622 <_scanf_float+0x3a6>
 800b5ea:	9b01      	ldr	r3, [sp, #4]
 800b5ec:	454b      	cmp	r3, r9
 800b5ee:	eba3 0209 	sub.w	r2, r3, r9
 800b5f2:	d123      	bne.n	800b63c <_scanf_float+0x3c0>
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	4659      	mov	r1, fp
 800b5f8:	4640      	mov	r0, r8
 800b5fa:	f000 fee3 	bl	800c3c4 <_strtod_r>
 800b5fe:	6822      	ldr	r2, [r4, #0]
 800b600:	9b03      	ldr	r3, [sp, #12]
 800b602:	f012 0f02 	tst.w	r2, #2
 800b606:	ec57 6b10 	vmov	r6, r7, d0
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	d021      	beq.n	800b652 <_scanf_float+0x3d6>
 800b60e:	9903      	ldr	r1, [sp, #12]
 800b610:	1d1a      	adds	r2, r3, #4
 800b612:	600a      	str	r2, [r1, #0]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	e9c3 6700 	strd	r6, r7, [r3]
 800b61a:	68e3      	ldr	r3, [r4, #12]
 800b61c:	3301      	adds	r3, #1
 800b61e:	60e3      	str	r3, [r4, #12]
 800b620:	e66d      	b.n	800b2fe <_scanf_float+0x82>
 800b622:	9b04      	ldr	r3, [sp, #16]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d0e5      	beq.n	800b5f4 <_scanf_float+0x378>
 800b628:	9905      	ldr	r1, [sp, #20]
 800b62a:	230a      	movs	r3, #10
 800b62c:	462a      	mov	r2, r5
 800b62e:	3101      	adds	r1, #1
 800b630:	4640      	mov	r0, r8
 800b632:	f000 ff4f 	bl	800c4d4 <_strtol_r>
 800b636:	9b04      	ldr	r3, [sp, #16]
 800b638:	9e05      	ldr	r6, [sp, #20]
 800b63a:	1ac2      	subs	r2, r0, r3
 800b63c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b640:	429e      	cmp	r6, r3
 800b642:	bf28      	it	cs
 800b644:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b648:	4912      	ldr	r1, [pc, #72]	; (800b694 <_scanf_float+0x418>)
 800b64a:	4630      	mov	r0, r6
 800b64c:	f000 f878 	bl	800b740 <siprintf>
 800b650:	e7d0      	b.n	800b5f4 <_scanf_float+0x378>
 800b652:	9903      	ldr	r1, [sp, #12]
 800b654:	f012 0f04 	tst.w	r2, #4
 800b658:	f103 0204 	add.w	r2, r3, #4
 800b65c:	600a      	str	r2, [r1, #0]
 800b65e:	d1d9      	bne.n	800b614 <_scanf_float+0x398>
 800b660:	f8d3 8000 	ldr.w	r8, [r3]
 800b664:	ee10 2a10 	vmov	r2, s0
 800b668:	ee10 0a10 	vmov	r0, s0
 800b66c:	463b      	mov	r3, r7
 800b66e:	4639      	mov	r1, r7
 800b670:	f7f5 fa5c 	bl	8000b2c <__aeabi_dcmpun>
 800b674:	b128      	cbz	r0, 800b682 <_scanf_float+0x406>
 800b676:	4808      	ldr	r0, [pc, #32]	; (800b698 <_scanf_float+0x41c>)
 800b678:	f000 f818 	bl	800b6ac <nanf>
 800b67c:	ed88 0a00 	vstr	s0, [r8]
 800b680:	e7cb      	b.n	800b61a <_scanf_float+0x39e>
 800b682:	4630      	mov	r0, r6
 800b684:	4639      	mov	r1, r7
 800b686:	f7f5 faaf 	bl	8000be8 <__aeabi_d2f>
 800b68a:	f8c8 0000 	str.w	r0, [r8]
 800b68e:	e7c4      	b.n	800b61a <_scanf_float+0x39e>
 800b690:	2500      	movs	r5, #0
 800b692:	e634      	b.n	800b2fe <_scanf_float+0x82>
 800b694:	0800f694 	.word	0x0800f694
 800b698:	0800faa0 	.word	0x0800faa0

0800b69c <realloc>:
 800b69c:	4b02      	ldr	r3, [pc, #8]	; (800b6a8 <realloc+0xc>)
 800b69e:	460a      	mov	r2, r1
 800b6a0:	4601      	mov	r1, r0
 800b6a2:	6818      	ldr	r0, [r3, #0]
 800b6a4:	f002 bed8 	b.w	800e458 <_realloc_r>
 800b6a8:	20000024 	.word	0x20000024

0800b6ac <nanf>:
 800b6ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b6b4 <nanf+0x8>
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	7fc00000 	.word	0x7fc00000

0800b6b8 <_raise_r>:
 800b6b8:	291f      	cmp	r1, #31
 800b6ba:	b538      	push	{r3, r4, r5, lr}
 800b6bc:	4604      	mov	r4, r0
 800b6be:	460d      	mov	r5, r1
 800b6c0:	d904      	bls.n	800b6cc <_raise_r+0x14>
 800b6c2:	2316      	movs	r3, #22
 800b6c4:	6003      	str	r3, [r0, #0]
 800b6c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6ca:	bd38      	pop	{r3, r4, r5, pc}
 800b6cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b6ce:	b112      	cbz	r2, 800b6d6 <_raise_r+0x1e>
 800b6d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6d4:	b94b      	cbnz	r3, 800b6ea <_raise_r+0x32>
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	f000 f830 	bl	800b73c <_getpid_r>
 800b6dc:	462a      	mov	r2, r5
 800b6de:	4601      	mov	r1, r0
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6e6:	f000 b817 	b.w	800b718 <_kill_r>
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d00a      	beq.n	800b704 <_raise_r+0x4c>
 800b6ee:	1c59      	adds	r1, r3, #1
 800b6f0:	d103      	bne.n	800b6fa <_raise_r+0x42>
 800b6f2:	2316      	movs	r3, #22
 800b6f4:	6003      	str	r3, [r0, #0]
 800b6f6:	2001      	movs	r0, #1
 800b6f8:	e7e7      	b.n	800b6ca <_raise_r+0x12>
 800b6fa:	2400      	movs	r4, #0
 800b6fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b700:	4628      	mov	r0, r5
 800b702:	4798      	blx	r3
 800b704:	2000      	movs	r0, #0
 800b706:	e7e0      	b.n	800b6ca <_raise_r+0x12>

0800b708 <raise>:
 800b708:	4b02      	ldr	r3, [pc, #8]	; (800b714 <raise+0xc>)
 800b70a:	4601      	mov	r1, r0
 800b70c:	6818      	ldr	r0, [r3, #0]
 800b70e:	f7ff bfd3 	b.w	800b6b8 <_raise_r>
 800b712:	bf00      	nop
 800b714:	20000024 	.word	0x20000024

0800b718 <_kill_r>:
 800b718:	b538      	push	{r3, r4, r5, lr}
 800b71a:	4d07      	ldr	r5, [pc, #28]	; (800b738 <_kill_r+0x20>)
 800b71c:	2300      	movs	r3, #0
 800b71e:	4604      	mov	r4, r0
 800b720:	4608      	mov	r0, r1
 800b722:	4611      	mov	r1, r2
 800b724:	602b      	str	r3, [r5, #0]
 800b726:	f7f9 ff85 	bl	8005634 <_kill>
 800b72a:	1c43      	adds	r3, r0, #1
 800b72c:	d102      	bne.n	800b734 <_kill_r+0x1c>
 800b72e:	682b      	ldr	r3, [r5, #0]
 800b730:	b103      	cbz	r3, 800b734 <_kill_r+0x1c>
 800b732:	6023      	str	r3, [r4, #0]
 800b734:	bd38      	pop	{r3, r4, r5, pc}
 800b736:	bf00      	nop
 800b738:	20000f98 	.word	0x20000f98

0800b73c <_getpid_r>:
 800b73c:	f7f9 bf72 	b.w	8005624 <_getpid>

0800b740 <siprintf>:
 800b740:	b40e      	push	{r1, r2, r3}
 800b742:	b500      	push	{lr}
 800b744:	b09c      	sub	sp, #112	; 0x70
 800b746:	ab1d      	add	r3, sp, #116	; 0x74
 800b748:	9002      	str	r0, [sp, #8]
 800b74a:	9006      	str	r0, [sp, #24]
 800b74c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b750:	4809      	ldr	r0, [pc, #36]	; (800b778 <siprintf+0x38>)
 800b752:	9107      	str	r1, [sp, #28]
 800b754:	9104      	str	r1, [sp, #16]
 800b756:	4909      	ldr	r1, [pc, #36]	; (800b77c <siprintf+0x3c>)
 800b758:	f853 2b04 	ldr.w	r2, [r3], #4
 800b75c:	9105      	str	r1, [sp, #20]
 800b75e:	6800      	ldr	r0, [r0, #0]
 800b760:	9301      	str	r3, [sp, #4]
 800b762:	a902      	add	r1, sp, #8
 800b764:	f002 ff02 	bl	800e56c <_svfiprintf_r>
 800b768:	9b02      	ldr	r3, [sp, #8]
 800b76a:	2200      	movs	r2, #0
 800b76c:	701a      	strb	r2, [r3, #0]
 800b76e:	b01c      	add	sp, #112	; 0x70
 800b770:	f85d eb04 	ldr.w	lr, [sp], #4
 800b774:	b003      	add	sp, #12
 800b776:	4770      	bx	lr
 800b778:	20000024 	.word	0x20000024
 800b77c:	ffff0208 	.word	0xffff0208

0800b780 <sulp>:
 800b780:	b570      	push	{r4, r5, r6, lr}
 800b782:	4604      	mov	r4, r0
 800b784:	460d      	mov	r5, r1
 800b786:	ec45 4b10 	vmov	d0, r4, r5
 800b78a:	4616      	mov	r6, r2
 800b78c:	f002 fc1e 	bl	800dfcc <__ulp>
 800b790:	ec51 0b10 	vmov	r0, r1, d0
 800b794:	b17e      	cbz	r6, 800b7b6 <sulp+0x36>
 800b796:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b79a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	dd09      	ble.n	800b7b6 <sulp+0x36>
 800b7a2:	051b      	lsls	r3, r3, #20
 800b7a4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b7a8:	2400      	movs	r4, #0
 800b7aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b7ae:	4622      	mov	r2, r4
 800b7b0:	462b      	mov	r3, r5
 800b7b2:	f7f4 ff21 	bl	80005f8 <__aeabi_dmul>
 800b7b6:	bd70      	pop	{r4, r5, r6, pc}

0800b7b8 <_strtod_l>:
 800b7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	ed2d 8b02 	vpush	{d8}
 800b7c0:	b09d      	sub	sp, #116	; 0x74
 800b7c2:	461f      	mov	r7, r3
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	9318      	str	r3, [sp, #96]	; 0x60
 800b7c8:	4ba2      	ldr	r3, [pc, #648]	; (800ba54 <_strtod_l+0x29c>)
 800b7ca:	9213      	str	r2, [sp, #76]	; 0x4c
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	9305      	str	r3, [sp, #20]
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	4688      	mov	r8, r1
 800b7d6:	f7f4 fcfb 	bl	80001d0 <strlen>
 800b7da:	f04f 0a00 	mov.w	sl, #0
 800b7de:	4605      	mov	r5, r0
 800b7e0:	f04f 0b00 	mov.w	fp, #0
 800b7e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b7e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7ea:	781a      	ldrb	r2, [r3, #0]
 800b7ec:	2a2b      	cmp	r2, #43	; 0x2b
 800b7ee:	d04e      	beq.n	800b88e <_strtod_l+0xd6>
 800b7f0:	d83b      	bhi.n	800b86a <_strtod_l+0xb2>
 800b7f2:	2a0d      	cmp	r2, #13
 800b7f4:	d834      	bhi.n	800b860 <_strtod_l+0xa8>
 800b7f6:	2a08      	cmp	r2, #8
 800b7f8:	d834      	bhi.n	800b864 <_strtod_l+0xac>
 800b7fa:	2a00      	cmp	r2, #0
 800b7fc:	d03e      	beq.n	800b87c <_strtod_l+0xc4>
 800b7fe:	2300      	movs	r3, #0
 800b800:	930a      	str	r3, [sp, #40]	; 0x28
 800b802:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b804:	7833      	ldrb	r3, [r6, #0]
 800b806:	2b30      	cmp	r3, #48	; 0x30
 800b808:	f040 80b0 	bne.w	800b96c <_strtod_l+0x1b4>
 800b80c:	7873      	ldrb	r3, [r6, #1]
 800b80e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b812:	2b58      	cmp	r3, #88	; 0x58
 800b814:	d168      	bne.n	800b8e8 <_strtod_l+0x130>
 800b816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b818:	9301      	str	r3, [sp, #4]
 800b81a:	ab18      	add	r3, sp, #96	; 0x60
 800b81c:	9702      	str	r7, [sp, #8]
 800b81e:	9300      	str	r3, [sp, #0]
 800b820:	4a8d      	ldr	r2, [pc, #564]	; (800ba58 <_strtod_l+0x2a0>)
 800b822:	ab19      	add	r3, sp, #100	; 0x64
 800b824:	a917      	add	r1, sp, #92	; 0x5c
 800b826:	4620      	mov	r0, r4
 800b828:	f001 fd38 	bl	800d29c <__gethex>
 800b82c:	f010 0707 	ands.w	r7, r0, #7
 800b830:	4605      	mov	r5, r0
 800b832:	d005      	beq.n	800b840 <_strtod_l+0x88>
 800b834:	2f06      	cmp	r7, #6
 800b836:	d12c      	bne.n	800b892 <_strtod_l+0xda>
 800b838:	3601      	adds	r6, #1
 800b83a:	2300      	movs	r3, #0
 800b83c:	9617      	str	r6, [sp, #92]	; 0x5c
 800b83e:	930a      	str	r3, [sp, #40]	; 0x28
 800b840:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b842:	2b00      	cmp	r3, #0
 800b844:	f040 8590 	bne.w	800c368 <_strtod_l+0xbb0>
 800b848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b84a:	b1eb      	cbz	r3, 800b888 <_strtod_l+0xd0>
 800b84c:	4652      	mov	r2, sl
 800b84e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b852:	ec43 2b10 	vmov	d0, r2, r3
 800b856:	b01d      	add	sp, #116	; 0x74
 800b858:	ecbd 8b02 	vpop	{d8}
 800b85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b860:	2a20      	cmp	r2, #32
 800b862:	d1cc      	bne.n	800b7fe <_strtod_l+0x46>
 800b864:	3301      	adds	r3, #1
 800b866:	9317      	str	r3, [sp, #92]	; 0x5c
 800b868:	e7be      	b.n	800b7e8 <_strtod_l+0x30>
 800b86a:	2a2d      	cmp	r2, #45	; 0x2d
 800b86c:	d1c7      	bne.n	800b7fe <_strtod_l+0x46>
 800b86e:	2201      	movs	r2, #1
 800b870:	920a      	str	r2, [sp, #40]	; 0x28
 800b872:	1c5a      	adds	r2, r3, #1
 800b874:	9217      	str	r2, [sp, #92]	; 0x5c
 800b876:	785b      	ldrb	r3, [r3, #1]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d1c2      	bne.n	800b802 <_strtod_l+0x4a>
 800b87c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b87e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b882:	2b00      	cmp	r3, #0
 800b884:	f040 856e 	bne.w	800c364 <_strtod_l+0xbac>
 800b888:	4652      	mov	r2, sl
 800b88a:	465b      	mov	r3, fp
 800b88c:	e7e1      	b.n	800b852 <_strtod_l+0x9a>
 800b88e:	2200      	movs	r2, #0
 800b890:	e7ee      	b.n	800b870 <_strtod_l+0xb8>
 800b892:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b894:	b13a      	cbz	r2, 800b8a6 <_strtod_l+0xee>
 800b896:	2135      	movs	r1, #53	; 0x35
 800b898:	a81a      	add	r0, sp, #104	; 0x68
 800b89a:	f002 fca2 	bl	800e1e2 <__copybits>
 800b89e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f002 f861 	bl	800d968 <_Bfree>
 800b8a6:	3f01      	subs	r7, #1
 800b8a8:	2f04      	cmp	r7, #4
 800b8aa:	d806      	bhi.n	800b8ba <_strtod_l+0x102>
 800b8ac:	e8df f007 	tbb	[pc, r7]
 800b8b0:	1714030a 	.word	0x1714030a
 800b8b4:	0a          	.byte	0x0a
 800b8b5:	00          	.byte	0x00
 800b8b6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b8ba:	0728      	lsls	r0, r5, #28
 800b8bc:	d5c0      	bpl.n	800b840 <_strtod_l+0x88>
 800b8be:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b8c2:	e7bd      	b.n	800b840 <_strtod_l+0x88>
 800b8c4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b8c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b8ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b8ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b8d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b8d6:	e7f0      	b.n	800b8ba <_strtod_l+0x102>
 800b8d8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ba5c <_strtod_l+0x2a4>
 800b8dc:	e7ed      	b.n	800b8ba <_strtod_l+0x102>
 800b8de:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b8e2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b8e6:	e7e8      	b.n	800b8ba <_strtod_l+0x102>
 800b8e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b8ea:	1c5a      	adds	r2, r3, #1
 800b8ec:	9217      	str	r2, [sp, #92]	; 0x5c
 800b8ee:	785b      	ldrb	r3, [r3, #1]
 800b8f0:	2b30      	cmp	r3, #48	; 0x30
 800b8f2:	d0f9      	beq.n	800b8e8 <_strtod_l+0x130>
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d0a3      	beq.n	800b840 <_strtod_l+0x88>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	f04f 0900 	mov.w	r9, #0
 800b8fe:	9304      	str	r3, [sp, #16]
 800b900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b902:	9308      	str	r3, [sp, #32]
 800b904:	f8cd 901c 	str.w	r9, [sp, #28]
 800b908:	464f      	mov	r7, r9
 800b90a:	220a      	movs	r2, #10
 800b90c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b90e:	7806      	ldrb	r6, [r0, #0]
 800b910:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b914:	b2d9      	uxtb	r1, r3
 800b916:	2909      	cmp	r1, #9
 800b918:	d92a      	bls.n	800b970 <_strtod_l+0x1b8>
 800b91a:	9905      	ldr	r1, [sp, #20]
 800b91c:	462a      	mov	r2, r5
 800b91e:	f002 ff3f 	bl	800e7a0 <strncmp>
 800b922:	b398      	cbz	r0, 800b98c <_strtod_l+0x1d4>
 800b924:	2000      	movs	r0, #0
 800b926:	4632      	mov	r2, r6
 800b928:	463d      	mov	r5, r7
 800b92a:	9005      	str	r0, [sp, #20]
 800b92c:	4603      	mov	r3, r0
 800b92e:	2a65      	cmp	r2, #101	; 0x65
 800b930:	d001      	beq.n	800b936 <_strtod_l+0x17e>
 800b932:	2a45      	cmp	r2, #69	; 0x45
 800b934:	d118      	bne.n	800b968 <_strtod_l+0x1b0>
 800b936:	b91d      	cbnz	r5, 800b940 <_strtod_l+0x188>
 800b938:	9a04      	ldr	r2, [sp, #16]
 800b93a:	4302      	orrs	r2, r0
 800b93c:	d09e      	beq.n	800b87c <_strtod_l+0xc4>
 800b93e:	2500      	movs	r5, #0
 800b940:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b944:	f108 0201 	add.w	r2, r8, #1
 800b948:	9217      	str	r2, [sp, #92]	; 0x5c
 800b94a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b94e:	2a2b      	cmp	r2, #43	; 0x2b
 800b950:	d075      	beq.n	800ba3e <_strtod_l+0x286>
 800b952:	2a2d      	cmp	r2, #45	; 0x2d
 800b954:	d07b      	beq.n	800ba4e <_strtod_l+0x296>
 800b956:	f04f 0c00 	mov.w	ip, #0
 800b95a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b95e:	2909      	cmp	r1, #9
 800b960:	f240 8082 	bls.w	800ba68 <_strtod_l+0x2b0>
 800b964:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b968:	2600      	movs	r6, #0
 800b96a:	e09d      	b.n	800baa8 <_strtod_l+0x2f0>
 800b96c:	2300      	movs	r3, #0
 800b96e:	e7c4      	b.n	800b8fa <_strtod_l+0x142>
 800b970:	2f08      	cmp	r7, #8
 800b972:	bfd8      	it	le
 800b974:	9907      	ldrle	r1, [sp, #28]
 800b976:	f100 0001 	add.w	r0, r0, #1
 800b97a:	bfda      	itte	le
 800b97c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b980:	9307      	strle	r3, [sp, #28]
 800b982:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b986:	3701      	adds	r7, #1
 800b988:	9017      	str	r0, [sp, #92]	; 0x5c
 800b98a:	e7bf      	b.n	800b90c <_strtod_l+0x154>
 800b98c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b98e:	195a      	adds	r2, r3, r5
 800b990:	9217      	str	r2, [sp, #92]	; 0x5c
 800b992:	5d5a      	ldrb	r2, [r3, r5]
 800b994:	2f00      	cmp	r7, #0
 800b996:	d037      	beq.n	800ba08 <_strtod_l+0x250>
 800b998:	9005      	str	r0, [sp, #20]
 800b99a:	463d      	mov	r5, r7
 800b99c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b9a0:	2b09      	cmp	r3, #9
 800b9a2:	d912      	bls.n	800b9ca <_strtod_l+0x212>
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	e7c2      	b.n	800b92e <_strtod_l+0x176>
 800b9a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b9aa:	1c5a      	adds	r2, r3, #1
 800b9ac:	9217      	str	r2, [sp, #92]	; 0x5c
 800b9ae:	785a      	ldrb	r2, [r3, #1]
 800b9b0:	3001      	adds	r0, #1
 800b9b2:	2a30      	cmp	r2, #48	; 0x30
 800b9b4:	d0f8      	beq.n	800b9a8 <_strtod_l+0x1f0>
 800b9b6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b9ba:	2b08      	cmp	r3, #8
 800b9bc:	f200 84d9 	bhi.w	800c372 <_strtod_l+0xbba>
 800b9c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b9c2:	9005      	str	r0, [sp, #20]
 800b9c4:	2000      	movs	r0, #0
 800b9c6:	9308      	str	r3, [sp, #32]
 800b9c8:	4605      	mov	r5, r0
 800b9ca:	3a30      	subs	r2, #48	; 0x30
 800b9cc:	f100 0301 	add.w	r3, r0, #1
 800b9d0:	d014      	beq.n	800b9fc <_strtod_l+0x244>
 800b9d2:	9905      	ldr	r1, [sp, #20]
 800b9d4:	4419      	add	r1, r3
 800b9d6:	9105      	str	r1, [sp, #20]
 800b9d8:	462b      	mov	r3, r5
 800b9da:	eb00 0e05 	add.w	lr, r0, r5
 800b9de:	210a      	movs	r1, #10
 800b9e0:	4573      	cmp	r3, lr
 800b9e2:	d113      	bne.n	800ba0c <_strtod_l+0x254>
 800b9e4:	182b      	adds	r3, r5, r0
 800b9e6:	2b08      	cmp	r3, #8
 800b9e8:	f105 0501 	add.w	r5, r5, #1
 800b9ec:	4405      	add	r5, r0
 800b9ee:	dc1c      	bgt.n	800ba2a <_strtod_l+0x272>
 800b9f0:	9907      	ldr	r1, [sp, #28]
 800b9f2:	230a      	movs	r3, #10
 800b9f4:	fb03 2301 	mla	r3, r3, r1, r2
 800b9f8:	9307      	str	r3, [sp, #28]
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b9fe:	1c51      	adds	r1, r2, #1
 800ba00:	9117      	str	r1, [sp, #92]	; 0x5c
 800ba02:	7852      	ldrb	r2, [r2, #1]
 800ba04:	4618      	mov	r0, r3
 800ba06:	e7c9      	b.n	800b99c <_strtod_l+0x1e4>
 800ba08:	4638      	mov	r0, r7
 800ba0a:	e7d2      	b.n	800b9b2 <_strtod_l+0x1fa>
 800ba0c:	2b08      	cmp	r3, #8
 800ba0e:	dc04      	bgt.n	800ba1a <_strtod_l+0x262>
 800ba10:	9e07      	ldr	r6, [sp, #28]
 800ba12:	434e      	muls	r6, r1
 800ba14:	9607      	str	r6, [sp, #28]
 800ba16:	3301      	adds	r3, #1
 800ba18:	e7e2      	b.n	800b9e0 <_strtod_l+0x228>
 800ba1a:	f103 0c01 	add.w	ip, r3, #1
 800ba1e:	f1bc 0f10 	cmp.w	ip, #16
 800ba22:	bfd8      	it	le
 800ba24:	fb01 f909 	mulle.w	r9, r1, r9
 800ba28:	e7f5      	b.n	800ba16 <_strtod_l+0x25e>
 800ba2a:	2d10      	cmp	r5, #16
 800ba2c:	bfdc      	itt	le
 800ba2e:	230a      	movle	r3, #10
 800ba30:	fb03 2909 	mlale	r9, r3, r9, r2
 800ba34:	e7e1      	b.n	800b9fa <_strtod_l+0x242>
 800ba36:	2300      	movs	r3, #0
 800ba38:	9305      	str	r3, [sp, #20]
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e77c      	b.n	800b938 <_strtod_l+0x180>
 800ba3e:	f04f 0c00 	mov.w	ip, #0
 800ba42:	f108 0202 	add.w	r2, r8, #2
 800ba46:	9217      	str	r2, [sp, #92]	; 0x5c
 800ba48:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ba4c:	e785      	b.n	800b95a <_strtod_l+0x1a2>
 800ba4e:	f04f 0c01 	mov.w	ip, #1
 800ba52:	e7f6      	b.n	800ba42 <_strtod_l+0x28a>
 800ba54:	0800f8e8 	.word	0x0800f8e8
 800ba58:	0800f69c 	.word	0x0800f69c
 800ba5c:	7ff00000 	.word	0x7ff00000
 800ba60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ba62:	1c51      	adds	r1, r2, #1
 800ba64:	9117      	str	r1, [sp, #92]	; 0x5c
 800ba66:	7852      	ldrb	r2, [r2, #1]
 800ba68:	2a30      	cmp	r2, #48	; 0x30
 800ba6a:	d0f9      	beq.n	800ba60 <_strtod_l+0x2a8>
 800ba6c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ba70:	2908      	cmp	r1, #8
 800ba72:	f63f af79 	bhi.w	800b968 <_strtod_l+0x1b0>
 800ba76:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ba7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ba7c:	9206      	str	r2, [sp, #24]
 800ba7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ba80:	1c51      	adds	r1, r2, #1
 800ba82:	9117      	str	r1, [sp, #92]	; 0x5c
 800ba84:	7852      	ldrb	r2, [r2, #1]
 800ba86:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ba8a:	2e09      	cmp	r6, #9
 800ba8c:	d937      	bls.n	800bafe <_strtod_l+0x346>
 800ba8e:	9e06      	ldr	r6, [sp, #24]
 800ba90:	1b89      	subs	r1, r1, r6
 800ba92:	2908      	cmp	r1, #8
 800ba94:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ba98:	dc02      	bgt.n	800baa0 <_strtod_l+0x2e8>
 800ba9a:	4576      	cmp	r6, lr
 800ba9c:	bfa8      	it	ge
 800ba9e:	4676      	movge	r6, lr
 800baa0:	f1bc 0f00 	cmp.w	ip, #0
 800baa4:	d000      	beq.n	800baa8 <_strtod_l+0x2f0>
 800baa6:	4276      	negs	r6, r6
 800baa8:	2d00      	cmp	r5, #0
 800baaa:	d14d      	bne.n	800bb48 <_strtod_l+0x390>
 800baac:	9904      	ldr	r1, [sp, #16]
 800baae:	4301      	orrs	r1, r0
 800bab0:	f47f aec6 	bne.w	800b840 <_strtod_l+0x88>
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	f47f aee1 	bne.w	800b87c <_strtod_l+0xc4>
 800baba:	2a69      	cmp	r2, #105	; 0x69
 800babc:	d027      	beq.n	800bb0e <_strtod_l+0x356>
 800babe:	dc24      	bgt.n	800bb0a <_strtod_l+0x352>
 800bac0:	2a49      	cmp	r2, #73	; 0x49
 800bac2:	d024      	beq.n	800bb0e <_strtod_l+0x356>
 800bac4:	2a4e      	cmp	r2, #78	; 0x4e
 800bac6:	f47f aed9 	bne.w	800b87c <_strtod_l+0xc4>
 800baca:	499f      	ldr	r1, [pc, #636]	; (800bd48 <_strtod_l+0x590>)
 800bacc:	a817      	add	r0, sp, #92	; 0x5c
 800bace:	f001 fe3d 	bl	800d74c <__match>
 800bad2:	2800      	cmp	r0, #0
 800bad4:	f43f aed2 	beq.w	800b87c <_strtod_l+0xc4>
 800bad8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	2b28      	cmp	r3, #40	; 0x28
 800bade:	d12d      	bne.n	800bb3c <_strtod_l+0x384>
 800bae0:	499a      	ldr	r1, [pc, #616]	; (800bd4c <_strtod_l+0x594>)
 800bae2:	aa1a      	add	r2, sp, #104	; 0x68
 800bae4:	a817      	add	r0, sp, #92	; 0x5c
 800bae6:	f001 fe45 	bl	800d774 <__hexnan>
 800baea:	2805      	cmp	r0, #5
 800baec:	d126      	bne.n	800bb3c <_strtod_l+0x384>
 800baee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800baf0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800baf4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800baf8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bafc:	e6a0      	b.n	800b840 <_strtod_l+0x88>
 800bafe:	210a      	movs	r1, #10
 800bb00:	fb01 2e0e 	mla	lr, r1, lr, r2
 800bb04:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bb08:	e7b9      	b.n	800ba7e <_strtod_l+0x2c6>
 800bb0a:	2a6e      	cmp	r2, #110	; 0x6e
 800bb0c:	e7db      	b.n	800bac6 <_strtod_l+0x30e>
 800bb0e:	4990      	ldr	r1, [pc, #576]	; (800bd50 <_strtod_l+0x598>)
 800bb10:	a817      	add	r0, sp, #92	; 0x5c
 800bb12:	f001 fe1b 	bl	800d74c <__match>
 800bb16:	2800      	cmp	r0, #0
 800bb18:	f43f aeb0 	beq.w	800b87c <_strtod_l+0xc4>
 800bb1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb1e:	498d      	ldr	r1, [pc, #564]	; (800bd54 <_strtod_l+0x59c>)
 800bb20:	3b01      	subs	r3, #1
 800bb22:	a817      	add	r0, sp, #92	; 0x5c
 800bb24:	9317      	str	r3, [sp, #92]	; 0x5c
 800bb26:	f001 fe11 	bl	800d74c <__match>
 800bb2a:	b910      	cbnz	r0, 800bb32 <_strtod_l+0x37a>
 800bb2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb2e:	3301      	adds	r3, #1
 800bb30:	9317      	str	r3, [sp, #92]	; 0x5c
 800bb32:	f8df b230 	ldr.w	fp, [pc, #560]	; 800bd64 <_strtod_l+0x5ac>
 800bb36:	f04f 0a00 	mov.w	sl, #0
 800bb3a:	e681      	b.n	800b840 <_strtod_l+0x88>
 800bb3c:	4886      	ldr	r0, [pc, #536]	; (800bd58 <_strtod_l+0x5a0>)
 800bb3e:	f002 fe17 	bl	800e770 <nan>
 800bb42:	ec5b ab10 	vmov	sl, fp, d0
 800bb46:	e67b      	b.n	800b840 <_strtod_l+0x88>
 800bb48:	9b05      	ldr	r3, [sp, #20]
 800bb4a:	9807      	ldr	r0, [sp, #28]
 800bb4c:	1af3      	subs	r3, r6, r3
 800bb4e:	2f00      	cmp	r7, #0
 800bb50:	bf08      	it	eq
 800bb52:	462f      	moveq	r7, r5
 800bb54:	2d10      	cmp	r5, #16
 800bb56:	9306      	str	r3, [sp, #24]
 800bb58:	46a8      	mov	r8, r5
 800bb5a:	bfa8      	it	ge
 800bb5c:	f04f 0810 	movge.w	r8, #16
 800bb60:	f7f4 fcd0 	bl	8000504 <__aeabi_ui2d>
 800bb64:	2d09      	cmp	r5, #9
 800bb66:	4682      	mov	sl, r0
 800bb68:	468b      	mov	fp, r1
 800bb6a:	dd13      	ble.n	800bb94 <_strtod_l+0x3dc>
 800bb6c:	4b7b      	ldr	r3, [pc, #492]	; (800bd5c <_strtod_l+0x5a4>)
 800bb6e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bb72:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bb76:	f7f4 fd3f 	bl	80005f8 <__aeabi_dmul>
 800bb7a:	4682      	mov	sl, r0
 800bb7c:	4648      	mov	r0, r9
 800bb7e:	468b      	mov	fp, r1
 800bb80:	f7f4 fcc0 	bl	8000504 <__aeabi_ui2d>
 800bb84:	4602      	mov	r2, r0
 800bb86:	460b      	mov	r3, r1
 800bb88:	4650      	mov	r0, sl
 800bb8a:	4659      	mov	r1, fp
 800bb8c:	f7f4 fb7e 	bl	800028c <__adddf3>
 800bb90:	4682      	mov	sl, r0
 800bb92:	468b      	mov	fp, r1
 800bb94:	2d0f      	cmp	r5, #15
 800bb96:	dc38      	bgt.n	800bc0a <_strtod_l+0x452>
 800bb98:	9b06      	ldr	r3, [sp, #24]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	f43f ae50 	beq.w	800b840 <_strtod_l+0x88>
 800bba0:	dd24      	ble.n	800bbec <_strtod_l+0x434>
 800bba2:	2b16      	cmp	r3, #22
 800bba4:	dc0b      	bgt.n	800bbbe <_strtod_l+0x406>
 800bba6:	496d      	ldr	r1, [pc, #436]	; (800bd5c <_strtod_l+0x5a4>)
 800bba8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bbac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbb0:	4652      	mov	r2, sl
 800bbb2:	465b      	mov	r3, fp
 800bbb4:	f7f4 fd20 	bl	80005f8 <__aeabi_dmul>
 800bbb8:	4682      	mov	sl, r0
 800bbba:	468b      	mov	fp, r1
 800bbbc:	e640      	b.n	800b840 <_strtod_l+0x88>
 800bbbe:	9a06      	ldr	r2, [sp, #24]
 800bbc0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	db20      	blt.n	800bc0a <_strtod_l+0x452>
 800bbc8:	4c64      	ldr	r4, [pc, #400]	; (800bd5c <_strtod_l+0x5a4>)
 800bbca:	f1c5 050f 	rsb	r5, r5, #15
 800bbce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bbd2:	4652      	mov	r2, sl
 800bbd4:	465b      	mov	r3, fp
 800bbd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbda:	f7f4 fd0d 	bl	80005f8 <__aeabi_dmul>
 800bbde:	9b06      	ldr	r3, [sp, #24]
 800bbe0:	1b5d      	subs	r5, r3, r5
 800bbe2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bbe6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bbea:	e7e3      	b.n	800bbb4 <_strtod_l+0x3fc>
 800bbec:	9b06      	ldr	r3, [sp, #24]
 800bbee:	3316      	adds	r3, #22
 800bbf0:	db0b      	blt.n	800bc0a <_strtod_l+0x452>
 800bbf2:	9b05      	ldr	r3, [sp, #20]
 800bbf4:	1b9e      	subs	r6, r3, r6
 800bbf6:	4b59      	ldr	r3, [pc, #356]	; (800bd5c <_strtod_l+0x5a4>)
 800bbf8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800bbfc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bc00:	4650      	mov	r0, sl
 800bc02:	4659      	mov	r1, fp
 800bc04:	f7f4 fe22 	bl	800084c <__aeabi_ddiv>
 800bc08:	e7d6      	b.n	800bbb8 <_strtod_l+0x400>
 800bc0a:	9b06      	ldr	r3, [sp, #24]
 800bc0c:	eba5 0808 	sub.w	r8, r5, r8
 800bc10:	4498      	add	r8, r3
 800bc12:	f1b8 0f00 	cmp.w	r8, #0
 800bc16:	dd74      	ble.n	800bd02 <_strtod_l+0x54a>
 800bc18:	f018 030f 	ands.w	r3, r8, #15
 800bc1c:	d00a      	beq.n	800bc34 <_strtod_l+0x47c>
 800bc1e:	494f      	ldr	r1, [pc, #316]	; (800bd5c <_strtod_l+0x5a4>)
 800bc20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc24:	4652      	mov	r2, sl
 800bc26:	465b      	mov	r3, fp
 800bc28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc2c:	f7f4 fce4 	bl	80005f8 <__aeabi_dmul>
 800bc30:	4682      	mov	sl, r0
 800bc32:	468b      	mov	fp, r1
 800bc34:	f038 080f 	bics.w	r8, r8, #15
 800bc38:	d04f      	beq.n	800bcda <_strtod_l+0x522>
 800bc3a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bc3e:	dd22      	ble.n	800bc86 <_strtod_l+0x4ce>
 800bc40:	2500      	movs	r5, #0
 800bc42:	462e      	mov	r6, r5
 800bc44:	9507      	str	r5, [sp, #28]
 800bc46:	9505      	str	r5, [sp, #20]
 800bc48:	2322      	movs	r3, #34	; 0x22
 800bc4a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800bd64 <_strtod_l+0x5ac>
 800bc4e:	6023      	str	r3, [r4, #0]
 800bc50:	f04f 0a00 	mov.w	sl, #0
 800bc54:	9b07      	ldr	r3, [sp, #28]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	f43f adf2 	beq.w	800b840 <_strtod_l+0x88>
 800bc5c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bc5e:	4620      	mov	r0, r4
 800bc60:	f001 fe82 	bl	800d968 <_Bfree>
 800bc64:	9905      	ldr	r1, [sp, #20]
 800bc66:	4620      	mov	r0, r4
 800bc68:	f001 fe7e 	bl	800d968 <_Bfree>
 800bc6c:	4631      	mov	r1, r6
 800bc6e:	4620      	mov	r0, r4
 800bc70:	f001 fe7a 	bl	800d968 <_Bfree>
 800bc74:	9907      	ldr	r1, [sp, #28]
 800bc76:	4620      	mov	r0, r4
 800bc78:	f001 fe76 	bl	800d968 <_Bfree>
 800bc7c:	4629      	mov	r1, r5
 800bc7e:	4620      	mov	r0, r4
 800bc80:	f001 fe72 	bl	800d968 <_Bfree>
 800bc84:	e5dc      	b.n	800b840 <_strtod_l+0x88>
 800bc86:	4b36      	ldr	r3, [pc, #216]	; (800bd60 <_strtod_l+0x5a8>)
 800bc88:	9304      	str	r3, [sp, #16]
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bc90:	4650      	mov	r0, sl
 800bc92:	4659      	mov	r1, fp
 800bc94:	4699      	mov	r9, r3
 800bc96:	f1b8 0f01 	cmp.w	r8, #1
 800bc9a:	dc21      	bgt.n	800bce0 <_strtod_l+0x528>
 800bc9c:	b10b      	cbz	r3, 800bca2 <_strtod_l+0x4ea>
 800bc9e:	4682      	mov	sl, r0
 800bca0:	468b      	mov	fp, r1
 800bca2:	4b2f      	ldr	r3, [pc, #188]	; (800bd60 <_strtod_l+0x5a8>)
 800bca4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bca8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800bcac:	4652      	mov	r2, sl
 800bcae:	465b      	mov	r3, fp
 800bcb0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bcb4:	f7f4 fca0 	bl	80005f8 <__aeabi_dmul>
 800bcb8:	4b2a      	ldr	r3, [pc, #168]	; (800bd64 <_strtod_l+0x5ac>)
 800bcba:	460a      	mov	r2, r1
 800bcbc:	400b      	ands	r3, r1
 800bcbe:	492a      	ldr	r1, [pc, #168]	; (800bd68 <_strtod_l+0x5b0>)
 800bcc0:	428b      	cmp	r3, r1
 800bcc2:	4682      	mov	sl, r0
 800bcc4:	d8bc      	bhi.n	800bc40 <_strtod_l+0x488>
 800bcc6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bcca:	428b      	cmp	r3, r1
 800bccc:	bf86      	itte	hi
 800bcce:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800bd6c <_strtod_l+0x5b4>
 800bcd2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800bcd6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bcda:	2300      	movs	r3, #0
 800bcdc:	9304      	str	r3, [sp, #16]
 800bcde:	e084      	b.n	800bdea <_strtod_l+0x632>
 800bce0:	f018 0f01 	tst.w	r8, #1
 800bce4:	d005      	beq.n	800bcf2 <_strtod_l+0x53a>
 800bce6:	9b04      	ldr	r3, [sp, #16]
 800bce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcec:	f7f4 fc84 	bl	80005f8 <__aeabi_dmul>
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	9a04      	ldr	r2, [sp, #16]
 800bcf4:	3208      	adds	r2, #8
 800bcf6:	f109 0901 	add.w	r9, r9, #1
 800bcfa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bcfe:	9204      	str	r2, [sp, #16]
 800bd00:	e7c9      	b.n	800bc96 <_strtod_l+0x4de>
 800bd02:	d0ea      	beq.n	800bcda <_strtod_l+0x522>
 800bd04:	f1c8 0800 	rsb	r8, r8, #0
 800bd08:	f018 020f 	ands.w	r2, r8, #15
 800bd0c:	d00a      	beq.n	800bd24 <_strtod_l+0x56c>
 800bd0e:	4b13      	ldr	r3, [pc, #76]	; (800bd5c <_strtod_l+0x5a4>)
 800bd10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd14:	4650      	mov	r0, sl
 800bd16:	4659      	mov	r1, fp
 800bd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1c:	f7f4 fd96 	bl	800084c <__aeabi_ddiv>
 800bd20:	4682      	mov	sl, r0
 800bd22:	468b      	mov	fp, r1
 800bd24:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bd28:	d0d7      	beq.n	800bcda <_strtod_l+0x522>
 800bd2a:	f1b8 0f1f 	cmp.w	r8, #31
 800bd2e:	dd1f      	ble.n	800bd70 <_strtod_l+0x5b8>
 800bd30:	2500      	movs	r5, #0
 800bd32:	462e      	mov	r6, r5
 800bd34:	9507      	str	r5, [sp, #28]
 800bd36:	9505      	str	r5, [sp, #20]
 800bd38:	2322      	movs	r3, #34	; 0x22
 800bd3a:	f04f 0a00 	mov.w	sl, #0
 800bd3e:	f04f 0b00 	mov.w	fp, #0
 800bd42:	6023      	str	r3, [r4, #0]
 800bd44:	e786      	b.n	800bc54 <_strtod_l+0x49c>
 800bd46:	bf00      	nop
 800bd48:	0800f66d 	.word	0x0800f66d
 800bd4c:	0800f6b0 	.word	0x0800f6b0
 800bd50:	0800f665 	.word	0x0800f665
 800bd54:	0800f7f4 	.word	0x0800f7f4
 800bd58:	0800faa0 	.word	0x0800faa0
 800bd5c:	0800f980 	.word	0x0800f980
 800bd60:	0800f958 	.word	0x0800f958
 800bd64:	7ff00000 	.word	0x7ff00000
 800bd68:	7ca00000 	.word	0x7ca00000
 800bd6c:	7fefffff 	.word	0x7fefffff
 800bd70:	f018 0310 	ands.w	r3, r8, #16
 800bd74:	bf18      	it	ne
 800bd76:	236a      	movne	r3, #106	; 0x6a
 800bd78:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c128 <_strtod_l+0x970>
 800bd7c:	9304      	str	r3, [sp, #16]
 800bd7e:	4650      	mov	r0, sl
 800bd80:	4659      	mov	r1, fp
 800bd82:	2300      	movs	r3, #0
 800bd84:	f018 0f01 	tst.w	r8, #1
 800bd88:	d004      	beq.n	800bd94 <_strtod_l+0x5dc>
 800bd8a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bd8e:	f7f4 fc33 	bl	80005f8 <__aeabi_dmul>
 800bd92:	2301      	movs	r3, #1
 800bd94:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bd98:	f109 0908 	add.w	r9, r9, #8
 800bd9c:	d1f2      	bne.n	800bd84 <_strtod_l+0x5cc>
 800bd9e:	b10b      	cbz	r3, 800bda4 <_strtod_l+0x5ec>
 800bda0:	4682      	mov	sl, r0
 800bda2:	468b      	mov	fp, r1
 800bda4:	9b04      	ldr	r3, [sp, #16]
 800bda6:	b1c3      	cbz	r3, 800bdda <_strtod_l+0x622>
 800bda8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bdac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	4659      	mov	r1, fp
 800bdb4:	dd11      	ble.n	800bdda <_strtod_l+0x622>
 800bdb6:	2b1f      	cmp	r3, #31
 800bdb8:	f340 8124 	ble.w	800c004 <_strtod_l+0x84c>
 800bdbc:	2b34      	cmp	r3, #52	; 0x34
 800bdbe:	bfde      	ittt	le
 800bdc0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bdc4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800bdc8:	fa03 f202 	lslle.w	r2, r3, r2
 800bdcc:	f04f 0a00 	mov.w	sl, #0
 800bdd0:	bfcc      	ite	gt
 800bdd2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bdd6:	ea02 0b01 	andle.w	fp, r2, r1
 800bdda:	2200      	movs	r2, #0
 800bddc:	2300      	movs	r3, #0
 800bdde:	4650      	mov	r0, sl
 800bde0:	4659      	mov	r1, fp
 800bde2:	f7f4 fe71 	bl	8000ac8 <__aeabi_dcmpeq>
 800bde6:	2800      	cmp	r0, #0
 800bde8:	d1a2      	bne.n	800bd30 <_strtod_l+0x578>
 800bdea:	9b07      	ldr	r3, [sp, #28]
 800bdec:	9300      	str	r3, [sp, #0]
 800bdee:	9908      	ldr	r1, [sp, #32]
 800bdf0:	462b      	mov	r3, r5
 800bdf2:	463a      	mov	r2, r7
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	f001 fe1f 	bl	800da38 <__s2b>
 800bdfa:	9007      	str	r0, [sp, #28]
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	f43f af1f 	beq.w	800bc40 <_strtod_l+0x488>
 800be02:	9b05      	ldr	r3, [sp, #20]
 800be04:	1b9e      	subs	r6, r3, r6
 800be06:	9b06      	ldr	r3, [sp, #24]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	bfb4      	ite	lt
 800be0c:	4633      	movlt	r3, r6
 800be0e:	2300      	movge	r3, #0
 800be10:	930c      	str	r3, [sp, #48]	; 0x30
 800be12:	9b06      	ldr	r3, [sp, #24]
 800be14:	2500      	movs	r5, #0
 800be16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800be1a:	9312      	str	r3, [sp, #72]	; 0x48
 800be1c:	462e      	mov	r6, r5
 800be1e:	9b07      	ldr	r3, [sp, #28]
 800be20:	4620      	mov	r0, r4
 800be22:	6859      	ldr	r1, [r3, #4]
 800be24:	f001 fd60 	bl	800d8e8 <_Balloc>
 800be28:	9005      	str	r0, [sp, #20]
 800be2a:	2800      	cmp	r0, #0
 800be2c:	f43f af0c 	beq.w	800bc48 <_strtod_l+0x490>
 800be30:	9b07      	ldr	r3, [sp, #28]
 800be32:	691a      	ldr	r2, [r3, #16]
 800be34:	3202      	adds	r2, #2
 800be36:	f103 010c 	add.w	r1, r3, #12
 800be3a:	0092      	lsls	r2, r2, #2
 800be3c:	300c      	adds	r0, #12
 800be3e:	f7fe fd9d 	bl	800a97c <memcpy>
 800be42:	ec4b ab10 	vmov	d0, sl, fp
 800be46:	aa1a      	add	r2, sp, #104	; 0x68
 800be48:	a919      	add	r1, sp, #100	; 0x64
 800be4a:	4620      	mov	r0, r4
 800be4c:	f002 f93a 	bl	800e0c4 <__d2b>
 800be50:	ec4b ab18 	vmov	d8, sl, fp
 800be54:	9018      	str	r0, [sp, #96]	; 0x60
 800be56:	2800      	cmp	r0, #0
 800be58:	f43f aef6 	beq.w	800bc48 <_strtod_l+0x490>
 800be5c:	2101      	movs	r1, #1
 800be5e:	4620      	mov	r0, r4
 800be60:	f001 fe84 	bl	800db6c <__i2b>
 800be64:	4606      	mov	r6, r0
 800be66:	2800      	cmp	r0, #0
 800be68:	f43f aeee 	beq.w	800bc48 <_strtod_l+0x490>
 800be6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800be6e:	9904      	ldr	r1, [sp, #16]
 800be70:	2b00      	cmp	r3, #0
 800be72:	bfab      	itete	ge
 800be74:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800be76:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800be78:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800be7a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800be7e:	bfac      	ite	ge
 800be80:	eb03 0902 	addge.w	r9, r3, r2
 800be84:	1ad7      	sublt	r7, r2, r3
 800be86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800be88:	eba3 0801 	sub.w	r8, r3, r1
 800be8c:	4490      	add	r8, r2
 800be8e:	4ba1      	ldr	r3, [pc, #644]	; (800c114 <_strtod_l+0x95c>)
 800be90:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800be94:	4598      	cmp	r8, r3
 800be96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800be9a:	f280 80c7 	bge.w	800c02c <_strtod_l+0x874>
 800be9e:	eba3 0308 	sub.w	r3, r3, r8
 800bea2:	2b1f      	cmp	r3, #31
 800bea4:	eba2 0203 	sub.w	r2, r2, r3
 800bea8:	f04f 0101 	mov.w	r1, #1
 800beac:	f300 80b1 	bgt.w	800c012 <_strtod_l+0x85a>
 800beb0:	fa01 f303 	lsl.w	r3, r1, r3
 800beb4:	930d      	str	r3, [sp, #52]	; 0x34
 800beb6:	2300      	movs	r3, #0
 800beb8:	9308      	str	r3, [sp, #32]
 800beba:	eb09 0802 	add.w	r8, r9, r2
 800bebe:	9b04      	ldr	r3, [sp, #16]
 800bec0:	45c1      	cmp	r9, r8
 800bec2:	4417      	add	r7, r2
 800bec4:	441f      	add	r7, r3
 800bec6:	464b      	mov	r3, r9
 800bec8:	bfa8      	it	ge
 800beca:	4643      	movge	r3, r8
 800becc:	42bb      	cmp	r3, r7
 800bece:	bfa8      	it	ge
 800bed0:	463b      	movge	r3, r7
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	bfc2      	ittt	gt
 800bed6:	eba8 0803 	subgt.w	r8, r8, r3
 800beda:	1aff      	subgt	r7, r7, r3
 800bedc:	eba9 0903 	subgt.w	r9, r9, r3
 800bee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	dd17      	ble.n	800bf16 <_strtod_l+0x75e>
 800bee6:	4631      	mov	r1, r6
 800bee8:	461a      	mov	r2, r3
 800beea:	4620      	mov	r0, r4
 800beec:	f001 fefe 	bl	800dcec <__pow5mult>
 800bef0:	4606      	mov	r6, r0
 800bef2:	2800      	cmp	r0, #0
 800bef4:	f43f aea8 	beq.w	800bc48 <_strtod_l+0x490>
 800bef8:	4601      	mov	r1, r0
 800befa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800befc:	4620      	mov	r0, r4
 800befe:	f001 fe4b 	bl	800db98 <__multiply>
 800bf02:	900b      	str	r0, [sp, #44]	; 0x2c
 800bf04:	2800      	cmp	r0, #0
 800bf06:	f43f ae9f 	beq.w	800bc48 <_strtod_l+0x490>
 800bf0a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f001 fd2b 	bl	800d968 <_Bfree>
 800bf12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf14:	9318      	str	r3, [sp, #96]	; 0x60
 800bf16:	f1b8 0f00 	cmp.w	r8, #0
 800bf1a:	f300 808c 	bgt.w	800c036 <_strtod_l+0x87e>
 800bf1e:	9b06      	ldr	r3, [sp, #24]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	dd08      	ble.n	800bf36 <_strtod_l+0x77e>
 800bf24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf26:	9905      	ldr	r1, [sp, #20]
 800bf28:	4620      	mov	r0, r4
 800bf2a:	f001 fedf 	bl	800dcec <__pow5mult>
 800bf2e:	9005      	str	r0, [sp, #20]
 800bf30:	2800      	cmp	r0, #0
 800bf32:	f43f ae89 	beq.w	800bc48 <_strtod_l+0x490>
 800bf36:	2f00      	cmp	r7, #0
 800bf38:	dd08      	ble.n	800bf4c <_strtod_l+0x794>
 800bf3a:	9905      	ldr	r1, [sp, #20]
 800bf3c:	463a      	mov	r2, r7
 800bf3e:	4620      	mov	r0, r4
 800bf40:	f001 ff2e 	bl	800dda0 <__lshift>
 800bf44:	9005      	str	r0, [sp, #20]
 800bf46:	2800      	cmp	r0, #0
 800bf48:	f43f ae7e 	beq.w	800bc48 <_strtod_l+0x490>
 800bf4c:	f1b9 0f00 	cmp.w	r9, #0
 800bf50:	dd08      	ble.n	800bf64 <_strtod_l+0x7ac>
 800bf52:	4631      	mov	r1, r6
 800bf54:	464a      	mov	r2, r9
 800bf56:	4620      	mov	r0, r4
 800bf58:	f001 ff22 	bl	800dda0 <__lshift>
 800bf5c:	4606      	mov	r6, r0
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	f43f ae72 	beq.w	800bc48 <_strtod_l+0x490>
 800bf64:	9a05      	ldr	r2, [sp, #20]
 800bf66:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bf68:	4620      	mov	r0, r4
 800bf6a:	f001 ffa5 	bl	800deb8 <__mdiff>
 800bf6e:	4605      	mov	r5, r0
 800bf70:	2800      	cmp	r0, #0
 800bf72:	f43f ae69 	beq.w	800bc48 <_strtod_l+0x490>
 800bf76:	68c3      	ldr	r3, [r0, #12]
 800bf78:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	60c3      	str	r3, [r0, #12]
 800bf7e:	4631      	mov	r1, r6
 800bf80:	f001 ff7e 	bl	800de80 <__mcmp>
 800bf84:	2800      	cmp	r0, #0
 800bf86:	da60      	bge.n	800c04a <_strtod_l+0x892>
 800bf88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf8a:	ea53 030a 	orrs.w	r3, r3, sl
 800bf8e:	f040 8082 	bne.w	800c096 <_strtod_l+0x8de>
 800bf92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d17d      	bne.n	800c096 <_strtod_l+0x8de>
 800bf9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bf9e:	0d1b      	lsrs	r3, r3, #20
 800bfa0:	051b      	lsls	r3, r3, #20
 800bfa2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bfa6:	d976      	bls.n	800c096 <_strtod_l+0x8de>
 800bfa8:	696b      	ldr	r3, [r5, #20]
 800bfaa:	b913      	cbnz	r3, 800bfb2 <_strtod_l+0x7fa>
 800bfac:	692b      	ldr	r3, [r5, #16]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	dd71      	ble.n	800c096 <_strtod_l+0x8de>
 800bfb2:	4629      	mov	r1, r5
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f001 fef2 	bl	800dda0 <__lshift>
 800bfbc:	4631      	mov	r1, r6
 800bfbe:	4605      	mov	r5, r0
 800bfc0:	f001 ff5e 	bl	800de80 <__mcmp>
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	dd66      	ble.n	800c096 <_strtod_l+0x8de>
 800bfc8:	9904      	ldr	r1, [sp, #16]
 800bfca:	4a53      	ldr	r2, [pc, #332]	; (800c118 <_strtod_l+0x960>)
 800bfcc:	465b      	mov	r3, fp
 800bfce:	2900      	cmp	r1, #0
 800bfd0:	f000 8081 	beq.w	800c0d6 <_strtod_l+0x91e>
 800bfd4:	ea02 010b 	and.w	r1, r2, fp
 800bfd8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bfdc:	dc7b      	bgt.n	800c0d6 <_strtod_l+0x91e>
 800bfde:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bfe2:	f77f aea9 	ble.w	800bd38 <_strtod_l+0x580>
 800bfe6:	4b4d      	ldr	r3, [pc, #308]	; (800c11c <_strtod_l+0x964>)
 800bfe8:	4650      	mov	r0, sl
 800bfea:	4659      	mov	r1, fp
 800bfec:	2200      	movs	r2, #0
 800bfee:	f7f4 fb03 	bl	80005f8 <__aeabi_dmul>
 800bff2:	460b      	mov	r3, r1
 800bff4:	4303      	orrs	r3, r0
 800bff6:	bf08      	it	eq
 800bff8:	2322      	moveq	r3, #34	; 0x22
 800bffa:	4682      	mov	sl, r0
 800bffc:	468b      	mov	fp, r1
 800bffe:	bf08      	it	eq
 800c000:	6023      	streq	r3, [r4, #0]
 800c002:	e62b      	b.n	800bc5c <_strtod_l+0x4a4>
 800c004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c008:	fa02 f303 	lsl.w	r3, r2, r3
 800c00c:	ea03 0a0a 	and.w	sl, r3, sl
 800c010:	e6e3      	b.n	800bdda <_strtod_l+0x622>
 800c012:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c016:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c01a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c01e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c022:	fa01 f308 	lsl.w	r3, r1, r8
 800c026:	9308      	str	r3, [sp, #32]
 800c028:	910d      	str	r1, [sp, #52]	; 0x34
 800c02a:	e746      	b.n	800beba <_strtod_l+0x702>
 800c02c:	2300      	movs	r3, #0
 800c02e:	9308      	str	r3, [sp, #32]
 800c030:	2301      	movs	r3, #1
 800c032:	930d      	str	r3, [sp, #52]	; 0x34
 800c034:	e741      	b.n	800beba <_strtod_l+0x702>
 800c036:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c038:	4642      	mov	r2, r8
 800c03a:	4620      	mov	r0, r4
 800c03c:	f001 feb0 	bl	800dda0 <__lshift>
 800c040:	9018      	str	r0, [sp, #96]	; 0x60
 800c042:	2800      	cmp	r0, #0
 800c044:	f47f af6b 	bne.w	800bf1e <_strtod_l+0x766>
 800c048:	e5fe      	b.n	800bc48 <_strtod_l+0x490>
 800c04a:	465f      	mov	r7, fp
 800c04c:	d16e      	bne.n	800c12c <_strtod_l+0x974>
 800c04e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c050:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c054:	b342      	cbz	r2, 800c0a8 <_strtod_l+0x8f0>
 800c056:	4a32      	ldr	r2, [pc, #200]	; (800c120 <_strtod_l+0x968>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d128      	bne.n	800c0ae <_strtod_l+0x8f6>
 800c05c:	9b04      	ldr	r3, [sp, #16]
 800c05e:	4651      	mov	r1, sl
 800c060:	b1eb      	cbz	r3, 800c09e <_strtod_l+0x8e6>
 800c062:	4b2d      	ldr	r3, [pc, #180]	; (800c118 <_strtod_l+0x960>)
 800c064:	403b      	ands	r3, r7
 800c066:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c06a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c06e:	d819      	bhi.n	800c0a4 <_strtod_l+0x8ec>
 800c070:	0d1b      	lsrs	r3, r3, #20
 800c072:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c076:	fa02 f303 	lsl.w	r3, r2, r3
 800c07a:	4299      	cmp	r1, r3
 800c07c:	d117      	bne.n	800c0ae <_strtod_l+0x8f6>
 800c07e:	4b29      	ldr	r3, [pc, #164]	; (800c124 <_strtod_l+0x96c>)
 800c080:	429f      	cmp	r7, r3
 800c082:	d102      	bne.n	800c08a <_strtod_l+0x8d2>
 800c084:	3101      	adds	r1, #1
 800c086:	f43f addf 	beq.w	800bc48 <_strtod_l+0x490>
 800c08a:	4b23      	ldr	r3, [pc, #140]	; (800c118 <_strtod_l+0x960>)
 800c08c:	403b      	ands	r3, r7
 800c08e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c092:	f04f 0a00 	mov.w	sl, #0
 800c096:	9b04      	ldr	r3, [sp, #16]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d1a4      	bne.n	800bfe6 <_strtod_l+0x82e>
 800c09c:	e5de      	b.n	800bc5c <_strtod_l+0x4a4>
 800c09e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0a2:	e7ea      	b.n	800c07a <_strtod_l+0x8c2>
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	e7e8      	b.n	800c07a <_strtod_l+0x8c2>
 800c0a8:	ea53 030a 	orrs.w	r3, r3, sl
 800c0ac:	d08c      	beq.n	800bfc8 <_strtod_l+0x810>
 800c0ae:	9b08      	ldr	r3, [sp, #32]
 800c0b0:	b1db      	cbz	r3, 800c0ea <_strtod_l+0x932>
 800c0b2:	423b      	tst	r3, r7
 800c0b4:	d0ef      	beq.n	800c096 <_strtod_l+0x8de>
 800c0b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0b8:	9a04      	ldr	r2, [sp, #16]
 800c0ba:	4650      	mov	r0, sl
 800c0bc:	4659      	mov	r1, fp
 800c0be:	b1c3      	cbz	r3, 800c0f2 <_strtod_l+0x93a>
 800c0c0:	f7ff fb5e 	bl	800b780 <sulp>
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	460b      	mov	r3, r1
 800c0c8:	ec51 0b18 	vmov	r0, r1, d8
 800c0cc:	f7f4 f8de 	bl	800028c <__adddf3>
 800c0d0:	4682      	mov	sl, r0
 800c0d2:	468b      	mov	fp, r1
 800c0d4:	e7df      	b.n	800c096 <_strtod_l+0x8de>
 800c0d6:	4013      	ands	r3, r2
 800c0d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c0dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c0e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c0e4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c0e8:	e7d5      	b.n	800c096 <_strtod_l+0x8de>
 800c0ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0ec:	ea13 0f0a 	tst.w	r3, sl
 800c0f0:	e7e0      	b.n	800c0b4 <_strtod_l+0x8fc>
 800c0f2:	f7ff fb45 	bl	800b780 <sulp>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	ec51 0b18 	vmov	r0, r1, d8
 800c0fe:	f7f4 f8c3 	bl	8000288 <__aeabi_dsub>
 800c102:	2200      	movs	r2, #0
 800c104:	2300      	movs	r3, #0
 800c106:	4682      	mov	sl, r0
 800c108:	468b      	mov	fp, r1
 800c10a:	f7f4 fcdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c10e:	2800      	cmp	r0, #0
 800c110:	d0c1      	beq.n	800c096 <_strtod_l+0x8de>
 800c112:	e611      	b.n	800bd38 <_strtod_l+0x580>
 800c114:	fffffc02 	.word	0xfffffc02
 800c118:	7ff00000 	.word	0x7ff00000
 800c11c:	39500000 	.word	0x39500000
 800c120:	000fffff 	.word	0x000fffff
 800c124:	7fefffff 	.word	0x7fefffff
 800c128:	0800f6c8 	.word	0x0800f6c8
 800c12c:	4631      	mov	r1, r6
 800c12e:	4628      	mov	r0, r5
 800c130:	f002 f824 	bl	800e17c <__ratio>
 800c134:	ec59 8b10 	vmov	r8, r9, d0
 800c138:	ee10 0a10 	vmov	r0, s0
 800c13c:	2200      	movs	r2, #0
 800c13e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c142:	4649      	mov	r1, r9
 800c144:	f7f4 fcd4 	bl	8000af0 <__aeabi_dcmple>
 800c148:	2800      	cmp	r0, #0
 800c14a:	d07a      	beq.n	800c242 <_strtod_l+0xa8a>
 800c14c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d04a      	beq.n	800c1e8 <_strtod_l+0xa30>
 800c152:	4b95      	ldr	r3, [pc, #596]	; (800c3a8 <_strtod_l+0xbf0>)
 800c154:	2200      	movs	r2, #0
 800c156:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c15a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c3a8 <_strtod_l+0xbf0>
 800c15e:	f04f 0800 	mov.w	r8, #0
 800c162:	4b92      	ldr	r3, [pc, #584]	; (800c3ac <_strtod_l+0xbf4>)
 800c164:	403b      	ands	r3, r7
 800c166:	930d      	str	r3, [sp, #52]	; 0x34
 800c168:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c16a:	4b91      	ldr	r3, [pc, #580]	; (800c3b0 <_strtod_l+0xbf8>)
 800c16c:	429a      	cmp	r2, r3
 800c16e:	f040 80b0 	bne.w	800c2d2 <_strtod_l+0xb1a>
 800c172:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c176:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c17a:	ec4b ab10 	vmov	d0, sl, fp
 800c17e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c182:	f001 ff23 	bl	800dfcc <__ulp>
 800c186:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c18a:	ec53 2b10 	vmov	r2, r3, d0
 800c18e:	f7f4 fa33 	bl	80005f8 <__aeabi_dmul>
 800c192:	4652      	mov	r2, sl
 800c194:	465b      	mov	r3, fp
 800c196:	f7f4 f879 	bl	800028c <__adddf3>
 800c19a:	460b      	mov	r3, r1
 800c19c:	4983      	ldr	r1, [pc, #524]	; (800c3ac <_strtod_l+0xbf4>)
 800c19e:	4a85      	ldr	r2, [pc, #532]	; (800c3b4 <_strtod_l+0xbfc>)
 800c1a0:	4019      	ands	r1, r3
 800c1a2:	4291      	cmp	r1, r2
 800c1a4:	4682      	mov	sl, r0
 800c1a6:	d960      	bls.n	800c26a <_strtod_l+0xab2>
 800c1a8:	ee18 3a90 	vmov	r3, s17
 800c1ac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d104      	bne.n	800c1be <_strtod_l+0xa06>
 800c1b4:	ee18 3a10 	vmov	r3, s16
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	f43f ad45 	beq.w	800bc48 <_strtod_l+0x490>
 800c1be:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c3c0 <_strtod_l+0xc08>
 800c1c2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c1c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	f001 fbcd 	bl	800d968 <_Bfree>
 800c1ce:	9905      	ldr	r1, [sp, #20]
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	f001 fbc9 	bl	800d968 <_Bfree>
 800c1d6:	4631      	mov	r1, r6
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f001 fbc5 	bl	800d968 <_Bfree>
 800c1de:	4629      	mov	r1, r5
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	f001 fbc1 	bl	800d968 <_Bfree>
 800c1e6:	e61a      	b.n	800be1e <_strtod_l+0x666>
 800c1e8:	f1ba 0f00 	cmp.w	sl, #0
 800c1ec:	d11b      	bne.n	800c226 <_strtod_l+0xa6e>
 800c1ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1f2:	b9f3      	cbnz	r3, 800c232 <_strtod_l+0xa7a>
 800c1f4:	4b6c      	ldr	r3, [pc, #432]	; (800c3a8 <_strtod_l+0xbf0>)
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	4640      	mov	r0, r8
 800c1fa:	4649      	mov	r1, r9
 800c1fc:	f7f4 fc6e 	bl	8000adc <__aeabi_dcmplt>
 800c200:	b9d0      	cbnz	r0, 800c238 <_strtod_l+0xa80>
 800c202:	4640      	mov	r0, r8
 800c204:	4649      	mov	r1, r9
 800c206:	4b6c      	ldr	r3, [pc, #432]	; (800c3b8 <_strtod_l+0xc00>)
 800c208:	2200      	movs	r2, #0
 800c20a:	f7f4 f9f5 	bl	80005f8 <__aeabi_dmul>
 800c20e:	4680      	mov	r8, r0
 800c210:	4689      	mov	r9, r1
 800c212:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c216:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c21a:	9315      	str	r3, [sp, #84]	; 0x54
 800c21c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c220:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c224:	e79d      	b.n	800c162 <_strtod_l+0x9aa>
 800c226:	f1ba 0f01 	cmp.w	sl, #1
 800c22a:	d102      	bne.n	800c232 <_strtod_l+0xa7a>
 800c22c:	2f00      	cmp	r7, #0
 800c22e:	f43f ad83 	beq.w	800bd38 <_strtod_l+0x580>
 800c232:	4b62      	ldr	r3, [pc, #392]	; (800c3bc <_strtod_l+0xc04>)
 800c234:	2200      	movs	r2, #0
 800c236:	e78e      	b.n	800c156 <_strtod_l+0x99e>
 800c238:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c3b8 <_strtod_l+0xc00>
 800c23c:	f04f 0800 	mov.w	r8, #0
 800c240:	e7e7      	b.n	800c212 <_strtod_l+0xa5a>
 800c242:	4b5d      	ldr	r3, [pc, #372]	; (800c3b8 <_strtod_l+0xc00>)
 800c244:	4640      	mov	r0, r8
 800c246:	4649      	mov	r1, r9
 800c248:	2200      	movs	r2, #0
 800c24a:	f7f4 f9d5 	bl	80005f8 <__aeabi_dmul>
 800c24e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c250:	4680      	mov	r8, r0
 800c252:	4689      	mov	r9, r1
 800c254:	b933      	cbnz	r3, 800c264 <_strtod_l+0xaac>
 800c256:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c25a:	900e      	str	r0, [sp, #56]	; 0x38
 800c25c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c25e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c262:	e7dd      	b.n	800c220 <_strtod_l+0xa68>
 800c264:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c268:	e7f9      	b.n	800c25e <_strtod_l+0xaa6>
 800c26a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c26e:	9b04      	ldr	r3, [sp, #16]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d1a8      	bne.n	800c1c6 <_strtod_l+0xa0e>
 800c274:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c278:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c27a:	0d1b      	lsrs	r3, r3, #20
 800c27c:	051b      	lsls	r3, r3, #20
 800c27e:	429a      	cmp	r2, r3
 800c280:	d1a1      	bne.n	800c1c6 <_strtod_l+0xa0e>
 800c282:	4640      	mov	r0, r8
 800c284:	4649      	mov	r1, r9
 800c286:	f7f4 fd17 	bl	8000cb8 <__aeabi_d2lz>
 800c28a:	f7f4 f987 	bl	800059c <__aeabi_l2d>
 800c28e:	4602      	mov	r2, r0
 800c290:	460b      	mov	r3, r1
 800c292:	4640      	mov	r0, r8
 800c294:	4649      	mov	r1, r9
 800c296:	f7f3 fff7 	bl	8000288 <__aeabi_dsub>
 800c29a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c29c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c2a0:	ea43 030a 	orr.w	r3, r3, sl
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	4680      	mov	r8, r0
 800c2a8:	4689      	mov	r9, r1
 800c2aa:	d055      	beq.n	800c358 <_strtod_l+0xba0>
 800c2ac:	a336      	add	r3, pc, #216	; (adr r3, 800c388 <_strtod_l+0xbd0>)
 800c2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b2:	f7f4 fc13 	bl	8000adc <__aeabi_dcmplt>
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	f47f acd0 	bne.w	800bc5c <_strtod_l+0x4a4>
 800c2bc:	a334      	add	r3, pc, #208	; (adr r3, 800c390 <_strtod_l+0xbd8>)
 800c2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c2:	4640      	mov	r0, r8
 800c2c4:	4649      	mov	r1, r9
 800c2c6:	f7f4 fc27 	bl	8000b18 <__aeabi_dcmpgt>
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	f43f af7b 	beq.w	800c1c6 <_strtod_l+0xa0e>
 800c2d0:	e4c4      	b.n	800bc5c <_strtod_l+0x4a4>
 800c2d2:	9b04      	ldr	r3, [sp, #16]
 800c2d4:	b333      	cbz	r3, 800c324 <_strtod_l+0xb6c>
 800c2d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c2dc:	d822      	bhi.n	800c324 <_strtod_l+0xb6c>
 800c2de:	a32e      	add	r3, pc, #184	; (adr r3, 800c398 <_strtod_l+0xbe0>)
 800c2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e4:	4640      	mov	r0, r8
 800c2e6:	4649      	mov	r1, r9
 800c2e8:	f7f4 fc02 	bl	8000af0 <__aeabi_dcmple>
 800c2ec:	b1a0      	cbz	r0, 800c318 <_strtod_l+0xb60>
 800c2ee:	4649      	mov	r1, r9
 800c2f0:	4640      	mov	r0, r8
 800c2f2:	f7f4 fc59 	bl	8000ba8 <__aeabi_d2uiz>
 800c2f6:	2801      	cmp	r0, #1
 800c2f8:	bf38      	it	cc
 800c2fa:	2001      	movcc	r0, #1
 800c2fc:	f7f4 f902 	bl	8000504 <__aeabi_ui2d>
 800c300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c302:	4680      	mov	r8, r0
 800c304:	4689      	mov	r9, r1
 800c306:	bb23      	cbnz	r3, 800c352 <_strtod_l+0xb9a>
 800c308:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c30c:	9010      	str	r0, [sp, #64]	; 0x40
 800c30e:	9311      	str	r3, [sp, #68]	; 0x44
 800c310:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c314:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c31a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c31c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c320:	1a9b      	subs	r3, r3, r2
 800c322:	9309      	str	r3, [sp, #36]	; 0x24
 800c324:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c328:	eeb0 0a48 	vmov.f32	s0, s16
 800c32c:	eef0 0a68 	vmov.f32	s1, s17
 800c330:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c334:	f001 fe4a 	bl	800dfcc <__ulp>
 800c338:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c33c:	ec53 2b10 	vmov	r2, r3, d0
 800c340:	f7f4 f95a 	bl	80005f8 <__aeabi_dmul>
 800c344:	ec53 2b18 	vmov	r2, r3, d8
 800c348:	f7f3 ffa0 	bl	800028c <__adddf3>
 800c34c:	4682      	mov	sl, r0
 800c34e:	468b      	mov	fp, r1
 800c350:	e78d      	b.n	800c26e <_strtod_l+0xab6>
 800c352:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c356:	e7db      	b.n	800c310 <_strtod_l+0xb58>
 800c358:	a311      	add	r3, pc, #68	; (adr r3, 800c3a0 <_strtod_l+0xbe8>)
 800c35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35e:	f7f4 fbbd 	bl	8000adc <__aeabi_dcmplt>
 800c362:	e7b2      	b.n	800c2ca <_strtod_l+0xb12>
 800c364:	2300      	movs	r3, #0
 800c366:	930a      	str	r3, [sp, #40]	; 0x28
 800c368:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c36a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c36c:	6013      	str	r3, [r2, #0]
 800c36e:	f7ff ba6b 	b.w	800b848 <_strtod_l+0x90>
 800c372:	2a65      	cmp	r2, #101	; 0x65
 800c374:	f43f ab5f 	beq.w	800ba36 <_strtod_l+0x27e>
 800c378:	2a45      	cmp	r2, #69	; 0x45
 800c37a:	f43f ab5c 	beq.w	800ba36 <_strtod_l+0x27e>
 800c37e:	2301      	movs	r3, #1
 800c380:	f7ff bb94 	b.w	800baac <_strtod_l+0x2f4>
 800c384:	f3af 8000 	nop.w
 800c388:	94a03595 	.word	0x94a03595
 800c38c:	3fdfffff 	.word	0x3fdfffff
 800c390:	35afe535 	.word	0x35afe535
 800c394:	3fe00000 	.word	0x3fe00000
 800c398:	ffc00000 	.word	0xffc00000
 800c39c:	41dfffff 	.word	0x41dfffff
 800c3a0:	94a03595 	.word	0x94a03595
 800c3a4:	3fcfffff 	.word	0x3fcfffff
 800c3a8:	3ff00000 	.word	0x3ff00000
 800c3ac:	7ff00000 	.word	0x7ff00000
 800c3b0:	7fe00000 	.word	0x7fe00000
 800c3b4:	7c9fffff 	.word	0x7c9fffff
 800c3b8:	3fe00000 	.word	0x3fe00000
 800c3bc:	bff00000 	.word	0xbff00000
 800c3c0:	7fefffff 	.word	0x7fefffff

0800c3c4 <_strtod_r>:
 800c3c4:	4b01      	ldr	r3, [pc, #4]	; (800c3cc <_strtod_r+0x8>)
 800c3c6:	f7ff b9f7 	b.w	800b7b8 <_strtod_l>
 800c3ca:	bf00      	nop
 800c3cc:	2000008c 	.word	0x2000008c

0800c3d0 <_strtol_l.constprop.0>:
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3d6:	d001      	beq.n	800c3dc <_strtol_l.constprop.0+0xc>
 800c3d8:	2b24      	cmp	r3, #36	; 0x24
 800c3da:	d906      	bls.n	800c3ea <_strtol_l.constprop.0+0x1a>
 800c3dc:	f7fe faa4 	bl	800a928 <__errno>
 800c3e0:	2316      	movs	r3, #22
 800c3e2:	6003      	str	r3, [r0, #0]
 800c3e4:	2000      	movs	r0, #0
 800c3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c4d0 <_strtol_l.constprop.0+0x100>
 800c3ee:	460d      	mov	r5, r1
 800c3f0:	462e      	mov	r6, r5
 800c3f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c3f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c3fa:	f017 0708 	ands.w	r7, r7, #8
 800c3fe:	d1f7      	bne.n	800c3f0 <_strtol_l.constprop.0+0x20>
 800c400:	2c2d      	cmp	r4, #45	; 0x2d
 800c402:	d132      	bne.n	800c46a <_strtol_l.constprop.0+0x9a>
 800c404:	782c      	ldrb	r4, [r5, #0]
 800c406:	2701      	movs	r7, #1
 800c408:	1cb5      	adds	r5, r6, #2
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d05b      	beq.n	800c4c6 <_strtol_l.constprop.0+0xf6>
 800c40e:	2b10      	cmp	r3, #16
 800c410:	d109      	bne.n	800c426 <_strtol_l.constprop.0+0x56>
 800c412:	2c30      	cmp	r4, #48	; 0x30
 800c414:	d107      	bne.n	800c426 <_strtol_l.constprop.0+0x56>
 800c416:	782c      	ldrb	r4, [r5, #0]
 800c418:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c41c:	2c58      	cmp	r4, #88	; 0x58
 800c41e:	d14d      	bne.n	800c4bc <_strtol_l.constprop.0+0xec>
 800c420:	786c      	ldrb	r4, [r5, #1]
 800c422:	2310      	movs	r3, #16
 800c424:	3502      	adds	r5, #2
 800c426:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c42a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c42e:	f04f 0c00 	mov.w	ip, #0
 800c432:	fbb8 f9f3 	udiv	r9, r8, r3
 800c436:	4666      	mov	r6, ip
 800c438:	fb03 8a19 	mls	sl, r3, r9, r8
 800c43c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c440:	f1be 0f09 	cmp.w	lr, #9
 800c444:	d816      	bhi.n	800c474 <_strtol_l.constprop.0+0xa4>
 800c446:	4674      	mov	r4, lr
 800c448:	42a3      	cmp	r3, r4
 800c44a:	dd24      	ble.n	800c496 <_strtol_l.constprop.0+0xc6>
 800c44c:	f1bc 0f00 	cmp.w	ip, #0
 800c450:	db1e      	blt.n	800c490 <_strtol_l.constprop.0+0xc0>
 800c452:	45b1      	cmp	r9, r6
 800c454:	d31c      	bcc.n	800c490 <_strtol_l.constprop.0+0xc0>
 800c456:	d101      	bne.n	800c45c <_strtol_l.constprop.0+0x8c>
 800c458:	45a2      	cmp	sl, r4
 800c45a:	db19      	blt.n	800c490 <_strtol_l.constprop.0+0xc0>
 800c45c:	fb06 4603 	mla	r6, r6, r3, r4
 800c460:	f04f 0c01 	mov.w	ip, #1
 800c464:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c468:	e7e8      	b.n	800c43c <_strtol_l.constprop.0+0x6c>
 800c46a:	2c2b      	cmp	r4, #43	; 0x2b
 800c46c:	bf04      	itt	eq
 800c46e:	782c      	ldrbeq	r4, [r5, #0]
 800c470:	1cb5      	addeq	r5, r6, #2
 800c472:	e7ca      	b.n	800c40a <_strtol_l.constprop.0+0x3a>
 800c474:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c478:	f1be 0f19 	cmp.w	lr, #25
 800c47c:	d801      	bhi.n	800c482 <_strtol_l.constprop.0+0xb2>
 800c47e:	3c37      	subs	r4, #55	; 0x37
 800c480:	e7e2      	b.n	800c448 <_strtol_l.constprop.0+0x78>
 800c482:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c486:	f1be 0f19 	cmp.w	lr, #25
 800c48a:	d804      	bhi.n	800c496 <_strtol_l.constprop.0+0xc6>
 800c48c:	3c57      	subs	r4, #87	; 0x57
 800c48e:	e7db      	b.n	800c448 <_strtol_l.constprop.0+0x78>
 800c490:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c494:	e7e6      	b.n	800c464 <_strtol_l.constprop.0+0x94>
 800c496:	f1bc 0f00 	cmp.w	ip, #0
 800c49a:	da05      	bge.n	800c4a8 <_strtol_l.constprop.0+0xd8>
 800c49c:	2322      	movs	r3, #34	; 0x22
 800c49e:	6003      	str	r3, [r0, #0]
 800c4a0:	4646      	mov	r6, r8
 800c4a2:	b942      	cbnz	r2, 800c4b6 <_strtol_l.constprop.0+0xe6>
 800c4a4:	4630      	mov	r0, r6
 800c4a6:	e79e      	b.n	800c3e6 <_strtol_l.constprop.0+0x16>
 800c4a8:	b107      	cbz	r7, 800c4ac <_strtol_l.constprop.0+0xdc>
 800c4aa:	4276      	negs	r6, r6
 800c4ac:	2a00      	cmp	r2, #0
 800c4ae:	d0f9      	beq.n	800c4a4 <_strtol_l.constprop.0+0xd4>
 800c4b0:	f1bc 0f00 	cmp.w	ip, #0
 800c4b4:	d000      	beq.n	800c4b8 <_strtol_l.constprop.0+0xe8>
 800c4b6:	1e69      	subs	r1, r5, #1
 800c4b8:	6011      	str	r1, [r2, #0]
 800c4ba:	e7f3      	b.n	800c4a4 <_strtol_l.constprop.0+0xd4>
 800c4bc:	2430      	movs	r4, #48	; 0x30
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d1b1      	bne.n	800c426 <_strtol_l.constprop.0+0x56>
 800c4c2:	2308      	movs	r3, #8
 800c4c4:	e7af      	b.n	800c426 <_strtol_l.constprop.0+0x56>
 800c4c6:	2c30      	cmp	r4, #48	; 0x30
 800c4c8:	d0a5      	beq.n	800c416 <_strtol_l.constprop.0+0x46>
 800c4ca:	230a      	movs	r3, #10
 800c4cc:	e7ab      	b.n	800c426 <_strtol_l.constprop.0+0x56>
 800c4ce:	bf00      	nop
 800c4d0:	0800f6f1 	.word	0x0800f6f1

0800c4d4 <_strtol_r>:
 800c4d4:	f7ff bf7c 	b.w	800c3d0 <_strtol_l.constprop.0>

0800c4d8 <quorem>:
 800c4d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4dc:	6903      	ldr	r3, [r0, #16]
 800c4de:	690c      	ldr	r4, [r1, #16]
 800c4e0:	42a3      	cmp	r3, r4
 800c4e2:	4607      	mov	r7, r0
 800c4e4:	f2c0 8081 	blt.w	800c5ea <quorem+0x112>
 800c4e8:	3c01      	subs	r4, #1
 800c4ea:	f101 0814 	add.w	r8, r1, #20
 800c4ee:	f100 0514 	add.w	r5, r0, #20
 800c4f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4f6:	9301      	str	r3, [sp, #4]
 800c4f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c4fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c500:	3301      	adds	r3, #1
 800c502:	429a      	cmp	r2, r3
 800c504:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c508:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c50c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c510:	d331      	bcc.n	800c576 <quorem+0x9e>
 800c512:	f04f 0e00 	mov.w	lr, #0
 800c516:	4640      	mov	r0, r8
 800c518:	46ac      	mov	ip, r5
 800c51a:	46f2      	mov	sl, lr
 800c51c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c520:	b293      	uxth	r3, r2
 800c522:	fb06 e303 	mla	r3, r6, r3, lr
 800c526:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	ebaa 0303 	sub.w	r3, sl, r3
 800c530:	f8dc a000 	ldr.w	sl, [ip]
 800c534:	0c12      	lsrs	r2, r2, #16
 800c536:	fa13 f38a 	uxtah	r3, r3, sl
 800c53a:	fb06 e202 	mla	r2, r6, r2, lr
 800c53e:	9300      	str	r3, [sp, #0]
 800c540:	9b00      	ldr	r3, [sp, #0]
 800c542:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c546:	b292      	uxth	r2, r2
 800c548:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c54c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c550:	f8bd 3000 	ldrh.w	r3, [sp]
 800c554:	4581      	cmp	r9, r0
 800c556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c55a:	f84c 3b04 	str.w	r3, [ip], #4
 800c55e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c562:	d2db      	bcs.n	800c51c <quorem+0x44>
 800c564:	f855 300b 	ldr.w	r3, [r5, fp]
 800c568:	b92b      	cbnz	r3, 800c576 <quorem+0x9e>
 800c56a:	9b01      	ldr	r3, [sp, #4]
 800c56c:	3b04      	subs	r3, #4
 800c56e:	429d      	cmp	r5, r3
 800c570:	461a      	mov	r2, r3
 800c572:	d32e      	bcc.n	800c5d2 <quorem+0xfa>
 800c574:	613c      	str	r4, [r7, #16]
 800c576:	4638      	mov	r0, r7
 800c578:	f001 fc82 	bl	800de80 <__mcmp>
 800c57c:	2800      	cmp	r0, #0
 800c57e:	db24      	blt.n	800c5ca <quorem+0xf2>
 800c580:	3601      	adds	r6, #1
 800c582:	4628      	mov	r0, r5
 800c584:	f04f 0c00 	mov.w	ip, #0
 800c588:	f858 2b04 	ldr.w	r2, [r8], #4
 800c58c:	f8d0 e000 	ldr.w	lr, [r0]
 800c590:	b293      	uxth	r3, r2
 800c592:	ebac 0303 	sub.w	r3, ip, r3
 800c596:	0c12      	lsrs	r2, r2, #16
 800c598:	fa13 f38e 	uxtah	r3, r3, lr
 800c59c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c5a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5aa:	45c1      	cmp	r9, r8
 800c5ac:	f840 3b04 	str.w	r3, [r0], #4
 800c5b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c5b4:	d2e8      	bcs.n	800c588 <quorem+0xb0>
 800c5b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5be:	b922      	cbnz	r2, 800c5ca <quorem+0xf2>
 800c5c0:	3b04      	subs	r3, #4
 800c5c2:	429d      	cmp	r5, r3
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	d30a      	bcc.n	800c5de <quorem+0x106>
 800c5c8:	613c      	str	r4, [r7, #16]
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	b003      	add	sp, #12
 800c5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d2:	6812      	ldr	r2, [r2, #0]
 800c5d4:	3b04      	subs	r3, #4
 800c5d6:	2a00      	cmp	r2, #0
 800c5d8:	d1cc      	bne.n	800c574 <quorem+0x9c>
 800c5da:	3c01      	subs	r4, #1
 800c5dc:	e7c7      	b.n	800c56e <quorem+0x96>
 800c5de:	6812      	ldr	r2, [r2, #0]
 800c5e0:	3b04      	subs	r3, #4
 800c5e2:	2a00      	cmp	r2, #0
 800c5e4:	d1f0      	bne.n	800c5c8 <quorem+0xf0>
 800c5e6:	3c01      	subs	r4, #1
 800c5e8:	e7eb      	b.n	800c5c2 <quorem+0xea>
 800c5ea:	2000      	movs	r0, #0
 800c5ec:	e7ee      	b.n	800c5cc <quorem+0xf4>
	...

0800c5f0 <_dtoa_r>:
 800c5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f4:	ed2d 8b04 	vpush	{d8-d9}
 800c5f8:	ec57 6b10 	vmov	r6, r7, d0
 800c5fc:	b093      	sub	sp, #76	; 0x4c
 800c5fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c600:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c604:	9106      	str	r1, [sp, #24]
 800c606:	ee10 aa10 	vmov	sl, s0
 800c60a:	4604      	mov	r4, r0
 800c60c:	9209      	str	r2, [sp, #36]	; 0x24
 800c60e:	930c      	str	r3, [sp, #48]	; 0x30
 800c610:	46bb      	mov	fp, r7
 800c612:	b975      	cbnz	r5, 800c632 <_dtoa_r+0x42>
 800c614:	2010      	movs	r0, #16
 800c616:	f001 f94d 	bl	800d8b4 <malloc>
 800c61a:	4602      	mov	r2, r0
 800c61c:	6260      	str	r0, [r4, #36]	; 0x24
 800c61e:	b920      	cbnz	r0, 800c62a <_dtoa_r+0x3a>
 800c620:	4ba7      	ldr	r3, [pc, #668]	; (800c8c0 <_dtoa_r+0x2d0>)
 800c622:	21ea      	movs	r1, #234	; 0xea
 800c624:	48a7      	ldr	r0, [pc, #668]	; (800c8c4 <_dtoa_r+0x2d4>)
 800c626:	f002 f8dd 	bl	800e7e4 <__assert_func>
 800c62a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c62e:	6005      	str	r5, [r0, #0]
 800c630:	60c5      	str	r5, [r0, #12]
 800c632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c634:	6819      	ldr	r1, [r3, #0]
 800c636:	b151      	cbz	r1, 800c64e <_dtoa_r+0x5e>
 800c638:	685a      	ldr	r2, [r3, #4]
 800c63a:	604a      	str	r2, [r1, #4]
 800c63c:	2301      	movs	r3, #1
 800c63e:	4093      	lsls	r3, r2
 800c640:	608b      	str	r3, [r1, #8]
 800c642:	4620      	mov	r0, r4
 800c644:	f001 f990 	bl	800d968 <_Bfree>
 800c648:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c64a:	2200      	movs	r2, #0
 800c64c:	601a      	str	r2, [r3, #0]
 800c64e:	1e3b      	subs	r3, r7, #0
 800c650:	bfaa      	itet	ge
 800c652:	2300      	movge	r3, #0
 800c654:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c658:	f8c8 3000 	strge.w	r3, [r8]
 800c65c:	4b9a      	ldr	r3, [pc, #616]	; (800c8c8 <_dtoa_r+0x2d8>)
 800c65e:	bfbc      	itt	lt
 800c660:	2201      	movlt	r2, #1
 800c662:	f8c8 2000 	strlt.w	r2, [r8]
 800c666:	ea33 030b 	bics.w	r3, r3, fp
 800c66a:	d11b      	bne.n	800c6a4 <_dtoa_r+0xb4>
 800c66c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c66e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c672:	6013      	str	r3, [r2, #0]
 800c674:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c678:	4333      	orrs	r3, r6
 800c67a:	f000 8592 	beq.w	800d1a2 <_dtoa_r+0xbb2>
 800c67e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c680:	b963      	cbnz	r3, 800c69c <_dtoa_r+0xac>
 800c682:	4b92      	ldr	r3, [pc, #584]	; (800c8cc <_dtoa_r+0x2dc>)
 800c684:	e022      	b.n	800c6cc <_dtoa_r+0xdc>
 800c686:	4b92      	ldr	r3, [pc, #584]	; (800c8d0 <_dtoa_r+0x2e0>)
 800c688:	9301      	str	r3, [sp, #4]
 800c68a:	3308      	adds	r3, #8
 800c68c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c68e:	6013      	str	r3, [r2, #0]
 800c690:	9801      	ldr	r0, [sp, #4]
 800c692:	b013      	add	sp, #76	; 0x4c
 800c694:	ecbd 8b04 	vpop	{d8-d9}
 800c698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c69c:	4b8b      	ldr	r3, [pc, #556]	; (800c8cc <_dtoa_r+0x2dc>)
 800c69e:	9301      	str	r3, [sp, #4]
 800c6a0:	3303      	adds	r3, #3
 800c6a2:	e7f3      	b.n	800c68c <_dtoa_r+0x9c>
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	4650      	mov	r0, sl
 800c6aa:	4659      	mov	r1, fp
 800c6ac:	f7f4 fa0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6b0:	ec4b ab19 	vmov	d9, sl, fp
 800c6b4:	4680      	mov	r8, r0
 800c6b6:	b158      	cbz	r0, 800c6d0 <_dtoa_r+0xe0>
 800c6b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	6013      	str	r3, [r2, #0]
 800c6be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	f000 856b 	beq.w	800d19c <_dtoa_r+0xbac>
 800c6c6:	4883      	ldr	r0, [pc, #524]	; (800c8d4 <_dtoa_r+0x2e4>)
 800c6c8:	6018      	str	r0, [r3, #0]
 800c6ca:	1e43      	subs	r3, r0, #1
 800c6cc:	9301      	str	r3, [sp, #4]
 800c6ce:	e7df      	b.n	800c690 <_dtoa_r+0xa0>
 800c6d0:	ec4b ab10 	vmov	d0, sl, fp
 800c6d4:	aa10      	add	r2, sp, #64	; 0x40
 800c6d6:	a911      	add	r1, sp, #68	; 0x44
 800c6d8:	4620      	mov	r0, r4
 800c6da:	f001 fcf3 	bl	800e0c4 <__d2b>
 800c6de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c6e2:	ee08 0a10 	vmov	s16, r0
 800c6e6:	2d00      	cmp	r5, #0
 800c6e8:	f000 8084 	beq.w	800c7f4 <_dtoa_r+0x204>
 800c6ec:	ee19 3a90 	vmov	r3, s19
 800c6f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c6f8:	4656      	mov	r6, sl
 800c6fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c6fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c702:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c706:	4b74      	ldr	r3, [pc, #464]	; (800c8d8 <_dtoa_r+0x2e8>)
 800c708:	2200      	movs	r2, #0
 800c70a:	4630      	mov	r0, r6
 800c70c:	4639      	mov	r1, r7
 800c70e:	f7f3 fdbb 	bl	8000288 <__aeabi_dsub>
 800c712:	a365      	add	r3, pc, #404	; (adr r3, 800c8a8 <_dtoa_r+0x2b8>)
 800c714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c718:	f7f3 ff6e 	bl	80005f8 <__aeabi_dmul>
 800c71c:	a364      	add	r3, pc, #400	; (adr r3, 800c8b0 <_dtoa_r+0x2c0>)
 800c71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c722:	f7f3 fdb3 	bl	800028c <__adddf3>
 800c726:	4606      	mov	r6, r0
 800c728:	4628      	mov	r0, r5
 800c72a:	460f      	mov	r7, r1
 800c72c:	f7f3 fefa 	bl	8000524 <__aeabi_i2d>
 800c730:	a361      	add	r3, pc, #388	; (adr r3, 800c8b8 <_dtoa_r+0x2c8>)
 800c732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c736:	f7f3 ff5f 	bl	80005f8 <__aeabi_dmul>
 800c73a:	4602      	mov	r2, r0
 800c73c:	460b      	mov	r3, r1
 800c73e:	4630      	mov	r0, r6
 800c740:	4639      	mov	r1, r7
 800c742:	f7f3 fda3 	bl	800028c <__adddf3>
 800c746:	4606      	mov	r6, r0
 800c748:	460f      	mov	r7, r1
 800c74a:	f7f4 fa05 	bl	8000b58 <__aeabi_d2iz>
 800c74e:	2200      	movs	r2, #0
 800c750:	9000      	str	r0, [sp, #0]
 800c752:	2300      	movs	r3, #0
 800c754:	4630      	mov	r0, r6
 800c756:	4639      	mov	r1, r7
 800c758:	f7f4 f9c0 	bl	8000adc <__aeabi_dcmplt>
 800c75c:	b150      	cbz	r0, 800c774 <_dtoa_r+0x184>
 800c75e:	9800      	ldr	r0, [sp, #0]
 800c760:	f7f3 fee0 	bl	8000524 <__aeabi_i2d>
 800c764:	4632      	mov	r2, r6
 800c766:	463b      	mov	r3, r7
 800c768:	f7f4 f9ae 	bl	8000ac8 <__aeabi_dcmpeq>
 800c76c:	b910      	cbnz	r0, 800c774 <_dtoa_r+0x184>
 800c76e:	9b00      	ldr	r3, [sp, #0]
 800c770:	3b01      	subs	r3, #1
 800c772:	9300      	str	r3, [sp, #0]
 800c774:	9b00      	ldr	r3, [sp, #0]
 800c776:	2b16      	cmp	r3, #22
 800c778:	d85a      	bhi.n	800c830 <_dtoa_r+0x240>
 800c77a:	9a00      	ldr	r2, [sp, #0]
 800c77c:	4b57      	ldr	r3, [pc, #348]	; (800c8dc <_dtoa_r+0x2ec>)
 800c77e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c786:	ec51 0b19 	vmov	r0, r1, d9
 800c78a:	f7f4 f9a7 	bl	8000adc <__aeabi_dcmplt>
 800c78e:	2800      	cmp	r0, #0
 800c790:	d050      	beq.n	800c834 <_dtoa_r+0x244>
 800c792:	9b00      	ldr	r3, [sp, #0]
 800c794:	3b01      	subs	r3, #1
 800c796:	9300      	str	r3, [sp, #0]
 800c798:	2300      	movs	r3, #0
 800c79a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c79c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c79e:	1b5d      	subs	r5, r3, r5
 800c7a0:	1e6b      	subs	r3, r5, #1
 800c7a2:	9305      	str	r3, [sp, #20]
 800c7a4:	bf45      	ittet	mi
 800c7a6:	f1c5 0301 	rsbmi	r3, r5, #1
 800c7aa:	9304      	strmi	r3, [sp, #16]
 800c7ac:	2300      	movpl	r3, #0
 800c7ae:	2300      	movmi	r3, #0
 800c7b0:	bf4c      	ite	mi
 800c7b2:	9305      	strmi	r3, [sp, #20]
 800c7b4:	9304      	strpl	r3, [sp, #16]
 800c7b6:	9b00      	ldr	r3, [sp, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	db3d      	blt.n	800c838 <_dtoa_r+0x248>
 800c7bc:	9b05      	ldr	r3, [sp, #20]
 800c7be:	9a00      	ldr	r2, [sp, #0]
 800c7c0:	920a      	str	r2, [sp, #40]	; 0x28
 800c7c2:	4413      	add	r3, r2
 800c7c4:	9305      	str	r3, [sp, #20]
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	9307      	str	r3, [sp, #28]
 800c7ca:	9b06      	ldr	r3, [sp, #24]
 800c7cc:	2b09      	cmp	r3, #9
 800c7ce:	f200 8089 	bhi.w	800c8e4 <_dtoa_r+0x2f4>
 800c7d2:	2b05      	cmp	r3, #5
 800c7d4:	bfc4      	itt	gt
 800c7d6:	3b04      	subgt	r3, #4
 800c7d8:	9306      	strgt	r3, [sp, #24]
 800c7da:	9b06      	ldr	r3, [sp, #24]
 800c7dc:	f1a3 0302 	sub.w	r3, r3, #2
 800c7e0:	bfcc      	ite	gt
 800c7e2:	2500      	movgt	r5, #0
 800c7e4:	2501      	movle	r5, #1
 800c7e6:	2b03      	cmp	r3, #3
 800c7e8:	f200 8087 	bhi.w	800c8fa <_dtoa_r+0x30a>
 800c7ec:	e8df f003 	tbb	[pc, r3]
 800c7f0:	59383a2d 	.word	0x59383a2d
 800c7f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c7f8:	441d      	add	r5, r3
 800c7fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c7fe:	2b20      	cmp	r3, #32
 800c800:	bfc1      	itttt	gt
 800c802:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c806:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c80a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c80e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c812:	bfda      	itte	le
 800c814:	f1c3 0320 	rsble	r3, r3, #32
 800c818:	fa06 f003 	lslle.w	r0, r6, r3
 800c81c:	4318      	orrgt	r0, r3
 800c81e:	f7f3 fe71 	bl	8000504 <__aeabi_ui2d>
 800c822:	2301      	movs	r3, #1
 800c824:	4606      	mov	r6, r0
 800c826:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c82a:	3d01      	subs	r5, #1
 800c82c:	930e      	str	r3, [sp, #56]	; 0x38
 800c82e:	e76a      	b.n	800c706 <_dtoa_r+0x116>
 800c830:	2301      	movs	r3, #1
 800c832:	e7b2      	b.n	800c79a <_dtoa_r+0x1aa>
 800c834:	900b      	str	r0, [sp, #44]	; 0x2c
 800c836:	e7b1      	b.n	800c79c <_dtoa_r+0x1ac>
 800c838:	9b04      	ldr	r3, [sp, #16]
 800c83a:	9a00      	ldr	r2, [sp, #0]
 800c83c:	1a9b      	subs	r3, r3, r2
 800c83e:	9304      	str	r3, [sp, #16]
 800c840:	4253      	negs	r3, r2
 800c842:	9307      	str	r3, [sp, #28]
 800c844:	2300      	movs	r3, #0
 800c846:	930a      	str	r3, [sp, #40]	; 0x28
 800c848:	e7bf      	b.n	800c7ca <_dtoa_r+0x1da>
 800c84a:	2300      	movs	r3, #0
 800c84c:	9308      	str	r3, [sp, #32]
 800c84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c850:	2b00      	cmp	r3, #0
 800c852:	dc55      	bgt.n	800c900 <_dtoa_r+0x310>
 800c854:	2301      	movs	r3, #1
 800c856:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c85a:	461a      	mov	r2, r3
 800c85c:	9209      	str	r2, [sp, #36]	; 0x24
 800c85e:	e00c      	b.n	800c87a <_dtoa_r+0x28a>
 800c860:	2301      	movs	r3, #1
 800c862:	e7f3      	b.n	800c84c <_dtoa_r+0x25c>
 800c864:	2300      	movs	r3, #0
 800c866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c868:	9308      	str	r3, [sp, #32]
 800c86a:	9b00      	ldr	r3, [sp, #0]
 800c86c:	4413      	add	r3, r2
 800c86e:	9302      	str	r3, [sp, #8]
 800c870:	3301      	adds	r3, #1
 800c872:	2b01      	cmp	r3, #1
 800c874:	9303      	str	r3, [sp, #12]
 800c876:	bfb8      	it	lt
 800c878:	2301      	movlt	r3, #1
 800c87a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c87c:	2200      	movs	r2, #0
 800c87e:	6042      	str	r2, [r0, #4]
 800c880:	2204      	movs	r2, #4
 800c882:	f102 0614 	add.w	r6, r2, #20
 800c886:	429e      	cmp	r6, r3
 800c888:	6841      	ldr	r1, [r0, #4]
 800c88a:	d93d      	bls.n	800c908 <_dtoa_r+0x318>
 800c88c:	4620      	mov	r0, r4
 800c88e:	f001 f82b 	bl	800d8e8 <_Balloc>
 800c892:	9001      	str	r0, [sp, #4]
 800c894:	2800      	cmp	r0, #0
 800c896:	d13b      	bne.n	800c910 <_dtoa_r+0x320>
 800c898:	4b11      	ldr	r3, [pc, #68]	; (800c8e0 <_dtoa_r+0x2f0>)
 800c89a:	4602      	mov	r2, r0
 800c89c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c8a0:	e6c0      	b.n	800c624 <_dtoa_r+0x34>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e7df      	b.n	800c866 <_dtoa_r+0x276>
 800c8a6:	bf00      	nop
 800c8a8:	636f4361 	.word	0x636f4361
 800c8ac:	3fd287a7 	.word	0x3fd287a7
 800c8b0:	8b60c8b3 	.word	0x8b60c8b3
 800c8b4:	3fc68a28 	.word	0x3fc68a28
 800c8b8:	509f79fb 	.word	0x509f79fb
 800c8bc:	3fd34413 	.word	0x3fd34413
 800c8c0:	0800f7fe 	.word	0x0800f7fe
 800c8c4:	0800f815 	.word	0x0800f815
 800c8c8:	7ff00000 	.word	0x7ff00000
 800c8cc:	0800f7fa 	.word	0x0800f7fa
 800c8d0:	0800f7f1 	.word	0x0800f7f1
 800c8d4:	0800f671 	.word	0x0800f671
 800c8d8:	3ff80000 	.word	0x3ff80000
 800c8dc:	0800f980 	.word	0x0800f980
 800c8e0:	0800f870 	.word	0x0800f870
 800c8e4:	2501      	movs	r5, #1
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	9306      	str	r3, [sp, #24]
 800c8ea:	9508      	str	r5, [sp, #32]
 800c8ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	2312      	movs	r3, #18
 800c8f8:	e7b0      	b.n	800c85c <_dtoa_r+0x26c>
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	9308      	str	r3, [sp, #32]
 800c8fe:	e7f5      	b.n	800c8ec <_dtoa_r+0x2fc>
 800c900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c902:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c906:	e7b8      	b.n	800c87a <_dtoa_r+0x28a>
 800c908:	3101      	adds	r1, #1
 800c90a:	6041      	str	r1, [r0, #4]
 800c90c:	0052      	lsls	r2, r2, #1
 800c90e:	e7b8      	b.n	800c882 <_dtoa_r+0x292>
 800c910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c912:	9a01      	ldr	r2, [sp, #4]
 800c914:	601a      	str	r2, [r3, #0]
 800c916:	9b03      	ldr	r3, [sp, #12]
 800c918:	2b0e      	cmp	r3, #14
 800c91a:	f200 809d 	bhi.w	800ca58 <_dtoa_r+0x468>
 800c91e:	2d00      	cmp	r5, #0
 800c920:	f000 809a 	beq.w	800ca58 <_dtoa_r+0x468>
 800c924:	9b00      	ldr	r3, [sp, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	dd32      	ble.n	800c990 <_dtoa_r+0x3a0>
 800c92a:	4ab7      	ldr	r2, [pc, #732]	; (800cc08 <_dtoa_r+0x618>)
 800c92c:	f003 030f 	and.w	r3, r3, #15
 800c930:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c934:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c938:	9b00      	ldr	r3, [sp, #0]
 800c93a:	05d8      	lsls	r0, r3, #23
 800c93c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c940:	d516      	bpl.n	800c970 <_dtoa_r+0x380>
 800c942:	4bb2      	ldr	r3, [pc, #712]	; (800cc0c <_dtoa_r+0x61c>)
 800c944:	ec51 0b19 	vmov	r0, r1, d9
 800c948:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c94c:	f7f3 ff7e 	bl	800084c <__aeabi_ddiv>
 800c950:	f007 070f 	and.w	r7, r7, #15
 800c954:	4682      	mov	sl, r0
 800c956:	468b      	mov	fp, r1
 800c958:	2503      	movs	r5, #3
 800c95a:	4eac      	ldr	r6, [pc, #688]	; (800cc0c <_dtoa_r+0x61c>)
 800c95c:	b957      	cbnz	r7, 800c974 <_dtoa_r+0x384>
 800c95e:	4642      	mov	r2, r8
 800c960:	464b      	mov	r3, r9
 800c962:	4650      	mov	r0, sl
 800c964:	4659      	mov	r1, fp
 800c966:	f7f3 ff71 	bl	800084c <__aeabi_ddiv>
 800c96a:	4682      	mov	sl, r0
 800c96c:	468b      	mov	fp, r1
 800c96e:	e028      	b.n	800c9c2 <_dtoa_r+0x3d2>
 800c970:	2502      	movs	r5, #2
 800c972:	e7f2      	b.n	800c95a <_dtoa_r+0x36a>
 800c974:	07f9      	lsls	r1, r7, #31
 800c976:	d508      	bpl.n	800c98a <_dtoa_r+0x39a>
 800c978:	4640      	mov	r0, r8
 800c97a:	4649      	mov	r1, r9
 800c97c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c980:	f7f3 fe3a 	bl	80005f8 <__aeabi_dmul>
 800c984:	3501      	adds	r5, #1
 800c986:	4680      	mov	r8, r0
 800c988:	4689      	mov	r9, r1
 800c98a:	107f      	asrs	r7, r7, #1
 800c98c:	3608      	adds	r6, #8
 800c98e:	e7e5      	b.n	800c95c <_dtoa_r+0x36c>
 800c990:	f000 809b 	beq.w	800caca <_dtoa_r+0x4da>
 800c994:	9b00      	ldr	r3, [sp, #0]
 800c996:	4f9d      	ldr	r7, [pc, #628]	; (800cc0c <_dtoa_r+0x61c>)
 800c998:	425e      	negs	r6, r3
 800c99a:	4b9b      	ldr	r3, [pc, #620]	; (800cc08 <_dtoa_r+0x618>)
 800c99c:	f006 020f 	and.w	r2, r6, #15
 800c9a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a8:	ec51 0b19 	vmov	r0, r1, d9
 800c9ac:	f7f3 fe24 	bl	80005f8 <__aeabi_dmul>
 800c9b0:	1136      	asrs	r6, r6, #4
 800c9b2:	4682      	mov	sl, r0
 800c9b4:	468b      	mov	fp, r1
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	2502      	movs	r5, #2
 800c9ba:	2e00      	cmp	r6, #0
 800c9bc:	d17a      	bne.n	800cab4 <_dtoa_r+0x4c4>
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d1d3      	bne.n	800c96a <_dtoa_r+0x37a>
 800c9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f000 8082 	beq.w	800cace <_dtoa_r+0x4de>
 800c9ca:	4b91      	ldr	r3, [pc, #580]	; (800cc10 <_dtoa_r+0x620>)
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	4650      	mov	r0, sl
 800c9d0:	4659      	mov	r1, fp
 800c9d2:	f7f4 f883 	bl	8000adc <__aeabi_dcmplt>
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	d079      	beq.n	800cace <_dtoa_r+0x4de>
 800c9da:	9b03      	ldr	r3, [sp, #12]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d076      	beq.n	800cace <_dtoa_r+0x4de>
 800c9e0:	9b02      	ldr	r3, [sp, #8]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	dd36      	ble.n	800ca54 <_dtoa_r+0x464>
 800c9e6:	9b00      	ldr	r3, [sp, #0]
 800c9e8:	4650      	mov	r0, sl
 800c9ea:	4659      	mov	r1, fp
 800c9ec:	1e5f      	subs	r7, r3, #1
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	4b88      	ldr	r3, [pc, #544]	; (800cc14 <_dtoa_r+0x624>)
 800c9f2:	f7f3 fe01 	bl	80005f8 <__aeabi_dmul>
 800c9f6:	9e02      	ldr	r6, [sp, #8]
 800c9f8:	4682      	mov	sl, r0
 800c9fa:	468b      	mov	fp, r1
 800c9fc:	3501      	adds	r5, #1
 800c9fe:	4628      	mov	r0, r5
 800ca00:	f7f3 fd90 	bl	8000524 <__aeabi_i2d>
 800ca04:	4652      	mov	r2, sl
 800ca06:	465b      	mov	r3, fp
 800ca08:	f7f3 fdf6 	bl	80005f8 <__aeabi_dmul>
 800ca0c:	4b82      	ldr	r3, [pc, #520]	; (800cc18 <_dtoa_r+0x628>)
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f7f3 fc3c 	bl	800028c <__adddf3>
 800ca14:	46d0      	mov	r8, sl
 800ca16:	46d9      	mov	r9, fp
 800ca18:	4682      	mov	sl, r0
 800ca1a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ca1e:	2e00      	cmp	r6, #0
 800ca20:	d158      	bne.n	800cad4 <_dtoa_r+0x4e4>
 800ca22:	4b7e      	ldr	r3, [pc, #504]	; (800cc1c <_dtoa_r+0x62c>)
 800ca24:	2200      	movs	r2, #0
 800ca26:	4640      	mov	r0, r8
 800ca28:	4649      	mov	r1, r9
 800ca2a:	f7f3 fc2d 	bl	8000288 <__aeabi_dsub>
 800ca2e:	4652      	mov	r2, sl
 800ca30:	465b      	mov	r3, fp
 800ca32:	4680      	mov	r8, r0
 800ca34:	4689      	mov	r9, r1
 800ca36:	f7f4 f86f 	bl	8000b18 <__aeabi_dcmpgt>
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	f040 8295 	bne.w	800cf6a <_dtoa_r+0x97a>
 800ca40:	4652      	mov	r2, sl
 800ca42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ca46:	4640      	mov	r0, r8
 800ca48:	4649      	mov	r1, r9
 800ca4a:	f7f4 f847 	bl	8000adc <__aeabi_dcmplt>
 800ca4e:	2800      	cmp	r0, #0
 800ca50:	f040 8289 	bne.w	800cf66 <_dtoa_r+0x976>
 800ca54:	ec5b ab19 	vmov	sl, fp, d9
 800ca58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	f2c0 8148 	blt.w	800ccf0 <_dtoa_r+0x700>
 800ca60:	9a00      	ldr	r2, [sp, #0]
 800ca62:	2a0e      	cmp	r2, #14
 800ca64:	f300 8144 	bgt.w	800ccf0 <_dtoa_r+0x700>
 800ca68:	4b67      	ldr	r3, [pc, #412]	; (800cc08 <_dtoa_r+0x618>)
 800ca6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	f280 80d5 	bge.w	800cc24 <_dtoa_r+0x634>
 800ca7a:	9b03      	ldr	r3, [sp, #12]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f300 80d1 	bgt.w	800cc24 <_dtoa_r+0x634>
 800ca82:	f040 826f 	bne.w	800cf64 <_dtoa_r+0x974>
 800ca86:	4b65      	ldr	r3, [pc, #404]	; (800cc1c <_dtoa_r+0x62c>)
 800ca88:	2200      	movs	r2, #0
 800ca8a:	4640      	mov	r0, r8
 800ca8c:	4649      	mov	r1, r9
 800ca8e:	f7f3 fdb3 	bl	80005f8 <__aeabi_dmul>
 800ca92:	4652      	mov	r2, sl
 800ca94:	465b      	mov	r3, fp
 800ca96:	f7f4 f835 	bl	8000b04 <__aeabi_dcmpge>
 800ca9a:	9e03      	ldr	r6, [sp, #12]
 800ca9c:	4637      	mov	r7, r6
 800ca9e:	2800      	cmp	r0, #0
 800caa0:	f040 8245 	bne.w	800cf2e <_dtoa_r+0x93e>
 800caa4:	9d01      	ldr	r5, [sp, #4]
 800caa6:	2331      	movs	r3, #49	; 0x31
 800caa8:	f805 3b01 	strb.w	r3, [r5], #1
 800caac:	9b00      	ldr	r3, [sp, #0]
 800caae:	3301      	adds	r3, #1
 800cab0:	9300      	str	r3, [sp, #0]
 800cab2:	e240      	b.n	800cf36 <_dtoa_r+0x946>
 800cab4:	07f2      	lsls	r2, r6, #31
 800cab6:	d505      	bpl.n	800cac4 <_dtoa_r+0x4d4>
 800cab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cabc:	f7f3 fd9c 	bl	80005f8 <__aeabi_dmul>
 800cac0:	3501      	adds	r5, #1
 800cac2:	2301      	movs	r3, #1
 800cac4:	1076      	asrs	r6, r6, #1
 800cac6:	3708      	adds	r7, #8
 800cac8:	e777      	b.n	800c9ba <_dtoa_r+0x3ca>
 800caca:	2502      	movs	r5, #2
 800cacc:	e779      	b.n	800c9c2 <_dtoa_r+0x3d2>
 800cace:	9f00      	ldr	r7, [sp, #0]
 800cad0:	9e03      	ldr	r6, [sp, #12]
 800cad2:	e794      	b.n	800c9fe <_dtoa_r+0x40e>
 800cad4:	9901      	ldr	r1, [sp, #4]
 800cad6:	4b4c      	ldr	r3, [pc, #304]	; (800cc08 <_dtoa_r+0x618>)
 800cad8:	4431      	add	r1, r6
 800cada:	910d      	str	r1, [sp, #52]	; 0x34
 800cadc:	9908      	ldr	r1, [sp, #32]
 800cade:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cae2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cae6:	2900      	cmp	r1, #0
 800cae8:	d043      	beq.n	800cb72 <_dtoa_r+0x582>
 800caea:	494d      	ldr	r1, [pc, #308]	; (800cc20 <_dtoa_r+0x630>)
 800caec:	2000      	movs	r0, #0
 800caee:	f7f3 fead 	bl	800084c <__aeabi_ddiv>
 800caf2:	4652      	mov	r2, sl
 800caf4:	465b      	mov	r3, fp
 800caf6:	f7f3 fbc7 	bl	8000288 <__aeabi_dsub>
 800cafa:	9d01      	ldr	r5, [sp, #4]
 800cafc:	4682      	mov	sl, r0
 800cafe:	468b      	mov	fp, r1
 800cb00:	4649      	mov	r1, r9
 800cb02:	4640      	mov	r0, r8
 800cb04:	f7f4 f828 	bl	8000b58 <__aeabi_d2iz>
 800cb08:	4606      	mov	r6, r0
 800cb0a:	f7f3 fd0b 	bl	8000524 <__aeabi_i2d>
 800cb0e:	4602      	mov	r2, r0
 800cb10:	460b      	mov	r3, r1
 800cb12:	4640      	mov	r0, r8
 800cb14:	4649      	mov	r1, r9
 800cb16:	f7f3 fbb7 	bl	8000288 <__aeabi_dsub>
 800cb1a:	3630      	adds	r6, #48	; 0x30
 800cb1c:	f805 6b01 	strb.w	r6, [r5], #1
 800cb20:	4652      	mov	r2, sl
 800cb22:	465b      	mov	r3, fp
 800cb24:	4680      	mov	r8, r0
 800cb26:	4689      	mov	r9, r1
 800cb28:	f7f3 ffd8 	bl	8000adc <__aeabi_dcmplt>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d163      	bne.n	800cbf8 <_dtoa_r+0x608>
 800cb30:	4642      	mov	r2, r8
 800cb32:	464b      	mov	r3, r9
 800cb34:	4936      	ldr	r1, [pc, #216]	; (800cc10 <_dtoa_r+0x620>)
 800cb36:	2000      	movs	r0, #0
 800cb38:	f7f3 fba6 	bl	8000288 <__aeabi_dsub>
 800cb3c:	4652      	mov	r2, sl
 800cb3e:	465b      	mov	r3, fp
 800cb40:	f7f3 ffcc 	bl	8000adc <__aeabi_dcmplt>
 800cb44:	2800      	cmp	r0, #0
 800cb46:	f040 80b5 	bne.w	800ccb4 <_dtoa_r+0x6c4>
 800cb4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb4c:	429d      	cmp	r5, r3
 800cb4e:	d081      	beq.n	800ca54 <_dtoa_r+0x464>
 800cb50:	4b30      	ldr	r3, [pc, #192]	; (800cc14 <_dtoa_r+0x624>)
 800cb52:	2200      	movs	r2, #0
 800cb54:	4650      	mov	r0, sl
 800cb56:	4659      	mov	r1, fp
 800cb58:	f7f3 fd4e 	bl	80005f8 <__aeabi_dmul>
 800cb5c:	4b2d      	ldr	r3, [pc, #180]	; (800cc14 <_dtoa_r+0x624>)
 800cb5e:	4682      	mov	sl, r0
 800cb60:	468b      	mov	fp, r1
 800cb62:	4640      	mov	r0, r8
 800cb64:	4649      	mov	r1, r9
 800cb66:	2200      	movs	r2, #0
 800cb68:	f7f3 fd46 	bl	80005f8 <__aeabi_dmul>
 800cb6c:	4680      	mov	r8, r0
 800cb6e:	4689      	mov	r9, r1
 800cb70:	e7c6      	b.n	800cb00 <_dtoa_r+0x510>
 800cb72:	4650      	mov	r0, sl
 800cb74:	4659      	mov	r1, fp
 800cb76:	f7f3 fd3f 	bl	80005f8 <__aeabi_dmul>
 800cb7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb7c:	9d01      	ldr	r5, [sp, #4]
 800cb7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb80:	4682      	mov	sl, r0
 800cb82:	468b      	mov	fp, r1
 800cb84:	4649      	mov	r1, r9
 800cb86:	4640      	mov	r0, r8
 800cb88:	f7f3 ffe6 	bl	8000b58 <__aeabi_d2iz>
 800cb8c:	4606      	mov	r6, r0
 800cb8e:	f7f3 fcc9 	bl	8000524 <__aeabi_i2d>
 800cb92:	3630      	adds	r6, #48	; 0x30
 800cb94:	4602      	mov	r2, r0
 800cb96:	460b      	mov	r3, r1
 800cb98:	4640      	mov	r0, r8
 800cb9a:	4649      	mov	r1, r9
 800cb9c:	f7f3 fb74 	bl	8000288 <__aeabi_dsub>
 800cba0:	f805 6b01 	strb.w	r6, [r5], #1
 800cba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cba6:	429d      	cmp	r5, r3
 800cba8:	4680      	mov	r8, r0
 800cbaa:	4689      	mov	r9, r1
 800cbac:	f04f 0200 	mov.w	r2, #0
 800cbb0:	d124      	bne.n	800cbfc <_dtoa_r+0x60c>
 800cbb2:	4b1b      	ldr	r3, [pc, #108]	; (800cc20 <_dtoa_r+0x630>)
 800cbb4:	4650      	mov	r0, sl
 800cbb6:	4659      	mov	r1, fp
 800cbb8:	f7f3 fb68 	bl	800028c <__adddf3>
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	4640      	mov	r0, r8
 800cbc2:	4649      	mov	r1, r9
 800cbc4:	f7f3 ffa8 	bl	8000b18 <__aeabi_dcmpgt>
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	d173      	bne.n	800ccb4 <_dtoa_r+0x6c4>
 800cbcc:	4652      	mov	r2, sl
 800cbce:	465b      	mov	r3, fp
 800cbd0:	4913      	ldr	r1, [pc, #76]	; (800cc20 <_dtoa_r+0x630>)
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	f7f3 fb58 	bl	8000288 <__aeabi_dsub>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	460b      	mov	r3, r1
 800cbdc:	4640      	mov	r0, r8
 800cbde:	4649      	mov	r1, r9
 800cbe0:	f7f3 ff7c 	bl	8000adc <__aeabi_dcmplt>
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	f43f af35 	beq.w	800ca54 <_dtoa_r+0x464>
 800cbea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cbec:	1e6b      	subs	r3, r5, #1
 800cbee:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbf0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cbf4:	2b30      	cmp	r3, #48	; 0x30
 800cbf6:	d0f8      	beq.n	800cbea <_dtoa_r+0x5fa>
 800cbf8:	9700      	str	r7, [sp, #0]
 800cbfa:	e049      	b.n	800cc90 <_dtoa_r+0x6a0>
 800cbfc:	4b05      	ldr	r3, [pc, #20]	; (800cc14 <_dtoa_r+0x624>)
 800cbfe:	f7f3 fcfb 	bl	80005f8 <__aeabi_dmul>
 800cc02:	4680      	mov	r8, r0
 800cc04:	4689      	mov	r9, r1
 800cc06:	e7bd      	b.n	800cb84 <_dtoa_r+0x594>
 800cc08:	0800f980 	.word	0x0800f980
 800cc0c:	0800f958 	.word	0x0800f958
 800cc10:	3ff00000 	.word	0x3ff00000
 800cc14:	40240000 	.word	0x40240000
 800cc18:	401c0000 	.word	0x401c0000
 800cc1c:	40140000 	.word	0x40140000
 800cc20:	3fe00000 	.word	0x3fe00000
 800cc24:	9d01      	ldr	r5, [sp, #4]
 800cc26:	4656      	mov	r6, sl
 800cc28:	465f      	mov	r7, fp
 800cc2a:	4642      	mov	r2, r8
 800cc2c:	464b      	mov	r3, r9
 800cc2e:	4630      	mov	r0, r6
 800cc30:	4639      	mov	r1, r7
 800cc32:	f7f3 fe0b 	bl	800084c <__aeabi_ddiv>
 800cc36:	f7f3 ff8f 	bl	8000b58 <__aeabi_d2iz>
 800cc3a:	4682      	mov	sl, r0
 800cc3c:	f7f3 fc72 	bl	8000524 <__aeabi_i2d>
 800cc40:	4642      	mov	r2, r8
 800cc42:	464b      	mov	r3, r9
 800cc44:	f7f3 fcd8 	bl	80005f8 <__aeabi_dmul>
 800cc48:	4602      	mov	r2, r0
 800cc4a:	460b      	mov	r3, r1
 800cc4c:	4630      	mov	r0, r6
 800cc4e:	4639      	mov	r1, r7
 800cc50:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cc54:	f7f3 fb18 	bl	8000288 <__aeabi_dsub>
 800cc58:	f805 6b01 	strb.w	r6, [r5], #1
 800cc5c:	9e01      	ldr	r6, [sp, #4]
 800cc5e:	9f03      	ldr	r7, [sp, #12]
 800cc60:	1bae      	subs	r6, r5, r6
 800cc62:	42b7      	cmp	r7, r6
 800cc64:	4602      	mov	r2, r0
 800cc66:	460b      	mov	r3, r1
 800cc68:	d135      	bne.n	800ccd6 <_dtoa_r+0x6e6>
 800cc6a:	f7f3 fb0f 	bl	800028c <__adddf3>
 800cc6e:	4642      	mov	r2, r8
 800cc70:	464b      	mov	r3, r9
 800cc72:	4606      	mov	r6, r0
 800cc74:	460f      	mov	r7, r1
 800cc76:	f7f3 ff4f 	bl	8000b18 <__aeabi_dcmpgt>
 800cc7a:	b9d0      	cbnz	r0, 800ccb2 <_dtoa_r+0x6c2>
 800cc7c:	4642      	mov	r2, r8
 800cc7e:	464b      	mov	r3, r9
 800cc80:	4630      	mov	r0, r6
 800cc82:	4639      	mov	r1, r7
 800cc84:	f7f3 ff20 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc88:	b110      	cbz	r0, 800cc90 <_dtoa_r+0x6a0>
 800cc8a:	f01a 0f01 	tst.w	sl, #1
 800cc8e:	d110      	bne.n	800ccb2 <_dtoa_r+0x6c2>
 800cc90:	4620      	mov	r0, r4
 800cc92:	ee18 1a10 	vmov	r1, s16
 800cc96:	f000 fe67 	bl	800d968 <_Bfree>
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	9800      	ldr	r0, [sp, #0]
 800cc9e:	702b      	strb	r3, [r5, #0]
 800cca0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cca2:	3001      	adds	r0, #1
 800cca4:	6018      	str	r0, [r3, #0]
 800cca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	f43f acf1 	beq.w	800c690 <_dtoa_r+0xa0>
 800ccae:	601d      	str	r5, [r3, #0]
 800ccb0:	e4ee      	b.n	800c690 <_dtoa_r+0xa0>
 800ccb2:	9f00      	ldr	r7, [sp, #0]
 800ccb4:	462b      	mov	r3, r5
 800ccb6:	461d      	mov	r5, r3
 800ccb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccbc:	2a39      	cmp	r2, #57	; 0x39
 800ccbe:	d106      	bne.n	800ccce <_dtoa_r+0x6de>
 800ccc0:	9a01      	ldr	r2, [sp, #4]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d1f7      	bne.n	800ccb6 <_dtoa_r+0x6c6>
 800ccc6:	9901      	ldr	r1, [sp, #4]
 800ccc8:	2230      	movs	r2, #48	; 0x30
 800ccca:	3701      	adds	r7, #1
 800cccc:	700a      	strb	r2, [r1, #0]
 800ccce:	781a      	ldrb	r2, [r3, #0]
 800ccd0:	3201      	adds	r2, #1
 800ccd2:	701a      	strb	r2, [r3, #0]
 800ccd4:	e790      	b.n	800cbf8 <_dtoa_r+0x608>
 800ccd6:	4ba6      	ldr	r3, [pc, #664]	; (800cf70 <_dtoa_r+0x980>)
 800ccd8:	2200      	movs	r2, #0
 800ccda:	f7f3 fc8d 	bl	80005f8 <__aeabi_dmul>
 800ccde:	2200      	movs	r2, #0
 800cce0:	2300      	movs	r3, #0
 800cce2:	4606      	mov	r6, r0
 800cce4:	460f      	mov	r7, r1
 800cce6:	f7f3 feef 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccea:	2800      	cmp	r0, #0
 800ccec:	d09d      	beq.n	800cc2a <_dtoa_r+0x63a>
 800ccee:	e7cf      	b.n	800cc90 <_dtoa_r+0x6a0>
 800ccf0:	9a08      	ldr	r2, [sp, #32]
 800ccf2:	2a00      	cmp	r2, #0
 800ccf4:	f000 80d7 	beq.w	800cea6 <_dtoa_r+0x8b6>
 800ccf8:	9a06      	ldr	r2, [sp, #24]
 800ccfa:	2a01      	cmp	r2, #1
 800ccfc:	f300 80ba 	bgt.w	800ce74 <_dtoa_r+0x884>
 800cd00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd02:	2a00      	cmp	r2, #0
 800cd04:	f000 80b2 	beq.w	800ce6c <_dtoa_r+0x87c>
 800cd08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cd0c:	9e07      	ldr	r6, [sp, #28]
 800cd0e:	9d04      	ldr	r5, [sp, #16]
 800cd10:	9a04      	ldr	r2, [sp, #16]
 800cd12:	441a      	add	r2, r3
 800cd14:	9204      	str	r2, [sp, #16]
 800cd16:	9a05      	ldr	r2, [sp, #20]
 800cd18:	2101      	movs	r1, #1
 800cd1a:	441a      	add	r2, r3
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	9205      	str	r2, [sp, #20]
 800cd20:	f000 ff24 	bl	800db6c <__i2b>
 800cd24:	4607      	mov	r7, r0
 800cd26:	2d00      	cmp	r5, #0
 800cd28:	dd0c      	ble.n	800cd44 <_dtoa_r+0x754>
 800cd2a:	9b05      	ldr	r3, [sp, #20]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	dd09      	ble.n	800cd44 <_dtoa_r+0x754>
 800cd30:	42ab      	cmp	r3, r5
 800cd32:	9a04      	ldr	r2, [sp, #16]
 800cd34:	bfa8      	it	ge
 800cd36:	462b      	movge	r3, r5
 800cd38:	1ad2      	subs	r2, r2, r3
 800cd3a:	9204      	str	r2, [sp, #16]
 800cd3c:	9a05      	ldr	r2, [sp, #20]
 800cd3e:	1aed      	subs	r5, r5, r3
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	9305      	str	r3, [sp, #20]
 800cd44:	9b07      	ldr	r3, [sp, #28]
 800cd46:	b31b      	cbz	r3, 800cd90 <_dtoa_r+0x7a0>
 800cd48:	9b08      	ldr	r3, [sp, #32]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	f000 80af 	beq.w	800ceae <_dtoa_r+0x8be>
 800cd50:	2e00      	cmp	r6, #0
 800cd52:	dd13      	ble.n	800cd7c <_dtoa_r+0x78c>
 800cd54:	4639      	mov	r1, r7
 800cd56:	4632      	mov	r2, r6
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f000 ffc7 	bl	800dcec <__pow5mult>
 800cd5e:	ee18 2a10 	vmov	r2, s16
 800cd62:	4601      	mov	r1, r0
 800cd64:	4607      	mov	r7, r0
 800cd66:	4620      	mov	r0, r4
 800cd68:	f000 ff16 	bl	800db98 <__multiply>
 800cd6c:	ee18 1a10 	vmov	r1, s16
 800cd70:	4680      	mov	r8, r0
 800cd72:	4620      	mov	r0, r4
 800cd74:	f000 fdf8 	bl	800d968 <_Bfree>
 800cd78:	ee08 8a10 	vmov	s16, r8
 800cd7c:	9b07      	ldr	r3, [sp, #28]
 800cd7e:	1b9a      	subs	r2, r3, r6
 800cd80:	d006      	beq.n	800cd90 <_dtoa_r+0x7a0>
 800cd82:	ee18 1a10 	vmov	r1, s16
 800cd86:	4620      	mov	r0, r4
 800cd88:	f000 ffb0 	bl	800dcec <__pow5mult>
 800cd8c:	ee08 0a10 	vmov	s16, r0
 800cd90:	2101      	movs	r1, #1
 800cd92:	4620      	mov	r0, r4
 800cd94:	f000 feea 	bl	800db6c <__i2b>
 800cd98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	4606      	mov	r6, r0
 800cd9e:	f340 8088 	ble.w	800ceb2 <_dtoa_r+0x8c2>
 800cda2:	461a      	mov	r2, r3
 800cda4:	4601      	mov	r1, r0
 800cda6:	4620      	mov	r0, r4
 800cda8:	f000 ffa0 	bl	800dcec <__pow5mult>
 800cdac:	9b06      	ldr	r3, [sp, #24]
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	4606      	mov	r6, r0
 800cdb2:	f340 8081 	ble.w	800ceb8 <_dtoa_r+0x8c8>
 800cdb6:	f04f 0800 	mov.w	r8, #0
 800cdba:	6933      	ldr	r3, [r6, #16]
 800cdbc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cdc0:	6918      	ldr	r0, [r3, #16]
 800cdc2:	f000 fe83 	bl	800dacc <__hi0bits>
 800cdc6:	f1c0 0020 	rsb	r0, r0, #32
 800cdca:	9b05      	ldr	r3, [sp, #20]
 800cdcc:	4418      	add	r0, r3
 800cdce:	f010 001f 	ands.w	r0, r0, #31
 800cdd2:	f000 8092 	beq.w	800cefa <_dtoa_r+0x90a>
 800cdd6:	f1c0 0320 	rsb	r3, r0, #32
 800cdda:	2b04      	cmp	r3, #4
 800cddc:	f340 808a 	ble.w	800cef4 <_dtoa_r+0x904>
 800cde0:	f1c0 001c 	rsb	r0, r0, #28
 800cde4:	9b04      	ldr	r3, [sp, #16]
 800cde6:	4403      	add	r3, r0
 800cde8:	9304      	str	r3, [sp, #16]
 800cdea:	9b05      	ldr	r3, [sp, #20]
 800cdec:	4403      	add	r3, r0
 800cdee:	4405      	add	r5, r0
 800cdf0:	9305      	str	r3, [sp, #20]
 800cdf2:	9b04      	ldr	r3, [sp, #16]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	dd07      	ble.n	800ce08 <_dtoa_r+0x818>
 800cdf8:	ee18 1a10 	vmov	r1, s16
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f000 ffce 	bl	800dda0 <__lshift>
 800ce04:	ee08 0a10 	vmov	s16, r0
 800ce08:	9b05      	ldr	r3, [sp, #20]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	dd05      	ble.n	800ce1a <_dtoa_r+0x82a>
 800ce0e:	4631      	mov	r1, r6
 800ce10:	461a      	mov	r2, r3
 800ce12:	4620      	mov	r0, r4
 800ce14:	f000 ffc4 	bl	800dda0 <__lshift>
 800ce18:	4606      	mov	r6, r0
 800ce1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d06e      	beq.n	800cefe <_dtoa_r+0x90e>
 800ce20:	ee18 0a10 	vmov	r0, s16
 800ce24:	4631      	mov	r1, r6
 800ce26:	f001 f82b 	bl	800de80 <__mcmp>
 800ce2a:	2800      	cmp	r0, #0
 800ce2c:	da67      	bge.n	800cefe <_dtoa_r+0x90e>
 800ce2e:	9b00      	ldr	r3, [sp, #0]
 800ce30:	3b01      	subs	r3, #1
 800ce32:	ee18 1a10 	vmov	r1, s16
 800ce36:	9300      	str	r3, [sp, #0]
 800ce38:	220a      	movs	r2, #10
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	f000 fdb5 	bl	800d9ac <__multadd>
 800ce42:	9b08      	ldr	r3, [sp, #32]
 800ce44:	ee08 0a10 	vmov	s16, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	f000 81b1 	beq.w	800d1b0 <_dtoa_r+0xbc0>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	4639      	mov	r1, r7
 800ce52:	220a      	movs	r2, #10
 800ce54:	4620      	mov	r0, r4
 800ce56:	f000 fda9 	bl	800d9ac <__multadd>
 800ce5a:	9b02      	ldr	r3, [sp, #8]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	4607      	mov	r7, r0
 800ce60:	f300 808e 	bgt.w	800cf80 <_dtoa_r+0x990>
 800ce64:	9b06      	ldr	r3, [sp, #24]
 800ce66:	2b02      	cmp	r3, #2
 800ce68:	dc51      	bgt.n	800cf0e <_dtoa_r+0x91e>
 800ce6a:	e089      	b.n	800cf80 <_dtoa_r+0x990>
 800ce6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ce72:	e74b      	b.n	800cd0c <_dtoa_r+0x71c>
 800ce74:	9b03      	ldr	r3, [sp, #12]
 800ce76:	1e5e      	subs	r6, r3, #1
 800ce78:	9b07      	ldr	r3, [sp, #28]
 800ce7a:	42b3      	cmp	r3, r6
 800ce7c:	bfbf      	itttt	lt
 800ce7e:	9b07      	ldrlt	r3, [sp, #28]
 800ce80:	9607      	strlt	r6, [sp, #28]
 800ce82:	1af2      	sublt	r2, r6, r3
 800ce84:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ce86:	bfb6      	itet	lt
 800ce88:	189b      	addlt	r3, r3, r2
 800ce8a:	1b9e      	subge	r6, r3, r6
 800ce8c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ce8e:	9b03      	ldr	r3, [sp, #12]
 800ce90:	bfb8      	it	lt
 800ce92:	2600      	movlt	r6, #0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	bfb7      	itett	lt
 800ce98:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ce9c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cea0:	1a9d      	sublt	r5, r3, r2
 800cea2:	2300      	movlt	r3, #0
 800cea4:	e734      	b.n	800cd10 <_dtoa_r+0x720>
 800cea6:	9e07      	ldr	r6, [sp, #28]
 800cea8:	9d04      	ldr	r5, [sp, #16]
 800ceaa:	9f08      	ldr	r7, [sp, #32]
 800ceac:	e73b      	b.n	800cd26 <_dtoa_r+0x736>
 800ceae:	9a07      	ldr	r2, [sp, #28]
 800ceb0:	e767      	b.n	800cd82 <_dtoa_r+0x792>
 800ceb2:	9b06      	ldr	r3, [sp, #24]
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	dc18      	bgt.n	800ceea <_dtoa_r+0x8fa>
 800ceb8:	f1ba 0f00 	cmp.w	sl, #0
 800cebc:	d115      	bne.n	800ceea <_dtoa_r+0x8fa>
 800cebe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cec2:	b993      	cbnz	r3, 800ceea <_dtoa_r+0x8fa>
 800cec4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cec8:	0d1b      	lsrs	r3, r3, #20
 800ceca:	051b      	lsls	r3, r3, #20
 800cecc:	b183      	cbz	r3, 800cef0 <_dtoa_r+0x900>
 800cece:	9b04      	ldr	r3, [sp, #16]
 800ced0:	3301      	adds	r3, #1
 800ced2:	9304      	str	r3, [sp, #16]
 800ced4:	9b05      	ldr	r3, [sp, #20]
 800ced6:	3301      	adds	r3, #1
 800ced8:	9305      	str	r3, [sp, #20]
 800ceda:	f04f 0801 	mov.w	r8, #1
 800cede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	f47f af6a 	bne.w	800cdba <_dtoa_r+0x7ca>
 800cee6:	2001      	movs	r0, #1
 800cee8:	e76f      	b.n	800cdca <_dtoa_r+0x7da>
 800ceea:	f04f 0800 	mov.w	r8, #0
 800ceee:	e7f6      	b.n	800cede <_dtoa_r+0x8ee>
 800cef0:	4698      	mov	r8, r3
 800cef2:	e7f4      	b.n	800cede <_dtoa_r+0x8ee>
 800cef4:	f43f af7d 	beq.w	800cdf2 <_dtoa_r+0x802>
 800cef8:	4618      	mov	r0, r3
 800cefa:	301c      	adds	r0, #28
 800cefc:	e772      	b.n	800cde4 <_dtoa_r+0x7f4>
 800cefe:	9b03      	ldr	r3, [sp, #12]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	dc37      	bgt.n	800cf74 <_dtoa_r+0x984>
 800cf04:	9b06      	ldr	r3, [sp, #24]
 800cf06:	2b02      	cmp	r3, #2
 800cf08:	dd34      	ble.n	800cf74 <_dtoa_r+0x984>
 800cf0a:	9b03      	ldr	r3, [sp, #12]
 800cf0c:	9302      	str	r3, [sp, #8]
 800cf0e:	9b02      	ldr	r3, [sp, #8]
 800cf10:	b96b      	cbnz	r3, 800cf2e <_dtoa_r+0x93e>
 800cf12:	4631      	mov	r1, r6
 800cf14:	2205      	movs	r2, #5
 800cf16:	4620      	mov	r0, r4
 800cf18:	f000 fd48 	bl	800d9ac <__multadd>
 800cf1c:	4601      	mov	r1, r0
 800cf1e:	4606      	mov	r6, r0
 800cf20:	ee18 0a10 	vmov	r0, s16
 800cf24:	f000 ffac 	bl	800de80 <__mcmp>
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	f73f adbb 	bgt.w	800caa4 <_dtoa_r+0x4b4>
 800cf2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf30:	9d01      	ldr	r5, [sp, #4]
 800cf32:	43db      	mvns	r3, r3
 800cf34:	9300      	str	r3, [sp, #0]
 800cf36:	f04f 0800 	mov.w	r8, #0
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	f000 fd13 	bl	800d968 <_Bfree>
 800cf42:	2f00      	cmp	r7, #0
 800cf44:	f43f aea4 	beq.w	800cc90 <_dtoa_r+0x6a0>
 800cf48:	f1b8 0f00 	cmp.w	r8, #0
 800cf4c:	d005      	beq.n	800cf5a <_dtoa_r+0x96a>
 800cf4e:	45b8      	cmp	r8, r7
 800cf50:	d003      	beq.n	800cf5a <_dtoa_r+0x96a>
 800cf52:	4641      	mov	r1, r8
 800cf54:	4620      	mov	r0, r4
 800cf56:	f000 fd07 	bl	800d968 <_Bfree>
 800cf5a:	4639      	mov	r1, r7
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	f000 fd03 	bl	800d968 <_Bfree>
 800cf62:	e695      	b.n	800cc90 <_dtoa_r+0x6a0>
 800cf64:	2600      	movs	r6, #0
 800cf66:	4637      	mov	r7, r6
 800cf68:	e7e1      	b.n	800cf2e <_dtoa_r+0x93e>
 800cf6a:	9700      	str	r7, [sp, #0]
 800cf6c:	4637      	mov	r7, r6
 800cf6e:	e599      	b.n	800caa4 <_dtoa_r+0x4b4>
 800cf70:	40240000 	.word	0x40240000
 800cf74:	9b08      	ldr	r3, [sp, #32]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	f000 80ca 	beq.w	800d110 <_dtoa_r+0xb20>
 800cf7c:	9b03      	ldr	r3, [sp, #12]
 800cf7e:	9302      	str	r3, [sp, #8]
 800cf80:	2d00      	cmp	r5, #0
 800cf82:	dd05      	ble.n	800cf90 <_dtoa_r+0x9a0>
 800cf84:	4639      	mov	r1, r7
 800cf86:	462a      	mov	r2, r5
 800cf88:	4620      	mov	r0, r4
 800cf8a:	f000 ff09 	bl	800dda0 <__lshift>
 800cf8e:	4607      	mov	r7, r0
 800cf90:	f1b8 0f00 	cmp.w	r8, #0
 800cf94:	d05b      	beq.n	800d04e <_dtoa_r+0xa5e>
 800cf96:	6879      	ldr	r1, [r7, #4]
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f000 fca5 	bl	800d8e8 <_Balloc>
 800cf9e:	4605      	mov	r5, r0
 800cfa0:	b928      	cbnz	r0, 800cfae <_dtoa_r+0x9be>
 800cfa2:	4b87      	ldr	r3, [pc, #540]	; (800d1c0 <_dtoa_r+0xbd0>)
 800cfa4:	4602      	mov	r2, r0
 800cfa6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cfaa:	f7ff bb3b 	b.w	800c624 <_dtoa_r+0x34>
 800cfae:	693a      	ldr	r2, [r7, #16]
 800cfb0:	3202      	adds	r2, #2
 800cfb2:	0092      	lsls	r2, r2, #2
 800cfb4:	f107 010c 	add.w	r1, r7, #12
 800cfb8:	300c      	adds	r0, #12
 800cfba:	f7fd fcdf 	bl	800a97c <memcpy>
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	4629      	mov	r1, r5
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	f000 feec 	bl	800dda0 <__lshift>
 800cfc8:	9b01      	ldr	r3, [sp, #4]
 800cfca:	f103 0901 	add.w	r9, r3, #1
 800cfce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cfd2:	4413      	add	r3, r2
 800cfd4:	9305      	str	r3, [sp, #20]
 800cfd6:	f00a 0301 	and.w	r3, sl, #1
 800cfda:	46b8      	mov	r8, r7
 800cfdc:	9304      	str	r3, [sp, #16]
 800cfde:	4607      	mov	r7, r0
 800cfe0:	4631      	mov	r1, r6
 800cfe2:	ee18 0a10 	vmov	r0, s16
 800cfe6:	f7ff fa77 	bl	800c4d8 <quorem>
 800cfea:	4641      	mov	r1, r8
 800cfec:	9002      	str	r0, [sp, #8]
 800cfee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cff2:	ee18 0a10 	vmov	r0, s16
 800cff6:	f000 ff43 	bl	800de80 <__mcmp>
 800cffa:	463a      	mov	r2, r7
 800cffc:	9003      	str	r0, [sp, #12]
 800cffe:	4631      	mov	r1, r6
 800d000:	4620      	mov	r0, r4
 800d002:	f000 ff59 	bl	800deb8 <__mdiff>
 800d006:	68c2      	ldr	r2, [r0, #12]
 800d008:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800d00c:	4605      	mov	r5, r0
 800d00e:	bb02      	cbnz	r2, 800d052 <_dtoa_r+0xa62>
 800d010:	4601      	mov	r1, r0
 800d012:	ee18 0a10 	vmov	r0, s16
 800d016:	f000 ff33 	bl	800de80 <__mcmp>
 800d01a:	4602      	mov	r2, r0
 800d01c:	4629      	mov	r1, r5
 800d01e:	4620      	mov	r0, r4
 800d020:	9207      	str	r2, [sp, #28]
 800d022:	f000 fca1 	bl	800d968 <_Bfree>
 800d026:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d02a:	ea43 0102 	orr.w	r1, r3, r2
 800d02e:	9b04      	ldr	r3, [sp, #16]
 800d030:	430b      	orrs	r3, r1
 800d032:	464d      	mov	r5, r9
 800d034:	d10f      	bne.n	800d056 <_dtoa_r+0xa66>
 800d036:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d03a:	d02a      	beq.n	800d092 <_dtoa_r+0xaa2>
 800d03c:	9b03      	ldr	r3, [sp, #12]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	dd02      	ble.n	800d048 <_dtoa_r+0xa58>
 800d042:	9b02      	ldr	r3, [sp, #8]
 800d044:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d048:	f88b a000 	strb.w	sl, [fp]
 800d04c:	e775      	b.n	800cf3a <_dtoa_r+0x94a>
 800d04e:	4638      	mov	r0, r7
 800d050:	e7ba      	b.n	800cfc8 <_dtoa_r+0x9d8>
 800d052:	2201      	movs	r2, #1
 800d054:	e7e2      	b.n	800d01c <_dtoa_r+0xa2c>
 800d056:	9b03      	ldr	r3, [sp, #12]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	db04      	blt.n	800d066 <_dtoa_r+0xa76>
 800d05c:	9906      	ldr	r1, [sp, #24]
 800d05e:	430b      	orrs	r3, r1
 800d060:	9904      	ldr	r1, [sp, #16]
 800d062:	430b      	orrs	r3, r1
 800d064:	d122      	bne.n	800d0ac <_dtoa_r+0xabc>
 800d066:	2a00      	cmp	r2, #0
 800d068:	ddee      	ble.n	800d048 <_dtoa_r+0xa58>
 800d06a:	ee18 1a10 	vmov	r1, s16
 800d06e:	2201      	movs	r2, #1
 800d070:	4620      	mov	r0, r4
 800d072:	f000 fe95 	bl	800dda0 <__lshift>
 800d076:	4631      	mov	r1, r6
 800d078:	ee08 0a10 	vmov	s16, r0
 800d07c:	f000 ff00 	bl	800de80 <__mcmp>
 800d080:	2800      	cmp	r0, #0
 800d082:	dc03      	bgt.n	800d08c <_dtoa_r+0xa9c>
 800d084:	d1e0      	bne.n	800d048 <_dtoa_r+0xa58>
 800d086:	f01a 0f01 	tst.w	sl, #1
 800d08a:	d0dd      	beq.n	800d048 <_dtoa_r+0xa58>
 800d08c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d090:	d1d7      	bne.n	800d042 <_dtoa_r+0xa52>
 800d092:	2339      	movs	r3, #57	; 0x39
 800d094:	f88b 3000 	strb.w	r3, [fp]
 800d098:	462b      	mov	r3, r5
 800d09a:	461d      	mov	r5, r3
 800d09c:	3b01      	subs	r3, #1
 800d09e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d0a2:	2a39      	cmp	r2, #57	; 0x39
 800d0a4:	d071      	beq.n	800d18a <_dtoa_r+0xb9a>
 800d0a6:	3201      	adds	r2, #1
 800d0a8:	701a      	strb	r2, [r3, #0]
 800d0aa:	e746      	b.n	800cf3a <_dtoa_r+0x94a>
 800d0ac:	2a00      	cmp	r2, #0
 800d0ae:	dd07      	ble.n	800d0c0 <_dtoa_r+0xad0>
 800d0b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d0b4:	d0ed      	beq.n	800d092 <_dtoa_r+0xaa2>
 800d0b6:	f10a 0301 	add.w	r3, sl, #1
 800d0ba:	f88b 3000 	strb.w	r3, [fp]
 800d0be:	e73c      	b.n	800cf3a <_dtoa_r+0x94a>
 800d0c0:	9b05      	ldr	r3, [sp, #20]
 800d0c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d0c6:	4599      	cmp	r9, r3
 800d0c8:	d047      	beq.n	800d15a <_dtoa_r+0xb6a>
 800d0ca:	ee18 1a10 	vmov	r1, s16
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	220a      	movs	r2, #10
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	f000 fc6a 	bl	800d9ac <__multadd>
 800d0d8:	45b8      	cmp	r8, r7
 800d0da:	ee08 0a10 	vmov	s16, r0
 800d0de:	f04f 0300 	mov.w	r3, #0
 800d0e2:	f04f 020a 	mov.w	r2, #10
 800d0e6:	4641      	mov	r1, r8
 800d0e8:	4620      	mov	r0, r4
 800d0ea:	d106      	bne.n	800d0fa <_dtoa_r+0xb0a>
 800d0ec:	f000 fc5e 	bl	800d9ac <__multadd>
 800d0f0:	4680      	mov	r8, r0
 800d0f2:	4607      	mov	r7, r0
 800d0f4:	f109 0901 	add.w	r9, r9, #1
 800d0f8:	e772      	b.n	800cfe0 <_dtoa_r+0x9f0>
 800d0fa:	f000 fc57 	bl	800d9ac <__multadd>
 800d0fe:	4639      	mov	r1, r7
 800d100:	4680      	mov	r8, r0
 800d102:	2300      	movs	r3, #0
 800d104:	220a      	movs	r2, #10
 800d106:	4620      	mov	r0, r4
 800d108:	f000 fc50 	bl	800d9ac <__multadd>
 800d10c:	4607      	mov	r7, r0
 800d10e:	e7f1      	b.n	800d0f4 <_dtoa_r+0xb04>
 800d110:	9b03      	ldr	r3, [sp, #12]
 800d112:	9302      	str	r3, [sp, #8]
 800d114:	9d01      	ldr	r5, [sp, #4]
 800d116:	ee18 0a10 	vmov	r0, s16
 800d11a:	4631      	mov	r1, r6
 800d11c:	f7ff f9dc 	bl	800c4d8 <quorem>
 800d120:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d124:	9b01      	ldr	r3, [sp, #4]
 800d126:	f805 ab01 	strb.w	sl, [r5], #1
 800d12a:	1aea      	subs	r2, r5, r3
 800d12c:	9b02      	ldr	r3, [sp, #8]
 800d12e:	4293      	cmp	r3, r2
 800d130:	dd09      	ble.n	800d146 <_dtoa_r+0xb56>
 800d132:	ee18 1a10 	vmov	r1, s16
 800d136:	2300      	movs	r3, #0
 800d138:	220a      	movs	r2, #10
 800d13a:	4620      	mov	r0, r4
 800d13c:	f000 fc36 	bl	800d9ac <__multadd>
 800d140:	ee08 0a10 	vmov	s16, r0
 800d144:	e7e7      	b.n	800d116 <_dtoa_r+0xb26>
 800d146:	9b02      	ldr	r3, [sp, #8]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	bfc8      	it	gt
 800d14c:	461d      	movgt	r5, r3
 800d14e:	9b01      	ldr	r3, [sp, #4]
 800d150:	bfd8      	it	le
 800d152:	2501      	movle	r5, #1
 800d154:	441d      	add	r5, r3
 800d156:	f04f 0800 	mov.w	r8, #0
 800d15a:	ee18 1a10 	vmov	r1, s16
 800d15e:	2201      	movs	r2, #1
 800d160:	4620      	mov	r0, r4
 800d162:	f000 fe1d 	bl	800dda0 <__lshift>
 800d166:	4631      	mov	r1, r6
 800d168:	ee08 0a10 	vmov	s16, r0
 800d16c:	f000 fe88 	bl	800de80 <__mcmp>
 800d170:	2800      	cmp	r0, #0
 800d172:	dc91      	bgt.n	800d098 <_dtoa_r+0xaa8>
 800d174:	d102      	bne.n	800d17c <_dtoa_r+0xb8c>
 800d176:	f01a 0f01 	tst.w	sl, #1
 800d17a:	d18d      	bne.n	800d098 <_dtoa_r+0xaa8>
 800d17c:	462b      	mov	r3, r5
 800d17e:	461d      	mov	r5, r3
 800d180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d184:	2a30      	cmp	r2, #48	; 0x30
 800d186:	d0fa      	beq.n	800d17e <_dtoa_r+0xb8e>
 800d188:	e6d7      	b.n	800cf3a <_dtoa_r+0x94a>
 800d18a:	9a01      	ldr	r2, [sp, #4]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d184      	bne.n	800d09a <_dtoa_r+0xaaa>
 800d190:	9b00      	ldr	r3, [sp, #0]
 800d192:	3301      	adds	r3, #1
 800d194:	9300      	str	r3, [sp, #0]
 800d196:	2331      	movs	r3, #49	; 0x31
 800d198:	7013      	strb	r3, [r2, #0]
 800d19a:	e6ce      	b.n	800cf3a <_dtoa_r+0x94a>
 800d19c:	4b09      	ldr	r3, [pc, #36]	; (800d1c4 <_dtoa_r+0xbd4>)
 800d19e:	f7ff ba95 	b.w	800c6cc <_dtoa_r+0xdc>
 800d1a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	f47f aa6e 	bne.w	800c686 <_dtoa_r+0x96>
 800d1aa:	4b07      	ldr	r3, [pc, #28]	; (800d1c8 <_dtoa_r+0xbd8>)
 800d1ac:	f7ff ba8e 	b.w	800c6cc <_dtoa_r+0xdc>
 800d1b0:	9b02      	ldr	r3, [sp, #8]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	dcae      	bgt.n	800d114 <_dtoa_r+0xb24>
 800d1b6:	9b06      	ldr	r3, [sp, #24]
 800d1b8:	2b02      	cmp	r3, #2
 800d1ba:	f73f aea8 	bgt.w	800cf0e <_dtoa_r+0x91e>
 800d1be:	e7a9      	b.n	800d114 <_dtoa_r+0xb24>
 800d1c0:	0800f870 	.word	0x0800f870
 800d1c4:	0800f670 	.word	0x0800f670
 800d1c8:	0800f7f1 	.word	0x0800f7f1

0800d1cc <rshift>:
 800d1cc:	6903      	ldr	r3, [r0, #16]
 800d1ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d1d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d1da:	f100 0414 	add.w	r4, r0, #20
 800d1de:	dd45      	ble.n	800d26c <rshift+0xa0>
 800d1e0:	f011 011f 	ands.w	r1, r1, #31
 800d1e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d1e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d1ec:	d10c      	bne.n	800d208 <rshift+0x3c>
 800d1ee:	f100 0710 	add.w	r7, r0, #16
 800d1f2:	4629      	mov	r1, r5
 800d1f4:	42b1      	cmp	r1, r6
 800d1f6:	d334      	bcc.n	800d262 <rshift+0x96>
 800d1f8:	1a9b      	subs	r3, r3, r2
 800d1fa:	009b      	lsls	r3, r3, #2
 800d1fc:	1eea      	subs	r2, r5, #3
 800d1fe:	4296      	cmp	r6, r2
 800d200:	bf38      	it	cc
 800d202:	2300      	movcc	r3, #0
 800d204:	4423      	add	r3, r4
 800d206:	e015      	b.n	800d234 <rshift+0x68>
 800d208:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d20c:	f1c1 0820 	rsb	r8, r1, #32
 800d210:	40cf      	lsrs	r7, r1
 800d212:	f105 0e04 	add.w	lr, r5, #4
 800d216:	46a1      	mov	r9, r4
 800d218:	4576      	cmp	r6, lr
 800d21a:	46f4      	mov	ip, lr
 800d21c:	d815      	bhi.n	800d24a <rshift+0x7e>
 800d21e:	1a9a      	subs	r2, r3, r2
 800d220:	0092      	lsls	r2, r2, #2
 800d222:	3a04      	subs	r2, #4
 800d224:	3501      	adds	r5, #1
 800d226:	42ae      	cmp	r6, r5
 800d228:	bf38      	it	cc
 800d22a:	2200      	movcc	r2, #0
 800d22c:	18a3      	adds	r3, r4, r2
 800d22e:	50a7      	str	r7, [r4, r2]
 800d230:	b107      	cbz	r7, 800d234 <rshift+0x68>
 800d232:	3304      	adds	r3, #4
 800d234:	1b1a      	subs	r2, r3, r4
 800d236:	42a3      	cmp	r3, r4
 800d238:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d23c:	bf08      	it	eq
 800d23e:	2300      	moveq	r3, #0
 800d240:	6102      	str	r2, [r0, #16]
 800d242:	bf08      	it	eq
 800d244:	6143      	streq	r3, [r0, #20]
 800d246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d24a:	f8dc c000 	ldr.w	ip, [ip]
 800d24e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d252:	ea4c 0707 	orr.w	r7, ip, r7
 800d256:	f849 7b04 	str.w	r7, [r9], #4
 800d25a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d25e:	40cf      	lsrs	r7, r1
 800d260:	e7da      	b.n	800d218 <rshift+0x4c>
 800d262:	f851 cb04 	ldr.w	ip, [r1], #4
 800d266:	f847 cf04 	str.w	ip, [r7, #4]!
 800d26a:	e7c3      	b.n	800d1f4 <rshift+0x28>
 800d26c:	4623      	mov	r3, r4
 800d26e:	e7e1      	b.n	800d234 <rshift+0x68>

0800d270 <__hexdig_fun>:
 800d270:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d274:	2b09      	cmp	r3, #9
 800d276:	d802      	bhi.n	800d27e <__hexdig_fun+0xe>
 800d278:	3820      	subs	r0, #32
 800d27a:	b2c0      	uxtb	r0, r0
 800d27c:	4770      	bx	lr
 800d27e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d282:	2b05      	cmp	r3, #5
 800d284:	d801      	bhi.n	800d28a <__hexdig_fun+0x1a>
 800d286:	3847      	subs	r0, #71	; 0x47
 800d288:	e7f7      	b.n	800d27a <__hexdig_fun+0xa>
 800d28a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d28e:	2b05      	cmp	r3, #5
 800d290:	d801      	bhi.n	800d296 <__hexdig_fun+0x26>
 800d292:	3827      	subs	r0, #39	; 0x27
 800d294:	e7f1      	b.n	800d27a <__hexdig_fun+0xa>
 800d296:	2000      	movs	r0, #0
 800d298:	4770      	bx	lr
	...

0800d29c <__gethex>:
 800d29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a0:	ed2d 8b02 	vpush	{d8}
 800d2a4:	b089      	sub	sp, #36	; 0x24
 800d2a6:	ee08 0a10 	vmov	s16, r0
 800d2aa:	9304      	str	r3, [sp, #16]
 800d2ac:	4bb4      	ldr	r3, [pc, #720]	; (800d580 <__gethex+0x2e4>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	9301      	str	r3, [sp, #4]
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	468b      	mov	fp, r1
 800d2b6:	4690      	mov	r8, r2
 800d2b8:	f7f2 ff8a 	bl	80001d0 <strlen>
 800d2bc:	9b01      	ldr	r3, [sp, #4]
 800d2be:	f8db 2000 	ldr.w	r2, [fp]
 800d2c2:	4403      	add	r3, r0
 800d2c4:	4682      	mov	sl, r0
 800d2c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d2ca:	9305      	str	r3, [sp, #20]
 800d2cc:	1c93      	adds	r3, r2, #2
 800d2ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d2d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d2d6:	32fe      	adds	r2, #254	; 0xfe
 800d2d8:	18d1      	adds	r1, r2, r3
 800d2da:	461f      	mov	r7, r3
 800d2dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d2e0:	9100      	str	r1, [sp, #0]
 800d2e2:	2830      	cmp	r0, #48	; 0x30
 800d2e4:	d0f8      	beq.n	800d2d8 <__gethex+0x3c>
 800d2e6:	f7ff ffc3 	bl	800d270 <__hexdig_fun>
 800d2ea:	4604      	mov	r4, r0
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	d13a      	bne.n	800d366 <__gethex+0xca>
 800d2f0:	9901      	ldr	r1, [sp, #4]
 800d2f2:	4652      	mov	r2, sl
 800d2f4:	4638      	mov	r0, r7
 800d2f6:	f001 fa53 	bl	800e7a0 <strncmp>
 800d2fa:	4605      	mov	r5, r0
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	d168      	bne.n	800d3d2 <__gethex+0x136>
 800d300:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d304:	eb07 060a 	add.w	r6, r7, sl
 800d308:	f7ff ffb2 	bl	800d270 <__hexdig_fun>
 800d30c:	2800      	cmp	r0, #0
 800d30e:	d062      	beq.n	800d3d6 <__gethex+0x13a>
 800d310:	4633      	mov	r3, r6
 800d312:	7818      	ldrb	r0, [r3, #0]
 800d314:	2830      	cmp	r0, #48	; 0x30
 800d316:	461f      	mov	r7, r3
 800d318:	f103 0301 	add.w	r3, r3, #1
 800d31c:	d0f9      	beq.n	800d312 <__gethex+0x76>
 800d31e:	f7ff ffa7 	bl	800d270 <__hexdig_fun>
 800d322:	2301      	movs	r3, #1
 800d324:	fab0 f480 	clz	r4, r0
 800d328:	0964      	lsrs	r4, r4, #5
 800d32a:	4635      	mov	r5, r6
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	463a      	mov	r2, r7
 800d330:	4616      	mov	r6, r2
 800d332:	3201      	adds	r2, #1
 800d334:	7830      	ldrb	r0, [r6, #0]
 800d336:	f7ff ff9b 	bl	800d270 <__hexdig_fun>
 800d33a:	2800      	cmp	r0, #0
 800d33c:	d1f8      	bne.n	800d330 <__gethex+0x94>
 800d33e:	9901      	ldr	r1, [sp, #4]
 800d340:	4652      	mov	r2, sl
 800d342:	4630      	mov	r0, r6
 800d344:	f001 fa2c 	bl	800e7a0 <strncmp>
 800d348:	b980      	cbnz	r0, 800d36c <__gethex+0xd0>
 800d34a:	b94d      	cbnz	r5, 800d360 <__gethex+0xc4>
 800d34c:	eb06 050a 	add.w	r5, r6, sl
 800d350:	462a      	mov	r2, r5
 800d352:	4616      	mov	r6, r2
 800d354:	3201      	adds	r2, #1
 800d356:	7830      	ldrb	r0, [r6, #0]
 800d358:	f7ff ff8a 	bl	800d270 <__hexdig_fun>
 800d35c:	2800      	cmp	r0, #0
 800d35e:	d1f8      	bne.n	800d352 <__gethex+0xb6>
 800d360:	1bad      	subs	r5, r5, r6
 800d362:	00ad      	lsls	r5, r5, #2
 800d364:	e004      	b.n	800d370 <__gethex+0xd4>
 800d366:	2400      	movs	r4, #0
 800d368:	4625      	mov	r5, r4
 800d36a:	e7e0      	b.n	800d32e <__gethex+0x92>
 800d36c:	2d00      	cmp	r5, #0
 800d36e:	d1f7      	bne.n	800d360 <__gethex+0xc4>
 800d370:	7833      	ldrb	r3, [r6, #0]
 800d372:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d376:	2b50      	cmp	r3, #80	; 0x50
 800d378:	d13b      	bne.n	800d3f2 <__gethex+0x156>
 800d37a:	7873      	ldrb	r3, [r6, #1]
 800d37c:	2b2b      	cmp	r3, #43	; 0x2b
 800d37e:	d02c      	beq.n	800d3da <__gethex+0x13e>
 800d380:	2b2d      	cmp	r3, #45	; 0x2d
 800d382:	d02e      	beq.n	800d3e2 <__gethex+0x146>
 800d384:	1c71      	adds	r1, r6, #1
 800d386:	f04f 0900 	mov.w	r9, #0
 800d38a:	7808      	ldrb	r0, [r1, #0]
 800d38c:	f7ff ff70 	bl	800d270 <__hexdig_fun>
 800d390:	1e43      	subs	r3, r0, #1
 800d392:	b2db      	uxtb	r3, r3
 800d394:	2b18      	cmp	r3, #24
 800d396:	d82c      	bhi.n	800d3f2 <__gethex+0x156>
 800d398:	f1a0 0210 	sub.w	r2, r0, #16
 800d39c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d3a0:	f7ff ff66 	bl	800d270 <__hexdig_fun>
 800d3a4:	1e43      	subs	r3, r0, #1
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	2b18      	cmp	r3, #24
 800d3aa:	d91d      	bls.n	800d3e8 <__gethex+0x14c>
 800d3ac:	f1b9 0f00 	cmp.w	r9, #0
 800d3b0:	d000      	beq.n	800d3b4 <__gethex+0x118>
 800d3b2:	4252      	negs	r2, r2
 800d3b4:	4415      	add	r5, r2
 800d3b6:	f8cb 1000 	str.w	r1, [fp]
 800d3ba:	b1e4      	cbz	r4, 800d3f6 <__gethex+0x15a>
 800d3bc:	9b00      	ldr	r3, [sp, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	bf14      	ite	ne
 800d3c2:	2700      	movne	r7, #0
 800d3c4:	2706      	moveq	r7, #6
 800d3c6:	4638      	mov	r0, r7
 800d3c8:	b009      	add	sp, #36	; 0x24
 800d3ca:	ecbd 8b02 	vpop	{d8}
 800d3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3d2:	463e      	mov	r6, r7
 800d3d4:	4625      	mov	r5, r4
 800d3d6:	2401      	movs	r4, #1
 800d3d8:	e7ca      	b.n	800d370 <__gethex+0xd4>
 800d3da:	f04f 0900 	mov.w	r9, #0
 800d3de:	1cb1      	adds	r1, r6, #2
 800d3e0:	e7d3      	b.n	800d38a <__gethex+0xee>
 800d3e2:	f04f 0901 	mov.w	r9, #1
 800d3e6:	e7fa      	b.n	800d3de <__gethex+0x142>
 800d3e8:	230a      	movs	r3, #10
 800d3ea:	fb03 0202 	mla	r2, r3, r2, r0
 800d3ee:	3a10      	subs	r2, #16
 800d3f0:	e7d4      	b.n	800d39c <__gethex+0x100>
 800d3f2:	4631      	mov	r1, r6
 800d3f4:	e7df      	b.n	800d3b6 <__gethex+0x11a>
 800d3f6:	1bf3      	subs	r3, r6, r7
 800d3f8:	3b01      	subs	r3, #1
 800d3fa:	4621      	mov	r1, r4
 800d3fc:	2b07      	cmp	r3, #7
 800d3fe:	dc0b      	bgt.n	800d418 <__gethex+0x17c>
 800d400:	ee18 0a10 	vmov	r0, s16
 800d404:	f000 fa70 	bl	800d8e8 <_Balloc>
 800d408:	4604      	mov	r4, r0
 800d40a:	b940      	cbnz	r0, 800d41e <__gethex+0x182>
 800d40c:	4b5d      	ldr	r3, [pc, #372]	; (800d584 <__gethex+0x2e8>)
 800d40e:	4602      	mov	r2, r0
 800d410:	21de      	movs	r1, #222	; 0xde
 800d412:	485d      	ldr	r0, [pc, #372]	; (800d588 <__gethex+0x2ec>)
 800d414:	f001 f9e6 	bl	800e7e4 <__assert_func>
 800d418:	3101      	adds	r1, #1
 800d41a:	105b      	asrs	r3, r3, #1
 800d41c:	e7ee      	b.n	800d3fc <__gethex+0x160>
 800d41e:	f100 0914 	add.w	r9, r0, #20
 800d422:	f04f 0b00 	mov.w	fp, #0
 800d426:	f1ca 0301 	rsb	r3, sl, #1
 800d42a:	f8cd 9008 	str.w	r9, [sp, #8]
 800d42e:	f8cd b000 	str.w	fp, [sp]
 800d432:	9306      	str	r3, [sp, #24]
 800d434:	42b7      	cmp	r7, r6
 800d436:	d340      	bcc.n	800d4ba <__gethex+0x21e>
 800d438:	9802      	ldr	r0, [sp, #8]
 800d43a:	9b00      	ldr	r3, [sp, #0]
 800d43c:	f840 3b04 	str.w	r3, [r0], #4
 800d440:	eba0 0009 	sub.w	r0, r0, r9
 800d444:	1080      	asrs	r0, r0, #2
 800d446:	0146      	lsls	r6, r0, #5
 800d448:	6120      	str	r0, [r4, #16]
 800d44a:	4618      	mov	r0, r3
 800d44c:	f000 fb3e 	bl	800dacc <__hi0bits>
 800d450:	1a30      	subs	r0, r6, r0
 800d452:	f8d8 6000 	ldr.w	r6, [r8]
 800d456:	42b0      	cmp	r0, r6
 800d458:	dd63      	ble.n	800d522 <__gethex+0x286>
 800d45a:	1b87      	subs	r7, r0, r6
 800d45c:	4639      	mov	r1, r7
 800d45e:	4620      	mov	r0, r4
 800d460:	f000 fee2 	bl	800e228 <__any_on>
 800d464:	4682      	mov	sl, r0
 800d466:	b1a8      	cbz	r0, 800d494 <__gethex+0x1f8>
 800d468:	1e7b      	subs	r3, r7, #1
 800d46a:	1159      	asrs	r1, r3, #5
 800d46c:	f003 021f 	and.w	r2, r3, #31
 800d470:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d474:	f04f 0a01 	mov.w	sl, #1
 800d478:	fa0a f202 	lsl.w	r2, sl, r2
 800d47c:	420a      	tst	r2, r1
 800d47e:	d009      	beq.n	800d494 <__gethex+0x1f8>
 800d480:	4553      	cmp	r3, sl
 800d482:	dd05      	ble.n	800d490 <__gethex+0x1f4>
 800d484:	1eb9      	subs	r1, r7, #2
 800d486:	4620      	mov	r0, r4
 800d488:	f000 fece 	bl	800e228 <__any_on>
 800d48c:	2800      	cmp	r0, #0
 800d48e:	d145      	bne.n	800d51c <__gethex+0x280>
 800d490:	f04f 0a02 	mov.w	sl, #2
 800d494:	4639      	mov	r1, r7
 800d496:	4620      	mov	r0, r4
 800d498:	f7ff fe98 	bl	800d1cc <rshift>
 800d49c:	443d      	add	r5, r7
 800d49e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d4a2:	42ab      	cmp	r3, r5
 800d4a4:	da4c      	bge.n	800d540 <__gethex+0x2a4>
 800d4a6:	ee18 0a10 	vmov	r0, s16
 800d4aa:	4621      	mov	r1, r4
 800d4ac:	f000 fa5c 	bl	800d968 <_Bfree>
 800d4b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	6013      	str	r3, [r2, #0]
 800d4b6:	27a3      	movs	r7, #163	; 0xa3
 800d4b8:	e785      	b.n	800d3c6 <__gethex+0x12a>
 800d4ba:	1e73      	subs	r3, r6, #1
 800d4bc:	9a05      	ldr	r2, [sp, #20]
 800d4be:	9303      	str	r3, [sp, #12]
 800d4c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d019      	beq.n	800d4fc <__gethex+0x260>
 800d4c8:	f1bb 0f20 	cmp.w	fp, #32
 800d4cc:	d107      	bne.n	800d4de <__gethex+0x242>
 800d4ce:	9b02      	ldr	r3, [sp, #8]
 800d4d0:	9a00      	ldr	r2, [sp, #0]
 800d4d2:	f843 2b04 	str.w	r2, [r3], #4
 800d4d6:	9302      	str	r3, [sp, #8]
 800d4d8:	2300      	movs	r3, #0
 800d4da:	9300      	str	r3, [sp, #0]
 800d4dc:	469b      	mov	fp, r3
 800d4de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d4e2:	f7ff fec5 	bl	800d270 <__hexdig_fun>
 800d4e6:	9b00      	ldr	r3, [sp, #0]
 800d4e8:	f000 000f 	and.w	r0, r0, #15
 800d4ec:	fa00 f00b 	lsl.w	r0, r0, fp
 800d4f0:	4303      	orrs	r3, r0
 800d4f2:	9300      	str	r3, [sp, #0]
 800d4f4:	f10b 0b04 	add.w	fp, fp, #4
 800d4f8:	9b03      	ldr	r3, [sp, #12]
 800d4fa:	e00d      	b.n	800d518 <__gethex+0x27c>
 800d4fc:	9b03      	ldr	r3, [sp, #12]
 800d4fe:	9a06      	ldr	r2, [sp, #24]
 800d500:	4413      	add	r3, r2
 800d502:	42bb      	cmp	r3, r7
 800d504:	d3e0      	bcc.n	800d4c8 <__gethex+0x22c>
 800d506:	4618      	mov	r0, r3
 800d508:	9901      	ldr	r1, [sp, #4]
 800d50a:	9307      	str	r3, [sp, #28]
 800d50c:	4652      	mov	r2, sl
 800d50e:	f001 f947 	bl	800e7a0 <strncmp>
 800d512:	9b07      	ldr	r3, [sp, #28]
 800d514:	2800      	cmp	r0, #0
 800d516:	d1d7      	bne.n	800d4c8 <__gethex+0x22c>
 800d518:	461e      	mov	r6, r3
 800d51a:	e78b      	b.n	800d434 <__gethex+0x198>
 800d51c:	f04f 0a03 	mov.w	sl, #3
 800d520:	e7b8      	b.n	800d494 <__gethex+0x1f8>
 800d522:	da0a      	bge.n	800d53a <__gethex+0x29e>
 800d524:	1a37      	subs	r7, r6, r0
 800d526:	4621      	mov	r1, r4
 800d528:	ee18 0a10 	vmov	r0, s16
 800d52c:	463a      	mov	r2, r7
 800d52e:	f000 fc37 	bl	800dda0 <__lshift>
 800d532:	1bed      	subs	r5, r5, r7
 800d534:	4604      	mov	r4, r0
 800d536:	f100 0914 	add.w	r9, r0, #20
 800d53a:	f04f 0a00 	mov.w	sl, #0
 800d53e:	e7ae      	b.n	800d49e <__gethex+0x202>
 800d540:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d544:	42a8      	cmp	r0, r5
 800d546:	dd72      	ble.n	800d62e <__gethex+0x392>
 800d548:	1b45      	subs	r5, r0, r5
 800d54a:	42ae      	cmp	r6, r5
 800d54c:	dc36      	bgt.n	800d5bc <__gethex+0x320>
 800d54e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d552:	2b02      	cmp	r3, #2
 800d554:	d02a      	beq.n	800d5ac <__gethex+0x310>
 800d556:	2b03      	cmp	r3, #3
 800d558:	d02c      	beq.n	800d5b4 <__gethex+0x318>
 800d55a:	2b01      	cmp	r3, #1
 800d55c:	d11c      	bne.n	800d598 <__gethex+0x2fc>
 800d55e:	42ae      	cmp	r6, r5
 800d560:	d11a      	bne.n	800d598 <__gethex+0x2fc>
 800d562:	2e01      	cmp	r6, #1
 800d564:	d112      	bne.n	800d58c <__gethex+0x2f0>
 800d566:	9a04      	ldr	r2, [sp, #16]
 800d568:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d56c:	6013      	str	r3, [r2, #0]
 800d56e:	2301      	movs	r3, #1
 800d570:	6123      	str	r3, [r4, #16]
 800d572:	f8c9 3000 	str.w	r3, [r9]
 800d576:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d578:	2762      	movs	r7, #98	; 0x62
 800d57a:	601c      	str	r4, [r3, #0]
 800d57c:	e723      	b.n	800d3c6 <__gethex+0x12a>
 800d57e:	bf00      	nop
 800d580:	0800f8e8 	.word	0x0800f8e8
 800d584:	0800f870 	.word	0x0800f870
 800d588:	0800f881 	.word	0x0800f881
 800d58c:	1e71      	subs	r1, r6, #1
 800d58e:	4620      	mov	r0, r4
 800d590:	f000 fe4a 	bl	800e228 <__any_on>
 800d594:	2800      	cmp	r0, #0
 800d596:	d1e6      	bne.n	800d566 <__gethex+0x2ca>
 800d598:	ee18 0a10 	vmov	r0, s16
 800d59c:	4621      	mov	r1, r4
 800d59e:	f000 f9e3 	bl	800d968 <_Bfree>
 800d5a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	6013      	str	r3, [r2, #0]
 800d5a8:	2750      	movs	r7, #80	; 0x50
 800d5aa:	e70c      	b.n	800d3c6 <__gethex+0x12a>
 800d5ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d1f2      	bne.n	800d598 <__gethex+0x2fc>
 800d5b2:	e7d8      	b.n	800d566 <__gethex+0x2ca>
 800d5b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d1d5      	bne.n	800d566 <__gethex+0x2ca>
 800d5ba:	e7ed      	b.n	800d598 <__gethex+0x2fc>
 800d5bc:	1e6f      	subs	r7, r5, #1
 800d5be:	f1ba 0f00 	cmp.w	sl, #0
 800d5c2:	d131      	bne.n	800d628 <__gethex+0x38c>
 800d5c4:	b127      	cbz	r7, 800d5d0 <__gethex+0x334>
 800d5c6:	4639      	mov	r1, r7
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	f000 fe2d 	bl	800e228 <__any_on>
 800d5ce:	4682      	mov	sl, r0
 800d5d0:	117b      	asrs	r3, r7, #5
 800d5d2:	2101      	movs	r1, #1
 800d5d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d5d8:	f007 071f 	and.w	r7, r7, #31
 800d5dc:	fa01 f707 	lsl.w	r7, r1, r7
 800d5e0:	421f      	tst	r7, r3
 800d5e2:	4629      	mov	r1, r5
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	bf18      	it	ne
 800d5e8:	f04a 0a02 	orrne.w	sl, sl, #2
 800d5ec:	1b76      	subs	r6, r6, r5
 800d5ee:	f7ff fded 	bl	800d1cc <rshift>
 800d5f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d5f6:	2702      	movs	r7, #2
 800d5f8:	f1ba 0f00 	cmp.w	sl, #0
 800d5fc:	d048      	beq.n	800d690 <__gethex+0x3f4>
 800d5fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d602:	2b02      	cmp	r3, #2
 800d604:	d015      	beq.n	800d632 <__gethex+0x396>
 800d606:	2b03      	cmp	r3, #3
 800d608:	d017      	beq.n	800d63a <__gethex+0x39e>
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d109      	bne.n	800d622 <__gethex+0x386>
 800d60e:	f01a 0f02 	tst.w	sl, #2
 800d612:	d006      	beq.n	800d622 <__gethex+0x386>
 800d614:	f8d9 0000 	ldr.w	r0, [r9]
 800d618:	ea4a 0a00 	orr.w	sl, sl, r0
 800d61c:	f01a 0f01 	tst.w	sl, #1
 800d620:	d10e      	bne.n	800d640 <__gethex+0x3a4>
 800d622:	f047 0710 	orr.w	r7, r7, #16
 800d626:	e033      	b.n	800d690 <__gethex+0x3f4>
 800d628:	f04f 0a01 	mov.w	sl, #1
 800d62c:	e7d0      	b.n	800d5d0 <__gethex+0x334>
 800d62e:	2701      	movs	r7, #1
 800d630:	e7e2      	b.n	800d5f8 <__gethex+0x35c>
 800d632:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d634:	f1c3 0301 	rsb	r3, r3, #1
 800d638:	9315      	str	r3, [sp, #84]	; 0x54
 800d63a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d0f0      	beq.n	800d622 <__gethex+0x386>
 800d640:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d644:	f104 0314 	add.w	r3, r4, #20
 800d648:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d64c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d650:	f04f 0c00 	mov.w	ip, #0
 800d654:	4618      	mov	r0, r3
 800d656:	f853 2b04 	ldr.w	r2, [r3], #4
 800d65a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800d65e:	d01c      	beq.n	800d69a <__gethex+0x3fe>
 800d660:	3201      	adds	r2, #1
 800d662:	6002      	str	r2, [r0, #0]
 800d664:	2f02      	cmp	r7, #2
 800d666:	f104 0314 	add.w	r3, r4, #20
 800d66a:	d13f      	bne.n	800d6ec <__gethex+0x450>
 800d66c:	f8d8 2000 	ldr.w	r2, [r8]
 800d670:	3a01      	subs	r2, #1
 800d672:	42b2      	cmp	r2, r6
 800d674:	d10a      	bne.n	800d68c <__gethex+0x3f0>
 800d676:	1171      	asrs	r1, r6, #5
 800d678:	2201      	movs	r2, #1
 800d67a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d67e:	f006 061f 	and.w	r6, r6, #31
 800d682:	fa02 f606 	lsl.w	r6, r2, r6
 800d686:	421e      	tst	r6, r3
 800d688:	bf18      	it	ne
 800d68a:	4617      	movne	r7, r2
 800d68c:	f047 0720 	orr.w	r7, r7, #32
 800d690:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d692:	601c      	str	r4, [r3, #0]
 800d694:	9b04      	ldr	r3, [sp, #16]
 800d696:	601d      	str	r5, [r3, #0]
 800d698:	e695      	b.n	800d3c6 <__gethex+0x12a>
 800d69a:	4299      	cmp	r1, r3
 800d69c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d6a0:	d8d8      	bhi.n	800d654 <__gethex+0x3b8>
 800d6a2:	68a3      	ldr	r3, [r4, #8]
 800d6a4:	459b      	cmp	fp, r3
 800d6a6:	db19      	blt.n	800d6dc <__gethex+0x440>
 800d6a8:	6861      	ldr	r1, [r4, #4]
 800d6aa:	ee18 0a10 	vmov	r0, s16
 800d6ae:	3101      	adds	r1, #1
 800d6b0:	f000 f91a 	bl	800d8e8 <_Balloc>
 800d6b4:	4681      	mov	r9, r0
 800d6b6:	b918      	cbnz	r0, 800d6c0 <__gethex+0x424>
 800d6b8:	4b1a      	ldr	r3, [pc, #104]	; (800d724 <__gethex+0x488>)
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	2184      	movs	r1, #132	; 0x84
 800d6be:	e6a8      	b.n	800d412 <__gethex+0x176>
 800d6c0:	6922      	ldr	r2, [r4, #16]
 800d6c2:	3202      	adds	r2, #2
 800d6c4:	f104 010c 	add.w	r1, r4, #12
 800d6c8:	0092      	lsls	r2, r2, #2
 800d6ca:	300c      	adds	r0, #12
 800d6cc:	f7fd f956 	bl	800a97c <memcpy>
 800d6d0:	4621      	mov	r1, r4
 800d6d2:	ee18 0a10 	vmov	r0, s16
 800d6d6:	f000 f947 	bl	800d968 <_Bfree>
 800d6da:	464c      	mov	r4, r9
 800d6dc:	6923      	ldr	r3, [r4, #16]
 800d6de:	1c5a      	adds	r2, r3, #1
 800d6e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d6e4:	6122      	str	r2, [r4, #16]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	615a      	str	r2, [r3, #20]
 800d6ea:	e7bb      	b.n	800d664 <__gethex+0x3c8>
 800d6ec:	6922      	ldr	r2, [r4, #16]
 800d6ee:	455a      	cmp	r2, fp
 800d6f0:	dd0b      	ble.n	800d70a <__gethex+0x46e>
 800d6f2:	2101      	movs	r1, #1
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	f7ff fd69 	bl	800d1cc <rshift>
 800d6fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d6fe:	3501      	adds	r5, #1
 800d700:	42ab      	cmp	r3, r5
 800d702:	f6ff aed0 	blt.w	800d4a6 <__gethex+0x20a>
 800d706:	2701      	movs	r7, #1
 800d708:	e7c0      	b.n	800d68c <__gethex+0x3f0>
 800d70a:	f016 061f 	ands.w	r6, r6, #31
 800d70e:	d0fa      	beq.n	800d706 <__gethex+0x46a>
 800d710:	4453      	add	r3, sl
 800d712:	f1c6 0620 	rsb	r6, r6, #32
 800d716:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d71a:	f000 f9d7 	bl	800dacc <__hi0bits>
 800d71e:	42b0      	cmp	r0, r6
 800d720:	dbe7      	blt.n	800d6f2 <__gethex+0x456>
 800d722:	e7f0      	b.n	800d706 <__gethex+0x46a>
 800d724:	0800f870 	.word	0x0800f870

0800d728 <L_shift>:
 800d728:	f1c2 0208 	rsb	r2, r2, #8
 800d72c:	0092      	lsls	r2, r2, #2
 800d72e:	b570      	push	{r4, r5, r6, lr}
 800d730:	f1c2 0620 	rsb	r6, r2, #32
 800d734:	6843      	ldr	r3, [r0, #4]
 800d736:	6804      	ldr	r4, [r0, #0]
 800d738:	fa03 f506 	lsl.w	r5, r3, r6
 800d73c:	432c      	orrs	r4, r5
 800d73e:	40d3      	lsrs	r3, r2
 800d740:	6004      	str	r4, [r0, #0]
 800d742:	f840 3f04 	str.w	r3, [r0, #4]!
 800d746:	4288      	cmp	r0, r1
 800d748:	d3f4      	bcc.n	800d734 <L_shift+0xc>
 800d74a:	bd70      	pop	{r4, r5, r6, pc}

0800d74c <__match>:
 800d74c:	b530      	push	{r4, r5, lr}
 800d74e:	6803      	ldr	r3, [r0, #0]
 800d750:	3301      	adds	r3, #1
 800d752:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d756:	b914      	cbnz	r4, 800d75e <__match+0x12>
 800d758:	6003      	str	r3, [r0, #0]
 800d75a:	2001      	movs	r0, #1
 800d75c:	bd30      	pop	{r4, r5, pc}
 800d75e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d762:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d766:	2d19      	cmp	r5, #25
 800d768:	bf98      	it	ls
 800d76a:	3220      	addls	r2, #32
 800d76c:	42a2      	cmp	r2, r4
 800d76e:	d0f0      	beq.n	800d752 <__match+0x6>
 800d770:	2000      	movs	r0, #0
 800d772:	e7f3      	b.n	800d75c <__match+0x10>

0800d774 <__hexnan>:
 800d774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d778:	680b      	ldr	r3, [r1, #0]
 800d77a:	115e      	asrs	r6, r3, #5
 800d77c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d780:	f013 031f 	ands.w	r3, r3, #31
 800d784:	b087      	sub	sp, #28
 800d786:	bf18      	it	ne
 800d788:	3604      	addne	r6, #4
 800d78a:	2500      	movs	r5, #0
 800d78c:	1f37      	subs	r7, r6, #4
 800d78e:	4690      	mov	r8, r2
 800d790:	6802      	ldr	r2, [r0, #0]
 800d792:	9301      	str	r3, [sp, #4]
 800d794:	4682      	mov	sl, r0
 800d796:	f846 5c04 	str.w	r5, [r6, #-4]
 800d79a:	46b9      	mov	r9, r7
 800d79c:	463c      	mov	r4, r7
 800d79e:	9502      	str	r5, [sp, #8]
 800d7a0:	46ab      	mov	fp, r5
 800d7a2:	7851      	ldrb	r1, [r2, #1]
 800d7a4:	1c53      	adds	r3, r2, #1
 800d7a6:	9303      	str	r3, [sp, #12]
 800d7a8:	b341      	cbz	r1, 800d7fc <__hexnan+0x88>
 800d7aa:	4608      	mov	r0, r1
 800d7ac:	9205      	str	r2, [sp, #20]
 800d7ae:	9104      	str	r1, [sp, #16]
 800d7b0:	f7ff fd5e 	bl	800d270 <__hexdig_fun>
 800d7b4:	2800      	cmp	r0, #0
 800d7b6:	d14f      	bne.n	800d858 <__hexnan+0xe4>
 800d7b8:	9904      	ldr	r1, [sp, #16]
 800d7ba:	9a05      	ldr	r2, [sp, #20]
 800d7bc:	2920      	cmp	r1, #32
 800d7be:	d818      	bhi.n	800d7f2 <__hexnan+0x7e>
 800d7c0:	9b02      	ldr	r3, [sp, #8]
 800d7c2:	459b      	cmp	fp, r3
 800d7c4:	dd13      	ble.n	800d7ee <__hexnan+0x7a>
 800d7c6:	454c      	cmp	r4, r9
 800d7c8:	d206      	bcs.n	800d7d8 <__hexnan+0x64>
 800d7ca:	2d07      	cmp	r5, #7
 800d7cc:	dc04      	bgt.n	800d7d8 <__hexnan+0x64>
 800d7ce:	462a      	mov	r2, r5
 800d7d0:	4649      	mov	r1, r9
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	f7ff ffa8 	bl	800d728 <L_shift>
 800d7d8:	4544      	cmp	r4, r8
 800d7da:	d950      	bls.n	800d87e <__hexnan+0x10a>
 800d7dc:	2300      	movs	r3, #0
 800d7de:	f1a4 0904 	sub.w	r9, r4, #4
 800d7e2:	f844 3c04 	str.w	r3, [r4, #-4]
 800d7e6:	f8cd b008 	str.w	fp, [sp, #8]
 800d7ea:	464c      	mov	r4, r9
 800d7ec:	461d      	mov	r5, r3
 800d7ee:	9a03      	ldr	r2, [sp, #12]
 800d7f0:	e7d7      	b.n	800d7a2 <__hexnan+0x2e>
 800d7f2:	2929      	cmp	r1, #41	; 0x29
 800d7f4:	d156      	bne.n	800d8a4 <__hexnan+0x130>
 800d7f6:	3202      	adds	r2, #2
 800d7f8:	f8ca 2000 	str.w	r2, [sl]
 800d7fc:	f1bb 0f00 	cmp.w	fp, #0
 800d800:	d050      	beq.n	800d8a4 <__hexnan+0x130>
 800d802:	454c      	cmp	r4, r9
 800d804:	d206      	bcs.n	800d814 <__hexnan+0xa0>
 800d806:	2d07      	cmp	r5, #7
 800d808:	dc04      	bgt.n	800d814 <__hexnan+0xa0>
 800d80a:	462a      	mov	r2, r5
 800d80c:	4649      	mov	r1, r9
 800d80e:	4620      	mov	r0, r4
 800d810:	f7ff ff8a 	bl	800d728 <L_shift>
 800d814:	4544      	cmp	r4, r8
 800d816:	d934      	bls.n	800d882 <__hexnan+0x10e>
 800d818:	f1a8 0204 	sub.w	r2, r8, #4
 800d81c:	4623      	mov	r3, r4
 800d81e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d822:	f842 1f04 	str.w	r1, [r2, #4]!
 800d826:	429f      	cmp	r7, r3
 800d828:	d2f9      	bcs.n	800d81e <__hexnan+0xaa>
 800d82a:	1b3b      	subs	r3, r7, r4
 800d82c:	f023 0303 	bic.w	r3, r3, #3
 800d830:	3304      	adds	r3, #4
 800d832:	3401      	adds	r4, #1
 800d834:	3e03      	subs	r6, #3
 800d836:	42b4      	cmp	r4, r6
 800d838:	bf88      	it	hi
 800d83a:	2304      	movhi	r3, #4
 800d83c:	4443      	add	r3, r8
 800d83e:	2200      	movs	r2, #0
 800d840:	f843 2b04 	str.w	r2, [r3], #4
 800d844:	429f      	cmp	r7, r3
 800d846:	d2fb      	bcs.n	800d840 <__hexnan+0xcc>
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	b91b      	cbnz	r3, 800d854 <__hexnan+0xe0>
 800d84c:	4547      	cmp	r7, r8
 800d84e:	d127      	bne.n	800d8a0 <__hexnan+0x12c>
 800d850:	2301      	movs	r3, #1
 800d852:	603b      	str	r3, [r7, #0]
 800d854:	2005      	movs	r0, #5
 800d856:	e026      	b.n	800d8a6 <__hexnan+0x132>
 800d858:	3501      	adds	r5, #1
 800d85a:	2d08      	cmp	r5, #8
 800d85c:	f10b 0b01 	add.w	fp, fp, #1
 800d860:	dd06      	ble.n	800d870 <__hexnan+0xfc>
 800d862:	4544      	cmp	r4, r8
 800d864:	d9c3      	bls.n	800d7ee <__hexnan+0x7a>
 800d866:	2300      	movs	r3, #0
 800d868:	f844 3c04 	str.w	r3, [r4, #-4]
 800d86c:	2501      	movs	r5, #1
 800d86e:	3c04      	subs	r4, #4
 800d870:	6822      	ldr	r2, [r4, #0]
 800d872:	f000 000f 	and.w	r0, r0, #15
 800d876:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d87a:	6022      	str	r2, [r4, #0]
 800d87c:	e7b7      	b.n	800d7ee <__hexnan+0x7a>
 800d87e:	2508      	movs	r5, #8
 800d880:	e7b5      	b.n	800d7ee <__hexnan+0x7a>
 800d882:	9b01      	ldr	r3, [sp, #4]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d0df      	beq.n	800d848 <__hexnan+0xd4>
 800d888:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d88c:	f1c3 0320 	rsb	r3, r3, #32
 800d890:	fa22 f303 	lsr.w	r3, r2, r3
 800d894:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d898:	401a      	ands	r2, r3
 800d89a:	f846 2c04 	str.w	r2, [r6, #-4]
 800d89e:	e7d3      	b.n	800d848 <__hexnan+0xd4>
 800d8a0:	3f04      	subs	r7, #4
 800d8a2:	e7d1      	b.n	800d848 <__hexnan+0xd4>
 800d8a4:	2004      	movs	r0, #4
 800d8a6:	b007      	add	sp, #28
 800d8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d8ac <_localeconv_r>:
 800d8ac:	4800      	ldr	r0, [pc, #0]	; (800d8b0 <_localeconv_r+0x4>)
 800d8ae:	4770      	bx	lr
 800d8b0:	2000017c 	.word	0x2000017c

0800d8b4 <malloc>:
 800d8b4:	4b02      	ldr	r3, [pc, #8]	; (800d8c0 <malloc+0xc>)
 800d8b6:	4601      	mov	r1, r0
 800d8b8:	6818      	ldr	r0, [r3, #0]
 800d8ba:	f000 bd59 	b.w	800e370 <_malloc_r>
 800d8be:	bf00      	nop
 800d8c0:	20000024 	.word	0x20000024

0800d8c4 <__ascii_mbtowc>:
 800d8c4:	b082      	sub	sp, #8
 800d8c6:	b901      	cbnz	r1, 800d8ca <__ascii_mbtowc+0x6>
 800d8c8:	a901      	add	r1, sp, #4
 800d8ca:	b142      	cbz	r2, 800d8de <__ascii_mbtowc+0x1a>
 800d8cc:	b14b      	cbz	r3, 800d8e2 <__ascii_mbtowc+0x1e>
 800d8ce:	7813      	ldrb	r3, [r2, #0]
 800d8d0:	600b      	str	r3, [r1, #0]
 800d8d2:	7812      	ldrb	r2, [r2, #0]
 800d8d4:	1e10      	subs	r0, r2, #0
 800d8d6:	bf18      	it	ne
 800d8d8:	2001      	movne	r0, #1
 800d8da:	b002      	add	sp, #8
 800d8dc:	4770      	bx	lr
 800d8de:	4610      	mov	r0, r2
 800d8e0:	e7fb      	b.n	800d8da <__ascii_mbtowc+0x16>
 800d8e2:	f06f 0001 	mvn.w	r0, #1
 800d8e6:	e7f8      	b.n	800d8da <__ascii_mbtowc+0x16>

0800d8e8 <_Balloc>:
 800d8e8:	b570      	push	{r4, r5, r6, lr}
 800d8ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d8ec:	4604      	mov	r4, r0
 800d8ee:	460d      	mov	r5, r1
 800d8f0:	b976      	cbnz	r6, 800d910 <_Balloc+0x28>
 800d8f2:	2010      	movs	r0, #16
 800d8f4:	f7ff ffde 	bl	800d8b4 <malloc>
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	6260      	str	r0, [r4, #36]	; 0x24
 800d8fc:	b920      	cbnz	r0, 800d908 <_Balloc+0x20>
 800d8fe:	4b18      	ldr	r3, [pc, #96]	; (800d960 <_Balloc+0x78>)
 800d900:	4818      	ldr	r0, [pc, #96]	; (800d964 <_Balloc+0x7c>)
 800d902:	2166      	movs	r1, #102	; 0x66
 800d904:	f000 ff6e 	bl	800e7e4 <__assert_func>
 800d908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d90c:	6006      	str	r6, [r0, #0]
 800d90e:	60c6      	str	r6, [r0, #12]
 800d910:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d912:	68f3      	ldr	r3, [r6, #12]
 800d914:	b183      	cbz	r3, 800d938 <_Balloc+0x50>
 800d916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d918:	68db      	ldr	r3, [r3, #12]
 800d91a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d91e:	b9b8      	cbnz	r0, 800d950 <_Balloc+0x68>
 800d920:	2101      	movs	r1, #1
 800d922:	fa01 f605 	lsl.w	r6, r1, r5
 800d926:	1d72      	adds	r2, r6, #5
 800d928:	0092      	lsls	r2, r2, #2
 800d92a:	4620      	mov	r0, r4
 800d92c:	f000 fc9d 	bl	800e26a <_calloc_r>
 800d930:	b160      	cbz	r0, 800d94c <_Balloc+0x64>
 800d932:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d936:	e00e      	b.n	800d956 <_Balloc+0x6e>
 800d938:	2221      	movs	r2, #33	; 0x21
 800d93a:	2104      	movs	r1, #4
 800d93c:	4620      	mov	r0, r4
 800d93e:	f000 fc94 	bl	800e26a <_calloc_r>
 800d942:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d944:	60f0      	str	r0, [r6, #12]
 800d946:	68db      	ldr	r3, [r3, #12]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d1e4      	bne.n	800d916 <_Balloc+0x2e>
 800d94c:	2000      	movs	r0, #0
 800d94e:	bd70      	pop	{r4, r5, r6, pc}
 800d950:	6802      	ldr	r2, [r0, #0]
 800d952:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d956:	2300      	movs	r3, #0
 800d958:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d95c:	e7f7      	b.n	800d94e <_Balloc+0x66>
 800d95e:	bf00      	nop
 800d960:	0800f7fe 	.word	0x0800f7fe
 800d964:	0800f8fc 	.word	0x0800f8fc

0800d968 <_Bfree>:
 800d968:	b570      	push	{r4, r5, r6, lr}
 800d96a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d96c:	4605      	mov	r5, r0
 800d96e:	460c      	mov	r4, r1
 800d970:	b976      	cbnz	r6, 800d990 <_Bfree+0x28>
 800d972:	2010      	movs	r0, #16
 800d974:	f7ff ff9e 	bl	800d8b4 <malloc>
 800d978:	4602      	mov	r2, r0
 800d97a:	6268      	str	r0, [r5, #36]	; 0x24
 800d97c:	b920      	cbnz	r0, 800d988 <_Bfree+0x20>
 800d97e:	4b09      	ldr	r3, [pc, #36]	; (800d9a4 <_Bfree+0x3c>)
 800d980:	4809      	ldr	r0, [pc, #36]	; (800d9a8 <_Bfree+0x40>)
 800d982:	218a      	movs	r1, #138	; 0x8a
 800d984:	f000 ff2e 	bl	800e7e4 <__assert_func>
 800d988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d98c:	6006      	str	r6, [r0, #0]
 800d98e:	60c6      	str	r6, [r0, #12]
 800d990:	b13c      	cbz	r4, 800d9a2 <_Bfree+0x3a>
 800d992:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d994:	6862      	ldr	r2, [r4, #4]
 800d996:	68db      	ldr	r3, [r3, #12]
 800d998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d99c:	6021      	str	r1, [r4, #0]
 800d99e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d9a2:	bd70      	pop	{r4, r5, r6, pc}
 800d9a4:	0800f7fe 	.word	0x0800f7fe
 800d9a8:	0800f8fc 	.word	0x0800f8fc

0800d9ac <__multadd>:
 800d9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9b0:	690d      	ldr	r5, [r1, #16]
 800d9b2:	4607      	mov	r7, r0
 800d9b4:	460c      	mov	r4, r1
 800d9b6:	461e      	mov	r6, r3
 800d9b8:	f101 0c14 	add.w	ip, r1, #20
 800d9bc:	2000      	movs	r0, #0
 800d9be:	f8dc 3000 	ldr.w	r3, [ip]
 800d9c2:	b299      	uxth	r1, r3
 800d9c4:	fb02 6101 	mla	r1, r2, r1, r6
 800d9c8:	0c1e      	lsrs	r6, r3, #16
 800d9ca:	0c0b      	lsrs	r3, r1, #16
 800d9cc:	fb02 3306 	mla	r3, r2, r6, r3
 800d9d0:	b289      	uxth	r1, r1
 800d9d2:	3001      	adds	r0, #1
 800d9d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d9d8:	4285      	cmp	r5, r0
 800d9da:	f84c 1b04 	str.w	r1, [ip], #4
 800d9de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d9e2:	dcec      	bgt.n	800d9be <__multadd+0x12>
 800d9e4:	b30e      	cbz	r6, 800da2a <__multadd+0x7e>
 800d9e6:	68a3      	ldr	r3, [r4, #8]
 800d9e8:	42ab      	cmp	r3, r5
 800d9ea:	dc19      	bgt.n	800da20 <__multadd+0x74>
 800d9ec:	6861      	ldr	r1, [r4, #4]
 800d9ee:	4638      	mov	r0, r7
 800d9f0:	3101      	adds	r1, #1
 800d9f2:	f7ff ff79 	bl	800d8e8 <_Balloc>
 800d9f6:	4680      	mov	r8, r0
 800d9f8:	b928      	cbnz	r0, 800da06 <__multadd+0x5a>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	4b0c      	ldr	r3, [pc, #48]	; (800da30 <__multadd+0x84>)
 800d9fe:	480d      	ldr	r0, [pc, #52]	; (800da34 <__multadd+0x88>)
 800da00:	21b5      	movs	r1, #181	; 0xb5
 800da02:	f000 feef 	bl	800e7e4 <__assert_func>
 800da06:	6922      	ldr	r2, [r4, #16]
 800da08:	3202      	adds	r2, #2
 800da0a:	f104 010c 	add.w	r1, r4, #12
 800da0e:	0092      	lsls	r2, r2, #2
 800da10:	300c      	adds	r0, #12
 800da12:	f7fc ffb3 	bl	800a97c <memcpy>
 800da16:	4621      	mov	r1, r4
 800da18:	4638      	mov	r0, r7
 800da1a:	f7ff ffa5 	bl	800d968 <_Bfree>
 800da1e:	4644      	mov	r4, r8
 800da20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800da24:	3501      	adds	r5, #1
 800da26:	615e      	str	r6, [r3, #20]
 800da28:	6125      	str	r5, [r4, #16]
 800da2a:	4620      	mov	r0, r4
 800da2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da30:	0800f870 	.word	0x0800f870
 800da34:	0800f8fc 	.word	0x0800f8fc

0800da38 <__s2b>:
 800da38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da3c:	460c      	mov	r4, r1
 800da3e:	4615      	mov	r5, r2
 800da40:	461f      	mov	r7, r3
 800da42:	2209      	movs	r2, #9
 800da44:	3308      	adds	r3, #8
 800da46:	4606      	mov	r6, r0
 800da48:	fb93 f3f2 	sdiv	r3, r3, r2
 800da4c:	2100      	movs	r1, #0
 800da4e:	2201      	movs	r2, #1
 800da50:	429a      	cmp	r2, r3
 800da52:	db09      	blt.n	800da68 <__s2b+0x30>
 800da54:	4630      	mov	r0, r6
 800da56:	f7ff ff47 	bl	800d8e8 <_Balloc>
 800da5a:	b940      	cbnz	r0, 800da6e <__s2b+0x36>
 800da5c:	4602      	mov	r2, r0
 800da5e:	4b19      	ldr	r3, [pc, #100]	; (800dac4 <__s2b+0x8c>)
 800da60:	4819      	ldr	r0, [pc, #100]	; (800dac8 <__s2b+0x90>)
 800da62:	21ce      	movs	r1, #206	; 0xce
 800da64:	f000 febe 	bl	800e7e4 <__assert_func>
 800da68:	0052      	lsls	r2, r2, #1
 800da6a:	3101      	adds	r1, #1
 800da6c:	e7f0      	b.n	800da50 <__s2b+0x18>
 800da6e:	9b08      	ldr	r3, [sp, #32]
 800da70:	6143      	str	r3, [r0, #20]
 800da72:	2d09      	cmp	r5, #9
 800da74:	f04f 0301 	mov.w	r3, #1
 800da78:	6103      	str	r3, [r0, #16]
 800da7a:	dd16      	ble.n	800daaa <__s2b+0x72>
 800da7c:	f104 0909 	add.w	r9, r4, #9
 800da80:	46c8      	mov	r8, r9
 800da82:	442c      	add	r4, r5
 800da84:	f818 3b01 	ldrb.w	r3, [r8], #1
 800da88:	4601      	mov	r1, r0
 800da8a:	3b30      	subs	r3, #48	; 0x30
 800da8c:	220a      	movs	r2, #10
 800da8e:	4630      	mov	r0, r6
 800da90:	f7ff ff8c 	bl	800d9ac <__multadd>
 800da94:	45a0      	cmp	r8, r4
 800da96:	d1f5      	bne.n	800da84 <__s2b+0x4c>
 800da98:	f1a5 0408 	sub.w	r4, r5, #8
 800da9c:	444c      	add	r4, r9
 800da9e:	1b2d      	subs	r5, r5, r4
 800daa0:	1963      	adds	r3, r4, r5
 800daa2:	42bb      	cmp	r3, r7
 800daa4:	db04      	blt.n	800dab0 <__s2b+0x78>
 800daa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daaa:	340a      	adds	r4, #10
 800daac:	2509      	movs	r5, #9
 800daae:	e7f6      	b.n	800da9e <__s2b+0x66>
 800dab0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dab4:	4601      	mov	r1, r0
 800dab6:	3b30      	subs	r3, #48	; 0x30
 800dab8:	220a      	movs	r2, #10
 800daba:	4630      	mov	r0, r6
 800dabc:	f7ff ff76 	bl	800d9ac <__multadd>
 800dac0:	e7ee      	b.n	800daa0 <__s2b+0x68>
 800dac2:	bf00      	nop
 800dac4:	0800f870 	.word	0x0800f870
 800dac8:	0800f8fc 	.word	0x0800f8fc

0800dacc <__hi0bits>:
 800dacc:	0c03      	lsrs	r3, r0, #16
 800dace:	041b      	lsls	r3, r3, #16
 800dad0:	b9d3      	cbnz	r3, 800db08 <__hi0bits+0x3c>
 800dad2:	0400      	lsls	r0, r0, #16
 800dad4:	2310      	movs	r3, #16
 800dad6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dada:	bf04      	itt	eq
 800dadc:	0200      	lsleq	r0, r0, #8
 800dade:	3308      	addeq	r3, #8
 800dae0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dae4:	bf04      	itt	eq
 800dae6:	0100      	lsleq	r0, r0, #4
 800dae8:	3304      	addeq	r3, #4
 800daea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800daee:	bf04      	itt	eq
 800daf0:	0080      	lsleq	r0, r0, #2
 800daf2:	3302      	addeq	r3, #2
 800daf4:	2800      	cmp	r0, #0
 800daf6:	db05      	blt.n	800db04 <__hi0bits+0x38>
 800daf8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dafc:	f103 0301 	add.w	r3, r3, #1
 800db00:	bf08      	it	eq
 800db02:	2320      	moveq	r3, #32
 800db04:	4618      	mov	r0, r3
 800db06:	4770      	bx	lr
 800db08:	2300      	movs	r3, #0
 800db0a:	e7e4      	b.n	800dad6 <__hi0bits+0xa>

0800db0c <__lo0bits>:
 800db0c:	6803      	ldr	r3, [r0, #0]
 800db0e:	f013 0207 	ands.w	r2, r3, #7
 800db12:	4601      	mov	r1, r0
 800db14:	d00b      	beq.n	800db2e <__lo0bits+0x22>
 800db16:	07da      	lsls	r2, r3, #31
 800db18:	d423      	bmi.n	800db62 <__lo0bits+0x56>
 800db1a:	0798      	lsls	r0, r3, #30
 800db1c:	bf49      	itett	mi
 800db1e:	085b      	lsrmi	r3, r3, #1
 800db20:	089b      	lsrpl	r3, r3, #2
 800db22:	2001      	movmi	r0, #1
 800db24:	600b      	strmi	r3, [r1, #0]
 800db26:	bf5c      	itt	pl
 800db28:	600b      	strpl	r3, [r1, #0]
 800db2a:	2002      	movpl	r0, #2
 800db2c:	4770      	bx	lr
 800db2e:	b298      	uxth	r0, r3
 800db30:	b9a8      	cbnz	r0, 800db5e <__lo0bits+0x52>
 800db32:	0c1b      	lsrs	r3, r3, #16
 800db34:	2010      	movs	r0, #16
 800db36:	b2da      	uxtb	r2, r3
 800db38:	b90a      	cbnz	r2, 800db3e <__lo0bits+0x32>
 800db3a:	3008      	adds	r0, #8
 800db3c:	0a1b      	lsrs	r3, r3, #8
 800db3e:	071a      	lsls	r2, r3, #28
 800db40:	bf04      	itt	eq
 800db42:	091b      	lsreq	r3, r3, #4
 800db44:	3004      	addeq	r0, #4
 800db46:	079a      	lsls	r2, r3, #30
 800db48:	bf04      	itt	eq
 800db4a:	089b      	lsreq	r3, r3, #2
 800db4c:	3002      	addeq	r0, #2
 800db4e:	07da      	lsls	r2, r3, #31
 800db50:	d403      	bmi.n	800db5a <__lo0bits+0x4e>
 800db52:	085b      	lsrs	r3, r3, #1
 800db54:	f100 0001 	add.w	r0, r0, #1
 800db58:	d005      	beq.n	800db66 <__lo0bits+0x5a>
 800db5a:	600b      	str	r3, [r1, #0]
 800db5c:	4770      	bx	lr
 800db5e:	4610      	mov	r0, r2
 800db60:	e7e9      	b.n	800db36 <__lo0bits+0x2a>
 800db62:	2000      	movs	r0, #0
 800db64:	4770      	bx	lr
 800db66:	2020      	movs	r0, #32
 800db68:	4770      	bx	lr
	...

0800db6c <__i2b>:
 800db6c:	b510      	push	{r4, lr}
 800db6e:	460c      	mov	r4, r1
 800db70:	2101      	movs	r1, #1
 800db72:	f7ff feb9 	bl	800d8e8 <_Balloc>
 800db76:	4602      	mov	r2, r0
 800db78:	b928      	cbnz	r0, 800db86 <__i2b+0x1a>
 800db7a:	4b05      	ldr	r3, [pc, #20]	; (800db90 <__i2b+0x24>)
 800db7c:	4805      	ldr	r0, [pc, #20]	; (800db94 <__i2b+0x28>)
 800db7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800db82:	f000 fe2f 	bl	800e7e4 <__assert_func>
 800db86:	2301      	movs	r3, #1
 800db88:	6144      	str	r4, [r0, #20]
 800db8a:	6103      	str	r3, [r0, #16]
 800db8c:	bd10      	pop	{r4, pc}
 800db8e:	bf00      	nop
 800db90:	0800f870 	.word	0x0800f870
 800db94:	0800f8fc 	.word	0x0800f8fc

0800db98 <__multiply>:
 800db98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db9c:	4691      	mov	r9, r2
 800db9e:	690a      	ldr	r2, [r1, #16]
 800dba0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	bfb8      	it	lt
 800dba8:	460b      	movlt	r3, r1
 800dbaa:	460c      	mov	r4, r1
 800dbac:	bfbc      	itt	lt
 800dbae:	464c      	movlt	r4, r9
 800dbb0:	4699      	movlt	r9, r3
 800dbb2:	6927      	ldr	r7, [r4, #16]
 800dbb4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dbb8:	68a3      	ldr	r3, [r4, #8]
 800dbba:	6861      	ldr	r1, [r4, #4]
 800dbbc:	eb07 060a 	add.w	r6, r7, sl
 800dbc0:	42b3      	cmp	r3, r6
 800dbc2:	b085      	sub	sp, #20
 800dbc4:	bfb8      	it	lt
 800dbc6:	3101      	addlt	r1, #1
 800dbc8:	f7ff fe8e 	bl	800d8e8 <_Balloc>
 800dbcc:	b930      	cbnz	r0, 800dbdc <__multiply+0x44>
 800dbce:	4602      	mov	r2, r0
 800dbd0:	4b44      	ldr	r3, [pc, #272]	; (800dce4 <__multiply+0x14c>)
 800dbd2:	4845      	ldr	r0, [pc, #276]	; (800dce8 <__multiply+0x150>)
 800dbd4:	f240 115d 	movw	r1, #349	; 0x15d
 800dbd8:	f000 fe04 	bl	800e7e4 <__assert_func>
 800dbdc:	f100 0514 	add.w	r5, r0, #20
 800dbe0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dbe4:	462b      	mov	r3, r5
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	4543      	cmp	r3, r8
 800dbea:	d321      	bcc.n	800dc30 <__multiply+0x98>
 800dbec:	f104 0314 	add.w	r3, r4, #20
 800dbf0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dbf4:	f109 0314 	add.w	r3, r9, #20
 800dbf8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dbfc:	9202      	str	r2, [sp, #8]
 800dbfe:	1b3a      	subs	r2, r7, r4
 800dc00:	3a15      	subs	r2, #21
 800dc02:	f022 0203 	bic.w	r2, r2, #3
 800dc06:	3204      	adds	r2, #4
 800dc08:	f104 0115 	add.w	r1, r4, #21
 800dc0c:	428f      	cmp	r7, r1
 800dc0e:	bf38      	it	cc
 800dc10:	2204      	movcc	r2, #4
 800dc12:	9201      	str	r2, [sp, #4]
 800dc14:	9a02      	ldr	r2, [sp, #8]
 800dc16:	9303      	str	r3, [sp, #12]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d80c      	bhi.n	800dc36 <__multiply+0x9e>
 800dc1c:	2e00      	cmp	r6, #0
 800dc1e:	dd03      	ble.n	800dc28 <__multiply+0x90>
 800dc20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d05a      	beq.n	800dcde <__multiply+0x146>
 800dc28:	6106      	str	r6, [r0, #16]
 800dc2a:	b005      	add	sp, #20
 800dc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc30:	f843 2b04 	str.w	r2, [r3], #4
 800dc34:	e7d8      	b.n	800dbe8 <__multiply+0x50>
 800dc36:	f8b3 a000 	ldrh.w	sl, [r3]
 800dc3a:	f1ba 0f00 	cmp.w	sl, #0
 800dc3e:	d024      	beq.n	800dc8a <__multiply+0xf2>
 800dc40:	f104 0e14 	add.w	lr, r4, #20
 800dc44:	46a9      	mov	r9, r5
 800dc46:	f04f 0c00 	mov.w	ip, #0
 800dc4a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dc4e:	f8d9 1000 	ldr.w	r1, [r9]
 800dc52:	fa1f fb82 	uxth.w	fp, r2
 800dc56:	b289      	uxth	r1, r1
 800dc58:	fb0a 110b 	mla	r1, sl, fp, r1
 800dc5c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dc60:	f8d9 2000 	ldr.w	r2, [r9]
 800dc64:	4461      	add	r1, ip
 800dc66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc6a:	fb0a c20b 	mla	r2, sl, fp, ip
 800dc6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dc72:	b289      	uxth	r1, r1
 800dc74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dc78:	4577      	cmp	r7, lr
 800dc7a:	f849 1b04 	str.w	r1, [r9], #4
 800dc7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc82:	d8e2      	bhi.n	800dc4a <__multiply+0xb2>
 800dc84:	9a01      	ldr	r2, [sp, #4]
 800dc86:	f845 c002 	str.w	ip, [r5, r2]
 800dc8a:	9a03      	ldr	r2, [sp, #12]
 800dc8c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dc90:	3304      	adds	r3, #4
 800dc92:	f1b9 0f00 	cmp.w	r9, #0
 800dc96:	d020      	beq.n	800dcda <__multiply+0x142>
 800dc98:	6829      	ldr	r1, [r5, #0]
 800dc9a:	f104 0c14 	add.w	ip, r4, #20
 800dc9e:	46ae      	mov	lr, r5
 800dca0:	f04f 0a00 	mov.w	sl, #0
 800dca4:	f8bc b000 	ldrh.w	fp, [ip]
 800dca8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dcac:	fb09 220b 	mla	r2, r9, fp, r2
 800dcb0:	4492      	add	sl, r2
 800dcb2:	b289      	uxth	r1, r1
 800dcb4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dcb8:	f84e 1b04 	str.w	r1, [lr], #4
 800dcbc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dcc0:	f8be 1000 	ldrh.w	r1, [lr]
 800dcc4:	0c12      	lsrs	r2, r2, #16
 800dcc6:	fb09 1102 	mla	r1, r9, r2, r1
 800dcca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dcce:	4567      	cmp	r7, ip
 800dcd0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dcd4:	d8e6      	bhi.n	800dca4 <__multiply+0x10c>
 800dcd6:	9a01      	ldr	r2, [sp, #4]
 800dcd8:	50a9      	str	r1, [r5, r2]
 800dcda:	3504      	adds	r5, #4
 800dcdc:	e79a      	b.n	800dc14 <__multiply+0x7c>
 800dcde:	3e01      	subs	r6, #1
 800dce0:	e79c      	b.n	800dc1c <__multiply+0x84>
 800dce2:	bf00      	nop
 800dce4:	0800f870 	.word	0x0800f870
 800dce8:	0800f8fc 	.word	0x0800f8fc

0800dcec <__pow5mult>:
 800dcec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcf0:	4615      	mov	r5, r2
 800dcf2:	f012 0203 	ands.w	r2, r2, #3
 800dcf6:	4606      	mov	r6, r0
 800dcf8:	460f      	mov	r7, r1
 800dcfa:	d007      	beq.n	800dd0c <__pow5mult+0x20>
 800dcfc:	4c25      	ldr	r4, [pc, #148]	; (800dd94 <__pow5mult+0xa8>)
 800dcfe:	3a01      	subs	r2, #1
 800dd00:	2300      	movs	r3, #0
 800dd02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd06:	f7ff fe51 	bl	800d9ac <__multadd>
 800dd0a:	4607      	mov	r7, r0
 800dd0c:	10ad      	asrs	r5, r5, #2
 800dd0e:	d03d      	beq.n	800dd8c <__pow5mult+0xa0>
 800dd10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dd12:	b97c      	cbnz	r4, 800dd34 <__pow5mult+0x48>
 800dd14:	2010      	movs	r0, #16
 800dd16:	f7ff fdcd 	bl	800d8b4 <malloc>
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	6270      	str	r0, [r6, #36]	; 0x24
 800dd1e:	b928      	cbnz	r0, 800dd2c <__pow5mult+0x40>
 800dd20:	4b1d      	ldr	r3, [pc, #116]	; (800dd98 <__pow5mult+0xac>)
 800dd22:	481e      	ldr	r0, [pc, #120]	; (800dd9c <__pow5mult+0xb0>)
 800dd24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dd28:	f000 fd5c 	bl	800e7e4 <__assert_func>
 800dd2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd30:	6004      	str	r4, [r0, #0]
 800dd32:	60c4      	str	r4, [r0, #12]
 800dd34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dd38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd3c:	b94c      	cbnz	r4, 800dd52 <__pow5mult+0x66>
 800dd3e:	f240 2171 	movw	r1, #625	; 0x271
 800dd42:	4630      	mov	r0, r6
 800dd44:	f7ff ff12 	bl	800db6c <__i2b>
 800dd48:	2300      	movs	r3, #0
 800dd4a:	f8c8 0008 	str.w	r0, [r8, #8]
 800dd4e:	4604      	mov	r4, r0
 800dd50:	6003      	str	r3, [r0, #0]
 800dd52:	f04f 0900 	mov.w	r9, #0
 800dd56:	07eb      	lsls	r3, r5, #31
 800dd58:	d50a      	bpl.n	800dd70 <__pow5mult+0x84>
 800dd5a:	4639      	mov	r1, r7
 800dd5c:	4622      	mov	r2, r4
 800dd5e:	4630      	mov	r0, r6
 800dd60:	f7ff ff1a 	bl	800db98 <__multiply>
 800dd64:	4639      	mov	r1, r7
 800dd66:	4680      	mov	r8, r0
 800dd68:	4630      	mov	r0, r6
 800dd6a:	f7ff fdfd 	bl	800d968 <_Bfree>
 800dd6e:	4647      	mov	r7, r8
 800dd70:	106d      	asrs	r5, r5, #1
 800dd72:	d00b      	beq.n	800dd8c <__pow5mult+0xa0>
 800dd74:	6820      	ldr	r0, [r4, #0]
 800dd76:	b938      	cbnz	r0, 800dd88 <__pow5mult+0x9c>
 800dd78:	4622      	mov	r2, r4
 800dd7a:	4621      	mov	r1, r4
 800dd7c:	4630      	mov	r0, r6
 800dd7e:	f7ff ff0b 	bl	800db98 <__multiply>
 800dd82:	6020      	str	r0, [r4, #0]
 800dd84:	f8c0 9000 	str.w	r9, [r0]
 800dd88:	4604      	mov	r4, r0
 800dd8a:	e7e4      	b.n	800dd56 <__pow5mult+0x6a>
 800dd8c:	4638      	mov	r0, r7
 800dd8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd92:	bf00      	nop
 800dd94:	0800fa48 	.word	0x0800fa48
 800dd98:	0800f7fe 	.word	0x0800f7fe
 800dd9c:	0800f8fc 	.word	0x0800f8fc

0800dda0 <__lshift>:
 800dda0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dda4:	460c      	mov	r4, r1
 800dda6:	6849      	ldr	r1, [r1, #4]
 800dda8:	6923      	ldr	r3, [r4, #16]
 800ddaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ddae:	68a3      	ldr	r3, [r4, #8]
 800ddb0:	4607      	mov	r7, r0
 800ddb2:	4691      	mov	r9, r2
 800ddb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ddb8:	f108 0601 	add.w	r6, r8, #1
 800ddbc:	42b3      	cmp	r3, r6
 800ddbe:	db0b      	blt.n	800ddd8 <__lshift+0x38>
 800ddc0:	4638      	mov	r0, r7
 800ddc2:	f7ff fd91 	bl	800d8e8 <_Balloc>
 800ddc6:	4605      	mov	r5, r0
 800ddc8:	b948      	cbnz	r0, 800ddde <__lshift+0x3e>
 800ddca:	4602      	mov	r2, r0
 800ddcc:	4b2a      	ldr	r3, [pc, #168]	; (800de78 <__lshift+0xd8>)
 800ddce:	482b      	ldr	r0, [pc, #172]	; (800de7c <__lshift+0xdc>)
 800ddd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ddd4:	f000 fd06 	bl	800e7e4 <__assert_func>
 800ddd8:	3101      	adds	r1, #1
 800ddda:	005b      	lsls	r3, r3, #1
 800dddc:	e7ee      	b.n	800ddbc <__lshift+0x1c>
 800ddde:	2300      	movs	r3, #0
 800dde0:	f100 0114 	add.w	r1, r0, #20
 800dde4:	f100 0210 	add.w	r2, r0, #16
 800dde8:	4618      	mov	r0, r3
 800ddea:	4553      	cmp	r3, sl
 800ddec:	db37      	blt.n	800de5e <__lshift+0xbe>
 800ddee:	6920      	ldr	r0, [r4, #16]
 800ddf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ddf4:	f104 0314 	add.w	r3, r4, #20
 800ddf8:	f019 091f 	ands.w	r9, r9, #31
 800ddfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800de04:	d02f      	beq.n	800de66 <__lshift+0xc6>
 800de06:	f1c9 0e20 	rsb	lr, r9, #32
 800de0a:	468a      	mov	sl, r1
 800de0c:	f04f 0c00 	mov.w	ip, #0
 800de10:	681a      	ldr	r2, [r3, #0]
 800de12:	fa02 f209 	lsl.w	r2, r2, r9
 800de16:	ea42 020c 	orr.w	r2, r2, ip
 800de1a:	f84a 2b04 	str.w	r2, [sl], #4
 800de1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800de22:	4298      	cmp	r0, r3
 800de24:	fa22 fc0e 	lsr.w	ip, r2, lr
 800de28:	d8f2      	bhi.n	800de10 <__lshift+0x70>
 800de2a:	1b03      	subs	r3, r0, r4
 800de2c:	3b15      	subs	r3, #21
 800de2e:	f023 0303 	bic.w	r3, r3, #3
 800de32:	3304      	adds	r3, #4
 800de34:	f104 0215 	add.w	r2, r4, #21
 800de38:	4290      	cmp	r0, r2
 800de3a:	bf38      	it	cc
 800de3c:	2304      	movcc	r3, #4
 800de3e:	f841 c003 	str.w	ip, [r1, r3]
 800de42:	f1bc 0f00 	cmp.w	ip, #0
 800de46:	d001      	beq.n	800de4c <__lshift+0xac>
 800de48:	f108 0602 	add.w	r6, r8, #2
 800de4c:	3e01      	subs	r6, #1
 800de4e:	4638      	mov	r0, r7
 800de50:	612e      	str	r6, [r5, #16]
 800de52:	4621      	mov	r1, r4
 800de54:	f7ff fd88 	bl	800d968 <_Bfree>
 800de58:	4628      	mov	r0, r5
 800de5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de5e:	f842 0f04 	str.w	r0, [r2, #4]!
 800de62:	3301      	adds	r3, #1
 800de64:	e7c1      	b.n	800ddea <__lshift+0x4a>
 800de66:	3904      	subs	r1, #4
 800de68:	f853 2b04 	ldr.w	r2, [r3], #4
 800de6c:	f841 2f04 	str.w	r2, [r1, #4]!
 800de70:	4298      	cmp	r0, r3
 800de72:	d8f9      	bhi.n	800de68 <__lshift+0xc8>
 800de74:	e7ea      	b.n	800de4c <__lshift+0xac>
 800de76:	bf00      	nop
 800de78:	0800f870 	.word	0x0800f870
 800de7c:	0800f8fc 	.word	0x0800f8fc

0800de80 <__mcmp>:
 800de80:	b530      	push	{r4, r5, lr}
 800de82:	6902      	ldr	r2, [r0, #16]
 800de84:	690c      	ldr	r4, [r1, #16]
 800de86:	1b12      	subs	r2, r2, r4
 800de88:	d10e      	bne.n	800dea8 <__mcmp+0x28>
 800de8a:	f100 0314 	add.w	r3, r0, #20
 800de8e:	3114      	adds	r1, #20
 800de90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800de94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800de98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800de9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dea0:	42a5      	cmp	r5, r4
 800dea2:	d003      	beq.n	800deac <__mcmp+0x2c>
 800dea4:	d305      	bcc.n	800deb2 <__mcmp+0x32>
 800dea6:	2201      	movs	r2, #1
 800dea8:	4610      	mov	r0, r2
 800deaa:	bd30      	pop	{r4, r5, pc}
 800deac:	4283      	cmp	r3, r0
 800deae:	d3f3      	bcc.n	800de98 <__mcmp+0x18>
 800deb0:	e7fa      	b.n	800dea8 <__mcmp+0x28>
 800deb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800deb6:	e7f7      	b.n	800dea8 <__mcmp+0x28>

0800deb8 <__mdiff>:
 800deb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800debc:	460c      	mov	r4, r1
 800debe:	4606      	mov	r6, r0
 800dec0:	4611      	mov	r1, r2
 800dec2:	4620      	mov	r0, r4
 800dec4:	4690      	mov	r8, r2
 800dec6:	f7ff ffdb 	bl	800de80 <__mcmp>
 800deca:	1e05      	subs	r5, r0, #0
 800decc:	d110      	bne.n	800def0 <__mdiff+0x38>
 800dece:	4629      	mov	r1, r5
 800ded0:	4630      	mov	r0, r6
 800ded2:	f7ff fd09 	bl	800d8e8 <_Balloc>
 800ded6:	b930      	cbnz	r0, 800dee6 <__mdiff+0x2e>
 800ded8:	4b3a      	ldr	r3, [pc, #232]	; (800dfc4 <__mdiff+0x10c>)
 800deda:	4602      	mov	r2, r0
 800dedc:	f240 2132 	movw	r1, #562	; 0x232
 800dee0:	4839      	ldr	r0, [pc, #228]	; (800dfc8 <__mdiff+0x110>)
 800dee2:	f000 fc7f 	bl	800e7e4 <__assert_func>
 800dee6:	2301      	movs	r3, #1
 800dee8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800deec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800def0:	bfa4      	itt	ge
 800def2:	4643      	movge	r3, r8
 800def4:	46a0      	movge	r8, r4
 800def6:	4630      	mov	r0, r6
 800def8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800defc:	bfa6      	itte	ge
 800defe:	461c      	movge	r4, r3
 800df00:	2500      	movge	r5, #0
 800df02:	2501      	movlt	r5, #1
 800df04:	f7ff fcf0 	bl	800d8e8 <_Balloc>
 800df08:	b920      	cbnz	r0, 800df14 <__mdiff+0x5c>
 800df0a:	4b2e      	ldr	r3, [pc, #184]	; (800dfc4 <__mdiff+0x10c>)
 800df0c:	4602      	mov	r2, r0
 800df0e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800df12:	e7e5      	b.n	800dee0 <__mdiff+0x28>
 800df14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800df18:	6926      	ldr	r6, [r4, #16]
 800df1a:	60c5      	str	r5, [r0, #12]
 800df1c:	f104 0914 	add.w	r9, r4, #20
 800df20:	f108 0514 	add.w	r5, r8, #20
 800df24:	f100 0e14 	add.w	lr, r0, #20
 800df28:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800df2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800df30:	f108 0210 	add.w	r2, r8, #16
 800df34:	46f2      	mov	sl, lr
 800df36:	2100      	movs	r1, #0
 800df38:	f859 3b04 	ldr.w	r3, [r9], #4
 800df3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800df40:	fa1f f883 	uxth.w	r8, r3
 800df44:	fa11 f18b 	uxtah	r1, r1, fp
 800df48:	0c1b      	lsrs	r3, r3, #16
 800df4a:	eba1 0808 	sub.w	r8, r1, r8
 800df4e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800df52:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800df56:	fa1f f888 	uxth.w	r8, r8
 800df5a:	1419      	asrs	r1, r3, #16
 800df5c:	454e      	cmp	r6, r9
 800df5e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800df62:	f84a 3b04 	str.w	r3, [sl], #4
 800df66:	d8e7      	bhi.n	800df38 <__mdiff+0x80>
 800df68:	1b33      	subs	r3, r6, r4
 800df6a:	3b15      	subs	r3, #21
 800df6c:	f023 0303 	bic.w	r3, r3, #3
 800df70:	3304      	adds	r3, #4
 800df72:	3415      	adds	r4, #21
 800df74:	42a6      	cmp	r6, r4
 800df76:	bf38      	it	cc
 800df78:	2304      	movcc	r3, #4
 800df7a:	441d      	add	r5, r3
 800df7c:	4473      	add	r3, lr
 800df7e:	469e      	mov	lr, r3
 800df80:	462e      	mov	r6, r5
 800df82:	4566      	cmp	r6, ip
 800df84:	d30e      	bcc.n	800dfa4 <__mdiff+0xec>
 800df86:	f10c 0203 	add.w	r2, ip, #3
 800df8a:	1b52      	subs	r2, r2, r5
 800df8c:	f022 0203 	bic.w	r2, r2, #3
 800df90:	3d03      	subs	r5, #3
 800df92:	45ac      	cmp	ip, r5
 800df94:	bf38      	it	cc
 800df96:	2200      	movcc	r2, #0
 800df98:	441a      	add	r2, r3
 800df9a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800df9e:	b17b      	cbz	r3, 800dfc0 <__mdiff+0x108>
 800dfa0:	6107      	str	r7, [r0, #16]
 800dfa2:	e7a3      	b.n	800deec <__mdiff+0x34>
 800dfa4:	f856 8b04 	ldr.w	r8, [r6], #4
 800dfa8:	fa11 f288 	uxtah	r2, r1, r8
 800dfac:	1414      	asrs	r4, r2, #16
 800dfae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dfb2:	b292      	uxth	r2, r2
 800dfb4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dfb8:	f84e 2b04 	str.w	r2, [lr], #4
 800dfbc:	1421      	asrs	r1, r4, #16
 800dfbe:	e7e0      	b.n	800df82 <__mdiff+0xca>
 800dfc0:	3f01      	subs	r7, #1
 800dfc2:	e7ea      	b.n	800df9a <__mdiff+0xe2>
 800dfc4:	0800f870 	.word	0x0800f870
 800dfc8:	0800f8fc 	.word	0x0800f8fc

0800dfcc <__ulp>:
 800dfcc:	b082      	sub	sp, #8
 800dfce:	ed8d 0b00 	vstr	d0, [sp]
 800dfd2:	9b01      	ldr	r3, [sp, #4]
 800dfd4:	4912      	ldr	r1, [pc, #72]	; (800e020 <__ulp+0x54>)
 800dfd6:	4019      	ands	r1, r3
 800dfd8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dfdc:	2900      	cmp	r1, #0
 800dfde:	dd05      	ble.n	800dfec <__ulp+0x20>
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	460b      	mov	r3, r1
 800dfe4:	ec43 2b10 	vmov	d0, r2, r3
 800dfe8:	b002      	add	sp, #8
 800dfea:	4770      	bx	lr
 800dfec:	4249      	negs	r1, r1
 800dfee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800dff2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800dff6:	f04f 0200 	mov.w	r2, #0
 800dffa:	f04f 0300 	mov.w	r3, #0
 800dffe:	da04      	bge.n	800e00a <__ulp+0x3e>
 800e000:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e004:	fa41 f300 	asr.w	r3, r1, r0
 800e008:	e7ec      	b.n	800dfe4 <__ulp+0x18>
 800e00a:	f1a0 0114 	sub.w	r1, r0, #20
 800e00e:	291e      	cmp	r1, #30
 800e010:	bfda      	itte	le
 800e012:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e016:	fa20 f101 	lsrle.w	r1, r0, r1
 800e01a:	2101      	movgt	r1, #1
 800e01c:	460a      	mov	r2, r1
 800e01e:	e7e1      	b.n	800dfe4 <__ulp+0x18>
 800e020:	7ff00000 	.word	0x7ff00000

0800e024 <__b2d>:
 800e024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e026:	6905      	ldr	r5, [r0, #16]
 800e028:	f100 0714 	add.w	r7, r0, #20
 800e02c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e030:	1f2e      	subs	r6, r5, #4
 800e032:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e036:	4620      	mov	r0, r4
 800e038:	f7ff fd48 	bl	800dacc <__hi0bits>
 800e03c:	f1c0 0320 	rsb	r3, r0, #32
 800e040:	280a      	cmp	r0, #10
 800e042:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e0c0 <__b2d+0x9c>
 800e046:	600b      	str	r3, [r1, #0]
 800e048:	dc14      	bgt.n	800e074 <__b2d+0x50>
 800e04a:	f1c0 0e0b 	rsb	lr, r0, #11
 800e04e:	fa24 f10e 	lsr.w	r1, r4, lr
 800e052:	42b7      	cmp	r7, r6
 800e054:	ea41 030c 	orr.w	r3, r1, ip
 800e058:	bf34      	ite	cc
 800e05a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e05e:	2100      	movcs	r1, #0
 800e060:	3015      	adds	r0, #21
 800e062:	fa04 f000 	lsl.w	r0, r4, r0
 800e066:	fa21 f10e 	lsr.w	r1, r1, lr
 800e06a:	ea40 0201 	orr.w	r2, r0, r1
 800e06e:	ec43 2b10 	vmov	d0, r2, r3
 800e072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e074:	42b7      	cmp	r7, r6
 800e076:	bf3a      	itte	cc
 800e078:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e07c:	f1a5 0608 	subcc.w	r6, r5, #8
 800e080:	2100      	movcs	r1, #0
 800e082:	380b      	subs	r0, #11
 800e084:	d017      	beq.n	800e0b6 <__b2d+0x92>
 800e086:	f1c0 0c20 	rsb	ip, r0, #32
 800e08a:	fa04 f500 	lsl.w	r5, r4, r0
 800e08e:	42be      	cmp	r6, r7
 800e090:	fa21 f40c 	lsr.w	r4, r1, ip
 800e094:	ea45 0504 	orr.w	r5, r5, r4
 800e098:	bf8c      	ite	hi
 800e09a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e09e:	2400      	movls	r4, #0
 800e0a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e0a4:	fa01 f000 	lsl.w	r0, r1, r0
 800e0a8:	fa24 f40c 	lsr.w	r4, r4, ip
 800e0ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e0b0:	ea40 0204 	orr.w	r2, r0, r4
 800e0b4:	e7db      	b.n	800e06e <__b2d+0x4a>
 800e0b6:	ea44 030c 	orr.w	r3, r4, ip
 800e0ba:	460a      	mov	r2, r1
 800e0bc:	e7d7      	b.n	800e06e <__b2d+0x4a>
 800e0be:	bf00      	nop
 800e0c0:	3ff00000 	.word	0x3ff00000

0800e0c4 <__d2b>:
 800e0c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e0c8:	4689      	mov	r9, r1
 800e0ca:	2101      	movs	r1, #1
 800e0cc:	ec57 6b10 	vmov	r6, r7, d0
 800e0d0:	4690      	mov	r8, r2
 800e0d2:	f7ff fc09 	bl	800d8e8 <_Balloc>
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	b930      	cbnz	r0, 800e0e8 <__d2b+0x24>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	4b25      	ldr	r3, [pc, #148]	; (800e174 <__d2b+0xb0>)
 800e0de:	4826      	ldr	r0, [pc, #152]	; (800e178 <__d2b+0xb4>)
 800e0e0:	f240 310a 	movw	r1, #778	; 0x30a
 800e0e4:	f000 fb7e 	bl	800e7e4 <__assert_func>
 800e0e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e0ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e0f0:	bb35      	cbnz	r5, 800e140 <__d2b+0x7c>
 800e0f2:	2e00      	cmp	r6, #0
 800e0f4:	9301      	str	r3, [sp, #4]
 800e0f6:	d028      	beq.n	800e14a <__d2b+0x86>
 800e0f8:	4668      	mov	r0, sp
 800e0fa:	9600      	str	r6, [sp, #0]
 800e0fc:	f7ff fd06 	bl	800db0c <__lo0bits>
 800e100:	9900      	ldr	r1, [sp, #0]
 800e102:	b300      	cbz	r0, 800e146 <__d2b+0x82>
 800e104:	9a01      	ldr	r2, [sp, #4]
 800e106:	f1c0 0320 	rsb	r3, r0, #32
 800e10a:	fa02 f303 	lsl.w	r3, r2, r3
 800e10e:	430b      	orrs	r3, r1
 800e110:	40c2      	lsrs	r2, r0
 800e112:	6163      	str	r3, [r4, #20]
 800e114:	9201      	str	r2, [sp, #4]
 800e116:	9b01      	ldr	r3, [sp, #4]
 800e118:	61a3      	str	r3, [r4, #24]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	bf14      	ite	ne
 800e11e:	2202      	movne	r2, #2
 800e120:	2201      	moveq	r2, #1
 800e122:	6122      	str	r2, [r4, #16]
 800e124:	b1d5      	cbz	r5, 800e15c <__d2b+0x98>
 800e126:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e12a:	4405      	add	r5, r0
 800e12c:	f8c9 5000 	str.w	r5, [r9]
 800e130:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e134:	f8c8 0000 	str.w	r0, [r8]
 800e138:	4620      	mov	r0, r4
 800e13a:	b003      	add	sp, #12
 800e13c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e140:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e144:	e7d5      	b.n	800e0f2 <__d2b+0x2e>
 800e146:	6161      	str	r1, [r4, #20]
 800e148:	e7e5      	b.n	800e116 <__d2b+0x52>
 800e14a:	a801      	add	r0, sp, #4
 800e14c:	f7ff fcde 	bl	800db0c <__lo0bits>
 800e150:	9b01      	ldr	r3, [sp, #4]
 800e152:	6163      	str	r3, [r4, #20]
 800e154:	2201      	movs	r2, #1
 800e156:	6122      	str	r2, [r4, #16]
 800e158:	3020      	adds	r0, #32
 800e15a:	e7e3      	b.n	800e124 <__d2b+0x60>
 800e15c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e160:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e164:	f8c9 0000 	str.w	r0, [r9]
 800e168:	6918      	ldr	r0, [r3, #16]
 800e16a:	f7ff fcaf 	bl	800dacc <__hi0bits>
 800e16e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e172:	e7df      	b.n	800e134 <__d2b+0x70>
 800e174:	0800f870 	.word	0x0800f870
 800e178:	0800f8fc 	.word	0x0800f8fc

0800e17c <__ratio>:
 800e17c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e180:	4688      	mov	r8, r1
 800e182:	4669      	mov	r1, sp
 800e184:	4681      	mov	r9, r0
 800e186:	f7ff ff4d 	bl	800e024 <__b2d>
 800e18a:	a901      	add	r1, sp, #4
 800e18c:	4640      	mov	r0, r8
 800e18e:	ec55 4b10 	vmov	r4, r5, d0
 800e192:	f7ff ff47 	bl	800e024 <__b2d>
 800e196:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e19a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e19e:	eba3 0c02 	sub.w	ip, r3, r2
 800e1a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e1a6:	1a9b      	subs	r3, r3, r2
 800e1a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e1ac:	ec51 0b10 	vmov	r0, r1, d0
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	bfd6      	itet	le
 800e1b4:	460a      	movle	r2, r1
 800e1b6:	462a      	movgt	r2, r5
 800e1b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e1bc:	468b      	mov	fp, r1
 800e1be:	462f      	mov	r7, r5
 800e1c0:	bfd4      	ite	le
 800e1c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e1c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	ee10 2a10 	vmov	r2, s0
 800e1d0:	465b      	mov	r3, fp
 800e1d2:	4639      	mov	r1, r7
 800e1d4:	f7f2 fb3a 	bl	800084c <__aeabi_ddiv>
 800e1d8:	ec41 0b10 	vmov	d0, r0, r1
 800e1dc:	b003      	add	sp, #12
 800e1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e1e2 <__copybits>:
 800e1e2:	3901      	subs	r1, #1
 800e1e4:	b570      	push	{r4, r5, r6, lr}
 800e1e6:	1149      	asrs	r1, r1, #5
 800e1e8:	6914      	ldr	r4, [r2, #16]
 800e1ea:	3101      	adds	r1, #1
 800e1ec:	f102 0314 	add.w	r3, r2, #20
 800e1f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e1f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e1f8:	1f05      	subs	r5, r0, #4
 800e1fa:	42a3      	cmp	r3, r4
 800e1fc:	d30c      	bcc.n	800e218 <__copybits+0x36>
 800e1fe:	1aa3      	subs	r3, r4, r2
 800e200:	3b11      	subs	r3, #17
 800e202:	f023 0303 	bic.w	r3, r3, #3
 800e206:	3211      	adds	r2, #17
 800e208:	42a2      	cmp	r2, r4
 800e20a:	bf88      	it	hi
 800e20c:	2300      	movhi	r3, #0
 800e20e:	4418      	add	r0, r3
 800e210:	2300      	movs	r3, #0
 800e212:	4288      	cmp	r0, r1
 800e214:	d305      	bcc.n	800e222 <__copybits+0x40>
 800e216:	bd70      	pop	{r4, r5, r6, pc}
 800e218:	f853 6b04 	ldr.w	r6, [r3], #4
 800e21c:	f845 6f04 	str.w	r6, [r5, #4]!
 800e220:	e7eb      	b.n	800e1fa <__copybits+0x18>
 800e222:	f840 3b04 	str.w	r3, [r0], #4
 800e226:	e7f4      	b.n	800e212 <__copybits+0x30>

0800e228 <__any_on>:
 800e228:	f100 0214 	add.w	r2, r0, #20
 800e22c:	6900      	ldr	r0, [r0, #16]
 800e22e:	114b      	asrs	r3, r1, #5
 800e230:	4298      	cmp	r0, r3
 800e232:	b510      	push	{r4, lr}
 800e234:	db11      	blt.n	800e25a <__any_on+0x32>
 800e236:	dd0a      	ble.n	800e24e <__any_on+0x26>
 800e238:	f011 011f 	ands.w	r1, r1, #31
 800e23c:	d007      	beq.n	800e24e <__any_on+0x26>
 800e23e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e242:	fa24 f001 	lsr.w	r0, r4, r1
 800e246:	fa00 f101 	lsl.w	r1, r0, r1
 800e24a:	428c      	cmp	r4, r1
 800e24c:	d10b      	bne.n	800e266 <__any_on+0x3e>
 800e24e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e252:	4293      	cmp	r3, r2
 800e254:	d803      	bhi.n	800e25e <__any_on+0x36>
 800e256:	2000      	movs	r0, #0
 800e258:	bd10      	pop	{r4, pc}
 800e25a:	4603      	mov	r3, r0
 800e25c:	e7f7      	b.n	800e24e <__any_on+0x26>
 800e25e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e262:	2900      	cmp	r1, #0
 800e264:	d0f5      	beq.n	800e252 <__any_on+0x2a>
 800e266:	2001      	movs	r0, #1
 800e268:	e7f6      	b.n	800e258 <__any_on+0x30>

0800e26a <_calloc_r>:
 800e26a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e26c:	fba1 2402 	umull	r2, r4, r1, r2
 800e270:	b94c      	cbnz	r4, 800e286 <_calloc_r+0x1c>
 800e272:	4611      	mov	r1, r2
 800e274:	9201      	str	r2, [sp, #4]
 800e276:	f000 f87b 	bl	800e370 <_malloc_r>
 800e27a:	9a01      	ldr	r2, [sp, #4]
 800e27c:	4605      	mov	r5, r0
 800e27e:	b930      	cbnz	r0, 800e28e <_calloc_r+0x24>
 800e280:	4628      	mov	r0, r5
 800e282:	b003      	add	sp, #12
 800e284:	bd30      	pop	{r4, r5, pc}
 800e286:	220c      	movs	r2, #12
 800e288:	6002      	str	r2, [r0, #0]
 800e28a:	2500      	movs	r5, #0
 800e28c:	e7f8      	b.n	800e280 <_calloc_r+0x16>
 800e28e:	4621      	mov	r1, r4
 800e290:	f7fc fb82 	bl	800a998 <memset>
 800e294:	e7f4      	b.n	800e280 <_calloc_r+0x16>
	...

0800e298 <_free_r>:
 800e298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e29a:	2900      	cmp	r1, #0
 800e29c:	d044      	beq.n	800e328 <_free_r+0x90>
 800e29e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2a2:	9001      	str	r0, [sp, #4]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	f1a1 0404 	sub.w	r4, r1, #4
 800e2aa:	bfb8      	it	lt
 800e2ac:	18e4      	addlt	r4, r4, r3
 800e2ae:	f000 fae3 	bl	800e878 <__malloc_lock>
 800e2b2:	4a1e      	ldr	r2, [pc, #120]	; (800e32c <_free_r+0x94>)
 800e2b4:	9801      	ldr	r0, [sp, #4]
 800e2b6:	6813      	ldr	r3, [r2, #0]
 800e2b8:	b933      	cbnz	r3, 800e2c8 <_free_r+0x30>
 800e2ba:	6063      	str	r3, [r4, #4]
 800e2bc:	6014      	str	r4, [r2, #0]
 800e2be:	b003      	add	sp, #12
 800e2c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e2c4:	f000 bade 	b.w	800e884 <__malloc_unlock>
 800e2c8:	42a3      	cmp	r3, r4
 800e2ca:	d908      	bls.n	800e2de <_free_r+0x46>
 800e2cc:	6825      	ldr	r5, [r4, #0]
 800e2ce:	1961      	adds	r1, r4, r5
 800e2d0:	428b      	cmp	r3, r1
 800e2d2:	bf01      	itttt	eq
 800e2d4:	6819      	ldreq	r1, [r3, #0]
 800e2d6:	685b      	ldreq	r3, [r3, #4]
 800e2d8:	1949      	addeq	r1, r1, r5
 800e2da:	6021      	streq	r1, [r4, #0]
 800e2dc:	e7ed      	b.n	800e2ba <_free_r+0x22>
 800e2de:	461a      	mov	r2, r3
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	b10b      	cbz	r3, 800e2e8 <_free_r+0x50>
 800e2e4:	42a3      	cmp	r3, r4
 800e2e6:	d9fa      	bls.n	800e2de <_free_r+0x46>
 800e2e8:	6811      	ldr	r1, [r2, #0]
 800e2ea:	1855      	adds	r5, r2, r1
 800e2ec:	42a5      	cmp	r5, r4
 800e2ee:	d10b      	bne.n	800e308 <_free_r+0x70>
 800e2f0:	6824      	ldr	r4, [r4, #0]
 800e2f2:	4421      	add	r1, r4
 800e2f4:	1854      	adds	r4, r2, r1
 800e2f6:	42a3      	cmp	r3, r4
 800e2f8:	6011      	str	r1, [r2, #0]
 800e2fa:	d1e0      	bne.n	800e2be <_free_r+0x26>
 800e2fc:	681c      	ldr	r4, [r3, #0]
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	6053      	str	r3, [r2, #4]
 800e302:	4421      	add	r1, r4
 800e304:	6011      	str	r1, [r2, #0]
 800e306:	e7da      	b.n	800e2be <_free_r+0x26>
 800e308:	d902      	bls.n	800e310 <_free_r+0x78>
 800e30a:	230c      	movs	r3, #12
 800e30c:	6003      	str	r3, [r0, #0]
 800e30e:	e7d6      	b.n	800e2be <_free_r+0x26>
 800e310:	6825      	ldr	r5, [r4, #0]
 800e312:	1961      	adds	r1, r4, r5
 800e314:	428b      	cmp	r3, r1
 800e316:	bf04      	itt	eq
 800e318:	6819      	ldreq	r1, [r3, #0]
 800e31a:	685b      	ldreq	r3, [r3, #4]
 800e31c:	6063      	str	r3, [r4, #4]
 800e31e:	bf04      	itt	eq
 800e320:	1949      	addeq	r1, r1, r5
 800e322:	6021      	streq	r1, [r4, #0]
 800e324:	6054      	str	r4, [r2, #4]
 800e326:	e7ca      	b.n	800e2be <_free_r+0x26>
 800e328:	b003      	add	sp, #12
 800e32a:	bd30      	pop	{r4, r5, pc}
 800e32c:	20000f90 	.word	0x20000f90

0800e330 <sbrk_aligned>:
 800e330:	b570      	push	{r4, r5, r6, lr}
 800e332:	4e0e      	ldr	r6, [pc, #56]	; (800e36c <sbrk_aligned+0x3c>)
 800e334:	460c      	mov	r4, r1
 800e336:	6831      	ldr	r1, [r6, #0]
 800e338:	4605      	mov	r5, r0
 800e33a:	b911      	cbnz	r1, 800e342 <sbrk_aligned+0x12>
 800e33c:	f000 fa20 	bl	800e780 <_sbrk_r>
 800e340:	6030      	str	r0, [r6, #0]
 800e342:	4621      	mov	r1, r4
 800e344:	4628      	mov	r0, r5
 800e346:	f000 fa1b 	bl	800e780 <_sbrk_r>
 800e34a:	1c43      	adds	r3, r0, #1
 800e34c:	d00a      	beq.n	800e364 <sbrk_aligned+0x34>
 800e34e:	1cc4      	adds	r4, r0, #3
 800e350:	f024 0403 	bic.w	r4, r4, #3
 800e354:	42a0      	cmp	r0, r4
 800e356:	d007      	beq.n	800e368 <sbrk_aligned+0x38>
 800e358:	1a21      	subs	r1, r4, r0
 800e35a:	4628      	mov	r0, r5
 800e35c:	f000 fa10 	bl	800e780 <_sbrk_r>
 800e360:	3001      	adds	r0, #1
 800e362:	d101      	bne.n	800e368 <sbrk_aligned+0x38>
 800e364:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e368:	4620      	mov	r0, r4
 800e36a:	bd70      	pop	{r4, r5, r6, pc}
 800e36c:	20000f94 	.word	0x20000f94

0800e370 <_malloc_r>:
 800e370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e374:	1ccd      	adds	r5, r1, #3
 800e376:	f025 0503 	bic.w	r5, r5, #3
 800e37a:	3508      	adds	r5, #8
 800e37c:	2d0c      	cmp	r5, #12
 800e37e:	bf38      	it	cc
 800e380:	250c      	movcc	r5, #12
 800e382:	2d00      	cmp	r5, #0
 800e384:	4607      	mov	r7, r0
 800e386:	db01      	blt.n	800e38c <_malloc_r+0x1c>
 800e388:	42a9      	cmp	r1, r5
 800e38a:	d905      	bls.n	800e398 <_malloc_r+0x28>
 800e38c:	230c      	movs	r3, #12
 800e38e:	603b      	str	r3, [r7, #0]
 800e390:	2600      	movs	r6, #0
 800e392:	4630      	mov	r0, r6
 800e394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e398:	4e2e      	ldr	r6, [pc, #184]	; (800e454 <_malloc_r+0xe4>)
 800e39a:	f000 fa6d 	bl	800e878 <__malloc_lock>
 800e39e:	6833      	ldr	r3, [r6, #0]
 800e3a0:	461c      	mov	r4, r3
 800e3a2:	bb34      	cbnz	r4, 800e3f2 <_malloc_r+0x82>
 800e3a4:	4629      	mov	r1, r5
 800e3a6:	4638      	mov	r0, r7
 800e3a8:	f7ff ffc2 	bl	800e330 <sbrk_aligned>
 800e3ac:	1c43      	adds	r3, r0, #1
 800e3ae:	4604      	mov	r4, r0
 800e3b0:	d14d      	bne.n	800e44e <_malloc_r+0xde>
 800e3b2:	6834      	ldr	r4, [r6, #0]
 800e3b4:	4626      	mov	r6, r4
 800e3b6:	2e00      	cmp	r6, #0
 800e3b8:	d140      	bne.n	800e43c <_malloc_r+0xcc>
 800e3ba:	6823      	ldr	r3, [r4, #0]
 800e3bc:	4631      	mov	r1, r6
 800e3be:	4638      	mov	r0, r7
 800e3c0:	eb04 0803 	add.w	r8, r4, r3
 800e3c4:	f000 f9dc 	bl	800e780 <_sbrk_r>
 800e3c8:	4580      	cmp	r8, r0
 800e3ca:	d13a      	bne.n	800e442 <_malloc_r+0xd2>
 800e3cc:	6821      	ldr	r1, [r4, #0]
 800e3ce:	3503      	adds	r5, #3
 800e3d0:	1a6d      	subs	r5, r5, r1
 800e3d2:	f025 0503 	bic.w	r5, r5, #3
 800e3d6:	3508      	adds	r5, #8
 800e3d8:	2d0c      	cmp	r5, #12
 800e3da:	bf38      	it	cc
 800e3dc:	250c      	movcc	r5, #12
 800e3de:	4629      	mov	r1, r5
 800e3e0:	4638      	mov	r0, r7
 800e3e2:	f7ff ffa5 	bl	800e330 <sbrk_aligned>
 800e3e6:	3001      	adds	r0, #1
 800e3e8:	d02b      	beq.n	800e442 <_malloc_r+0xd2>
 800e3ea:	6823      	ldr	r3, [r4, #0]
 800e3ec:	442b      	add	r3, r5
 800e3ee:	6023      	str	r3, [r4, #0]
 800e3f0:	e00e      	b.n	800e410 <_malloc_r+0xa0>
 800e3f2:	6822      	ldr	r2, [r4, #0]
 800e3f4:	1b52      	subs	r2, r2, r5
 800e3f6:	d41e      	bmi.n	800e436 <_malloc_r+0xc6>
 800e3f8:	2a0b      	cmp	r2, #11
 800e3fa:	d916      	bls.n	800e42a <_malloc_r+0xba>
 800e3fc:	1961      	adds	r1, r4, r5
 800e3fe:	42a3      	cmp	r3, r4
 800e400:	6025      	str	r5, [r4, #0]
 800e402:	bf18      	it	ne
 800e404:	6059      	strne	r1, [r3, #4]
 800e406:	6863      	ldr	r3, [r4, #4]
 800e408:	bf08      	it	eq
 800e40a:	6031      	streq	r1, [r6, #0]
 800e40c:	5162      	str	r2, [r4, r5]
 800e40e:	604b      	str	r3, [r1, #4]
 800e410:	4638      	mov	r0, r7
 800e412:	f104 060b 	add.w	r6, r4, #11
 800e416:	f000 fa35 	bl	800e884 <__malloc_unlock>
 800e41a:	f026 0607 	bic.w	r6, r6, #7
 800e41e:	1d23      	adds	r3, r4, #4
 800e420:	1af2      	subs	r2, r6, r3
 800e422:	d0b6      	beq.n	800e392 <_malloc_r+0x22>
 800e424:	1b9b      	subs	r3, r3, r6
 800e426:	50a3      	str	r3, [r4, r2]
 800e428:	e7b3      	b.n	800e392 <_malloc_r+0x22>
 800e42a:	6862      	ldr	r2, [r4, #4]
 800e42c:	42a3      	cmp	r3, r4
 800e42e:	bf0c      	ite	eq
 800e430:	6032      	streq	r2, [r6, #0]
 800e432:	605a      	strne	r2, [r3, #4]
 800e434:	e7ec      	b.n	800e410 <_malloc_r+0xa0>
 800e436:	4623      	mov	r3, r4
 800e438:	6864      	ldr	r4, [r4, #4]
 800e43a:	e7b2      	b.n	800e3a2 <_malloc_r+0x32>
 800e43c:	4634      	mov	r4, r6
 800e43e:	6876      	ldr	r6, [r6, #4]
 800e440:	e7b9      	b.n	800e3b6 <_malloc_r+0x46>
 800e442:	230c      	movs	r3, #12
 800e444:	603b      	str	r3, [r7, #0]
 800e446:	4638      	mov	r0, r7
 800e448:	f000 fa1c 	bl	800e884 <__malloc_unlock>
 800e44c:	e7a1      	b.n	800e392 <_malloc_r+0x22>
 800e44e:	6025      	str	r5, [r4, #0]
 800e450:	e7de      	b.n	800e410 <_malloc_r+0xa0>
 800e452:	bf00      	nop
 800e454:	20000f90 	.word	0x20000f90

0800e458 <_realloc_r>:
 800e458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e45c:	4680      	mov	r8, r0
 800e45e:	4614      	mov	r4, r2
 800e460:	460e      	mov	r6, r1
 800e462:	b921      	cbnz	r1, 800e46e <_realloc_r+0x16>
 800e464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e468:	4611      	mov	r1, r2
 800e46a:	f7ff bf81 	b.w	800e370 <_malloc_r>
 800e46e:	b92a      	cbnz	r2, 800e47c <_realloc_r+0x24>
 800e470:	f7ff ff12 	bl	800e298 <_free_r>
 800e474:	4625      	mov	r5, r4
 800e476:	4628      	mov	r0, r5
 800e478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e47c:	f000 fa08 	bl	800e890 <_malloc_usable_size_r>
 800e480:	4284      	cmp	r4, r0
 800e482:	4607      	mov	r7, r0
 800e484:	d802      	bhi.n	800e48c <_realloc_r+0x34>
 800e486:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e48a:	d812      	bhi.n	800e4b2 <_realloc_r+0x5a>
 800e48c:	4621      	mov	r1, r4
 800e48e:	4640      	mov	r0, r8
 800e490:	f7ff ff6e 	bl	800e370 <_malloc_r>
 800e494:	4605      	mov	r5, r0
 800e496:	2800      	cmp	r0, #0
 800e498:	d0ed      	beq.n	800e476 <_realloc_r+0x1e>
 800e49a:	42bc      	cmp	r4, r7
 800e49c:	4622      	mov	r2, r4
 800e49e:	4631      	mov	r1, r6
 800e4a0:	bf28      	it	cs
 800e4a2:	463a      	movcs	r2, r7
 800e4a4:	f7fc fa6a 	bl	800a97c <memcpy>
 800e4a8:	4631      	mov	r1, r6
 800e4aa:	4640      	mov	r0, r8
 800e4ac:	f7ff fef4 	bl	800e298 <_free_r>
 800e4b0:	e7e1      	b.n	800e476 <_realloc_r+0x1e>
 800e4b2:	4635      	mov	r5, r6
 800e4b4:	e7df      	b.n	800e476 <_realloc_r+0x1e>

0800e4b6 <__ssputs_r>:
 800e4b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4ba:	688e      	ldr	r6, [r1, #8]
 800e4bc:	429e      	cmp	r6, r3
 800e4be:	4682      	mov	sl, r0
 800e4c0:	460c      	mov	r4, r1
 800e4c2:	4690      	mov	r8, r2
 800e4c4:	461f      	mov	r7, r3
 800e4c6:	d838      	bhi.n	800e53a <__ssputs_r+0x84>
 800e4c8:	898a      	ldrh	r2, [r1, #12]
 800e4ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e4ce:	d032      	beq.n	800e536 <__ssputs_r+0x80>
 800e4d0:	6825      	ldr	r5, [r4, #0]
 800e4d2:	6909      	ldr	r1, [r1, #16]
 800e4d4:	eba5 0901 	sub.w	r9, r5, r1
 800e4d8:	6965      	ldr	r5, [r4, #20]
 800e4da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e4de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	444b      	add	r3, r9
 800e4e6:	106d      	asrs	r5, r5, #1
 800e4e8:	429d      	cmp	r5, r3
 800e4ea:	bf38      	it	cc
 800e4ec:	461d      	movcc	r5, r3
 800e4ee:	0553      	lsls	r3, r2, #21
 800e4f0:	d531      	bpl.n	800e556 <__ssputs_r+0xa0>
 800e4f2:	4629      	mov	r1, r5
 800e4f4:	f7ff ff3c 	bl	800e370 <_malloc_r>
 800e4f8:	4606      	mov	r6, r0
 800e4fa:	b950      	cbnz	r0, 800e512 <__ssputs_r+0x5c>
 800e4fc:	230c      	movs	r3, #12
 800e4fe:	f8ca 3000 	str.w	r3, [sl]
 800e502:	89a3      	ldrh	r3, [r4, #12]
 800e504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e508:	81a3      	strh	r3, [r4, #12]
 800e50a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e50e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e512:	6921      	ldr	r1, [r4, #16]
 800e514:	464a      	mov	r2, r9
 800e516:	f7fc fa31 	bl	800a97c <memcpy>
 800e51a:	89a3      	ldrh	r3, [r4, #12]
 800e51c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e524:	81a3      	strh	r3, [r4, #12]
 800e526:	6126      	str	r6, [r4, #16]
 800e528:	6165      	str	r5, [r4, #20]
 800e52a:	444e      	add	r6, r9
 800e52c:	eba5 0509 	sub.w	r5, r5, r9
 800e530:	6026      	str	r6, [r4, #0]
 800e532:	60a5      	str	r5, [r4, #8]
 800e534:	463e      	mov	r6, r7
 800e536:	42be      	cmp	r6, r7
 800e538:	d900      	bls.n	800e53c <__ssputs_r+0x86>
 800e53a:	463e      	mov	r6, r7
 800e53c:	6820      	ldr	r0, [r4, #0]
 800e53e:	4632      	mov	r2, r6
 800e540:	4641      	mov	r1, r8
 800e542:	f000 f97f 	bl	800e844 <memmove>
 800e546:	68a3      	ldr	r3, [r4, #8]
 800e548:	1b9b      	subs	r3, r3, r6
 800e54a:	60a3      	str	r3, [r4, #8]
 800e54c:	6823      	ldr	r3, [r4, #0]
 800e54e:	4433      	add	r3, r6
 800e550:	6023      	str	r3, [r4, #0]
 800e552:	2000      	movs	r0, #0
 800e554:	e7db      	b.n	800e50e <__ssputs_r+0x58>
 800e556:	462a      	mov	r2, r5
 800e558:	f7ff ff7e 	bl	800e458 <_realloc_r>
 800e55c:	4606      	mov	r6, r0
 800e55e:	2800      	cmp	r0, #0
 800e560:	d1e1      	bne.n	800e526 <__ssputs_r+0x70>
 800e562:	6921      	ldr	r1, [r4, #16]
 800e564:	4650      	mov	r0, sl
 800e566:	f7ff fe97 	bl	800e298 <_free_r>
 800e56a:	e7c7      	b.n	800e4fc <__ssputs_r+0x46>

0800e56c <_svfiprintf_r>:
 800e56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e570:	4698      	mov	r8, r3
 800e572:	898b      	ldrh	r3, [r1, #12]
 800e574:	061b      	lsls	r3, r3, #24
 800e576:	b09d      	sub	sp, #116	; 0x74
 800e578:	4607      	mov	r7, r0
 800e57a:	460d      	mov	r5, r1
 800e57c:	4614      	mov	r4, r2
 800e57e:	d50e      	bpl.n	800e59e <_svfiprintf_r+0x32>
 800e580:	690b      	ldr	r3, [r1, #16]
 800e582:	b963      	cbnz	r3, 800e59e <_svfiprintf_r+0x32>
 800e584:	2140      	movs	r1, #64	; 0x40
 800e586:	f7ff fef3 	bl	800e370 <_malloc_r>
 800e58a:	6028      	str	r0, [r5, #0]
 800e58c:	6128      	str	r0, [r5, #16]
 800e58e:	b920      	cbnz	r0, 800e59a <_svfiprintf_r+0x2e>
 800e590:	230c      	movs	r3, #12
 800e592:	603b      	str	r3, [r7, #0]
 800e594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e598:	e0d1      	b.n	800e73e <_svfiprintf_r+0x1d2>
 800e59a:	2340      	movs	r3, #64	; 0x40
 800e59c:	616b      	str	r3, [r5, #20]
 800e59e:	2300      	movs	r3, #0
 800e5a0:	9309      	str	r3, [sp, #36]	; 0x24
 800e5a2:	2320      	movs	r3, #32
 800e5a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e5a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5ac:	2330      	movs	r3, #48	; 0x30
 800e5ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e758 <_svfiprintf_r+0x1ec>
 800e5b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e5b6:	f04f 0901 	mov.w	r9, #1
 800e5ba:	4623      	mov	r3, r4
 800e5bc:	469a      	mov	sl, r3
 800e5be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5c2:	b10a      	cbz	r2, 800e5c8 <_svfiprintf_r+0x5c>
 800e5c4:	2a25      	cmp	r2, #37	; 0x25
 800e5c6:	d1f9      	bne.n	800e5bc <_svfiprintf_r+0x50>
 800e5c8:	ebba 0b04 	subs.w	fp, sl, r4
 800e5cc:	d00b      	beq.n	800e5e6 <_svfiprintf_r+0x7a>
 800e5ce:	465b      	mov	r3, fp
 800e5d0:	4622      	mov	r2, r4
 800e5d2:	4629      	mov	r1, r5
 800e5d4:	4638      	mov	r0, r7
 800e5d6:	f7ff ff6e 	bl	800e4b6 <__ssputs_r>
 800e5da:	3001      	adds	r0, #1
 800e5dc:	f000 80aa 	beq.w	800e734 <_svfiprintf_r+0x1c8>
 800e5e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5e2:	445a      	add	r2, fp
 800e5e4:	9209      	str	r2, [sp, #36]	; 0x24
 800e5e6:	f89a 3000 	ldrb.w	r3, [sl]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	f000 80a2 	beq.w	800e734 <_svfiprintf_r+0x1c8>
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e5f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5fa:	f10a 0a01 	add.w	sl, sl, #1
 800e5fe:	9304      	str	r3, [sp, #16]
 800e600:	9307      	str	r3, [sp, #28]
 800e602:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e606:	931a      	str	r3, [sp, #104]	; 0x68
 800e608:	4654      	mov	r4, sl
 800e60a:	2205      	movs	r2, #5
 800e60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e610:	4851      	ldr	r0, [pc, #324]	; (800e758 <_svfiprintf_r+0x1ec>)
 800e612:	f7f1 fde5 	bl	80001e0 <memchr>
 800e616:	9a04      	ldr	r2, [sp, #16]
 800e618:	b9d8      	cbnz	r0, 800e652 <_svfiprintf_r+0xe6>
 800e61a:	06d0      	lsls	r0, r2, #27
 800e61c:	bf44      	itt	mi
 800e61e:	2320      	movmi	r3, #32
 800e620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e624:	0711      	lsls	r1, r2, #28
 800e626:	bf44      	itt	mi
 800e628:	232b      	movmi	r3, #43	; 0x2b
 800e62a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e62e:	f89a 3000 	ldrb.w	r3, [sl]
 800e632:	2b2a      	cmp	r3, #42	; 0x2a
 800e634:	d015      	beq.n	800e662 <_svfiprintf_r+0xf6>
 800e636:	9a07      	ldr	r2, [sp, #28]
 800e638:	4654      	mov	r4, sl
 800e63a:	2000      	movs	r0, #0
 800e63c:	f04f 0c0a 	mov.w	ip, #10
 800e640:	4621      	mov	r1, r4
 800e642:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e646:	3b30      	subs	r3, #48	; 0x30
 800e648:	2b09      	cmp	r3, #9
 800e64a:	d94e      	bls.n	800e6ea <_svfiprintf_r+0x17e>
 800e64c:	b1b0      	cbz	r0, 800e67c <_svfiprintf_r+0x110>
 800e64e:	9207      	str	r2, [sp, #28]
 800e650:	e014      	b.n	800e67c <_svfiprintf_r+0x110>
 800e652:	eba0 0308 	sub.w	r3, r0, r8
 800e656:	fa09 f303 	lsl.w	r3, r9, r3
 800e65a:	4313      	orrs	r3, r2
 800e65c:	9304      	str	r3, [sp, #16]
 800e65e:	46a2      	mov	sl, r4
 800e660:	e7d2      	b.n	800e608 <_svfiprintf_r+0x9c>
 800e662:	9b03      	ldr	r3, [sp, #12]
 800e664:	1d19      	adds	r1, r3, #4
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	9103      	str	r1, [sp, #12]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	bfbb      	ittet	lt
 800e66e:	425b      	neglt	r3, r3
 800e670:	f042 0202 	orrlt.w	r2, r2, #2
 800e674:	9307      	strge	r3, [sp, #28]
 800e676:	9307      	strlt	r3, [sp, #28]
 800e678:	bfb8      	it	lt
 800e67a:	9204      	strlt	r2, [sp, #16]
 800e67c:	7823      	ldrb	r3, [r4, #0]
 800e67e:	2b2e      	cmp	r3, #46	; 0x2e
 800e680:	d10c      	bne.n	800e69c <_svfiprintf_r+0x130>
 800e682:	7863      	ldrb	r3, [r4, #1]
 800e684:	2b2a      	cmp	r3, #42	; 0x2a
 800e686:	d135      	bne.n	800e6f4 <_svfiprintf_r+0x188>
 800e688:	9b03      	ldr	r3, [sp, #12]
 800e68a:	1d1a      	adds	r2, r3, #4
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	9203      	str	r2, [sp, #12]
 800e690:	2b00      	cmp	r3, #0
 800e692:	bfb8      	it	lt
 800e694:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e698:	3402      	adds	r4, #2
 800e69a:	9305      	str	r3, [sp, #20]
 800e69c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e768 <_svfiprintf_r+0x1fc>
 800e6a0:	7821      	ldrb	r1, [r4, #0]
 800e6a2:	2203      	movs	r2, #3
 800e6a4:	4650      	mov	r0, sl
 800e6a6:	f7f1 fd9b 	bl	80001e0 <memchr>
 800e6aa:	b140      	cbz	r0, 800e6be <_svfiprintf_r+0x152>
 800e6ac:	2340      	movs	r3, #64	; 0x40
 800e6ae:	eba0 000a 	sub.w	r0, r0, sl
 800e6b2:	fa03 f000 	lsl.w	r0, r3, r0
 800e6b6:	9b04      	ldr	r3, [sp, #16]
 800e6b8:	4303      	orrs	r3, r0
 800e6ba:	3401      	adds	r4, #1
 800e6bc:	9304      	str	r3, [sp, #16]
 800e6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6c2:	4826      	ldr	r0, [pc, #152]	; (800e75c <_svfiprintf_r+0x1f0>)
 800e6c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e6c8:	2206      	movs	r2, #6
 800e6ca:	f7f1 fd89 	bl	80001e0 <memchr>
 800e6ce:	2800      	cmp	r0, #0
 800e6d0:	d038      	beq.n	800e744 <_svfiprintf_r+0x1d8>
 800e6d2:	4b23      	ldr	r3, [pc, #140]	; (800e760 <_svfiprintf_r+0x1f4>)
 800e6d4:	bb1b      	cbnz	r3, 800e71e <_svfiprintf_r+0x1b2>
 800e6d6:	9b03      	ldr	r3, [sp, #12]
 800e6d8:	3307      	adds	r3, #7
 800e6da:	f023 0307 	bic.w	r3, r3, #7
 800e6de:	3308      	adds	r3, #8
 800e6e0:	9303      	str	r3, [sp, #12]
 800e6e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6e4:	4433      	add	r3, r6
 800e6e6:	9309      	str	r3, [sp, #36]	; 0x24
 800e6e8:	e767      	b.n	800e5ba <_svfiprintf_r+0x4e>
 800e6ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6ee:	460c      	mov	r4, r1
 800e6f0:	2001      	movs	r0, #1
 800e6f2:	e7a5      	b.n	800e640 <_svfiprintf_r+0xd4>
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	3401      	adds	r4, #1
 800e6f8:	9305      	str	r3, [sp, #20]
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	f04f 0c0a 	mov.w	ip, #10
 800e700:	4620      	mov	r0, r4
 800e702:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e706:	3a30      	subs	r2, #48	; 0x30
 800e708:	2a09      	cmp	r2, #9
 800e70a:	d903      	bls.n	800e714 <_svfiprintf_r+0x1a8>
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d0c5      	beq.n	800e69c <_svfiprintf_r+0x130>
 800e710:	9105      	str	r1, [sp, #20]
 800e712:	e7c3      	b.n	800e69c <_svfiprintf_r+0x130>
 800e714:	fb0c 2101 	mla	r1, ip, r1, r2
 800e718:	4604      	mov	r4, r0
 800e71a:	2301      	movs	r3, #1
 800e71c:	e7f0      	b.n	800e700 <_svfiprintf_r+0x194>
 800e71e:	ab03      	add	r3, sp, #12
 800e720:	9300      	str	r3, [sp, #0]
 800e722:	462a      	mov	r2, r5
 800e724:	4b0f      	ldr	r3, [pc, #60]	; (800e764 <_svfiprintf_r+0x1f8>)
 800e726:	a904      	add	r1, sp, #16
 800e728:	4638      	mov	r0, r7
 800e72a:	f7fc f9dd 	bl	800aae8 <_printf_float>
 800e72e:	1c42      	adds	r2, r0, #1
 800e730:	4606      	mov	r6, r0
 800e732:	d1d6      	bne.n	800e6e2 <_svfiprintf_r+0x176>
 800e734:	89ab      	ldrh	r3, [r5, #12]
 800e736:	065b      	lsls	r3, r3, #25
 800e738:	f53f af2c 	bmi.w	800e594 <_svfiprintf_r+0x28>
 800e73c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e73e:	b01d      	add	sp, #116	; 0x74
 800e740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e744:	ab03      	add	r3, sp, #12
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	462a      	mov	r2, r5
 800e74a:	4b06      	ldr	r3, [pc, #24]	; (800e764 <_svfiprintf_r+0x1f8>)
 800e74c:	a904      	add	r1, sp, #16
 800e74e:	4638      	mov	r0, r7
 800e750:	f7fc fc6e 	bl	800b030 <_printf_i>
 800e754:	e7eb      	b.n	800e72e <_svfiprintf_r+0x1c2>
 800e756:	bf00      	nop
 800e758:	0800fa54 	.word	0x0800fa54
 800e75c:	0800fa5e 	.word	0x0800fa5e
 800e760:	0800aae9 	.word	0x0800aae9
 800e764:	0800e4b7 	.word	0x0800e4b7
 800e768:	0800fa5a 	.word	0x0800fa5a
 800e76c:	00000000 	.word	0x00000000

0800e770 <nan>:
 800e770:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e778 <nan+0x8>
 800e774:	4770      	bx	lr
 800e776:	bf00      	nop
 800e778:	00000000 	.word	0x00000000
 800e77c:	7ff80000 	.word	0x7ff80000

0800e780 <_sbrk_r>:
 800e780:	b538      	push	{r3, r4, r5, lr}
 800e782:	4d06      	ldr	r5, [pc, #24]	; (800e79c <_sbrk_r+0x1c>)
 800e784:	2300      	movs	r3, #0
 800e786:	4604      	mov	r4, r0
 800e788:	4608      	mov	r0, r1
 800e78a:	602b      	str	r3, [r5, #0]
 800e78c:	f7f6 ffda 	bl	8005744 <_sbrk>
 800e790:	1c43      	adds	r3, r0, #1
 800e792:	d102      	bne.n	800e79a <_sbrk_r+0x1a>
 800e794:	682b      	ldr	r3, [r5, #0]
 800e796:	b103      	cbz	r3, 800e79a <_sbrk_r+0x1a>
 800e798:	6023      	str	r3, [r4, #0]
 800e79a:	bd38      	pop	{r3, r4, r5, pc}
 800e79c:	20000f98 	.word	0x20000f98

0800e7a0 <strncmp>:
 800e7a0:	b510      	push	{r4, lr}
 800e7a2:	b17a      	cbz	r2, 800e7c4 <strncmp+0x24>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	3901      	subs	r1, #1
 800e7a8:	1884      	adds	r4, r0, r2
 800e7aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e7ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e7b2:	4290      	cmp	r0, r2
 800e7b4:	d101      	bne.n	800e7ba <strncmp+0x1a>
 800e7b6:	42a3      	cmp	r3, r4
 800e7b8:	d101      	bne.n	800e7be <strncmp+0x1e>
 800e7ba:	1a80      	subs	r0, r0, r2
 800e7bc:	bd10      	pop	{r4, pc}
 800e7be:	2800      	cmp	r0, #0
 800e7c0:	d1f3      	bne.n	800e7aa <strncmp+0xa>
 800e7c2:	e7fa      	b.n	800e7ba <strncmp+0x1a>
 800e7c4:	4610      	mov	r0, r2
 800e7c6:	e7f9      	b.n	800e7bc <strncmp+0x1c>

0800e7c8 <__ascii_wctomb>:
 800e7c8:	b149      	cbz	r1, 800e7de <__ascii_wctomb+0x16>
 800e7ca:	2aff      	cmp	r2, #255	; 0xff
 800e7cc:	bf85      	ittet	hi
 800e7ce:	238a      	movhi	r3, #138	; 0x8a
 800e7d0:	6003      	strhi	r3, [r0, #0]
 800e7d2:	700a      	strbls	r2, [r1, #0]
 800e7d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e7d8:	bf98      	it	ls
 800e7da:	2001      	movls	r0, #1
 800e7dc:	4770      	bx	lr
 800e7de:	4608      	mov	r0, r1
 800e7e0:	4770      	bx	lr
	...

0800e7e4 <__assert_func>:
 800e7e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7e6:	4614      	mov	r4, r2
 800e7e8:	461a      	mov	r2, r3
 800e7ea:	4b09      	ldr	r3, [pc, #36]	; (800e810 <__assert_func+0x2c>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	4605      	mov	r5, r0
 800e7f0:	68d8      	ldr	r0, [r3, #12]
 800e7f2:	b14c      	cbz	r4, 800e808 <__assert_func+0x24>
 800e7f4:	4b07      	ldr	r3, [pc, #28]	; (800e814 <__assert_func+0x30>)
 800e7f6:	9100      	str	r1, [sp, #0]
 800e7f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e7fc:	4906      	ldr	r1, [pc, #24]	; (800e818 <__assert_func+0x34>)
 800e7fe:	462b      	mov	r3, r5
 800e800:	f000 f80e 	bl	800e820 <fiprintf>
 800e804:	f7fc f889 	bl	800a91a <abort>
 800e808:	4b04      	ldr	r3, [pc, #16]	; (800e81c <__assert_func+0x38>)
 800e80a:	461c      	mov	r4, r3
 800e80c:	e7f3      	b.n	800e7f6 <__assert_func+0x12>
 800e80e:	bf00      	nop
 800e810:	20000024 	.word	0x20000024
 800e814:	0800fa65 	.word	0x0800fa65
 800e818:	0800fa72 	.word	0x0800fa72
 800e81c:	0800faa0 	.word	0x0800faa0

0800e820 <fiprintf>:
 800e820:	b40e      	push	{r1, r2, r3}
 800e822:	b503      	push	{r0, r1, lr}
 800e824:	4601      	mov	r1, r0
 800e826:	ab03      	add	r3, sp, #12
 800e828:	4805      	ldr	r0, [pc, #20]	; (800e840 <fiprintf+0x20>)
 800e82a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e82e:	6800      	ldr	r0, [r0, #0]
 800e830:	9301      	str	r3, [sp, #4]
 800e832:	f000 f85f 	bl	800e8f4 <_vfiprintf_r>
 800e836:	b002      	add	sp, #8
 800e838:	f85d eb04 	ldr.w	lr, [sp], #4
 800e83c:	b003      	add	sp, #12
 800e83e:	4770      	bx	lr
 800e840:	20000024 	.word	0x20000024

0800e844 <memmove>:
 800e844:	4288      	cmp	r0, r1
 800e846:	b510      	push	{r4, lr}
 800e848:	eb01 0402 	add.w	r4, r1, r2
 800e84c:	d902      	bls.n	800e854 <memmove+0x10>
 800e84e:	4284      	cmp	r4, r0
 800e850:	4623      	mov	r3, r4
 800e852:	d807      	bhi.n	800e864 <memmove+0x20>
 800e854:	1e43      	subs	r3, r0, #1
 800e856:	42a1      	cmp	r1, r4
 800e858:	d008      	beq.n	800e86c <memmove+0x28>
 800e85a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e85e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e862:	e7f8      	b.n	800e856 <memmove+0x12>
 800e864:	4402      	add	r2, r0
 800e866:	4601      	mov	r1, r0
 800e868:	428a      	cmp	r2, r1
 800e86a:	d100      	bne.n	800e86e <memmove+0x2a>
 800e86c:	bd10      	pop	{r4, pc}
 800e86e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e872:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e876:	e7f7      	b.n	800e868 <memmove+0x24>

0800e878 <__malloc_lock>:
 800e878:	4801      	ldr	r0, [pc, #4]	; (800e880 <__malloc_lock+0x8>)
 800e87a:	f000 bbe3 	b.w	800f044 <__retarget_lock_acquire_recursive>
 800e87e:	bf00      	nop
 800e880:	20000f9c 	.word	0x20000f9c

0800e884 <__malloc_unlock>:
 800e884:	4801      	ldr	r0, [pc, #4]	; (800e88c <__malloc_unlock+0x8>)
 800e886:	f000 bbde 	b.w	800f046 <__retarget_lock_release_recursive>
 800e88a:	bf00      	nop
 800e88c:	20000f9c 	.word	0x20000f9c

0800e890 <_malloc_usable_size_r>:
 800e890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e894:	1f18      	subs	r0, r3, #4
 800e896:	2b00      	cmp	r3, #0
 800e898:	bfbc      	itt	lt
 800e89a:	580b      	ldrlt	r3, [r1, r0]
 800e89c:	18c0      	addlt	r0, r0, r3
 800e89e:	4770      	bx	lr

0800e8a0 <__sfputc_r>:
 800e8a0:	6893      	ldr	r3, [r2, #8]
 800e8a2:	3b01      	subs	r3, #1
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	b410      	push	{r4}
 800e8a8:	6093      	str	r3, [r2, #8]
 800e8aa:	da08      	bge.n	800e8be <__sfputc_r+0x1e>
 800e8ac:	6994      	ldr	r4, [r2, #24]
 800e8ae:	42a3      	cmp	r3, r4
 800e8b0:	db01      	blt.n	800e8b6 <__sfputc_r+0x16>
 800e8b2:	290a      	cmp	r1, #10
 800e8b4:	d103      	bne.n	800e8be <__sfputc_r+0x1e>
 800e8b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8ba:	f000 b94b 	b.w	800eb54 <__swbuf_r>
 800e8be:	6813      	ldr	r3, [r2, #0]
 800e8c0:	1c58      	adds	r0, r3, #1
 800e8c2:	6010      	str	r0, [r2, #0]
 800e8c4:	7019      	strb	r1, [r3, #0]
 800e8c6:	4608      	mov	r0, r1
 800e8c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8cc:	4770      	bx	lr

0800e8ce <__sfputs_r>:
 800e8ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8d0:	4606      	mov	r6, r0
 800e8d2:	460f      	mov	r7, r1
 800e8d4:	4614      	mov	r4, r2
 800e8d6:	18d5      	adds	r5, r2, r3
 800e8d8:	42ac      	cmp	r4, r5
 800e8da:	d101      	bne.n	800e8e0 <__sfputs_r+0x12>
 800e8dc:	2000      	movs	r0, #0
 800e8de:	e007      	b.n	800e8f0 <__sfputs_r+0x22>
 800e8e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8e4:	463a      	mov	r2, r7
 800e8e6:	4630      	mov	r0, r6
 800e8e8:	f7ff ffda 	bl	800e8a0 <__sfputc_r>
 800e8ec:	1c43      	adds	r3, r0, #1
 800e8ee:	d1f3      	bne.n	800e8d8 <__sfputs_r+0xa>
 800e8f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8f4 <_vfiprintf_r>:
 800e8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f8:	460d      	mov	r5, r1
 800e8fa:	b09d      	sub	sp, #116	; 0x74
 800e8fc:	4614      	mov	r4, r2
 800e8fe:	4698      	mov	r8, r3
 800e900:	4606      	mov	r6, r0
 800e902:	b118      	cbz	r0, 800e90c <_vfiprintf_r+0x18>
 800e904:	6983      	ldr	r3, [r0, #24]
 800e906:	b90b      	cbnz	r3, 800e90c <_vfiprintf_r+0x18>
 800e908:	f000 fafe 	bl	800ef08 <__sinit>
 800e90c:	4b89      	ldr	r3, [pc, #548]	; (800eb34 <_vfiprintf_r+0x240>)
 800e90e:	429d      	cmp	r5, r3
 800e910:	d11b      	bne.n	800e94a <_vfiprintf_r+0x56>
 800e912:	6875      	ldr	r5, [r6, #4]
 800e914:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e916:	07d9      	lsls	r1, r3, #31
 800e918:	d405      	bmi.n	800e926 <_vfiprintf_r+0x32>
 800e91a:	89ab      	ldrh	r3, [r5, #12]
 800e91c:	059a      	lsls	r2, r3, #22
 800e91e:	d402      	bmi.n	800e926 <_vfiprintf_r+0x32>
 800e920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e922:	f000 fb8f 	bl	800f044 <__retarget_lock_acquire_recursive>
 800e926:	89ab      	ldrh	r3, [r5, #12]
 800e928:	071b      	lsls	r3, r3, #28
 800e92a:	d501      	bpl.n	800e930 <_vfiprintf_r+0x3c>
 800e92c:	692b      	ldr	r3, [r5, #16]
 800e92e:	b9eb      	cbnz	r3, 800e96c <_vfiprintf_r+0x78>
 800e930:	4629      	mov	r1, r5
 800e932:	4630      	mov	r0, r6
 800e934:	f000 f960 	bl	800ebf8 <__swsetup_r>
 800e938:	b1c0      	cbz	r0, 800e96c <_vfiprintf_r+0x78>
 800e93a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e93c:	07dc      	lsls	r4, r3, #31
 800e93e:	d50e      	bpl.n	800e95e <_vfiprintf_r+0x6a>
 800e940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e944:	b01d      	add	sp, #116	; 0x74
 800e946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e94a:	4b7b      	ldr	r3, [pc, #492]	; (800eb38 <_vfiprintf_r+0x244>)
 800e94c:	429d      	cmp	r5, r3
 800e94e:	d101      	bne.n	800e954 <_vfiprintf_r+0x60>
 800e950:	68b5      	ldr	r5, [r6, #8]
 800e952:	e7df      	b.n	800e914 <_vfiprintf_r+0x20>
 800e954:	4b79      	ldr	r3, [pc, #484]	; (800eb3c <_vfiprintf_r+0x248>)
 800e956:	429d      	cmp	r5, r3
 800e958:	bf08      	it	eq
 800e95a:	68f5      	ldreq	r5, [r6, #12]
 800e95c:	e7da      	b.n	800e914 <_vfiprintf_r+0x20>
 800e95e:	89ab      	ldrh	r3, [r5, #12]
 800e960:	0598      	lsls	r0, r3, #22
 800e962:	d4ed      	bmi.n	800e940 <_vfiprintf_r+0x4c>
 800e964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e966:	f000 fb6e 	bl	800f046 <__retarget_lock_release_recursive>
 800e96a:	e7e9      	b.n	800e940 <_vfiprintf_r+0x4c>
 800e96c:	2300      	movs	r3, #0
 800e96e:	9309      	str	r3, [sp, #36]	; 0x24
 800e970:	2320      	movs	r3, #32
 800e972:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e976:	f8cd 800c 	str.w	r8, [sp, #12]
 800e97a:	2330      	movs	r3, #48	; 0x30
 800e97c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eb40 <_vfiprintf_r+0x24c>
 800e980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e984:	f04f 0901 	mov.w	r9, #1
 800e988:	4623      	mov	r3, r4
 800e98a:	469a      	mov	sl, r3
 800e98c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e990:	b10a      	cbz	r2, 800e996 <_vfiprintf_r+0xa2>
 800e992:	2a25      	cmp	r2, #37	; 0x25
 800e994:	d1f9      	bne.n	800e98a <_vfiprintf_r+0x96>
 800e996:	ebba 0b04 	subs.w	fp, sl, r4
 800e99a:	d00b      	beq.n	800e9b4 <_vfiprintf_r+0xc0>
 800e99c:	465b      	mov	r3, fp
 800e99e:	4622      	mov	r2, r4
 800e9a0:	4629      	mov	r1, r5
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	f7ff ff93 	bl	800e8ce <__sfputs_r>
 800e9a8:	3001      	adds	r0, #1
 800e9aa:	f000 80aa 	beq.w	800eb02 <_vfiprintf_r+0x20e>
 800e9ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9b0:	445a      	add	r2, fp
 800e9b2:	9209      	str	r2, [sp, #36]	; 0x24
 800e9b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	f000 80a2 	beq.w	800eb02 <_vfiprintf_r+0x20e>
 800e9be:	2300      	movs	r3, #0
 800e9c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e9c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9c8:	f10a 0a01 	add.w	sl, sl, #1
 800e9cc:	9304      	str	r3, [sp, #16]
 800e9ce:	9307      	str	r3, [sp, #28]
 800e9d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9d4:	931a      	str	r3, [sp, #104]	; 0x68
 800e9d6:	4654      	mov	r4, sl
 800e9d8:	2205      	movs	r2, #5
 800e9da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9de:	4858      	ldr	r0, [pc, #352]	; (800eb40 <_vfiprintf_r+0x24c>)
 800e9e0:	f7f1 fbfe 	bl	80001e0 <memchr>
 800e9e4:	9a04      	ldr	r2, [sp, #16]
 800e9e6:	b9d8      	cbnz	r0, 800ea20 <_vfiprintf_r+0x12c>
 800e9e8:	06d1      	lsls	r1, r2, #27
 800e9ea:	bf44      	itt	mi
 800e9ec:	2320      	movmi	r3, #32
 800e9ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9f2:	0713      	lsls	r3, r2, #28
 800e9f4:	bf44      	itt	mi
 800e9f6:	232b      	movmi	r3, #43	; 0x2b
 800e9f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9fc:	f89a 3000 	ldrb.w	r3, [sl]
 800ea00:	2b2a      	cmp	r3, #42	; 0x2a
 800ea02:	d015      	beq.n	800ea30 <_vfiprintf_r+0x13c>
 800ea04:	9a07      	ldr	r2, [sp, #28]
 800ea06:	4654      	mov	r4, sl
 800ea08:	2000      	movs	r0, #0
 800ea0a:	f04f 0c0a 	mov.w	ip, #10
 800ea0e:	4621      	mov	r1, r4
 800ea10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea14:	3b30      	subs	r3, #48	; 0x30
 800ea16:	2b09      	cmp	r3, #9
 800ea18:	d94e      	bls.n	800eab8 <_vfiprintf_r+0x1c4>
 800ea1a:	b1b0      	cbz	r0, 800ea4a <_vfiprintf_r+0x156>
 800ea1c:	9207      	str	r2, [sp, #28]
 800ea1e:	e014      	b.n	800ea4a <_vfiprintf_r+0x156>
 800ea20:	eba0 0308 	sub.w	r3, r0, r8
 800ea24:	fa09 f303 	lsl.w	r3, r9, r3
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	9304      	str	r3, [sp, #16]
 800ea2c:	46a2      	mov	sl, r4
 800ea2e:	e7d2      	b.n	800e9d6 <_vfiprintf_r+0xe2>
 800ea30:	9b03      	ldr	r3, [sp, #12]
 800ea32:	1d19      	adds	r1, r3, #4
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	9103      	str	r1, [sp, #12]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	bfbb      	ittet	lt
 800ea3c:	425b      	neglt	r3, r3
 800ea3e:	f042 0202 	orrlt.w	r2, r2, #2
 800ea42:	9307      	strge	r3, [sp, #28]
 800ea44:	9307      	strlt	r3, [sp, #28]
 800ea46:	bfb8      	it	lt
 800ea48:	9204      	strlt	r2, [sp, #16]
 800ea4a:	7823      	ldrb	r3, [r4, #0]
 800ea4c:	2b2e      	cmp	r3, #46	; 0x2e
 800ea4e:	d10c      	bne.n	800ea6a <_vfiprintf_r+0x176>
 800ea50:	7863      	ldrb	r3, [r4, #1]
 800ea52:	2b2a      	cmp	r3, #42	; 0x2a
 800ea54:	d135      	bne.n	800eac2 <_vfiprintf_r+0x1ce>
 800ea56:	9b03      	ldr	r3, [sp, #12]
 800ea58:	1d1a      	adds	r2, r3, #4
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	9203      	str	r2, [sp, #12]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	bfb8      	it	lt
 800ea62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ea66:	3402      	adds	r4, #2
 800ea68:	9305      	str	r3, [sp, #20]
 800ea6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eb50 <_vfiprintf_r+0x25c>
 800ea6e:	7821      	ldrb	r1, [r4, #0]
 800ea70:	2203      	movs	r2, #3
 800ea72:	4650      	mov	r0, sl
 800ea74:	f7f1 fbb4 	bl	80001e0 <memchr>
 800ea78:	b140      	cbz	r0, 800ea8c <_vfiprintf_r+0x198>
 800ea7a:	2340      	movs	r3, #64	; 0x40
 800ea7c:	eba0 000a 	sub.w	r0, r0, sl
 800ea80:	fa03 f000 	lsl.w	r0, r3, r0
 800ea84:	9b04      	ldr	r3, [sp, #16]
 800ea86:	4303      	orrs	r3, r0
 800ea88:	3401      	adds	r4, #1
 800ea8a:	9304      	str	r3, [sp, #16]
 800ea8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea90:	482c      	ldr	r0, [pc, #176]	; (800eb44 <_vfiprintf_r+0x250>)
 800ea92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea96:	2206      	movs	r2, #6
 800ea98:	f7f1 fba2 	bl	80001e0 <memchr>
 800ea9c:	2800      	cmp	r0, #0
 800ea9e:	d03f      	beq.n	800eb20 <_vfiprintf_r+0x22c>
 800eaa0:	4b29      	ldr	r3, [pc, #164]	; (800eb48 <_vfiprintf_r+0x254>)
 800eaa2:	bb1b      	cbnz	r3, 800eaec <_vfiprintf_r+0x1f8>
 800eaa4:	9b03      	ldr	r3, [sp, #12]
 800eaa6:	3307      	adds	r3, #7
 800eaa8:	f023 0307 	bic.w	r3, r3, #7
 800eaac:	3308      	adds	r3, #8
 800eaae:	9303      	str	r3, [sp, #12]
 800eab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eab2:	443b      	add	r3, r7
 800eab4:	9309      	str	r3, [sp, #36]	; 0x24
 800eab6:	e767      	b.n	800e988 <_vfiprintf_r+0x94>
 800eab8:	fb0c 3202 	mla	r2, ip, r2, r3
 800eabc:	460c      	mov	r4, r1
 800eabe:	2001      	movs	r0, #1
 800eac0:	e7a5      	b.n	800ea0e <_vfiprintf_r+0x11a>
 800eac2:	2300      	movs	r3, #0
 800eac4:	3401      	adds	r4, #1
 800eac6:	9305      	str	r3, [sp, #20]
 800eac8:	4619      	mov	r1, r3
 800eaca:	f04f 0c0a 	mov.w	ip, #10
 800eace:	4620      	mov	r0, r4
 800ead0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ead4:	3a30      	subs	r2, #48	; 0x30
 800ead6:	2a09      	cmp	r2, #9
 800ead8:	d903      	bls.n	800eae2 <_vfiprintf_r+0x1ee>
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d0c5      	beq.n	800ea6a <_vfiprintf_r+0x176>
 800eade:	9105      	str	r1, [sp, #20]
 800eae0:	e7c3      	b.n	800ea6a <_vfiprintf_r+0x176>
 800eae2:	fb0c 2101 	mla	r1, ip, r1, r2
 800eae6:	4604      	mov	r4, r0
 800eae8:	2301      	movs	r3, #1
 800eaea:	e7f0      	b.n	800eace <_vfiprintf_r+0x1da>
 800eaec:	ab03      	add	r3, sp, #12
 800eaee:	9300      	str	r3, [sp, #0]
 800eaf0:	462a      	mov	r2, r5
 800eaf2:	4b16      	ldr	r3, [pc, #88]	; (800eb4c <_vfiprintf_r+0x258>)
 800eaf4:	a904      	add	r1, sp, #16
 800eaf6:	4630      	mov	r0, r6
 800eaf8:	f7fb fff6 	bl	800aae8 <_printf_float>
 800eafc:	4607      	mov	r7, r0
 800eafe:	1c78      	adds	r0, r7, #1
 800eb00:	d1d6      	bne.n	800eab0 <_vfiprintf_r+0x1bc>
 800eb02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb04:	07d9      	lsls	r1, r3, #31
 800eb06:	d405      	bmi.n	800eb14 <_vfiprintf_r+0x220>
 800eb08:	89ab      	ldrh	r3, [r5, #12]
 800eb0a:	059a      	lsls	r2, r3, #22
 800eb0c:	d402      	bmi.n	800eb14 <_vfiprintf_r+0x220>
 800eb0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb10:	f000 fa99 	bl	800f046 <__retarget_lock_release_recursive>
 800eb14:	89ab      	ldrh	r3, [r5, #12]
 800eb16:	065b      	lsls	r3, r3, #25
 800eb18:	f53f af12 	bmi.w	800e940 <_vfiprintf_r+0x4c>
 800eb1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb1e:	e711      	b.n	800e944 <_vfiprintf_r+0x50>
 800eb20:	ab03      	add	r3, sp, #12
 800eb22:	9300      	str	r3, [sp, #0]
 800eb24:	462a      	mov	r2, r5
 800eb26:	4b09      	ldr	r3, [pc, #36]	; (800eb4c <_vfiprintf_r+0x258>)
 800eb28:	a904      	add	r1, sp, #16
 800eb2a:	4630      	mov	r0, r6
 800eb2c:	f7fc fa80 	bl	800b030 <_printf_i>
 800eb30:	e7e4      	b.n	800eafc <_vfiprintf_r+0x208>
 800eb32:	bf00      	nop
 800eb34:	0800fac4 	.word	0x0800fac4
 800eb38:	0800fae4 	.word	0x0800fae4
 800eb3c:	0800faa4 	.word	0x0800faa4
 800eb40:	0800fa54 	.word	0x0800fa54
 800eb44:	0800fa5e 	.word	0x0800fa5e
 800eb48:	0800aae9 	.word	0x0800aae9
 800eb4c:	0800e8cf 	.word	0x0800e8cf
 800eb50:	0800fa5a 	.word	0x0800fa5a

0800eb54 <__swbuf_r>:
 800eb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb56:	460e      	mov	r6, r1
 800eb58:	4614      	mov	r4, r2
 800eb5a:	4605      	mov	r5, r0
 800eb5c:	b118      	cbz	r0, 800eb66 <__swbuf_r+0x12>
 800eb5e:	6983      	ldr	r3, [r0, #24]
 800eb60:	b90b      	cbnz	r3, 800eb66 <__swbuf_r+0x12>
 800eb62:	f000 f9d1 	bl	800ef08 <__sinit>
 800eb66:	4b21      	ldr	r3, [pc, #132]	; (800ebec <__swbuf_r+0x98>)
 800eb68:	429c      	cmp	r4, r3
 800eb6a:	d12b      	bne.n	800ebc4 <__swbuf_r+0x70>
 800eb6c:	686c      	ldr	r4, [r5, #4]
 800eb6e:	69a3      	ldr	r3, [r4, #24]
 800eb70:	60a3      	str	r3, [r4, #8]
 800eb72:	89a3      	ldrh	r3, [r4, #12]
 800eb74:	071a      	lsls	r2, r3, #28
 800eb76:	d52f      	bpl.n	800ebd8 <__swbuf_r+0x84>
 800eb78:	6923      	ldr	r3, [r4, #16]
 800eb7a:	b36b      	cbz	r3, 800ebd8 <__swbuf_r+0x84>
 800eb7c:	6923      	ldr	r3, [r4, #16]
 800eb7e:	6820      	ldr	r0, [r4, #0]
 800eb80:	1ac0      	subs	r0, r0, r3
 800eb82:	6963      	ldr	r3, [r4, #20]
 800eb84:	b2f6      	uxtb	r6, r6
 800eb86:	4283      	cmp	r3, r0
 800eb88:	4637      	mov	r7, r6
 800eb8a:	dc04      	bgt.n	800eb96 <__swbuf_r+0x42>
 800eb8c:	4621      	mov	r1, r4
 800eb8e:	4628      	mov	r0, r5
 800eb90:	f000 f926 	bl	800ede0 <_fflush_r>
 800eb94:	bb30      	cbnz	r0, 800ebe4 <__swbuf_r+0x90>
 800eb96:	68a3      	ldr	r3, [r4, #8]
 800eb98:	3b01      	subs	r3, #1
 800eb9a:	60a3      	str	r3, [r4, #8]
 800eb9c:	6823      	ldr	r3, [r4, #0]
 800eb9e:	1c5a      	adds	r2, r3, #1
 800eba0:	6022      	str	r2, [r4, #0]
 800eba2:	701e      	strb	r6, [r3, #0]
 800eba4:	6963      	ldr	r3, [r4, #20]
 800eba6:	3001      	adds	r0, #1
 800eba8:	4283      	cmp	r3, r0
 800ebaa:	d004      	beq.n	800ebb6 <__swbuf_r+0x62>
 800ebac:	89a3      	ldrh	r3, [r4, #12]
 800ebae:	07db      	lsls	r3, r3, #31
 800ebb0:	d506      	bpl.n	800ebc0 <__swbuf_r+0x6c>
 800ebb2:	2e0a      	cmp	r6, #10
 800ebb4:	d104      	bne.n	800ebc0 <__swbuf_r+0x6c>
 800ebb6:	4621      	mov	r1, r4
 800ebb8:	4628      	mov	r0, r5
 800ebba:	f000 f911 	bl	800ede0 <_fflush_r>
 800ebbe:	b988      	cbnz	r0, 800ebe4 <__swbuf_r+0x90>
 800ebc0:	4638      	mov	r0, r7
 800ebc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebc4:	4b0a      	ldr	r3, [pc, #40]	; (800ebf0 <__swbuf_r+0x9c>)
 800ebc6:	429c      	cmp	r4, r3
 800ebc8:	d101      	bne.n	800ebce <__swbuf_r+0x7a>
 800ebca:	68ac      	ldr	r4, [r5, #8]
 800ebcc:	e7cf      	b.n	800eb6e <__swbuf_r+0x1a>
 800ebce:	4b09      	ldr	r3, [pc, #36]	; (800ebf4 <__swbuf_r+0xa0>)
 800ebd0:	429c      	cmp	r4, r3
 800ebd2:	bf08      	it	eq
 800ebd4:	68ec      	ldreq	r4, [r5, #12]
 800ebd6:	e7ca      	b.n	800eb6e <__swbuf_r+0x1a>
 800ebd8:	4621      	mov	r1, r4
 800ebda:	4628      	mov	r0, r5
 800ebdc:	f000 f80c 	bl	800ebf8 <__swsetup_r>
 800ebe0:	2800      	cmp	r0, #0
 800ebe2:	d0cb      	beq.n	800eb7c <__swbuf_r+0x28>
 800ebe4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ebe8:	e7ea      	b.n	800ebc0 <__swbuf_r+0x6c>
 800ebea:	bf00      	nop
 800ebec:	0800fac4 	.word	0x0800fac4
 800ebf0:	0800fae4 	.word	0x0800fae4
 800ebf4:	0800faa4 	.word	0x0800faa4

0800ebf8 <__swsetup_r>:
 800ebf8:	4b32      	ldr	r3, [pc, #200]	; (800ecc4 <__swsetup_r+0xcc>)
 800ebfa:	b570      	push	{r4, r5, r6, lr}
 800ebfc:	681d      	ldr	r5, [r3, #0]
 800ebfe:	4606      	mov	r6, r0
 800ec00:	460c      	mov	r4, r1
 800ec02:	b125      	cbz	r5, 800ec0e <__swsetup_r+0x16>
 800ec04:	69ab      	ldr	r3, [r5, #24]
 800ec06:	b913      	cbnz	r3, 800ec0e <__swsetup_r+0x16>
 800ec08:	4628      	mov	r0, r5
 800ec0a:	f000 f97d 	bl	800ef08 <__sinit>
 800ec0e:	4b2e      	ldr	r3, [pc, #184]	; (800ecc8 <__swsetup_r+0xd0>)
 800ec10:	429c      	cmp	r4, r3
 800ec12:	d10f      	bne.n	800ec34 <__swsetup_r+0x3c>
 800ec14:	686c      	ldr	r4, [r5, #4]
 800ec16:	89a3      	ldrh	r3, [r4, #12]
 800ec18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec1c:	0719      	lsls	r1, r3, #28
 800ec1e:	d42c      	bmi.n	800ec7a <__swsetup_r+0x82>
 800ec20:	06dd      	lsls	r5, r3, #27
 800ec22:	d411      	bmi.n	800ec48 <__swsetup_r+0x50>
 800ec24:	2309      	movs	r3, #9
 800ec26:	6033      	str	r3, [r6, #0]
 800ec28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ec2c:	81a3      	strh	r3, [r4, #12]
 800ec2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec32:	e03e      	b.n	800ecb2 <__swsetup_r+0xba>
 800ec34:	4b25      	ldr	r3, [pc, #148]	; (800eccc <__swsetup_r+0xd4>)
 800ec36:	429c      	cmp	r4, r3
 800ec38:	d101      	bne.n	800ec3e <__swsetup_r+0x46>
 800ec3a:	68ac      	ldr	r4, [r5, #8]
 800ec3c:	e7eb      	b.n	800ec16 <__swsetup_r+0x1e>
 800ec3e:	4b24      	ldr	r3, [pc, #144]	; (800ecd0 <__swsetup_r+0xd8>)
 800ec40:	429c      	cmp	r4, r3
 800ec42:	bf08      	it	eq
 800ec44:	68ec      	ldreq	r4, [r5, #12]
 800ec46:	e7e6      	b.n	800ec16 <__swsetup_r+0x1e>
 800ec48:	0758      	lsls	r0, r3, #29
 800ec4a:	d512      	bpl.n	800ec72 <__swsetup_r+0x7a>
 800ec4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec4e:	b141      	cbz	r1, 800ec62 <__swsetup_r+0x6a>
 800ec50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec54:	4299      	cmp	r1, r3
 800ec56:	d002      	beq.n	800ec5e <__swsetup_r+0x66>
 800ec58:	4630      	mov	r0, r6
 800ec5a:	f7ff fb1d 	bl	800e298 <_free_r>
 800ec5e:	2300      	movs	r3, #0
 800ec60:	6363      	str	r3, [r4, #52]	; 0x34
 800ec62:	89a3      	ldrh	r3, [r4, #12]
 800ec64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ec68:	81a3      	strh	r3, [r4, #12]
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	6063      	str	r3, [r4, #4]
 800ec6e:	6923      	ldr	r3, [r4, #16]
 800ec70:	6023      	str	r3, [r4, #0]
 800ec72:	89a3      	ldrh	r3, [r4, #12]
 800ec74:	f043 0308 	orr.w	r3, r3, #8
 800ec78:	81a3      	strh	r3, [r4, #12]
 800ec7a:	6923      	ldr	r3, [r4, #16]
 800ec7c:	b94b      	cbnz	r3, 800ec92 <__swsetup_r+0x9a>
 800ec7e:	89a3      	ldrh	r3, [r4, #12]
 800ec80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ec84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec88:	d003      	beq.n	800ec92 <__swsetup_r+0x9a>
 800ec8a:	4621      	mov	r1, r4
 800ec8c:	4630      	mov	r0, r6
 800ec8e:	f000 fa01 	bl	800f094 <__smakebuf_r>
 800ec92:	89a0      	ldrh	r0, [r4, #12]
 800ec94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec98:	f010 0301 	ands.w	r3, r0, #1
 800ec9c:	d00a      	beq.n	800ecb4 <__swsetup_r+0xbc>
 800ec9e:	2300      	movs	r3, #0
 800eca0:	60a3      	str	r3, [r4, #8]
 800eca2:	6963      	ldr	r3, [r4, #20]
 800eca4:	425b      	negs	r3, r3
 800eca6:	61a3      	str	r3, [r4, #24]
 800eca8:	6923      	ldr	r3, [r4, #16]
 800ecaa:	b943      	cbnz	r3, 800ecbe <__swsetup_r+0xc6>
 800ecac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ecb0:	d1ba      	bne.n	800ec28 <__swsetup_r+0x30>
 800ecb2:	bd70      	pop	{r4, r5, r6, pc}
 800ecb4:	0781      	lsls	r1, r0, #30
 800ecb6:	bf58      	it	pl
 800ecb8:	6963      	ldrpl	r3, [r4, #20]
 800ecba:	60a3      	str	r3, [r4, #8]
 800ecbc:	e7f4      	b.n	800eca8 <__swsetup_r+0xb0>
 800ecbe:	2000      	movs	r0, #0
 800ecc0:	e7f7      	b.n	800ecb2 <__swsetup_r+0xba>
 800ecc2:	bf00      	nop
 800ecc4:	20000024 	.word	0x20000024
 800ecc8:	0800fac4 	.word	0x0800fac4
 800eccc:	0800fae4 	.word	0x0800fae4
 800ecd0:	0800faa4 	.word	0x0800faa4

0800ecd4 <__sflush_r>:
 800ecd4:	898a      	ldrh	r2, [r1, #12]
 800ecd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecda:	4605      	mov	r5, r0
 800ecdc:	0710      	lsls	r0, r2, #28
 800ecde:	460c      	mov	r4, r1
 800ece0:	d458      	bmi.n	800ed94 <__sflush_r+0xc0>
 800ece2:	684b      	ldr	r3, [r1, #4]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	dc05      	bgt.n	800ecf4 <__sflush_r+0x20>
 800ece8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	dc02      	bgt.n	800ecf4 <__sflush_r+0x20>
 800ecee:	2000      	movs	r0, #0
 800ecf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ecf6:	2e00      	cmp	r6, #0
 800ecf8:	d0f9      	beq.n	800ecee <__sflush_r+0x1a>
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ed00:	682f      	ldr	r7, [r5, #0]
 800ed02:	602b      	str	r3, [r5, #0]
 800ed04:	d032      	beq.n	800ed6c <__sflush_r+0x98>
 800ed06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ed08:	89a3      	ldrh	r3, [r4, #12]
 800ed0a:	075a      	lsls	r2, r3, #29
 800ed0c:	d505      	bpl.n	800ed1a <__sflush_r+0x46>
 800ed0e:	6863      	ldr	r3, [r4, #4]
 800ed10:	1ac0      	subs	r0, r0, r3
 800ed12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed14:	b10b      	cbz	r3, 800ed1a <__sflush_r+0x46>
 800ed16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed18:	1ac0      	subs	r0, r0, r3
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed20:	6a21      	ldr	r1, [r4, #32]
 800ed22:	4628      	mov	r0, r5
 800ed24:	47b0      	blx	r6
 800ed26:	1c43      	adds	r3, r0, #1
 800ed28:	89a3      	ldrh	r3, [r4, #12]
 800ed2a:	d106      	bne.n	800ed3a <__sflush_r+0x66>
 800ed2c:	6829      	ldr	r1, [r5, #0]
 800ed2e:	291d      	cmp	r1, #29
 800ed30:	d82c      	bhi.n	800ed8c <__sflush_r+0xb8>
 800ed32:	4a2a      	ldr	r2, [pc, #168]	; (800eddc <__sflush_r+0x108>)
 800ed34:	40ca      	lsrs	r2, r1
 800ed36:	07d6      	lsls	r6, r2, #31
 800ed38:	d528      	bpl.n	800ed8c <__sflush_r+0xb8>
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	6062      	str	r2, [r4, #4]
 800ed3e:	04d9      	lsls	r1, r3, #19
 800ed40:	6922      	ldr	r2, [r4, #16]
 800ed42:	6022      	str	r2, [r4, #0]
 800ed44:	d504      	bpl.n	800ed50 <__sflush_r+0x7c>
 800ed46:	1c42      	adds	r2, r0, #1
 800ed48:	d101      	bne.n	800ed4e <__sflush_r+0x7a>
 800ed4a:	682b      	ldr	r3, [r5, #0]
 800ed4c:	b903      	cbnz	r3, 800ed50 <__sflush_r+0x7c>
 800ed4e:	6560      	str	r0, [r4, #84]	; 0x54
 800ed50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed52:	602f      	str	r7, [r5, #0]
 800ed54:	2900      	cmp	r1, #0
 800ed56:	d0ca      	beq.n	800ecee <__sflush_r+0x1a>
 800ed58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed5c:	4299      	cmp	r1, r3
 800ed5e:	d002      	beq.n	800ed66 <__sflush_r+0x92>
 800ed60:	4628      	mov	r0, r5
 800ed62:	f7ff fa99 	bl	800e298 <_free_r>
 800ed66:	2000      	movs	r0, #0
 800ed68:	6360      	str	r0, [r4, #52]	; 0x34
 800ed6a:	e7c1      	b.n	800ecf0 <__sflush_r+0x1c>
 800ed6c:	6a21      	ldr	r1, [r4, #32]
 800ed6e:	2301      	movs	r3, #1
 800ed70:	4628      	mov	r0, r5
 800ed72:	47b0      	blx	r6
 800ed74:	1c41      	adds	r1, r0, #1
 800ed76:	d1c7      	bne.n	800ed08 <__sflush_r+0x34>
 800ed78:	682b      	ldr	r3, [r5, #0]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d0c4      	beq.n	800ed08 <__sflush_r+0x34>
 800ed7e:	2b1d      	cmp	r3, #29
 800ed80:	d001      	beq.n	800ed86 <__sflush_r+0xb2>
 800ed82:	2b16      	cmp	r3, #22
 800ed84:	d101      	bne.n	800ed8a <__sflush_r+0xb6>
 800ed86:	602f      	str	r7, [r5, #0]
 800ed88:	e7b1      	b.n	800ecee <__sflush_r+0x1a>
 800ed8a:	89a3      	ldrh	r3, [r4, #12]
 800ed8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed90:	81a3      	strh	r3, [r4, #12]
 800ed92:	e7ad      	b.n	800ecf0 <__sflush_r+0x1c>
 800ed94:	690f      	ldr	r7, [r1, #16]
 800ed96:	2f00      	cmp	r7, #0
 800ed98:	d0a9      	beq.n	800ecee <__sflush_r+0x1a>
 800ed9a:	0793      	lsls	r3, r2, #30
 800ed9c:	680e      	ldr	r6, [r1, #0]
 800ed9e:	bf08      	it	eq
 800eda0:	694b      	ldreq	r3, [r1, #20]
 800eda2:	600f      	str	r7, [r1, #0]
 800eda4:	bf18      	it	ne
 800eda6:	2300      	movne	r3, #0
 800eda8:	eba6 0807 	sub.w	r8, r6, r7
 800edac:	608b      	str	r3, [r1, #8]
 800edae:	f1b8 0f00 	cmp.w	r8, #0
 800edb2:	dd9c      	ble.n	800ecee <__sflush_r+0x1a>
 800edb4:	6a21      	ldr	r1, [r4, #32]
 800edb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800edb8:	4643      	mov	r3, r8
 800edba:	463a      	mov	r2, r7
 800edbc:	4628      	mov	r0, r5
 800edbe:	47b0      	blx	r6
 800edc0:	2800      	cmp	r0, #0
 800edc2:	dc06      	bgt.n	800edd2 <__sflush_r+0xfe>
 800edc4:	89a3      	ldrh	r3, [r4, #12]
 800edc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edca:	81a3      	strh	r3, [r4, #12]
 800edcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800edd0:	e78e      	b.n	800ecf0 <__sflush_r+0x1c>
 800edd2:	4407      	add	r7, r0
 800edd4:	eba8 0800 	sub.w	r8, r8, r0
 800edd8:	e7e9      	b.n	800edae <__sflush_r+0xda>
 800edda:	bf00      	nop
 800eddc:	20400001 	.word	0x20400001

0800ede0 <_fflush_r>:
 800ede0:	b538      	push	{r3, r4, r5, lr}
 800ede2:	690b      	ldr	r3, [r1, #16]
 800ede4:	4605      	mov	r5, r0
 800ede6:	460c      	mov	r4, r1
 800ede8:	b913      	cbnz	r3, 800edf0 <_fflush_r+0x10>
 800edea:	2500      	movs	r5, #0
 800edec:	4628      	mov	r0, r5
 800edee:	bd38      	pop	{r3, r4, r5, pc}
 800edf0:	b118      	cbz	r0, 800edfa <_fflush_r+0x1a>
 800edf2:	6983      	ldr	r3, [r0, #24]
 800edf4:	b90b      	cbnz	r3, 800edfa <_fflush_r+0x1a>
 800edf6:	f000 f887 	bl	800ef08 <__sinit>
 800edfa:	4b14      	ldr	r3, [pc, #80]	; (800ee4c <_fflush_r+0x6c>)
 800edfc:	429c      	cmp	r4, r3
 800edfe:	d11b      	bne.n	800ee38 <_fflush_r+0x58>
 800ee00:	686c      	ldr	r4, [r5, #4]
 800ee02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d0ef      	beq.n	800edea <_fflush_r+0xa>
 800ee0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ee0c:	07d0      	lsls	r0, r2, #31
 800ee0e:	d404      	bmi.n	800ee1a <_fflush_r+0x3a>
 800ee10:	0599      	lsls	r1, r3, #22
 800ee12:	d402      	bmi.n	800ee1a <_fflush_r+0x3a>
 800ee14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee16:	f000 f915 	bl	800f044 <__retarget_lock_acquire_recursive>
 800ee1a:	4628      	mov	r0, r5
 800ee1c:	4621      	mov	r1, r4
 800ee1e:	f7ff ff59 	bl	800ecd4 <__sflush_r>
 800ee22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee24:	07da      	lsls	r2, r3, #31
 800ee26:	4605      	mov	r5, r0
 800ee28:	d4e0      	bmi.n	800edec <_fflush_r+0xc>
 800ee2a:	89a3      	ldrh	r3, [r4, #12]
 800ee2c:	059b      	lsls	r3, r3, #22
 800ee2e:	d4dd      	bmi.n	800edec <_fflush_r+0xc>
 800ee30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee32:	f000 f908 	bl	800f046 <__retarget_lock_release_recursive>
 800ee36:	e7d9      	b.n	800edec <_fflush_r+0xc>
 800ee38:	4b05      	ldr	r3, [pc, #20]	; (800ee50 <_fflush_r+0x70>)
 800ee3a:	429c      	cmp	r4, r3
 800ee3c:	d101      	bne.n	800ee42 <_fflush_r+0x62>
 800ee3e:	68ac      	ldr	r4, [r5, #8]
 800ee40:	e7df      	b.n	800ee02 <_fflush_r+0x22>
 800ee42:	4b04      	ldr	r3, [pc, #16]	; (800ee54 <_fflush_r+0x74>)
 800ee44:	429c      	cmp	r4, r3
 800ee46:	bf08      	it	eq
 800ee48:	68ec      	ldreq	r4, [r5, #12]
 800ee4a:	e7da      	b.n	800ee02 <_fflush_r+0x22>
 800ee4c:	0800fac4 	.word	0x0800fac4
 800ee50:	0800fae4 	.word	0x0800fae4
 800ee54:	0800faa4 	.word	0x0800faa4

0800ee58 <std>:
 800ee58:	2300      	movs	r3, #0
 800ee5a:	b510      	push	{r4, lr}
 800ee5c:	4604      	mov	r4, r0
 800ee5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ee62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee66:	6083      	str	r3, [r0, #8]
 800ee68:	8181      	strh	r1, [r0, #12]
 800ee6a:	6643      	str	r3, [r0, #100]	; 0x64
 800ee6c:	81c2      	strh	r2, [r0, #14]
 800ee6e:	6183      	str	r3, [r0, #24]
 800ee70:	4619      	mov	r1, r3
 800ee72:	2208      	movs	r2, #8
 800ee74:	305c      	adds	r0, #92	; 0x5c
 800ee76:	f7fb fd8f 	bl	800a998 <memset>
 800ee7a:	4b05      	ldr	r3, [pc, #20]	; (800ee90 <std+0x38>)
 800ee7c:	6263      	str	r3, [r4, #36]	; 0x24
 800ee7e:	4b05      	ldr	r3, [pc, #20]	; (800ee94 <std+0x3c>)
 800ee80:	62a3      	str	r3, [r4, #40]	; 0x28
 800ee82:	4b05      	ldr	r3, [pc, #20]	; (800ee98 <std+0x40>)
 800ee84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ee86:	4b05      	ldr	r3, [pc, #20]	; (800ee9c <std+0x44>)
 800ee88:	6224      	str	r4, [r4, #32]
 800ee8a:	6323      	str	r3, [r4, #48]	; 0x30
 800ee8c:	bd10      	pop	{r4, pc}
 800ee8e:	bf00      	nop
 800ee90:	0800f115 	.word	0x0800f115
 800ee94:	0800f137 	.word	0x0800f137
 800ee98:	0800f16f 	.word	0x0800f16f
 800ee9c:	0800f193 	.word	0x0800f193

0800eea0 <_cleanup_r>:
 800eea0:	4901      	ldr	r1, [pc, #4]	; (800eea8 <_cleanup_r+0x8>)
 800eea2:	f000 b8af 	b.w	800f004 <_fwalk_reent>
 800eea6:	bf00      	nop
 800eea8:	0800ede1 	.word	0x0800ede1

0800eeac <__sfmoreglue>:
 800eeac:	b570      	push	{r4, r5, r6, lr}
 800eeae:	2268      	movs	r2, #104	; 0x68
 800eeb0:	1e4d      	subs	r5, r1, #1
 800eeb2:	4355      	muls	r5, r2
 800eeb4:	460e      	mov	r6, r1
 800eeb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eeba:	f7ff fa59 	bl	800e370 <_malloc_r>
 800eebe:	4604      	mov	r4, r0
 800eec0:	b140      	cbz	r0, 800eed4 <__sfmoreglue+0x28>
 800eec2:	2100      	movs	r1, #0
 800eec4:	e9c0 1600 	strd	r1, r6, [r0]
 800eec8:	300c      	adds	r0, #12
 800eeca:	60a0      	str	r0, [r4, #8]
 800eecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eed0:	f7fb fd62 	bl	800a998 <memset>
 800eed4:	4620      	mov	r0, r4
 800eed6:	bd70      	pop	{r4, r5, r6, pc}

0800eed8 <__sfp_lock_acquire>:
 800eed8:	4801      	ldr	r0, [pc, #4]	; (800eee0 <__sfp_lock_acquire+0x8>)
 800eeda:	f000 b8b3 	b.w	800f044 <__retarget_lock_acquire_recursive>
 800eede:	bf00      	nop
 800eee0:	20000f9d 	.word	0x20000f9d

0800eee4 <__sfp_lock_release>:
 800eee4:	4801      	ldr	r0, [pc, #4]	; (800eeec <__sfp_lock_release+0x8>)
 800eee6:	f000 b8ae 	b.w	800f046 <__retarget_lock_release_recursive>
 800eeea:	bf00      	nop
 800eeec:	20000f9d 	.word	0x20000f9d

0800eef0 <__sinit_lock_acquire>:
 800eef0:	4801      	ldr	r0, [pc, #4]	; (800eef8 <__sinit_lock_acquire+0x8>)
 800eef2:	f000 b8a7 	b.w	800f044 <__retarget_lock_acquire_recursive>
 800eef6:	bf00      	nop
 800eef8:	20000f9e 	.word	0x20000f9e

0800eefc <__sinit_lock_release>:
 800eefc:	4801      	ldr	r0, [pc, #4]	; (800ef04 <__sinit_lock_release+0x8>)
 800eefe:	f000 b8a2 	b.w	800f046 <__retarget_lock_release_recursive>
 800ef02:	bf00      	nop
 800ef04:	20000f9e 	.word	0x20000f9e

0800ef08 <__sinit>:
 800ef08:	b510      	push	{r4, lr}
 800ef0a:	4604      	mov	r4, r0
 800ef0c:	f7ff fff0 	bl	800eef0 <__sinit_lock_acquire>
 800ef10:	69a3      	ldr	r3, [r4, #24]
 800ef12:	b11b      	cbz	r3, 800ef1c <__sinit+0x14>
 800ef14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef18:	f7ff bff0 	b.w	800eefc <__sinit_lock_release>
 800ef1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ef20:	6523      	str	r3, [r4, #80]	; 0x50
 800ef22:	4b13      	ldr	r3, [pc, #76]	; (800ef70 <__sinit+0x68>)
 800ef24:	4a13      	ldr	r2, [pc, #76]	; (800ef74 <__sinit+0x6c>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	62a2      	str	r2, [r4, #40]	; 0x28
 800ef2a:	42a3      	cmp	r3, r4
 800ef2c:	bf04      	itt	eq
 800ef2e:	2301      	moveq	r3, #1
 800ef30:	61a3      	streq	r3, [r4, #24]
 800ef32:	4620      	mov	r0, r4
 800ef34:	f000 f820 	bl	800ef78 <__sfp>
 800ef38:	6060      	str	r0, [r4, #4]
 800ef3a:	4620      	mov	r0, r4
 800ef3c:	f000 f81c 	bl	800ef78 <__sfp>
 800ef40:	60a0      	str	r0, [r4, #8]
 800ef42:	4620      	mov	r0, r4
 800ef44:	f000 f818 	bl	800ef78 <__sfp>
 800ef48:	2200      	movs	r2, #0
 800ef4a:	60e0      	str	r0, [r4, #12]
 800ef4c:	2104      	movs	r1, #4
 800ef4e:	6860      	ldr	r0, [r4, #4]
 800ef50:	f7ff ff82 	bl	800ee58 <std>
 800ef54:	68a0      	ldr	r0, [r4, #8]
 800ef56:	2201      	movs	r2, #1
 800ef58:	2109      	movs	r1, #9
 800ef5a:	f7ff ff7d 	bl	800ee58 <std>
 800ef5e:	68e0      	ldr	r0, [r4, #12]
 800ef60:	2202      	movs	r2, #2
 800ef62:	2112      	movs	r1, #18
 800ef64:	f7ff ff78 	bl	800ee58 <std>
 800ef68:	2301      	movs	r3, #1
 800ef6a:	61a3      	str	r3, [r4, #24]
 800ef6c:	e7d2      	b.n	800ef14 <__sinit+0xc>
 800ef6e:	bf00      	nop
 800ef70:	0800f65c 	.word	0x0800f65c
 800ef74:	0800eea1 	.word	0x0800eea1

0800ef78 <__sfp>:
 800ef78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef7a:	4607      	mov	r7, r0
 800ef7c:	f7ff ffac 	bl	800eed8 <__sfp_lock_acquire>
 800ef80:	4b1e      	ldr	r3, [pc, #120]	; (800effc <__sfp+0x84>)
 800ef82:	681e      	ldr	r6, [r3, #0]
 800ef84:	69b3      	ldr	r3, [r6, #24]
 800ef86:	b913      	cbnz	r3, 800ef8e <__sfp+0x16>
 800ef88:	4630      	mov	r0, r6
 800ef8a:	f7ff ffbd 	bl	800ef08 <__sinit>
 800ef8e:	3648      	adds	r6, #72	; 0x48
 800ef90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ef94:	3b01      	subs	r3, #1
 800ef96:	d503      	bpl.n	800efa0 <__sfp+0x28>
 800ef98:	6833      	ldr	r3, [r6, #0]
 800ef9a:	b30b      	cbz	r3, 800efe0 <__sfp+0x68>
 800ef9c:	6836      	ldr	r6, [r6, #0]
 800ef9e:	e7f7      	b.n	800ef90 <__sfp+0x18>
 800efa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800efa4:	b9d5      	cbnz	r5, 800efdc <__sfp+0x64>
 800efa6:	4b16      	ldr	r3, [pc, #88]	; (800f000 <__sfp+0x88>)
 800efa8:	60e3      	str	r3, [r4, #12]
 800efaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800efae:	6665      	str	r5, [r4, #100]	; 0x64
 800efb0:	f000 f847 	bl	800f042 <__retarget_lock_init_recursive>
 800efb4:	f7ff ff96 	bl	800eee4 <__sfp_lock_release>
 800efb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800efbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800efc0:	6025      	str	r5, [r4, #0]
 800efc2:	61a5      	str	r5, [r4, #24]
 800efc4:	2208      	movs	r2, #8
 800efc6:	4629      	mov	r1, r5
 800efc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800efcc:	f7fb fce4 	bl	800a998 <memset>
 800efd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800efd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800efd8:	4620      	mov	r0, r4
 800efda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efdc:	3468      	adds	r4, #104	; 0x68
 800efde:	e7d9      	b.n	800ef94 <__sfp+0x1c>
 800efe0:	2104      	movs	r1, #4
 800efe2:	4638      	mov	r0, r7
 800efe4:	f7ff ff62 	bl	800eeac <__sfmoreglue>
 800efe8:	4604      	mov	r4, r0
 800efea:	6030      	str	r0, [r6, #0]
 800efec:	2800      	cmp	r0, #0
 800efee:	d1d5      	bne.n	800ef9c <__sfp+0x24>
 800eff0:	f7ff ff78 	bl	800eee4 <__sfp_lock_release>
 800eff4:	230c      	movs	r3, #12
 800eff6:	603b      	str	r3, [r7, #0]
 800eff8:	e7ee      	b.n	800efd8 <__sfp+0x60>
 800effa:	bf00      	nop
 800effc:	0800f65c 	.word	0x0800f65c
 800f000:	ffff0001 	.word	0xffff0001

0800f004 <_fwalk_reent>:
 800f004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f008:	4606      	mov	r6, r0
 800f00a:	4688      	mov	r8, r1
 800f00c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f010:	2700      	movs	r7, #0
 800f012:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f016:	f1b9 0901 	subs.w	r9, r9, #1
 800f01a:	d505      	bpl.n	800f028 <_fwalk_reent+0x24>
 800f01c:	6824      	ldr	r4, [r4, #0]
 800f01e:	2c00      	cmp	r4, #0
 800f020:	d1f7      	bne.n	800f012 <_fwalk_reent+0xe>
 800f022:	4638      	mov	r0, r7
 800f024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f028:	89ab      	ldrh	r3, [r5, #12]
 800f02a:	2b01      	cmp	r3, #1
 800f02c:	d907      	bls.n	800f03e <_fwalk_reent+0x3a>
 800f02e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f032:	3301      	adds	r3, #1
 800f034:	d003      	beq.n	800f03e <_fwalk_reent+0x3a>
 800f036:	4629      	mov	r1, r5
 800f038:	4630      	mov	r0, r6
 800f03a:	47c0      	blx	r8
 800f03c:	4307      	orrs	r7, r0
 800f03e:	3568      	adds	r5, #104	; 0x68
 800f040:	e7e9      	b.n	800f016 <_fwalk_reent+0x12>

0800f042 <__retarget_lock_init_recursive>:
 800f042:	4770      	bx	lr

0800f044 <__retarget_lock_acquire_recursive>:
 800f044:	4770      	bx	lr

0800f046 <__retarget_lock_release_recursive>:
 800f046:	4770      	bx	lr

0800f048 <__swhatbuf_r>:
 800f048:	b570      	push	{r4, r5, r6, lr}
 800f04a:	460e      	mov	r6, r1
 800f04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f050:	2900      	cmp	r1, #0
 800f052:	b096      	sub	sp, #88	; 0x58
 800f054:	4614      	mov	r4, r2
 800f056:	461d      	mov	r5, r3
 800f058:	da08      	bge.n	800f06c <__swhatbuf_r+0x24>
 800f05a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f05e:	2200      	movs	r2, #0
 800f060:	602a      	str	r2, [r5, #0]
 800f062:	061a      	lsls	r2, r3, #24
 800f064:	d410      	bmi.n	800f088 <__swhatbuf_r+0x40>
 800f066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f06a:	e00e      	b.n	800f08a <__swhatbuf_r+0x42>
 800f06c:	466a      	mov	r2, sp
 800f06e:	f000 f8b7 	bl	800f1e0 <_fstat_r>
 800f072:	2800      	cmp	r0, #0
 800f074:	dbf1      	blt.n	800f05a <__swhatbuf_r+0x12>
 800f076:	9a01      	ldr	r2, [sp, #4]
 800f078:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f07c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f080:	425a      	negs	r2, r3
 800f082:	415a      	adcs	r2, r3
 800f084:	602a      	str	r2, [r5, #0]
 800f086:	e7ee      	b.n	800f066 <__swhatbuf_r+0x1e>
 800f088:	2340      	movs	r3, #64	; 0x40
 800f08a:	2000      	movs	r0, #0
 800f08c:	6023      	str	r3, [r4, #0]
 800f08e:	b016      	add	sp, #88	; 0x58
 800f090:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f094 <__smakebuf_r>:
 800f094:	898b      	ldrh	r3, [r1, #12]
 800f096:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f098:	079d      	lsls	r5, r3, #30
 800f09a:	4606      	mov	r6, r0
 800f09c:	460c      	mov	r4, r1
 800f09e:	d507      	bpl.n	800f0b0 <__smakebuf_r+0x1c>
 800f0a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f0a4:	6023      	str	r3, [r4, #0]
 800f0a6:	6123      	str	r3, [r4, #16]
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	6163      	str	r3, [r4, #20]
 800f0ac:	b002      	add	sp, #8
 800f0ae:	bd70      	pop	{r4, r5, r6, pc}
 800f0b0:	ab01      	add	r3, sp, #4
 800f0b2:	466a      	mov	r2, sp
 800f0b4:	f7ff ffc8 	bl	800f048 <__swhatbuf_r>
 800f0b8:	9900      	ldr	r1, [sp, #0]
 800f0ba:	4605      	mov	r5, r0
 800f0bc:	4630      	mov	r0, r6
 800f0be:	f7ff f957 	bl	800e370 <_malloc_r>
 800f0c2:	b948      	cbnz	r0, 800f0d8 <__smakebuf_r+0x44>
 800f0c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0c8:	059a      	lsls	r2, r3, #22
 800f0ca:	d4ef      	bmi.n	800f0ac <__smakebuf_r+0x18>
 800f0cc:	f023 0303 	bic.w	r3, r3, #3
 800f0d0:	f043 0302 	orr.w	r3, r3, #2
 800f0d4:	81a3      	strh	r3, [r4, #12]
 800f0d6:	e7e3      	b.n	800f0a0 <__smakebuf_r+0xc>
 800f0d8:	4b0d      	ldr	r3, [pc, #52]	; (800f110 <__smakebuf_r+0x7c>)
 800f0da:	62b3      	str	r3, [r6, #40]	; 0x28
 800f0dc:	89a3      	ldrh	r3, [r4, #12]
 800f0de:	6020      	str	r0, [r4, #0]
 800f0e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0e4:	81a3      	strh	r3, [r4, #12]
 800f0e6:	9b00      	ldr	r3, [sp, #0]
 800f0e8:	6163      	str	r3, [r4, #20]
 800f0ea:	9b01      	ldr	r3, [sp, #4]
 800f0ec:	6120      	str	r0, [r4, #16]
 800f0ee:	b15b      	cbz	r3, 800f108 <__smakebuf_r+0x74>
 800f0f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0f4:	4630      	mov	r0, r6
 800f0f6:	f000 f885 	bl	800f204 <_isatty_r>
 800f0fa:	b128      	cbz	r0, 800f108 <__smakebuf_r+0x74>
 800f0fc:	89a3      	ldrh	r3, [r4, #12]
 800f0fe:	f023 0303 	bic.w	r3, r3, #3
 800f102:	f043 0301 	orr.w	r3, r3, #1
 800f106:	81a3      	strh	r3, [r4, #12]
 800f108:	89a0      	ldrh	r0, [r4, #12]
 800f10a:	4305      	orrs	r5, r0
 800f10c:	81a5      	strh	r5, [r4, #12]
 800f10e:	e7cd      	b.n	800f0ac <__smakebuf_r+0x18>
 800f110:	0800eea1 	.word	0x0800eea1

0800f114 <__sread>:
 800f114:	b510      	push	{r4, lr}
 800f116:	460c      	mov	r4, r1
 800f118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f11c:	f000 f894 	bl	800f248 <_read_r>
 800f120:	2800      	cmp	r0, #0
 800f122:	bfab      	itete	ge
 800f124:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f126:	89a3      	ldrhlt	r3, [r4, #12]
 800f128:	181b      	addge	r3, r3, r0
 800f12a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f12e:	bfac      	ite	ge
 800f130:	6563      	strge	r3, [r4, #84]	; 0x54
 800f132:	81a3      	strhlt	r3, [r4, #12]
 800f134:	bd10      	pop	{r4, pc}

0800f136 <__swrite>:
 800f136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f13a:	461f      	mov	r7, r3
 800f13c:	898b      	ldrh	r3, [r1, #12]
 800f13e:	05db      	lsls	r3, r3, #23
 800f140:	4605      	mov	r5, r0
 800f142:	460c      	mov	r4, r1
 800f144:	4616      	mov	r6, r2
 800f146:	d505      	bpl.n	800f154 <__swrite+0x1e>
 800f148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f14c:	2302      	movs	r3, #2
 800f14e:	2200      	movs	r2, #0
 800f150:	f000 f868 	bl	800f224 <_lseek_r>
 800f154:	89a3      	ldrh	r3, [r4, #12]
 800f156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f15a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f15e:	81a3      	strh	r3, [r4, #12]
 800f160:	4632      	mov	r2, r6
 800f162:	463b      	mov	r3, r7
 800f164:	4628      	mov	r0, r5
 800f166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f16a:	f000 b817 	b.w	800f19c <_write_r>

0800f16e <__sseek>:
 800f16e:	b510      	push	{r4, lr}
 800f170:	460c      	mov	r4, r1
 800f172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f176:	f000 f855 	bl	800f224 <_lseek_r>
 800f17a:	1c43      	adds	r3, r0, #1
 800f17c:	89a3      	ldrh	r3, [r4, #12]
 800f17e:	bf15      	itete	ne
 800f180:	6560      	strne	r0, [r4, #84]	; 0x54
 800f182:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f186:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f18a:	81a3      	strheq	r3, [r4, #12]
 800f18c:	bf18      	it	ne
 800f18e:	81a3      	strhne	r3, [r4, #12]
 800f190:	bd10      	pop	{r4, pc}

0800f192 <__sclose>:
 800f192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f196:	f000 b813 	b.w	800f1c0 <_close_r>
	...

0800f19c <_write_r>:
 800f19c:	b538      	push	{r3, r4, r5, lr}
 800f19e:	4d07      	ldr	r5, [pc, #28]	; (800f1bc <_write_r+0x20>)
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	4608      	mov	r0, r1
 800f1a4:	4611      	mov	r1, r2
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	602a      	str	r2, [r5, #0]
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	f7f6 fa79 	bl	80056a2 <_write>
 800f1b0:	1c43      	adds	r3, r0, #1
 800f1b2:	d102      	bne.n	800f1ba <_write_r+0x1e>
 800f1b4:	682b      	ldr	r3, [r5, #0]
 800f1b6:	b103      	cbz	r3, 800f1ba <_write_r+0x1e>
 800f1b8:	6023      	str	r3, [r4, #0]
 800f1ba:	bd38      	pop	{r3, r4, r5, pc}
 800f1bc:	20000f98 	.word	0x20000f98

0800f1c0 <_close_r>:
 800f1c0:	b538      	push	{r3, r4, r5, lr}
 800f1c2:	4d06      	ldr	r5, [pc, #24]	; (800f1dc <_close_r+0x1c>)
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	4604      	mov	r4, r0
 800f1c8:	4608      	mov	r0, r1
 800f1ca:	602b      	str	r3, [r5, #0]
 800f1cc:	f7f6 fa85 	bl	80056da <_close>
 800f1d0:	1c43      	adds	r3, r0, #1
 800f1d2:	d102      	bne.n	800f1da <_close_r+0x1a>
 800f1d4:	682b      	ldr	r3, [r5, #0]
 800f1d6:	b103      	cbz	r3, 800f1da <_close_r+0x1a>
 800f1d8:	6023      	str	r3, [r4, #0]
 800f1da:	bd38      	pop	{r3, r4, r5, pc}
 800f1dc:	20000f98 	.word	0x20000f98

0800f1e0 <_fstat_r>:
 800f1e0:	b538      	push	{r3, r4, r5, lr}
 800f1e2:	4d07      	ldr	r5, [pc, #28]	; (800f200 <_fstat_r+0x20>)
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	4608      	mov	r0, r1
 800f1ea:	4611      	mov	r1, r2
 800f1ec:	602b      	str	r3, [r5, #0]
 800f1ee:	f7f6 fa80 	bl	80056f2 <_fstat>
 800f1f2:	1c43      	adds	r3, r0, #1
 800f1f4:	d102      	bne.n	800f1fc <_fstat_r+0x1c>
 800f1f6:	682b      	ldr	r3, [r5, #0]
 800f1f8:	b103      	cbz	r3, 800f1fc <_fstat_r+0x1c>
 800f1fa:	6023      	str	r3, [r4, #0]
 800f1fc:	bd38      	pop	{r3, r4, r5, pc}
 800f1fe:	bf00      	nop
 800f200:	20000f98 	.word	0x20000f98

0800f204 <_isatty_r>:
 800f204:	b538      	push	{r3, r4, r5, lr}
 800f206:	4d06      	ldr	r5, [pc, #24]	; (800f220 <_isatty_r+0x1c>)
 800f208:	2300      	movs	r3, #0
 800f20a:	4604      	mov	r4, r0
 800f20c:	4608      	mov	r0, r1
 800f20e:	602b      	str	r3, [r5, #0]
 800f210:	f7f6 fa7f 	bl	8005712 <_isatty>
 800f214:	1c43      	adds	r3, r0, #1
 800f216:	d102      	bne.n	800f21e <_isatty_r+0x1a>
 800f218:	682b      	ldr	r3, [r5, #0]
 800f21a:	b103      	cbz	r3, 800f21e <_isatty_r+0x1a>
 800f21c:	6023      	str	r3, [r4, #0]
 800f21e:	bd38      	pop	{r3, r4, r5, pc}
 800f220:	20000f98 	.word	0x20000f98

0800f224 <_lseek_r>:
 800f224:	b538      	push	{r3, r4, r5, lr}
 800f226:	4d07      	ldr	r5, [pc, #28]	; (800f244 <_lseek_r+0x20>)
 800f228:	4604      	mov	r4, r0
 800f22a:	4608      	mov	r0, r1
 800f22c:	4611      	mov	r1, r2
 800f22e:	2200      	movs	r2, #0
 800f230:	602a      	str	r2, [r5, #0]
 800f232:	461a      	mov	r2, r3
 800f234:	f7f6 fa78 	bl	8005728 <_lseek>
 800f238:	1c43      	adds	r3, r0, #1
 800f23a:	d102      	bne.n	800f242 <_lseek_r+0x1e>
 800f23c:	682b      	ldr	r3, [r5, #0]
 800f23e:	b103      	cbz	r3, 800f242 <_lseek_r+0x1e>
 800f240:	6023      	str	r3, [r4, #0]
 800f242:	bd38      	pop	{r3, r4, r5, pc}
 800f244:	20000f98 	.word	0x20000f98

0800f248 <_read_r>:
 800f248:	b538      	push	{r3, r4, r5, lr}
 800f24a:	4d07      	ldr	r5, [pc, #28]	; (800f268 <_read_r+0x20>)
 800f24c:	4604      	mov	r4, r0
 800f24e:	4608      	mov	r0, r1
 800f250:	4611      	mov	r1, r2
 800f252:	2200      	movs	r2, #0
 800f254:	602a      	str	r2, [r5, #0]
 800f256:	461a      	mov	r2, r3
 800f258:	f7f6 fa06 	bl	8005668 <_read>
 800f25c:	1c43      	adds	r3, r0, #1
 800f25e:	d102      	bne.n	800f266 <_read_r+0x1e>
 800f260:	682b      	ldr	r3, [r5, #0]
 800f262:	b103      	cbz	r3, 800f266 <_read_r+0x1e>
 800f264:	6023      	str	r3, [r4, #0]
 800f266:	bd38      	pop	{r3, r4, r5, pc}
 800f268:	20000f98 	.word	0x20000f98

0800f26c <_init>:
 800f26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f26e:	bf00      	nop
 800f270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f272:	bc08      	pop	{r3}
 800f274:	469e      	mov	lr, r3
 800f276:	4770      	bx	lr

0800f278 <_fini>:
 800f278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f27a:	bf00      	nop
 800f27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f27e:	bc08      	pop	{r3}
 800f280:	469e      	mov	lr, r3
 800f282:	4770      	bx	lr
